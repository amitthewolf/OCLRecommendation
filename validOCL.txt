2 ,Expression: self.forms -> forAll(f | f.mainForm=true)
3 ,Expression: not localScopedReference and not globalScopedReference
4 ,Expression: tablas->isUnique(nombre)
5 ,Expression: columnas->isUnique(nombre)
6 ,Expression: nombre.toUpperCase() = nombre
9 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
17 ,Expression: name <> null
58 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
65 ,Expression: name <> null
107 ,Expression: Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)
108 ,Expression: self.age <= self.employer.boss.age
111 ,Expression: self.age + 10 <= self.employer.boss.age
113 ,Expression: not (self.boss.oclIsTypeOf(Freelance))
118 ,Expression: self.calcExpenses() <= self.budget
124 ,Expression: self.assignment >= 5 and self.assignment <= 30
125 ,Expression: self.assignment >= 5 and self.assignment <= 40
126 ,Expression: self.age < 40
128 ,Expression: self.employeesOfTheMonth->size() <= self.department->size()
129 ,Expression: self.numberEmployeesOfTheMonth <= self.department->size()
132 ,Expression: self.age < 40
133 ,Expression: self.eotmDelta <= 5
141 ,Expression: true
142 ,Expression: library.loans->select((book = self))->size() <= copies
145 ,Expression: loans->size() <= 2
146 ,Expression: loans->isUnique(book)
151 ,Expression: isUnmarshall = true
152 ,Expression: not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
153 ,Expression: input->size() = 0
154 ,Expression: (self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
162 ,Expression: fromAction.input->forAll(oclIsKindOf(ActionInputPin))
163 ,Expression: fromAction.output->size() = 1
165 ,Expression: ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
169 ,Expression: containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
174 ,Expression: (incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
175 ,Expression: activity.ownedParameter->includes(parameter)
176 ,Expression: type = parameter.type
178 ,Expression: incoming->isEmpty() or outgoing->isEmpty()
179 ,Expression: (not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
180 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
181 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
182 ,Expression: isDimension implies superPartition->isEmpty()
183 ,Expression: Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
184 ,Expression: name->notEmpty()
185 ,Expression: value<>null
187 ,Expression: value <> null
189 ,Expression: parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
190 ,Expression: Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
192 ,Expression: memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
193 ,Expression: memberEnd->forAll(type->notEmpty())
195 ,Expression: self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
198 ,Expression: specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
204 ,Expression: isAbstract implies method->isEmpty()
207 ,Expression: classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
208 ,Expression: argument->size() = signal.allAttributes()->size()
210 ,Expression: onPort=null
213 ,Expression: result->notEmpty() implies isSynchronous
216 ,Expression: onPort=null
219 ,Expression: if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
220 ,Expression: not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
225 ,Expression: parents()->forAll(c | self.maySpecializeType(c))
226 ,Expression: powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
227 ,Expression: parents()->forAll(not isFinalSpecialization)
228 ,Expression: not allParents()->includes(self)
245 ,Expression: allowSubstitutable implies constrainingClassifier->notEmpty()
254 ,Expression: object.is(1,1)
255 ,Expression: association.memberEnd->exists(self.object.type.conformsTo(type))
256 ,Expression: result<>null implies result.type = object.type
257 ,Expression: result<>null implies result.is(1,1)
259 ,Expression: type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
261 ,Expression: interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
262 ,Expression: ((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
264 ,Expression: endType->forAll (oclIsKindOf(DeploymentTarget))
265 ,Expression: nestedClassifier->isEmpty()
270 ,Expression: result.incoming->isEmpty()
271 ,Expression: input->isEmpty()
275 ,Expression: clause->closure(predecessorClause)->intersection(clause)->isEmpty()
277 ,Expression: exit->forAll(kind = PseudostateKind::exitPoint)
279 ,Expression: type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
282 ,Expression: partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
284 ,Expression: self.compatibleWith(definingEnd)
285 ,Expression: partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
287 ,Expression: (interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
288 ,Expression: message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
289 ,Expression: not constrainedElement->includes(self)
290 ,Expression:  enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
292 ,Expression: enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
293 ,Expression: (source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
294 ,Expression: not self.association().isAbstract
295 ,Expression: result.is(1,1)
296 ,Expression: result.type = association()
297 ,Expression: self.association().oclIsKindOf(AssociationClass)
298 ,Expression: not classifier.isAbstract 
299 ,Expression: result.is(1,1)
300 ,Expression: not classifier.oclIsKindOf(AssociationClass)
301 ,Expression: result.type = classifier
302 ,Expression: (decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
304 ,Expression: incoming->includes(decisionInputFlow)
306 ,Expression: (incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
310 ,Expression: deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
311 ,Expression: deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
313 ,Expression: target.is(1,1)
314 ,Expression: target.type= null
316 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
317 ,Expression: if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
318 ,Expression: constrainedElement->size() = 1 or constrainedElement->size()=2
319 ,Expression: if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
320 ,Expression: mustBeOwned() implies owner->notEmpty()
321 ,Expression: not allOwnedElements()->includes(self)
324 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
325 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
328 ,Expression: ownedAttribute->forAll(isReadOnly)
330 ,Expression: handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
331 ,Expression: (protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
334 ,Expression: handlerBody.owner=protectedNode.owner
335 ,Expression: exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
336 ,Expression: start.covered = finish.covered
337 ,Expression: regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
338 ,Expression: extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
339 ,Expression: metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
340 ,Expression: memberEnd->size() = 2
345 ,Expression: (lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
346 ,Expression: self.aggregation = AggregationKind::composite
347 ,Expression: name->notEmpty ()
348 ,Expression: outgoing->isEmpty()
349 ,Expression: exit->isEmpty()
350 ,Expression: outgoing->size() = 0
351 ,Expression: region->size() = 0
352 ,Expression: submachine->isEmpty()
353 ,Expression: entry->isEmpty()
354 ,Expression: doActivity->isEmpty()
356 ,Expression: incoming->size()=1
358 ,Expression: ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
375 ,Expression: after->closure(toAfter.after)->excludes(before)
376 ,Expression: generalization->collect(general)->asSet()->size() <= 1
377 ,Expression: powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
378 ,Expression: (self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
379 ,Expression: self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
381 ,Expression: self.generalization->isEmpty() and self.feature->isEmpty()
382 ,Expression: isAbstract
383 ,Expression: incoming->isEmpty()
384 ,Expression: outgoing->forAll(oclIsKindOf(ControlFlow))
387 ,Expression: classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
388 ,Expression: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
389 ,Expression: deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
390 ,Expression: enclosingInteraction->isEmpty()
392 ,Expression: minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
393 ,Expression: maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
394 ,Expression: maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
397 ,Expression: returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
401 ,Expression: outgoing->size() = 1
402 ,Expression: if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
403 ,Expression:  self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
406 ,Expression: self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
407 ,Expression: inputValue->asBag()=endData.allPins()
408 ,Expression: endData.end = self.association().memberEnd->asBag()
409 ,Expression: endData->forAll(not end.isStatic)
413 ,Expression: value<>null implies value.type.conformsTo(end.type)
414 ,Expression: value<>null implies value.is(1,1)
415 ,Expression: value->excludesAll(qualifier.value)
416 ,Expression: end.association <> null
417 ,Expression: end.qualifier->includesAll(qualifier.qualifier)
435 ,Expression: result.incoming->isEmpty()
436 ,Expression: loopVariableInput.outgoing->isEmpty()
437 ,Expression: setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
438 ,Expression: bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
443 ,Expression: allOwnedNodes()->includesAll(loopVariable.outgoing.target)
444 ,Expression: outgoing->size()=1
449 ,Expression: (messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
450 ,Expression: signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
458 ,Expression: upperBound() >= lowerBound()
459 ,Expression: lowerBound() >= 0
460 ,Expression: lowerValue <> null implies lowerValue.integerValue() <> null
461 ,Expression: upperValue <> null implies upperValue.unlimitedValue() <> null
470 ,Expression: (namespace = null and owner <> null) implies visibility = null
471 ,Expression: (name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
472 ,Expression: name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
479 ,Expression: membersAreDistinguishable()
480 ,Expression: packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
481 ,Expression: elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
487 ,Expression: part->forAll(oclIsKindOf(Node))
489 ,Expression: not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
491 ,Expression: selection<>null implies source.oclIsKindOf(ObjectNode)
492 ,Expression: not (isMulticast and isMultireceive)
494 ,Expression: (selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
495 ,Expression: (not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
507 ,Expression: bodyCondition <> null implies isQuery
525 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
526 ,Expression: visibility = null implies namespace = null
531 ,Expression: not (isException and isStream)
532 ,Expression: (type.oclIsKindOf(DataType)) implies (effect = null)
534 ,Expression: parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
536 ,Expression: parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
539 ,Expression: isControl implies isControlType
541 ,Expression: aggregation = AggregationKind::composite
542 ,Expression: type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
548 ,Expression: metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
549 ,Expression: metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
552 ,Expression: subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
553 ,Expression: isDerivedUnion implies isReadOnly
554 ,Expression: isComposite and association <> null implies opposite.upperBound() <= 1
555 ,Expression: (redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
556 ,Expression: subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
558 ,Expression: isDerivedUnion implies isDerived
559 ,Expression: deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
560 ,Expression: subsettedProperty->forAll(sp | sp.name <> name)
562 ,Expression: qualifier->notEmpty() implies association->notEmpty()
569 ,Expression: region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
570 ,Expression: region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
571 ,Expression: region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
573 ,Expression: effect = null
574 ,Expression: container.belongsToPSM()
577 ,Expression: (kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
578 ,Expression: (kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
579 ,Expression: (kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
580 ,Expression: (kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
581 ,Expression: ((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
582 ,Expression: (kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
583 ,Expression: (kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
585 ,Expression: value.is(1,1)
586 ,Expression: value.type.conformsTo(qualifier.type)
588 ,Expression: result.type = classifier
590 ,Expression: object.type = null
591 ,Expression: result.is(1,1)
592 ,Expression: result.type = Boolean
593 ,Expression: object.is(1,1)
594 ,Expression: self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
595 ,Expression: self.openEnd()->first().compatibleWith(result)
597 ,Expression: self.openEnd()->size() = 1
598 ,Expression: self.openEnd()->first().isNavigable()
600 ,Expression: end.association <> null
601 ,Expression: object.is(1,1)
602 ,Expression: end.association.memberEnd->forAll(e | not e.isStatic)
603 ,Expression: result.type = end.type
604 ,Expression: result.is(1,1)
605 ,Expression: object.type = end.association
606 ,Expression: end.association.oclIsKindOf(AssociationClass)
607 ,Expression: object.is(1,1)
608 ,Expression: object.type = qualifier.associationEnd.association
609 ,Expression: qualifier.is(1,1)
610 ,Expression: qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
611 ,Expression: result.is(1,1)
612 ,Expression: result.type = qualifier.type
613 ,Expression: qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
614 ,Expression: qualifier.associationEnd <> null
616 ,Expression: result.is(1,1)
619 ,Expression: structuralFeature.compatibleWith(result)
620 ,Expression: result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
621 ,Expression: result.type =variable.type and result.isOrdered = variable.isOrdered
622 ,Expression: variable.compatibleWith(result)
623 ,Expression: name = signal.name
625 ,Expression: object.type = null
626 ,Expression: not newClassifier->exists(isAbstract)
627 ,Expression: object.is(1,1)
628 ,Expression: redefinedElement->forAll(re | re.isConsistentWith(self))
629 ,Expression: redefinedElement->forAll(re | not re.isLeaf)
630 ,Expression: redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
637 ,Expression: reducer.outputParameters().type->forAll(conformsTo(result.type))
642 ,Expression: (stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
650 ,Expression: replyToCall.event.oclIsKindOf(CallEvent)
651 ,Expression: onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
653 ,Expression: argument->size()=signal.allAttributes()->size()
654 ,Expression: not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
655 ,Expression: object.is(1,1)
656 ,Expression: object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
659 ,Expression: object.is(1,1)
660 ,Expression: self.behavior()<>null
661 ,Expression: onPort->isEmpty()
667 ,Expression: isSubmachineState implies connection->notEmpty( )
668 ,Expression: connectionPoint->notEmpty() implies isComposite
669 ,Expression: self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
670 ,Expression: isComposite implies not isSubmachineState
680 ,Expression: specification <> null implies connectionPoint->isEmpty()
685 ,Expression: ownedAttribute.association->forAll(memberEnd->size()=2)
686 ,Expression: allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
687 ,Expression: ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
691 ,Expression: operand->forAll (oclIsKindOf (LiteralString))
692 ,Expression: if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
693 ,Expression: object.is(1,1)
696 ,Expression: not structuralFeature.isStatic
697 ,Expression: structuralFeature.featuringClassifier->size() = 1
702 ,Expression: edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
708 ,Expression: parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
709 ,Expression: signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
710 ,Expression: default <> null implies default.isCompatibleWith(parameteredElement)
711 ,Expression: actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
712 ,Expression: template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
713 ,Expression: parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
716 ,Expression: first.is(1,1) and second.is(1,1)
717 ,Expression: first.type= null and second.type = null
718 ,Expression: result.type=Boolean
719 ,Expression: constrainedElement->size() = 1
720 ,Expression: when.integerValue() >= 0
721 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
725 ,Expression: (kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
734 ,Expression: port->notEmpty() implies event.oclIsKindOf(MessageEvent)
736 ,Expression: unmarshallType.allAttributes()->size() >= 1
737 ,Expression: unmarshallType.allAttributes()->size() = result->size()
739 ,Expression: object.is(1,1)
740 ,Expression: object.type.conformsTo(unmarshallType)
741 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
742 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
743 ,Expression: not allIncludedUseCases()->includes(self)
744 ,Expression: name -> notEmpty ()
746 ,Expression: incoming->isEmpty()
747 ,Expression: value.type.conformsTo(type)
756 ,Expression: result.is(1,1)
757 ,Expression: value.type.conformsTo(result.type)
759 ,Expression: variable.isAccessibleBy(self)
766 ,Expression: result <> null implies result.is(1,1)
767 ,Expression: value <> null implies value.type.conformsTo(structuralFeature.type)
768 ,Expression: value<>null implies value.is(1,1)
769 ,Expression: result <> null implies result.type = object.type
770 ,Expression: value <> null implies value.type.conformsTo(variable.type)
771 ,Expression: value<>null implies value.is(1,1)
774 ,Expression: Tuple {message : String = 'Employee must have a name',status : Boolean = not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()}.status
775 ,Expression: name->notEmpty() implies name.size() > 0
782 ,Expression: name <> null
789 ,Expression: Tuple {message : String = 'Employee must have a name',status : Boolean = not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()}.status
790 ,Expression: name->notEmpty() implies name.size() > 0
797 ,Expression: name <> null
801 ,Expression: loans->size() <= 2
808 ,Expression: loans->size() <= 2
812 ,Expression: library.loans->select((book = self))->size() <= copies
814 ,Expression: library.loans->select((book = self))->size() <= copies
816 ,Expression: true
817 ,Expression: true
825 ,Expression: true
826 ,Expression: true
829 ,Expression: true
850 ,Expression: not name.oclIsUndefined()
858 ,Expression: not name.oclIsUndefined()
864 ,Expression: not name.oclIsUndefined()
868 ,Expression: true
870 ,Expression: true
874 ,Expression: true
876 ,Expression: true
878 ,Expression: states->exists(s | s.initial)
879 ,Expression: let firstLetter : String = invalid.substring(1, 1) in firstLetter.toUpperCase() = firstLetter
975 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
983 ,Expression: name <> null
1024 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
1031 ,Expression: name <> null
1073 ,Expression: Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)
1074 ,Expression: self.age <= self.employer.boss.age
1077 ,Expression: self.age + 10 <= self.employer.boss.age
1079 ,Expression: not (self.boss.oclIsTypeOf(Freelance))
1084 ,Expression: self.calcExpenses() <= self.budget
1090 ,Expression: self.assignment >= 5 and self.assignment <= 30
1091 ,Expression: self.assignment >= 5 and self.assignment <= 40
1092 ,Expression: self.age < 40
1094 ,Expression: self.employeesOfTheMonth->size() <= self.department->size()
1095 ,Expression: self.numberEmployeesOfTheMonth <= self.department->size()
1098 ,Expression: self.age < 40
1099 ,Expression: self.eotmDelta <= 5
1107 ,Expression: true
1108 ,Expression: library.loans->select((book = self))->size() <= copies
1111 ,Expression: loans->size() <= 2
1112 ,Expression: loans->isUnique(book)
1117 ,Expression: isUnmarshall = true
1118 ,Expression: not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
1119 ,Expression: input->size() = 0
1120 ,Expression: (self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
1128 ,Expression: fromAction.input->forAll(oclIsKindOf(ActionInputPin))
1129 ,Expression: fromAction.output->size() = 1
1135 ,Expression: containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
1140 ,Expression: (incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
1141 ,Expression: activity.ownedParameter->includes(parameter)
1142 ,Expression: type = parameter.type
1144 ,Expression: incoming->isEmpty() or outgoing->isEmpty()
1145 ,Expression: (not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
1146 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
1147 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
1148 ,Expression: isDimension implies superPartition->isEmpty()
1149 ,Expression: Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
1150 ,Expression: name->notEmpty()
1151 ,Expression: value<>null
1153 ,Expression: value <> null
1155 ,Expression: parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
1156 ,Expression: Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
1158 ,Expression: memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
1159 ,Expression: memberEnd->forAll(type->notEmpty())
1161 ,Expression: self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
1164 ,Expression: specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
1170 ,Expression: isAbstract implies method->isEmpty()
1173 ,Expression: classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
1174 ,Expression: argument->size() = signal.allAttributes()->size()
1176 ,Expression: onPort=null
1179 ,Expression: result->notEmpty() implies isSynchronous
1182 ,Expression: onPort=null
1185 ,Expression: if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
1186 ,Expression: not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
1191 ,Expression: parents()->forAll(c | self.maySpecializeType(c))
1192 ,Expression: powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
1193 ,Expression: parents()->forAll(not isFinalSpecialization)
1194 ,Expression: not allParents()->includes(self)
1211 ,Expression: allowSubstitutable implies constrainingClassifier->notEmpty()
1220 ,Expression: object.is(1,1)
1221 ,Expression: association.memberEnd->exists(self.object.type.conformsTo(type))
1222 ,Expression: result<>null implies result.type = object.type
1223 ,Expression: result<>null implies result.is(1,1)
1225 ,Expression: type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
1227 ,Expression: interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
1228 ,Expression: ((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
1230 ,Expression: endType->forAll (oclIsKindOf(DeploymentTarget))
1231 ,Expression: nestedClassifier->isEmpty()
1236 ,Expression: result.incoming->isEmpty()
1237 ,Expression: input->isEmpty()
1241 ,Expression: clause->closure(predecessorClause)->intersection(clause)->isEmpty()
1245 ,Expression: type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
1248 ,Expression: partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
1250 ,Expression: self.compatibleWith(definingEnd)
1251 ,Expression: partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
1253 ,Expression: (interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
1254 ,Expression: message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
1255 ,Expression: not constrainedElement->includes(self)
1256 ,Expression:  enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
1258 ,Expression: enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
1259 ,Expression: (source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
1260 ,Expression: not self.association().isAbstract
1261 ,Expression: result.is(1,1)
1262 ,Expression: result.type = association()
1263 ,Expression: self.association().oclIsKindOf(AssociationClass)
1264 ,Expression: not classifier.isAbstract 
1265 ,Expression: result.is(1,1)
1266 ,Expression: not classifier.oclIsKindOf(AssociationClass)
1267 ,Expression: result.type = classifier
1268 ,Expression: (decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
1270 ,Expression: incoming->includes(decisionInputFlow)
1272 ,Expression: (incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
1276 ,Expression: deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
1277 ,Expression: deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
1279 ,Expression: target.is(1,1)
1280 ,Expression: target.type= null
1282 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
1283 ,Expression: if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
1284 ,Expression: constrainedElement->size() = 1 or constrainedElement->size()=2
1285 ,Expression: if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
1286 ,Expression: mustBeOwned() implies owner->notEmpty()
1287 ,Expression: not allOwnedElements()->includes(self)
1290 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
1291 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
1294 ,Expression: ownedAttribute->forAll(isReadOnly)
1296 ,Expression: handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
1297 ,Expression: (protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
1300 ,Expression: handlerBody.owner=protectedNode.owner
1301 ,Expression: exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
1302 ,Expression: start.covered = finish.covered
1303 ,Expression: regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
1304 ,Expression: extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
1305 ,Expression: metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
1306 ,Expression: memberEnd->size() = 2
1311 ,Expression: (lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
1312 ,Expression: self.aggregation = AggregationKind::composite
1313 ,Expression: name->notEmpty ()
1314 ,Expression: outgoing->isEmpty()
1315 ,Expression: exit->isEmpty()
1316 ,Expression: outgoing->size() = 0
1317 ,Expression: region->size() = 0
1318 ,Expression: submachine->isEmpty()
1319 ,Expression: entry->isEmpty()
1320 ,Expression: doActivity->isEmpty()
1322 ,Expression: incoming->size()=1
1324 ,Expression: ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
1341 ,Expression: after->closure(toAfter.after)->excludes(before)
1342 ,Expression: generalization->collect(general)->asSet()->size() <= 1
1343 ,Expression: powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
1344 ,Expression: (self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
1345 ,Expression: self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
1347 ,Expression: self.generalization->isEmpty() and self.feature->isEmpty()
1348 ,Expression: isAbstract
1349 ,Expression: incoming->isEmpty()
1350 ,Expression: outgoing->forAll(oclIsKindOf(ControlFlow))
1353 ,Expression: classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
1354 ,Expression: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
1355 ,Expression: deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
1356 ,Expression: enclosingInteraction->isEmpty()
1358 ,Expression: minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
1359 ,Expression: maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
1360 ,Expression: maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
1363 ,Expression: returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
1367 ,Expression: outgoing->size() = 1
1368 ,Expression: if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
1369 ,Expression:  self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
1372 ,Expression: self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
1373 ,Expression: inputValue->asBag()=endData.allPins()
1374 ,Expression: endData.end = self.association().memberEnd->asBag()
1375 ,Expression: endData->forAll(not end.isStatic)
1379 ,Expression: value<>null implies value.type.conformsTo(end.type)
1380 ,Expression: value<>null implies value.is(1,1)
1381 ,Expression: value->excludesAll(qualifier.value)
1382 ,Expression: end.association <> null
1383 ,Expression: end.qualifier->includesAll(qualifier.qualifier)
1401 ,Expression: result.incoming->isEmpty()
1402 ,Expression: loopVariableInput.outgoing->isEmpty()
1403 ,Expression: setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
1404 ,Expression: bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
1409 ,Expression: allOwnedNodes()->includesAll(loopVariable.outgoing.target)
1410 ,Expression: outgoing->size()=1
1415 ,Expression: (messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
1416 ,Expression: signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
1424 ,Expression: upperBound() >= lowerBound()
1425 ,Expression: lowerBound() >= 0
1426 ,Expression: lowerValue <> null implies lowerValue.integerValue() <> null
1427 ,Expression: upperValue <> null implies upperValue.unlimitedValue() <> null
1436 ,Expression: (namespace = null and owner <> null) implies visibility = null
1437 ,Expression: (name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
1438 ,Expression: name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
1445 ,Expression: membersAreDistinguishable()
1446 ,Expression: packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
1447 ,Expression: elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
1453 ,Expression: part->forAll(oclIsKindOf(Node))
1455 ,Expression: not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
1457 ,Expression: selection<>null implies source.oclIsKindOf(ObjectNode)
1458 ,Expression: not (isMulticast and isMultireceive)
1460 ,Expression: (selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
1461 ,Expression: (not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
1473 ,Expression: bodyCondition <> null implies isQuery
1491 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
1492 ,Expression: visibility = null implies namespace = null
1497 ,Expression: not (isException and isStream)
1498 ,Expression: (type.oclIsKindOf(DataType)) implies (effect = null)
1500 ,Expression: parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
1502 ,Expression: parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
1505 ,Expression: isControl implies isControlType
1507 ,Expression: aggregation = AggregationKind::composite
1508 ,Expression: type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
1514 ,Expression: metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
1515 ,Expression: metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
1518 ,Expression: subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
1519 ,Expression: isDerivedUnion implies isReadOnly
1520 ,Expression: isComposite and association <> null implies opposite.upperBound() <= 1
1521 ,Expression: (redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
1522 ,Expression: subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
1524 ,Expression: isDerivedUnion implies isDerived
1525 ,Expression: deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
1526 ,Expression: subsettedProperty->forAll(sp | sp.name <> name)
1528 ,Expression: qualifier->notEmpty() implies association->notEmpty()
1536 ,Expression: region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
1537 ,Expression: region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
1539 ,Expression: effect = null
1540 ,Expression: container.belongsToPSM()
1543 ,Expression: (kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
1544 ,Expression: (kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
1545 ,Expression: (kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
1546 ,Expression: (kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
1547 ,Expression: ((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
1548 ,Expression: (kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
1549 ,Expression: (kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
1551 ,Expression: value.is(1,1)
1552 ,Expression: value.type.conformsTo(qualifier.type)
1554 ,Expression: result.type = classifier
1556 ,Expression: object.type = null
1557 ,Expression: result.is(1,1)
1558 ,Expression: result.type = Boolean
1559 ,Expression: object.is(1,1)
1560 ,Expression: self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
1561 ,Expression: self.openEnd()->first().compatibleWith(result)
1563 ,Expression: self.openEnd()->size() = 1
1564 ,Expression: self.openEnd()->first().isNavigable()
1566 ,Expression: end.association <> null
1567 ,Expression: object.is(1,1)
1568 ,Expression: end.association.memberEnd->forAll(e | not e.isStatic)
1569 ,Expression: result.type = end.type
1570 ,Expression: result.is(1,1)
1571 ,Expression: object.type = end.association
1572 ,Expression: end.association.oclIsKindOf(AssociationClass)
1573 ,Expression: object.is(1,1)
1574 ,Expression: object.type = qualifier.associationEnd.association
1575 ,Expression: qualifier.is(1,1)
1576 ,Expression: qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
1577 ,Expression: result.is(1,1)
1578 ,Expression: result.type = qualifier.type
1579 ,Expression: qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
1580 ,Expression: qualifier.associationEnd <> null
1582 ,Expression: result.is(1,1)
1585 ,Expression: structuralFeature.compatibleWith(result)
1586 ,Expression: result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
1587 ,Expression: result.type =variable.type and result.isOrdered = variable.isOrdered
1588 ,Expression: variable.compatibleWith(result)
1589 ,Expression: name = signal.name
1591 ,Expression: object.type = null
1592 ,Expression: not newClassifier->exists(isAbstract)
1593 ,Expression: object.is(1,1)
1594 ,Expression: redefinedElement->forAll(re | re.isConsistentWith(self))
1595 ,Expression: redefinedElement->forAll(re | not re.isLeaf)
1596 ,Expression: redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
1603 ,Expression: reducer.outputParameters().type->forAll(conformsTo(result.type))
1608 ,Expression: (stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
1616 ,Expression: replyToCall.event.oclIsKindOf(CallEvent)
1617 ,Expression: onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
1619 ,Expression: argument->size()=signal.allAttributes()->size()
1620 ,Expression: not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
1621 ,Expression: object.is(1,1)
1622 ,Expression: object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
1625 ,Expression: object.is(1,1)
1626 ,Expression: self.behavior()<>null
1627 ,Expression: onPort->isEmpty()
1633 ,Expression: isSubmachineState implies connection->notEmpty( )
1634 ,Expression: connectionPoint->notEmpty() implies isComposite
1635 ,Expression: self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
1636 ,Expression: isComposite implies not isSubmachineState
1646 ,Expression: specification <> null implies connectionPoint->isEmpty()
1651 ,Expression: ownedAttribute.association->forAll(memberEnd->size()=2)
1652 ,Expression: allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
1653 ,Expression: ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
1657 ,Expression: operand->forAll (oclIsKindOf (LiteralString))
1658 ,Expression: if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
1659 ,Expression: object.is(1,1)
1662 ,Expression: not structuralFeature.isStatic
1663 ,Expression: structuralFeature.featuringClassifier->size() = 1
1668 ,Expression: edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
1674 ,Expression: parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
1675 ,Expression: signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
1676 ,Expression: default <> null implies default.isCompatibleWith(parameteredElement)
1677 ,Expression: actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
1678 ,Expression: template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
1679 ,Expression: parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
1682 ,Expression: first.is(1,1) and second.is(1,1)
1683 ,Expression: first.type= null and second.type = null
1684 ,Expression: result.type=Boolean
1685 ,Expression: constrainedElement->size() = 1
1686 ,Expression: when.integerValue() >= 0
1687 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
1691 ,Expression: (kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
1700 ,Expression: port->notEmpty() implies event.oclIsKindOf(MessageEvent)
1702 ,Expression: unmarshallType.allAttributes()->size() >= 1
1703 ,Expression: unmarshallType.allAttributes()->size() = result->size()
1705 ,Expression: object.is(1,1)
1706 ,Expression: object.type.conformsTo(unmarshallType)
1707 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
1708 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
1709 ,Expression: not allIncludedUseCases()->includes(self)
1710 ,Expression: name -> notEmpty ()
1712 ,Expression: incoming->isEmpty()
1713 ,Expression: value.type.conformsTo(type)
1722 ,Expression: result.is(1,1)
1723 ,Expression: value.type.conformsTo(result.type)
1725 ,Expression: variable.isAccessibleBy(self)
1732 ,Expression: result <> null implies result.is(1,1)
1733 ,Expression: value <> null implies value.type.conformsTo(structuralFeature.type)
1734 ,Expression: value<>null implies value.is(1,1)
1735 ,Expression: result <> null implies result.type = object.type
1736 ,Expression: value <> null implies value.type.conformsTo(variable.type)
1737 ,Expression: value<>null implies value.is(1,1)
1740 ,Expression: Tuple {message : String = 'Employee must have a name',status : Boolean = not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()}.status
1741 ,Expression: name->notEmpty() implies name.size() > 0
1748 ,Expression: name <> null
1755 ,Expression: Tuple {message : String = 'Employee must have a name',status : Boolean = not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()}.status
1756 ,Expression: name->notEmpty() implies name.size() > 0
1763 ,Expression: name <> null
1767 ,Expression: loans->size() <= 2
1774 ,Expression: loans->size() <= 2
1778 ,Expression: library.loans->select((book = self))->size() <= copies
1780 ,Expression: library.loans->select((book = self))->size() <= copies
1782 ,Expression: true
1783 ,Expression: true
1791 ,Expression: true
1792 ,Expression: true
1795 ,Expression: true
1816 ,Expression: not name.oclIsUndefined()
1824 ,Expression: not name.oclIsUndefined()
1830 ,Expression: not name.oclIsUndefined()
1834 ,Expression: true
1836 ,Expression: true
1840 ,Expression: true
1842 ,Expression: true
1844 ,Expression: states->exists(s | s.initial)
1845 ,Expression: let firstLetter : String = invalid.substring(1, 1) in firstLetter.toUpperCase() = firstLetter
1967 ,Expression: dependums->forAll(linksAsSrc->isEmpty() and linksAsTgt->isEmpty())
1968 ,Expression: intentions->forAll(dependerLinks->isEmpty() and dependeeLinks->isEmpty())
1970 ,Expression: src.oclIsTypeOf(Task)
1971 ,Expression: tgt.oclIsTypeOf(Goal)
1972 ,Expression: tgt.oclIsTypeOf(Task)
1973 ,Expression: tgt.oclIsTypeOf(SoftGoal)
1976 ,Expression: dependums->forAll(linksAsSrc->isEmpty() and linksAsTgt->isEmpty())
1977 ,Expression: intentions->forAll(dependerLinks->isEmpty() and dependeeLinks->isEmpty())
1985 ,Expression: src.oclIsKindOf(Place) and tgt.oclIsKindOf(Transition) or src.oclIsKindOf(Transition) and tgt.oclIsKindOf(Place)
2001 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
2002 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
2003 ,Expression: self.superType <> self
2004 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
2005 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
2006 ,Expression: self.opposite -> forAll(o | o.opposite = self)
2007 ,Expression: self.opposite <> null implies self.target = Entity.allInstances() -> select(e | e.features -> select(f | f.oclIsKindOf(Relationship)) -> includes(self.opposite)) -> asOrderedSet() -> first()
2008 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
2009 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
2015 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
2016 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
2018 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
2019 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
2020 ,Expression: self.editingForm.welcomeForm = false
2021 ,Expression: self.relationship.target = self.editingForm.entity
2022 ,Expression: self.attribute.type = AttributeType::Date
2023 ,Expression: self.attribute.type = AttributeType::Time
2024 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
2025 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
2026 ,Expression: self.superType <> self
2027 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
2028 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
2029 ,Expression: self.opposite -> forAll(o | o.opposite = self)
2030 ,Expression: self.opposite <> null implies self.target = Entity.allInstances() -> select(e | e.features -> select(f | f.oclIsKindOf(Relationship)) -> includes(self.opposite)) -> asOrderedSet() -> first()
2031 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
2032 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
2038 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
2039 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
2041 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
2042 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
2043 ,Expression: self.editingForm.welcomeForm = false
2044 ,Expression: self.relationship.target = self.editingForm.entity
2045 ,Expression: self.attribute.type = AttributeType::Date
2046 ,Expression: self.attribute.type = AttributeType::Time
2052 ,Expression: self.nodes->select(t | t.oclIsKindOf(Task))->forAll(p1, p2 | p1 <> p2 implies p1.name <> p2.name)
2053 ,Expression: self.name.oclIsUndefined() = false 
2055 ,Expression: self.transition->size() < 2
2056 ,Expression: self.previousTasks->size() = 1
2057 ,Expression: self.tasks->select(t | t.start = true)->size() = 0
2058 ,Expression: self.previousTasks->size() > 1
2059 ,Expression: self.task->select(t | t.start = true)->size() = 0
2060 ,Expression: self.previousTasks->size() = 1
2061 ,Expression: self.task->select(t | t.start = true)->size() = 0
2062 ,Expression: self.previousTasks->size() = 1
2063 ,Expression: self.tasks->select(t | t.start = true)->size() = 0
2064 ,Expression: self.previousTasks->size() = 1
2065 ,Expression: self.tasks->select(t | t.start = true)->size() = 0
2066 ,Expression: self.previousTasks->size() > 1
2067 ,Expression: self.task->select(t | t.start = true)->size() = 0
2068 ,Expression: not (self.name->isEmpty())
2069 ,Expression: Sequence{1 .. self.name.size()}->collect(i | self.name.substring(i, i))->excludes(' ')
2070 ,Expression: self.tables->isUnique(name.toUpperCase())
2071 ,Expression: not (self.columns->exists(name.toUpperCase() = 'id'.toUpperCase()))
2072 ,Expression: self.columns->isUnique(name.toUpperCase())
2073 ,Expression: not(self.foreignKeys->notEmpty() and self.foreignKeys->exists(reference.name = self.name))
2074 ,Expression: self.column.type = self.reference.primaryKey.type
2075 ,Expression: not (self.name->isEmpty())
2076 ,Expression: Sequence{1 .. self.name.size()}->collect(i | self.name.substring(i, i))->excludes(' ')
2077 ,Expression: self.tables->isUnique(name.toUpperCase())
2078 ,Expression: not (self.columns->exists(name.toUpperCase() = 'id'.toUpperCase()))
2079 ,Expression: self.columns->isUnique(name.toUpperCase())
2080 ,Expression: not(self.foreignKeys->notEmpty() and self.foreignKeys->exists(reference.name = self.name))
2081 ,Expression: self.column.type = self.reference.primaryKey.type
2082 ,Expression: not (self.name->isEmpty())
2083 ,Expression: Sequence{1 .. self.name.size()}->collect(i | self.name.substring(i, i))->excludes(' ')
2084 ,Expression: self.tables->isUnique(name.toUpperCase())
2085 ,Expression: not (self.columns->exists(name.toUpperCase() = 'id'.toUpperCase()))
2086 ,Expression: self.columns->isUnique(name.toUpperCase())
2087 ,Expression: not(self.foreignKeys->notEmpty() and self.foreignKeys->exists(reference.name = self.name))
2088 ,Expression: self.column.type = self.reference.primaryKey.type
2091 ,Expression: self.from <> self.to
2092 ,Expression: self.cond.size() > 0
2093 ,Expression: self.cond.size() > 0
2094 ,Expression: self.name.size() >= 0
2095 ,Expression: self.name.size() > 0
2096 ,Expression: self.name.size() > 0
2097 ,Expression: self.name.size() > 0
2098 ,Expression: self.name.size() > 0
2099 ,Expression: self.name.size() > 0
2141 ,Expression: (self.code.size() = 5 and self.code.toInteger() > 0 and self.code.toInteger() <99999)
2143 ,Expression: (self.city.size() <= 35 and self.city.size() > 0)
2145 ,Expression: self.isoCode.size() = 3
2147 ,Expression: (self.isoCode.size() <= 55 and self.isoCode.size() >= 3)
2148 ,Expression: self.status.size() = 1
2150 ,Expression: self.status.size() <= 255
2151 ,Expression: (self.address.size() <= 55 and self.address.size() >= 5)
2152 ,Expression: (self.theater.size() <= 55 and self.theater.size() >= 5)
2153 ,Expression: (self.fullName.size() >= 3 and self.fullName.size() <= 55)
2154 ,Expression: self.genres->isEmpty() = false
2155 ,Expression: self.directors->isEmpty() = false
2156 ,Expression: (self.title.size() >= 3 and self.title.size() <= 150)
2157 ,Expression: (self.synopsis.size() >= 10 and self.synopsis.size() <= 255)
2158 ,Expression: (self.duration > 60000)
2159 ,Expression: self.languages->size() = 2
2160 ,Expression: self.description.size() <= 255
2161 ,Expression: self.isoCode.size() = 3
2163 ,Expression: (self.languageName.size() >= 3 and self.languageName.size() <= 55)
2164 ,Expression: (self.videoFormat.size() >= 3 and self.videoFormat.size() <= 20)
2165 ,Expression: self.description.size() <= 255
2166 ,Expression: (self.genre.size() >= 3 and self.genre.size() <= 25)
2167 ,Expression: self.description.size() < 255
2168 ,Expression: (self.code.size() = 5 and self.code.toInteger() > 0 and self.code.toInteger() <99999)
2170 ,Expression: (self.city.size() <= 35 and self.city.size() > 0)
2172 ,Expression: self.isoCode.size() = 3
2174 ,Expression: (self.isoCode.size() <= 55 and self.isoCode.size() >= 3)
2175 ,Expression: self.status.size() = 1
2177 ,Expression: self.status.size() <= 255
2178 ,Expression: (self.address.size() <= 55 and self.address.size() >= 5)
2179 ,Expression: (self.theater.size() <= 55 and self.theater.size() >= 5)
2180 ,Expression: self.rooms->isEmpty() = false
2181 ,Expression: (self.fullName.size() >= 3 and self.fullName.size() <= 55)
2182 ,Expression: self.genres->isEmpty() = false
2183 ,Expression: self.directors->isEmpty() = false
2184 ,Expression: (self.title.size() >= 3 and self.title.size() <= 150)
2185 ,Expression: (self.synopsis.size() >= 10 and self.synopsis.size() <= 255)
2186 ,Expression: (self.duration > 60000)
2187 ,Expression: self.film <> null
2188 ,Expression: self.status <> null
2189 ,Expression: self.audioFormat <> null
2190 ,Expression: self.videoFormat <> null
2191 ,Expression: self.languages->size() = 2
2192 ,Expression: self.description.size() <= 255
2193 ,Expression: self.isoCode.size() = 3
2195 ,Expression: (self.languageName.size() >= 3 and self.languageName.size() <= 55)
2196 ,Expression: (self.videoFormat.size() >= 3 and self.videoFormat.size() <= 20)
2197 ,Expression: self.description.size() <= 255
2198 ,Expression: (self.genre.size() >= 3 and self.genre.size() <= 25)
2199 ,Expression: self.description.size() < 255
2200 ,Expression: self.room <> null
2201 ,Expression: self.posterBoard <> null
2202 ,Expression: self.seats->isEmpty() = false
2204 ,Expression: (self.number.size() > 0 and self.number.size() < 3)
2205 ,Expression: (self.name.size() > 5 and self.name.size() < 25)
2207 ,Expression: (self.number.size() > 0 and self.number.size() < 4)
2209 ,Expression: (self.row.size() > 0 and self.row.size() < 3)
2210 ,Expression: (self.fullName <> null and self.fullName.size() >= 5 and self.fullName.size() <=150)
2211 ,Expression: self.videoType <> null
2212 ,Expression: self.localityType <> null
2213 ,Expression: self.price > 0
2214 ,Expression: self.points > 0
2215 ,Expression: self.card <> null
2216 ,Expression: self.gender <> null
2217 ,Expression: (self.lastNames <> null and self.lastNames.size() >= 3 and self.lastNames.size()<= 25)
2219 ,Expression: (self.idNumber.size() > 5 and self.idNumber.size() < 20)
2220 ,Expression: (self.fullName <> null and self.fullName.size() >= 3 and self.fullName.size() <=25)
2222 ,Expression: self.points >= 0
2223 ,Expression: self.idNum > 0
2224 ,Expression: self.idNum > 0
2225 ,Expression: self.chairs->isEmpty() = false
2226 ,Expression: self.presentation <> null
2227 ,Expression: self.prices->isEmpty() = false
2234 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
2238 ,Expression: not allOwnedElements()->includes(self)
2239 ,Expression: mustBeOwned() implies owner->notEmpty()
2242 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
2243 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
2244 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
2245 ,Expression: ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)
2247 ,Expression: redefinedElement->forAll(r | r.leaf = false)
2249 ,Expression: derived = false and derivedUnion = false
2250 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
2251 ,Expression: derivedUnion implies readOnly
2252 ,Expression: aggregation = AggregationKind::composite
2255 ,Expression: derived = false
2258 ,Expression: memberEnd->size() = 2
2260 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
2261 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
2262 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
2263 ,Expression: lower = lowerBound()
2264 ,Expression: upper = upperBound()
2265 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
2268 ,Expression: ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1
2275 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
2276 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
2277 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
2294 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
2298 ,Expression: not allOwnedElements()->includes(self)
2299 ,Expression: mustBeOwned() implies owner->notEmpty()
2302 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
2303 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
2304 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
2307 ,Expression: redefinedElement->forAll(r | r.leaf = false)
2309 ,Expression: derived = false and derivedUnion = false
2310 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
2311 ,Expression: derivedUnion implies readOnly
2312 ,Expression: aggregation = AggregationKind::composite
2315 ,Expression: derived = false
2318 ,Expression: memberEnd->size() = 2
2320 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
2321 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
2322 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
2323 ,Expression: lower = lowerBound()
2324 ,Expression: upper = upperBound()
2325 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
2335 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
2336 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
2337 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
2348 ,Expression: classifiers->isUnique(name)
2349 ,Expression: pages->isUnique(name)
2350 ,Expression: menus->isUnique(name)
2353 ,Expression: useCaptcha implies not authenticates.captchaSiteKey.oclIsUndefined() and not authenticates.captchaSecretKey.oclIsUndefined()
2354 ,Expression: not name.oclIsUndefined() implies name.size() > 0
2355 ,Expression: allFeatures->includesAll(keys)
2364 ,Expression: entityFeatures->isUnique(f | f.name)
2365 ,Expression: primaryKey implies cardinality <> Cardinality::Optional
2366 ,Expression: cardinality = Cardinality::Optional and targetCardinality = Cardinality::Required implies bidirectional
2374 ,Expression: units->isUnique(name)
2375 ,Expression: entries->select(e | e.oclIsKindOf(MenuFeature))->isEmpty()
2376 ,Expression: true
2377 ,Expression: true
2378 ,Expression: not selection.oclIsUndefined() implies selection.limit = 1
2382 ,Expression: actions->select(a | a.oclIsKindOf(SelectAction))->size() < 2
2383 ,Expression: actions->select(a | a.oclIsKindOf(DeleteAction))->isEmpty()
2402 ,Expression: actions->select(a | a.oclIsKindOf(DeleteAction))->size() < 2
2410 ,Expression: self.containsAttributes -> size() >= 1
2411 ,Expression: not self.hasPK -> isEmpty()
2413 ,Expression: not self.name.oclIsUndefined()
2414 ,Expression: not self.name.oclIsUndefined()
2416 ,Expression: self.type <>  EGenericType::UNDEFINED
2417 ,Expression: self.states->one(e : StateVertex | e.oclIsKindOf(InitialState))
2418 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
2419 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
2419 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
2666 ,Expression: self.types->isUnique(name)
2668 ,Expression: self.classes->isUnique(name)
2670 ,Expression: not self.superTypes->includes(self)
2672 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
2674 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
2678 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(sourceModelElement = element)) else true endif
2680 ,Expression: self.sourceModelElement.oclIsTypeOf(Class) or self.sourceModelElement.oclIsTypeOf(Operation)
2682 ,Expression: self.maps->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.sourceModelElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.sourceModelElement.oclType()) endif)
2688 ,Expression: not self.type.oclIsTypeOf(RVoid)
2700 ,Expression: if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif
2702 ,Expression: self.affectedBy->size() > 0
2704 ,Expression: not self.affectedBy->includes(self)
2706 ,Expression: if metaClass then self.name = '' else true endif
2710 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
2712 ,Expression: self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(parameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = parameter))
2714 ,Expression: self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents.operations->includes(self.signature)
2718 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
2720 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
2724 ,Expression: if self.assignTo <> null then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
2728 ,Expression: if self.message.messageSort = MessageSort::createMessage then self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) >= self.container.fragments->indexOf(self) else true endif) else true endif
2730 ,Expression: self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) <= self.container.fragments->indexOf(self) else true endif)
2732 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
2734 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
2738 ,Expression: if self.value.oclIsKindOf(LiteralSpecification) then false else true endif
2743 ,Expression: self.upperBound > 0 or self.upperBound = - 1
2745 ,Expression: self.lowerBound >= 0
2747 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = - 1
2861 ,Expression: Tuple {message : String = 'The name of class "' + name + '" must begin uppercase.',status : Boolean = let firstLetter: String = (name).substring(1,1)in firstLetter.toUpperCase() = firstLetter}.status
2862 ,Expression: Tuple {message : String = 'The names of all attributes of a class must be unambiguous.',status : Boolean = true}.status
2863 ,Expression: Tuple {message : String = 'The name of class "' + name + '" must begin lowercase.',status : Boolean = let firstLetter: String = (name).substring(1,1)in firstLetter.toLowerCase() = firstLetter}.status
2864 ,Expression: Tuple {message : String = 'The name of constant "' + name + '" must be all uppercase.',status : Boolean = name.toUpperCase() = name}.status
2870 ,Expression: value.size() = 10
2871 ,Expression: Set{1 .. 12}->includes(self.month)
2872 ,Expression: let daysInMonth : Integer = if Set{1, 3, 5, 7, 8, 10, 12}->includes(self.month) then 31 else 30 endif in day <= daysInMonth - if month = 2 then if year.mod(4) = 0 and ((year.mod(100) <> 0 or year.mod(400) = 0)) then 1 else 2 endif else 0 endif
2873 ,Expression: Set{8, 9, 0}->includes(self.old)
2880 ,Expression: self.properties-> forAll (p: Property | p.multiplicityLowerBound = 0 or p.multiplicityLowerBound = 1)
2881 ,Expression: self.properties-> forAll (p: Property | p.multiplicityUpperBound = 1)
2882 ,Expression: if self.isId->notEmpty() then self.isId.multiplicityLowerBound = 1 and self.isId.multiplicityUpperBound = 1 else true endif
2883 ,Expression: if self.superclass->isEmpty() then self.properties -> includes(self.isId) else self.isId->isEmpty() endif
2884 ,Expression:  self.properties -> forAll (p: Property | p.type.oclIsTypeOf(DataType) or p.type.oclIsTypeOf(Enumeration))
2885 ,Expression: self.subclass->excludes(self)
2886 ,Expression: self.superclass->excludes(self)
2891 ,Expression: self.literals->isUnique(name)
2892 ,Expression: self.begin.multiplicityLowerBound >= 0
2893 ,Expression: self.begin.multiplicityUpperBound = -1 or (self.begin.multiplicityLowerBound <= self.begin.multiplicityUpperBound and self.begin.multiplicityUpperBound > 0)
2894 ,Expression: self.end.multiplicityLowerBound >= 0
2895 ,Expression: self.end.multiplicityUpperBound = -1 or (self.end.multiplicityLowerBound <= self.end.multiplicityUpperBound and self.end.multiplicityUpperBound > 0)
2896 ,Expression: self.begin.type.oclIsTypeOf(Class)
2897 ,Expression: self.end.type.oclIsTypeOf(Class)
2898 ,Expression: self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
2899 ,Expression: self.dataTypes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
2900 ,Expression: Enumeration.allInstances()->isUnique(name)
2901 ,Expression: Association.allInstances()->isUnique(name)
2902 ,Expression: Condition.allInstances()->isUnique(conditionID)
2904 ,Expression: self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)
2905 ,Expression: self.propertyRef.type.oclIsTypeOf(DataType) and (self.propertyRef.type.name = 'Date' or self.propertyRef.type.name = 'Time' or self.propertyRef.type.name = 'DateTime')
2906 ,Expression: self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)
2909 ,Expression: self.cond1 <> self.cond2
2910 ,Expression: (self.cond1.result = self.result and self.cond2.result = self.result)
2911 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
2912 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
2914 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
2915 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
2917 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
2918 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
2919 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
2923 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
2926 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
2927 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
2928 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
2929 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
2930 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
2931 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
2932 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
2934 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
2935 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
2937 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
2938 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
2939 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
2943 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
2946 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
2947 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
2948 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
2949 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
2950 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
2951 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
2952 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
2954 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
2955 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
2957 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
2958 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
2959 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
2963 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
2966 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
2967 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
2968 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
2969 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
2970 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
2971 ,Expression: maxDelay > minDelay
2972 ,Expression: not(self.oclIsTypeOf(FixedPhone))
2973 ,Expression: self.oclIsTypeOf(CellPhone) or self.oclIsTypeOf(FixedPhone)
2974 ,Expression: oclIsTypeOf(Brasileiro) or oclIsTypeOf(Aluno)
2975 ,Expression: not (oclIsTypeOf(Aluno))
2976 ,Expression: oclIsTypeOf(Brasileiro) or oclIsTypeOf(Aluno)
2977 ,Expression: not (oclIsTypeOf(Aluno))
2978 ,Expression: pai->select(oclIsTypeOf(Pessoa))->isEmpty()
2979 ,Expression: not(self.oclIsTypeOf(FixedPhone))
2980 ,Expression: self.oclIsTypeOf(MobilePhone) or self.oclIsTypeOf(FixedPhone)
2981 ,Expression: not(self.oclIsTypeOf(FixedPhone))
2982 ,Expression: self.oclIsTypeOf(CellPhone) or self.oclIsTypeOf(FixedPhone)
2983 ,Expression: StateMachine.allInstances()->size() = 1
2984 ,Expression: self.container.oclIsUndefined()
2985 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
2986 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
2987 ,Expression: self.states->includes(self.initialState.referencedState)
2988 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
2991 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
2992 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
2993 ,Expression: StateMachine.allInstances()->size() = 1
2994 ,Expression: self.container.oclIsUndefined()
2995 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
2996 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
2997 ,Expression: self.states->includes(self.initialState.referencedState)
2998 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
3001 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
3002 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
3003 ,Expression: self.conPatologias = false
3004 ,Expression: self.edad >= 18 and self.edad <= 60
3005 ,Expression: self.estatura >= 142 and self.estatura<=191
3006 ,Expression: (self.peso >= self.calcularPT() * 0.90) and                          (self.peso <= self.calcularPT() * 1.10)
3012 ,Expression: (self.calcularEnergia() >= self.usuario.calcularGET() * 0.90) and (self.calcularEnergia() <= self.usuario.calcularGET() * 1.10)
3026 ,Expression: self.port->size() = 2
3027 ,Expression: self.port->forAll(p1, p2 | p1<>p2 implies (p1.outComponent->size() + p2.outComponent->size() = 1 and p1.inComponent->size() + p2.inComponent->size() = 1))
3028 ,Expression: self.connect->size() = 1
3029 ,Expression: self.outComponent->size() + self.inComponent->size() = 1
3030 ,Expression: self.component.name -> asSet() -> size() = self.component.name -> size()
3031 ,Expression: self.connectors.name -> asSet() -> size() = self.connectors.name -> size()
3032 ,Expression: self.ports.name -> asSet() -> size() = self.ports.name -> size()
3033 ,Expression: self.instances.name -> asSet() -> size() = self.instances.name -> size()
3034 ,Expression: self.port_type.name -> asSet() -> size() = self.port_type.name -> size()
3035 ,Expression: self.initialState -> size() >0
3036 ,Expression: Tuple {message : String = 'Probability of all outgoing transitions must be 1.0.',status : Boolean =             self.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001}.status
3037 ,Expression: Tuple {message : String = 'There must not be any nondeterminism. Please union transitions to the same target.',status : Boolean = self.outgoing.to->asSet()->size() = self.outgoing->size()}.status
3038 ,Expression: Tuple {message : String = 'Labels must be unique per state.',status : Boolean = self.labels.name->asSet()->size() = self.labels->size()}.status
3039 ,Expression: Tuple {message : String = 'Exit rate must be greater than 0.',status : Boolean =     exitRate > 0.0 or self.outgoing->size() = 0}.status
3040 ,Expression: Tuple {message : String = 'Probability must be between 0 and 1.',status : Boolean =             prob >= 0.0 and prob <= 1.0}.status
3041 ,Expression: self.initialState -> size() >0
3042 ,Expression: Tuple {message : String = 'Probability of all outgoing transitions must be 1.0.',status : Boolean = self.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001}.status
3043 ,Expression: Tuple {message : String = 'There must not be any nondeterminism. Please union transitions to the same target.',status : Boolean = self.outgoing.to->asSet()->size() = self.outgoing->size()}.status
3044 ,Expression: Tuple {message : String = 'Labels must be unique per state.',status : Boolean = self.labels.name->asSet()->size() = self.labels->size()}.status
3045 ,Expression: Tuple {message : String = 'Probability must be between 0 and 1.',status : Boolean =  prob >= 0.0 and prob <= 1.0}.status
3046 ,Expression: self.inputGate->size() + self.outputGate->size() + self.inEvent->size() > 0
3047 ,Expression: self.inputEvents->forAll(e : Event | (e.oclIsTypeOf(BasicEvent) or e.oclIsTypeOf(IntermediateEvent)) and not e.oclIsTypeOf(Hazard))
3048 ,Expression: self.outputEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)) and not e.oclIsTypeOf(BasicEvent))
3049 ,Expression: self.inputGates->size() + self.inputEvents->size() >= 2
3050 ,Expression: self.outputGate->size() + self.outputEvent->size() = 1
3051 ,Expression: if self.inputGates->size() > 0 then self.inputGates->select(g : Gate | g.id = self.id)->size() = 0 else true endif
3052 ,Expression: if self.outputGate <> null then self.outputGate.id <> self.id else true endif
3053 ,Expression: self.name->size() > 0
3054 ,Expression: self.inEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(BasicEvent)))
3055 ,Expression: self.inputGate->size() + self.outputGate->size() + self.inEvent->size() + self.outEvent->size()> 0
3056 ,Expression: self.outEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)))
3057 ,Expression: self.inputGate->size() + self.outputGate->size() + self.outEvent->size()> 0
3058 ,Expression: self.inputGate->size() + self.outputGate->size() > 0
3059 ,Expression: if self.type = TypeType::PH1PH2 then self.entryPhaseActivities->size() > 0 else true endif
3060 ,Expression: if self.type = TypeType::GRAPH then self.entryActivityGraph->size() > 0 else true endif
3063 ,Expression: transitions -> select(t | not t.probability.oclIsUndefined()) -> size() = 0or transitions -> select(t | not t.probability.oclIsUndefined()) -> collect(probability) -> sum() = 1.0
3064 ,Expression: rate.oclIsUndefined() xor probability.oclIsUndefined()
3067 ,Expression: ManagerTransition.allInstances()->forAll(t1 : ManagerTransition, t2 : ManagerTransition | t1 <> t2 implies t1.target <> t2.target or t1.source <> t2.source)
3068 ,Expression: ManagerState.allInstances()->forAll(m1 : ManagerState, m2 : ManagerState | m1 <> m2 implies m1.name <> m2.name)
3069 ,Expression: ManagedElement.allInstances()->forAll(m1 : ManagedElement, m2 : ManagedElement | m1 <> m2 implies m1.name <> m2.name)
3070 ,Expression: finalState->forAll(s : ManagerState | s <> initialState)
3071 ,Expression: finalState->forAll(s : ManagerState | s.outgoingTransition->size() = 0)
3072 ,Expression: ManagerTransition.allInstances()->forAll(m1 : ManagerTransition, m2 : ManagerTransition | m1 <> m2 implies m1.name <> m2.name)
3073 ,Expression: finalState->forAll(s : ManagerState | s.incomingTransition->size() > 0)
3074 ,Expression: initialState.isStart and not initialState.isEnd
3075 ,Expression: ManagerParameter.allInstances()->forAll(m1 : ManagerParameter, m2 : ManagerParameter | m1 <> m2 implies m1.name <> m2.name)
3076 ,Expression: finalState->forAll(s : ManagerState | s.isEnd and not s.isStart)
3077 ,Expression: if isEnd then owningManager.finalState->includes(self) else true endif
3079 ,Expression: not (isStart and isEnd)
3081 ,Expression: if not owningManager.finalState->includes(self) then outgoingTransition->collect(transProb)->iterate(p : Real ; res : Real = 0 | res + p) = 1.0 else true endif
3082 ,Expression: not name.oclIsUndefined()
3083 ,Expression: transProb <= 1.0 and not transProb.oclIsUndefined()
3084 ,Expression: not name.oclIsUndefined()
3085 ,Expression: not name.oclIsUndefined()
3086 ,Expression: not name.oclIsUndefined()
3087 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
3088 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
3090 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
3091 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
3093 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
3094 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
3095 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
3099 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
3102 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3103 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
3104 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3105 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
3106 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
3108 ,Expression: self.superType <> self.name
3109 ,Expression: Class.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
3110 ,Expression: self.id.multiplicityLowerBound = 1 and self.id.multiplicityUpperBound = 1
3111 ,Expression: self.multiplicityLowerBound >= 0           and (self.multiplicityUpperBound >= multiplicityLowerBound or self.multiplicityUpperBound = -1)
3112 ,Expression: ViewGroup.allInstances() -> select(w | w.welcomeViewGroup = true) -> size() = 1
3113 ,Expression: self.compositeConditions -> forAll(c | c.type = self.type)
3114 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
3115 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
3117 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
3118 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
3120 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
3121 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
3122 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
3126 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
3129 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3130 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
3131 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3132 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
3133 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
3134 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
3135 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
3137 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
3138 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
3140 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
3141 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
3142 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
3146 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
3149 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3150 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
3151 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3152 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
3153 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
3154 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
3156 ,Expression: self.name <> ''
3157 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
3158 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
3159 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
3160 ,Expression: self.parent.initialize.implementsInitP1=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP1.name)->notEmpty()
3162 ,Expression: self.parent.initialize.implementsInitP2=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP2.name)->notEmpty()
3164 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
3165 ,Expression: self.parent.parent.implementsSetServices <> null and self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='1')->notEmpty()
3166 ,Expression: self.registeredInSetServices or self.advertisesAtLeastOneField
3167 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
3168 ,Expression: self.parent.parent.implementsSetServices <> null and self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='2')->notEmpty()
3169 ,Expression: self.registeredInSetServices or self.realizesAtLeastOneField
3170 ,Expression: self.addsToState = self.parent.importParam
3171 ,Expression: self.addsToState = self.parent.exportParam
3172 ,Expression: self.realizedInState = self.parent.importParam
3173 ,Expression: self.realizedInState = self.parent.exportParam
3175 ,Expression: self.parent.genericImports.importsLabelSetModelCount <> null and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelCount).userRoutine->asSequence()->first()
3176 ,Expression: self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelServices).userRoutine->asSequence()->first()
3177 ,Expression: self.parent.genericImports.importsLabelSetModelCount <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelCount).userRoutine->asSequence()->first()
3178 ,Expression: self.parent.genericImports.importsLabelSetModelServices <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelServices).userRoutine->asSequence()->first()
3179 ,Expression: self.parent.genericImports.importsLabelSetModelPetLists <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelPetLists).userRoutine->asSequence()->first()
3181 ,Expression: self.parent.initialize.implementsInitP1=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP1.name)->notEmpty()
3183 ,Expression: self.parent.initialize.implementsInitP2=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP2.name)->notEmpty()
3185 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
3186 ,Expression: self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='1')->notEmpty()
3187 ,Expression: self.registeredInSetServices or self.advertisesAtLeastOneField
3188 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
3189 ,Expression: self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='2')->notEmpty()
3190 ,Expression: self.registeredInSetServices or self.realizesAtLeastOneField
3191 ,Expression: self.addsToState = self.parent.importParam
3192 ,Expression: self.addsToState = self.parent.exportParam
3193 ,Expression: self.realizedInState = self.parent.importParam
3194 ,Expression: self.realizedInState = self.parent.exportParam
3199 ,Expression: self.duration >= 0
3445 ,Expression: true
3446 ,Expression: true
3554 ,Expression: self.name->notEmpty() and self.name.size() > 0
3555 ,Expression: self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
3557 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
3559 ,Expression: self.name <> ''
3560 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
3561 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
3562 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
3615 ,Expression: name <> null
3623 ,Expression: not self->closure(owner)->includes(self)
3628 ,Expression: fixtures->notEmpty() implies tests->notEmpty()
3629 ,Expression: fixtures->forAll(tests->includesAll(self.tests))
3630 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
3718 ,Expression: self.classes->forAll( i, j | i <> j implies i.name <> j.name )
3721 ,Expression: transmitters.remote->excludes(self)
3722 ,Expression: outputs->size() > 0
3723 ,Expression: inputs->size() > 0
3724 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
3733 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
3734 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
3735 ,Expression: self.addsToState = self.parent.importParam
3736 ,Expression: self.addsToState = self.parent.exportParam
3737 ,Expression: self.realizedInState = self.parent.importParam
3738 ,Expression: self.realizedInState = self.parent.exportParam
3739 ,Expression: self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
3740 ,Expression: (states)->exists(s : State | s.initial)
3742 ,Expression: initial implies (((statemachine).states)->select(initial))->size() = 1
3744 ,Expression: let firstLetter : String = (name).substring(1, 1) in firstLetter.toUpperCase() = firstLetter
3746 ,Expression: (name).size() >= 4
3748 ,Expression: let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->isEmpty()
3760 ,Expression: (self.languageTag.size()>0 implies self.uri.size()=0) and (self.uri.size()>0 implies self.languageTag.size()=0)
3783 ,Expression: father.gender <> mother.gender
3787 ,Expression: name.size() >= 5
3788 ,Expression: name <> null
3789 ,Expression: Place.allInstances()->isUnique(name)
3790 ,Expression: tokens >= 0
3791 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
3792 ,Expression: name <> null
3793 ,Expression: Place.allInstances()->isUnique(name)
3794 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
3795 ,Expression: tokens >= 0
3796 ,Expression: Transition.allInstances()->isUnique(name)
4106 ,Expression: not self.allOwnedElements()->includes(self)
4180 ,Expression: self.duration >= 0
4188 ,Expression: self.name.size() > 0
4189 ,Expression: self.url.size() > 0
4190 ,Expression: let s : String = self.url.substring(1, 7) in s = 'http://'
4191 ,Expression: self.arguments->size() = self.signature.parameters->size()
4192 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
4193 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
4194 ,Expression: gate.outlocked implies sec.on
4195 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
4196 ,Expression: gate.outlocked implies sec.on = true
4197 ,Expression: temp < 50 or not on
4198 ,Expression: temp < 30 implies on
4199 ,Expression: house.time < 2 or house.time > 8 or on
4200 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
4201 ,Expression: if pluged then level < 30 implies charging else true endif
4202 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
4203 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
4204 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
4205 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
4206 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
4207 ,Expression: house.time > 22 implies projector.volume < 4
4208 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
4209 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
4210 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
4211 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
4212 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
4213 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
4214 ,Expression: room.temp > 28 implies level > 5
4215 ,Expression: room.temp < 23 implies level = 0
4216 ,Expression: room.house.outtemp > 30 implies level > 5
4217 ,Expression: level > 0 implies level = 9
4218 ,Expression: level <> 0 implies level = 5
4219 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
4220 ,Expression: loaded implies on
4221 ,Expression: loaded implies on = true
4222 ,Expression: battery < 20 implies circle < 30
4223 ,Expression: room.house.time = 7 and loaded implies on
4224 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
4225 ,Expression: room.temp > 20 implies not warming
4226 ,Expression: loaded implies warming = true
4227 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
4228 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
4229 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
4230 ,Expression: self.description.size() > 0
4232 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
4233 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
4234 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
4235 ,Expression: self.ID.attributeOf = self
4236 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
4237 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
4238 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
4239 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
4240 ,Expression: self.description.size() > 0
4241 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
4242 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
4243 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
4254 ,Expression: self.R <= 255 and self.R >= 0
4256 ,Expression: self.G <= 255 and self.G >= 0
4258 ,Expression: self.B <= 255 and self.B >= 0
4822 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
4864 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
4865 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
4921 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
4922 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
4969 ,Expression: width >= 0
4971 ,Expression: height >= 0
4973 ,Expression: width >= 0
4974 ,Expression: height >= 0
4975 ,Expression: header_level >= 0 and header_level <= 6
4976 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
4977 ,Expression: not index_page.oclIsUndefined()
4978 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
4979 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
4981 ,Expression: thickness > 0
5054 ,Expression: true
5055 ,Expression: true
5163 ,Expression: self.name->notEmpty() and self.name.size() > 0
5164 ,Expression: self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
5166 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
5168 ,Expression: self.name <> ''
5169 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
5170 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
5171 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
5224 ,Expression: name <> null
5232 ,Expression: not self->closure(owner)->includes(self)
5237 ,Expression: fixtures->notEmpty() implies tests->notEmpty()
5238 ,Expression: fixtures->forAll(tests->includesAll(self.tests))
5239 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
5327 ,Expression: self.classes->forAll( i, j | i <> j implies i.name <> j.name )
5330 ,Expression: transmitters.remote->excludes(self)
5331 ,Expression: outputs->size() > 0
5332 ,Expression: inputs->size() > 0
5333 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
5342 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
5343 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
5344 ,Expression: self.addsToState = self.parent.importParam
5345 ,Expression: self.addsToState = self.parent.exportParam
5346 ,Expression: self.realizedInState = self.parent.importParam
5347 ,Expression: self.realizedInState = self.parent.exportParam
5348 ,Expression: self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
5349 ,Expression: (states)->exists(s : State | s.initial)
5351 ,Expression: initial implies (((statemachine).states)->select(initial))->size() = 1
5353 ,Expression: let firstLetter : String = (name).substring(1, 1) in firstLetter.toUpperCase() = firstLetter
5355 ,Expression: (name).size() >= 4
5357 ,Expression: let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->isEmpty()
5369 ,Expression: (self.languageTag.size()>0 implies self.uri.size()=0) and (self.uri.size()>0 implies self.languageTag.size()=0)
5392 ,Expression: father.gender <> mother.gender
5396 ,Expression: name.size() >= 5
5397 ,Expression: name <> null
5398 ,Expression: Place.allInstances()->isUnique(name)
5399 ,Expression: tokens >= 0
5400 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
5401 ,Expression: name <> null
5402 ,Expression: Place.allInstances()->isUnique(name)
5403 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
5404 ,Expression: tokens >= 0
5405 ,Expression: Transition.allInstances()->isUnique(name)
5715 ,Expression: not self.allOwnedElements()->includes(self)
5789 ,Expression: self.duration >= 0
5797 ,Expression: self.name.size() > 0
5798 ,Expression: self.url.size() > 0
5799 ,Expression: let s : String = self.url.substring(1, 7) in s = 'http://'
5800 ,Expression: self.arguments->size() = self.signature.parameters->size()
5801 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
5802 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
5803 ,Expression: gate.outlocked implies sec.on
5804 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
5805 ,Expression: gate.outlocked implies sec.on = true
5806 ,Expression: temp < 50 or not on
5807 ,Expression: temp < 30 implies on
5808 ,Expression: house.time < 2 or house.time > 8 or on
5809 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
5810 ,Expression: if pluged then level < 30 implies charging else true endif
5811 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
5812 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
5813 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
5814 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
5815 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
5816 ,Expression: house.time > 22 implies projector.volume < 4
5817 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
5818 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
5819 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
5820 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
5821 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
5822 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
5823 ,Expression: room.temp > 28 implies level > 5
5824 ,Expression: room.temp < 23 implies level = 0
5825 ,Expression: room.house.outtemp > 30 implies level > 5
5826 ,Expression: level > 0 implies level = 9
5827 ,Expression: level <> 0 implies level = 5
5828 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
5829 ,Expression: loaded implies on
5830 ,Expression: loaded implies on = true
5831 ,Expression: battery < 20 implies circle < 30
5832 ,Expression: room.house.time = 7 and loaded implies on
5833 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
5834 ,Expression: room.temp > 20 implies not warming
5835 ,Expression: loaded implies warming = true
5836 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
5837 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
5838 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
5839 ,Expression: self.description.size() > 0
5841 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
5842 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
5843 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
5844 ,Expression: self.ID.attributeOf = self
5845 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
5846 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
5847 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
5848 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
5849 ,Expression: self.description.size() > 0
5850 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
5851 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
5852 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
5863 ,Expression: self.R <= 255 and self.R >= 0
5865 ,Expression: self.G <= 255 and self.G >= 0
5867 ,Expression: self.B <= 255 and self.B >= 0
6431 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
6473 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
6474 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
6530 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
6531 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
6578 ,Expression: width >= 0
6580 ,Expression: height >= 0
6582 ,Expression: width >= 0
6583 ,Expression: height >= 0
6584 ,Expression: header_level >= 0 and header_level <= 6
6585 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
6586 ,Expression: not index_page.oclIsUndefined()
6587 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
6588 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
6590 ,Expression: thickness > 0
6635 ,Expression: true
6636 ,Expression: true
6744 ,Expression: self.name->notEmpty() and self.name.size() > 0
6745 ,Expression: self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
6747 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
6749 ,Expression: self.name <> ''
6750 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
6751 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
6752 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
6805 ,Expression: name <> null
6813 ,Expression: not self->closure(owner)->includes(self)
6818 ,Expression: fixtures->notEmpty() implies tests->notEmpty()
6819 ,Expression: fixtures->forAll(tests->includesAll(self.tests))
6820 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
6908 ,Expression: self.classes->forAll( i, j | i <> j implies i.name <> j.name )
6911 ,Expression: transmitters.remote->excludes(self)
6912 ,Expression: outputs->size() > 0
6913 ,Expression: inputs->size() > 0
6914 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
6923 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
6924 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
6925 ,Expression: self.addsToState = self.parent.importParam
6926 ,Expression: self.addsToState = self.parent.exportParam
6927 ,Expression: self.realizedInState = self.parent.importParam
6928 ,Expression: self.realizedInState = self.parent.exportParam
6929 ,Expression: self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
6930 ,Expression: (states)->exists(s : State | s.initial)
6932 ,Expression: initial implies (((statemachine).states)->select(initial))->size() = 1
6934 ,Expression: let firstLetter : String = (name).substring(1, 1) in firstLetter.toUpperCase() = firstLetter
6936 ,Expression: (name).size() >= 4
6938 ,Expression: let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->isEmpty()
6950 ,Expression: (self.languageTag.size()>0 implies self.uri.size()=0) and (self.uri.size()>0 implies self.languageTag.size()=0)
6973 ,Expression: father.gender <> mother.gender
6977 ,Expression: name.size() >= 5
6978 ,Expression: name <> null
6979 ,Expression: Place.allInstances()->isUnique(name)
6980 ,Expression: tokens >= 0
6981 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
6982 ,Expression: name <> null
6983 ,Expression: Place.allInstances()->isUnique(name)
6984 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
6985 ,Expression: tokens >= 0
6986 ,Expression: Transition.allInstances()->isUnique(name)
7296 ,Expression: not self.allOwnedElements()->includes(self)
7370 ,Expression: self.duration >= 0
7378 ,Expression: self.name.size() > 0
7379 ,Expression: self.url.size() > 0
7380 ,Expression: let s : String = self.url.substring(1, 7) in s = 'http://'
7381 ,Expression: self.arguments->size() = self.signature.parameters->size()
7382 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
7383 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
7384 ,Expression: gate.outlocked implies sec.on
7385 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
7386 ,Expression: gate.outlocked implies sec.on = true
7387 ,Expression: temp < 50 or not on
7388 ,Expression: temp < 30 implies on
7389 ,Expression: house.time < 2 or house.time > 8 or on
7390 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
7391 ,Expression: if pluged then level < 30 implies charging else true endif
7392 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
7393 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
7394 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
7395 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
7396 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
7397 ,Expression: house.time > 22 implies projector.volume < 4
7398 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
7399 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
7400 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
7401 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
7402 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
7403 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
7404 ,Expression: room.temp > 28 implies level > 5
7405 ,Expression: room.temp < 23 implies level = 0
7406 ,Expression: room.house.outtemp > 30 implies level > 5
7407 ,Expression: level > 0 implies level = 9
7408 ,Expression: level <> 0 implies level = 5
7409 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
7410 ,Expression: loaded implies on
7411 ,Expression: loaded implies on = true
7412 ,Expression: battery < 20 implies circle < 30
7413 ,Expression: room.house.time = 7 and loaded implies on
7414 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
7415 ,Expression: room.temp > 20 implies not warming
7416 ,Expression: loaded implies warming = true
7417 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
7418 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
7419 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
7420 ,Expression: self.description.size() > 0
7422 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
7423 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
7424 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
7425 ,Expression: self.ID.attributeOf = self
7426 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
7427 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
7428 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
7429 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
7430 ,Expression: self.description.size() > 0
7431 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
7432 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
7433 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
7444 ,Expression: self.R <= 255 and self.R >= 0
7446 ,Expression: self.G <= 255 and self.G >= 0
7448 ,Expression: self.B <= 255 and self.B >= 0
8012 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
8054 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
8055 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
8111 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
8112 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
8159 ,Expression: width >= 0
8161 ,Expression: height >= 0
8163 ,Expression: width >= 0
8164 ,Expression: height >= 0
8165 ,Expression: header_level >= 0 and header_level <= 6
8166 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
8167 ,Expression: not index_page.oclIsUndefined()
8168 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
8169 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
8171 ,Expression: thickness > 0
8185 ,Expression: replicas>0
8186 ,Expression: labels -> isUnique(key)
8187 ,Expression: containers -> isUnique(name)
8188 ,Expression: containers -> isUnique(containerPort)
8189 ,Expression: environments -> isUnique(name)
8190 ,Expression: services -> isUnique(name)
8191 ,Expression: services -> isUnique(port)
8192 ,Expression: cloud = CloudType::LOCAL implies services -> forAll (s:Service | s.type<>ServiceType::LoadBalancer)
8193 ,Expression: self.microservices->isUnique(m:Microservice | m.name)
8194 ,Expression: self.microservices->isUnique(m:Microservice | m.port)
8195 ,Expression: self.microservices->forAll(m:Microservice | m.port = 0) implies self.microservices.port = self.microservices.imagePort
8196 ,Expression: self.group->isUnique(g:Group | g.name)
8197 ,Expression: self.toConnection ->select(type = ConnectionType::EXTERNAL)->size()<=1
8198 ,Expression: type = ConnectionType::EXTERNAL implies toMicroservice->isEmpty()
8199 ,Expression: replicas>0
8200 ,Expression: labels -> isUnique(key)
8201 ,Expression: containers -> isUnique(name)
8202 ,Expression: containers -> isUnique(containerPort)
8203 ,Expression: environments -> isUnique(name)
8204 ,Expression: services -> isUnique(name)
8205 ,Expression: services -> isUnique(port)
8206 ,Expression: cloud = CloudType::LOCAL implies services -> forAll (s:Service | s.type<>ServiceType::LoadBalancer)
8207 ,Expression: self.microservices->isUnique(m:Microservice | m.name)
8208 ,Expression: self.microservices->isUnique(m:Microservice | m.port)
8209 ,Expression: self.microservices->forAll(m:Microservice | m.port = 0) implies self.microservices.port = self.microservices.imagePort
8210 ,Expression: self.group->isUnique(g:Group | g.name)
8212 ,Expression: type = ConnectionType::EXTERNAL implies toMicroservice->isEmpty()
8213 ,Expression: replicas>0
8214 ,Expression: labels -> isUnique(key)
8215 ,Expression: containers -> isUnique(name)
8216 ,Expression: containers -> isUnique(containerPort)
8217 ,Expression: environments -> isUnique(name)
8218 ,Expression: services -> isUnique(name)
8219 ,Expression: services -> isUnique(port)
8220 ,Expression: cloud = CloudType::LOCAL implies services -> forAll (s:Service | s.type<>ServiceType::LoadBalancer)
8221 ,Expression: self.microservices->isUnique(m:Microservice | m.name)
8222 ,Expression: self.microservices->isUnique(m:Microservice | m.port)
8223 ,Expression: self.microservices->forAll(m:Microservice | m.port = 0) implies self.microservices.port = self.microservices.imagePort
8224 ,Expression: self.group->isUnique(g:Group | g.name)
8226 ,Expression: type = ConnectionType::EXTERNAL implies toMicroservice->isEmpty()
8230 ,Expression:       loans->size() <= 2
8234 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
8235 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
8236 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
8237 ,Expression: self.description.size() > 0
8239 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
8240 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
8241 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
8242 ,Expression: self.ID.attributeOf = self
8243 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
8244 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
8245 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
8246 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
8247 ,Expression: self.description.size() > 0
8248 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
8249 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
8250 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
8252 ,Expression: self.consistsOf.transition-> forAll(m:ManufacturingSystemElement| m.transition <> self.start)
8253 ,Expression: self.responsible->size() = 1
8256 ,Expression: let ms:Integer = Step.allInstances()->select(responsible=self)->size() in ms>0 and ms<4
8257 ,Expression: ManufacturingSystem.allInstances()->collect(start)->includes(self) implies ManufacturingSystemElement.allInstances() -> collect(transition) -> excludes(self)
8260 ,Expression: self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
8268 ,Expression: self.incomingEdges->size() = 1
8269 ,Expression: self.outgoingEdges->size() >= 2
8271 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
8272 ,Expression: self.incomingEdges->size() >= 2
8273 ,Expression: self.outgoingEdges->size() = 1
8274 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
8275 ,Expression: not (self.terminal and self.initial)
8276 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
8277 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
8278 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
8279 ,Expression: self.incomingEdges->size() = 1
8280 ,Expression: self.outgoingEdges->size() = 1
8281 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
8283 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
8284 ,Expression: self.attribute.type = self.parameterValue.parameter.type
8286 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
8287 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
8289 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
8290 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
8292 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
8293 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
8294 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
8298 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
8301 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
8302 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
8303 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
8304 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
8305 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
8306 ,Expression: type.containerTypes->includes(parent.type) or parent = null
8307 ,Expression: attributes->forAll(a : Attribute | a.artifactTypes->includes(self.type)) or type = null
8308 ,Expression: (next->excludes(self) or next->size() = 0) and (previous->excludes(self) or previous->size() = 0)
8309 ,Expression: values->forAll(v : Value | artifact.attributes->includes(v.ofAttribute))
8310 ,Expression: artifact.attributes->forAll(a : Attribute | values->select(v : Value | (v.ofAttribute = a))->size() <= 1)
8314 ,Expression: state <> targetState
8315 ,Expression: deltas->forAll(d : Delta | state.artifact.attributes->includes(d.value.ofAttribute))
8316 ,Expression: state.artifact.attributes->forAll(a : Attribute | deltas->select(d : Delta | (d.value.ofAttribute = a))->size() <= 1)
8331 ,Expression: self.R <= 255 and self.R >= 0
8333 ,Expression: self.G <= 255 and self.G >= 0
8335 ,Expression: self.B <= 255 and self.B >= 0
8344 ,Expression: ComputeNode.allInstances() ->forAll(n | n.processInputData -> forAll( i |i.providedBy -> size() >0)  )
8346 ,Expression: ComputeNode.allInstances() ->forAll(n | n.produceOutputData -> forAll(d |n.storeOutput -> forAll( s |d.providedBy -> includes(s)) ))
8353 ,Expression: requiresPeerVm -> forAll(platform | ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = platform.elementId and      b.providedexecutionplatform.owner.oclIsTypeOf(VM)))
8354 ,Expression: requiresSlaveVm -> forAll(platform | ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = platform.elementId and          b.providedexecutionplatform.owner.oclIsTypeOf(VM)))
8355 ,Expression: ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = requiresMasterVm.elementId and          b.providedexecutionplatform.owner.oclIsTypeOf(VM))
8358 ,Expression: Tuple {message : String = 'Cannot assign empty name to sort',status : Boolean = name <> ''}.status
8359 ,Expression: Tuple {message : String = 'The super sort of sort ' + name + 'cannot be null',status : Boolean = superSort <> null}.status
8362 ,Expression: name <> ''
8363 ,Expression: Tuple {message : String = 'The return type for operation ' + name + ' was not set.',status : Boolean = returnType <> null}.status
8367 ,Expression: Tuple {message : String = 'The parameter names are not unique for declared strategy: ' + name,status : Boolean = formalParams<> null implies formalParams->isUnique(name)}.status
8368 ,Expression: Tuple {message : String = 'Formal params for strategy ' + name + ' are null',status : Boolean = formalParams <> null}.status
8373 ,Expression: self.taille >= 0 and self.taille < self.espece.tailleMaxAdulte
8375 ,Expression: self.espece.repartitionGeographique.lieu->includes(self.lieuHabite)
8380 ,Expression: self.regimeGeneral->includesAll(self.especeTortue.modeElevage.regimeCaptivite)
8381 ,Expression: self.tempJour > self.tempNuit
9024 ,Expression: self.name<>null
9025 ,Expression: self.location<>null
9026 ,Expression: self.trule<>null
9027 ,Expression: self.testScenarios->size() > 0
9028 ,Expression: self.name<>null
9029 ,Expression: self.location<>null
9030 ,Expression: self.trule<>null
9031 ,Expression: self.testScenarios->size() > 0
9108 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
9150 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
9151 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
9207 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
9208 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
9252 ,Expression: AbstractPage.allInstances() -> forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(AbstractPage).ID <> e2.oclAsType(AbstractPage).ID)
9254 ,Expression: PageElement.allInstances() -> forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)
9256 ,Expression: self.level>0
9261 ,Expression: ID > predecessor and ID < successor
9344 ,Expression: self.preArc -> notEmpty()
9345 ,Expression: self.token >= 0
9346 ,Expression: self.name <> ''
9347 ,Expression: self.transition -> notEmpty() or self.place -> notEmpty()
9348 ,Expression: self.preArc -> notEmpty() or self.postArc -> notEmpty()
9349 ,Expression: self.transition -> forAll(t:Transition|t.preArc -> notEmpty() or t.postArc -> notEmpty())
9350 ,Expression: self.preArc -> notEmpty() or self.postArc -> notEmpty()
9351 ,Expression: self.place -> forAll(p1:Place | self.place -> forAll(p2:Place | p1 <> p2 implies p1.name <> p2.name))
9352 ,Expression: self.transition -> forAll(t:Transition | t.preArc -> exists(apt:ArcPT | apt.place -> notEmpty()) or t.postArc -> exists(atp:ArcTP | atp.place -> notEmpty()))
9353 ,Expression: self.place -> exists(p:Place| p.token > 0)
9354 ,Expression: self.preArc -> notEmpty()
9355 ,Expression: self.token >= 0
9356 ,Expression: self.name <> ''
9357 ,Expression: self.transition -> notEmpty() or self.place -> notEmpty()
9358 ,Expression: self.preArc -> notEmpty() or self.postArc -> notEmpty()
9359 ,Expression: self.transition -> forAll(t:Transition|t.preArc -> notEmpty() or t.postArc -> notEmpty())
9360 ,Expression: self.preArc -> notEmpty() or self.postArc -> notEmpty()
9361 ,Expression: self.place -> forAll(p1:Place | self.place -> forAll(p2:Place | p1 <> p2 implies p1.name <> p2.name))
9362 ,Expression: self.transition -> forAll(t:Transition | t.preArc -> exists(apt:ArcPT | apt.place -> notEmpty()) or t.postArc -> exists(atp:ArcTP | atp.place -> notEmpty()))
9363 ,Expression: self.place -> exists(p:Place| p.token > 0)
9364 ,Expression: actualArgs->size() = declaration.args->size()
9365 ,Expression: args->forAll( a1 , a2 | a1.name = a2.name implies a1 = a2)
9372 ,Expression: not self.functionName.oclIsUndefined()
9376 ,Expression: not self.nodeID.oclIsUndefined()
9386 ,Expression: not self.nodeID.oclIsUndefined()
9396 ,Expression: not self.nodeID.oclIsUndefined()
9406 ,Expression: not self.nodeID.oclIsUndefined()
9409 ,Expression: not self.functionName.oclIsUndefined()
9412 ,Expression: not self.nodeID.oclIsUndefined()
9422 ,Expression: not self.nodeID.oclIsUndefined()
9429 ,Expression: not self.functionName.oclIsUndefined()
9433 ,Expression: not self.nodeID.oclIsUndefined()
9443 ,Expression: not self.nodeID.oclIsUndefined()
9450 ,Expression: not self.functionName.oclIsUndefined()
9454 ,Expression: not self.nodeID.oclIsUndefined()
9457 ,Expression: not self.functionName.oclIsUndefined()
9460 ,Expression: not self.nodeID.oclIsUndefined()
9464 ,Expression: not self.functionName.oclIsUndefined()
9467 ,Expression: not self.nodeID.oclIsUndefined()
9477 ,Expression: not self.nodeID.oclIsUndefined()
9478 ,Expression: Entity.allInstances()->forAll(e1 | self<>e1 implies self.name<>e1.name)
9479 ,Expression: not(self.entityAttribute->isEmpty()) and self.superType=null implies (self.entityAttribute->one(a | a.isId=true))
9480 ,Expression: (not(self.entityAttribute->isEmpty()) and self.superType<>null) implies (self.entityAttribute->forAll(a | a.isId=false))
9481 ,Expression: self.superType<>null implies self.superType<>self
9482 ,Expression: self.type=AttributeType::None implies self.enumerationType<>null
9483 ,Expression: self.type<>AttributeType::None implies self.enumerationType=null
9484 ,Expression: self.isId=true implies self.mandatory=true
9485 ,Expression: self.modelForm->notEmpty() implies self.modelForm->one(f | f.isWelcomeForm=true)
9486 ,Expression: self->forAll(self.lowerBound>=0)
9487 ,Expression: self.upperBound<>-1 implies self.upperBound >= self.lowerBound
9488 ,Expression: self->forAll(self.upperBound = -1 or self.upperBound > 0)
9489 ,Expression: self.opposite<>null implies (self.opposite.opposite=self)
9491 ,Expression: self.opposite<>self
9492 ,Expression: Form.allInstances()->forAll(f1 | self<>f1 implies self.name<>f1.name)
9495 ,Expression: self.columns->forAll(col | self.relationshipRef.target.entityAttribute->includes(col.attributeReference))
9496 ,Expression: (self.targetPageElement<>null implies self.targetPage=null) and (self.targetPage<>null implies self.targetPageElement=null)
9497 ,Expression: self.child2<>self.child1
9498 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
9499 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
9500 ,Expression: self.superType <> self
9501 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
9502 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
9503 ,Expression: self.opposite -> forAll(o | o.opposite = self)
9505 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
9506 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
9512 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
9513 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
9515 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
9516 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
9517 ,Expression: self.editingForm.welcomeForm = false
9518 ,Expression: self.relationship.target = self.editingForm.entity
9519 ,Expression: self.attribute.type = AttributeType::Date
9520 ,Expression: self.attribute.type = AttributeType::Time
9521 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
9522 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
9523 ,Expression: self.superType <> self
9524 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
9525 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
9526 ,Expression: self.opposite -> forAll(o | o.opposite = self)
9528 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
9529 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
9535 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
9536 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
9538 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
9539 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
9540 ,Expression: self.editingForm.welcomeForm = false
9541 ,Expression: self.relationship.target = self.editingForm.entity
9542 ,Expression: self.attribute.type = AttributeType::Date
9543 ,Expression: self.attribute.type = AttributeType::Time
9544 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
9545 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
9546 ,Expression: self.superType <> self
9547 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
9548 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
9549 ,Expression: self.opposite -> forAll(o | o.opposite = self)
9551 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
9552 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
9558 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
9559 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
9561 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
9562 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
9563 ,Expression: self.editingForm.welcomeForm = false
9564 ,Expression: self.relationship.target = self.editingForm.entity
9565 ,Expression: self.attribute.type = AttributeType::Date
9566 ,Expression: self.attribute.type = AttributeType::Time
9567 ,Expression: self.organized->select(p | p.isWelcome)->size() = 1 and self.organized->select(p | p.isWelcome)->forAll(p | p.predecessor->isEmpty())
9568 ,Expression: self.organized->select(p | p.predecessor->isEmpty())->size() = 1
9570 ,Expression: self.predecessor->asSet()->union(self.predecessor->closure(p | p.predecessor))->excludes(self)
9571 ,Expression: PageElement.allInstances()->forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)
9572 ,Expression: self.Type <> SelectionType::RADIO or (self.consists->select(preselected)->size() <= 1 and self.consists->select(selected)->size() <= 1)
9573 ,Expression: self.displayElementVisible -> forAll(e |e.contained.predecessor->asSet()->union(e.contained.predecessor->closure(p | p.predecessor))->includes(self.contained.contained))
9656 ,Expression: true
9657 ,Expression: library.loans->select((book = self))->size() <= copies
9660 ,Expression: loans->size() <= 2
9661 ,Expression: loans->isUnique(book)
9664 ,Expression: true
9665 ,Expression: true
9668 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
9669 ,Expression: name->notEmpty() implies name.size() > 0
9676 ,Expression: name <> null
9716 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
9723 ,Expression: name <> null
9726 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
9727 ,Expression: name->notEmpty() implies name.size() > 0
9734 ,Expression: name <> null
9735 ,Expression: true and true
9740 ,Expression: Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)
9741 ,Expression: self.age <= self.employer.boss.age
9744 ,Expression: self.age + 10 <= self.employer.boss.age
9746 ,Expression: not (self.boss.oclIsTypeOf(Freelance))
9751 ,Expression: self.calcExpenses() <= self.budget
9757 ,Expression: self.assignment >= 5 and self.assignment <= 30
9758 ,Expression: self.assignment >= 5 and self.assignment <= 40
9759 ,Expression: self.age < 40
9761 ,Expression: self.employeesOfTheMonth->size() <= self.department->size()
9762 ,Expression: self.numberEmployeesOfTheMonth <= self.department->size()
9765 ,Expression: self.age < 40
9766 ,Expression: self.eotmDelta <= 5
9776 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
9777 ,Expression: name->notEmpty() implies name.size() > 0
9784 ,Expression: name <> null
9790 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
9797 ,Expression: name <> null
9798 ,Expression: library.loans->select((book = self))->size() <= copies
9801 ,Expression: loans->size() <= 2
9802 ,Expression: loans->isUnique(book)
9805 ,Expression: library.loans->select((book = self))->size() <= copies
9808 ,Expression: loans->size() <= 2
9809 ,Expression: loans->isUnique(book)
9812 ,Expression: library.loans->select((book = self))->size() <= copies
9814 ,Expression: library.loans->select((book = self))->size() <= copies
9836 ,Expression: not name.oclIsUndefined()
9844 ,Expression: not name.oclIsUndefined()
9850 ,Expression: not name.oclIsUndefined()
9853 ,Expression: states->exists(s | s.initial)
9854 ,Expression: let firstLetter : String = invalid.substring(1, 1) in firstLetter.toUpperCase() = firstLetter
9856 ,Expression: self.systemunits->forAll(s1, s2 | s1 <> s2 implies s1.name <> s2.name)
9858 ,Expression: if(self.incoming.source = SelectionDivergence) then self.trigger->size()=1 else self.trigger->size()>=0 endif
9859 ,Expression: self.outgoing->size()>1
9860 ,Expression: self.incoming->size()=1
9862 ,Expression: self.incoming->size()>1 and self.outgoing->size()=1
9864 ,Expression: self.incoming->size()=0
9865 ,Expression: self.outgoing->size()=1
9866 ,Expression: self.functioncall->size()=0
9868 ,Expression: self.outgoing->size()=0
9869 ,Expression: self.incoming->size()=1
9870 ,Expression: self.functioncall->size()=0
9872 ,Expression: self.outgoing->size()=1
9873 ,Expression: self.incoming->size()=1
9874 ,Expression: self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
9884 ,Expression: self.incomingEdges->size() = 1
9885 ,Expression: self.outgoingEdges->size() >= 2
9887 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
9888 ,Expression: self.incomingEdges->size() >= 2
9889 ,Expression: self.outgoingEdges->size() = 1
9890 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
9891 ,Expression: not (self.terminal and self.initial)
9892 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
9893 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
9894 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
9895 ,Expression: self.incomingEdges->size() = 1
9896 ,Expression: self.outgoingEdges->size() = 1
9897 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
9899 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
9900 ,Expression: self.attribute.type = self.parameterValue.parameter.type
9902 ,Expression: self.name <> null
9903 ,Expression: self.orderedTasks->size() >= 1
9905 ,Expression: self.name <> null
9906 ,Expression: self.subFolders->forAll(f1 : Folder, f2 : Folder | f1 <> f2 implies f1.name <> f2.name)
9907 ,Expression: self.orderedTasks->size() > 1
9908 ,Expression: self.orderedTasks->size() > 1
9909 ,Expression: self.rootFolder.parent = null
9910 ,Expression: tasks->isUnique(id)
9911 ,Expression: self.folders->isUnique(id)
9912 ,Expression: self.folders->includes(self.rootFolder)
9920 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
9921 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
9922 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
9923 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
9924 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
9925 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
9927 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
9928 ,Expression: self.relations->size() > 0
9929 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
9930 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
9931 ,Expression: self.attrs->size() > 0
9962 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
9963 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
9965 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
9966 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
9967 ,Expression: Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
9970 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
9971 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
9973 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
9974 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
9975 ,Expression: Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
9980 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
9981 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
9983 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
9984 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
9985 ,Expression: Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
9988 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
9989 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
9991 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
9992 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
9993 ,Expression: Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
9998 ,Expression: Tuple {message : String = 'Name must not be empty.',status : Boolean = if name.size() > 0 then true else null endif}.status
9999 ,Expression: Tuple {message : String = 'Node cannot connect to itself.',status : Boolean = if sourceConnections->forAll(c | c.source <> c.target) then true else null endif}.status
10001 ,Expression: Tuple {message : String = 'Name must not be empty.',status : Boolean = if name.size() > 0 then true else null endif}.status
10002 ,Expression: Tuple {message : String = 'Node cannot connect to itself.',status : Boolean = if sourceConnections->forAll(c | c.source <> c.target) then true else null endif}.status
10004 ,Expression: if (self.direction=Direction::IN) then (not (self.incomingConnection=null)) else (self.outgoingConnection->size()>0) endif
10005 ,Expression: self.attributes -> includes(self.identifier) or self.supertypes.attributes -> includes(self.identifier)
10006 ,Expression: self.relationships -> forAll(r: Relationship | r.opposite -> isEmpty() or r.opposite.target = self and r.opposite.opposite = r)
10007 ,Expression: self.enumerationType -> isEmpty() or self.type = AttributeType::None
10008 ,Expression: self.lowerBound >= 0 and (self.lowerBound <= self.upperBound or self.upperBound = -1)
10012 ,Expression: self.refers_to.type = AttributeType::Boolean xor not self.refers_to.enumerationType.oclIsUndefined()
10013 ,Expression: self.combinesAttributeValue -> size() + self.combinesComposite -> size() = 2
10014 ,Expression: self.conditionsPageElement -> isEmpty() xor self.conditionsPage -> isEmpty()
10015 ,Expression: (self.forms.isWelcomeForm -> excluding(false)) -> size() = 1
10016 ,Expression: not self.name.oclIsUndefined() and name <>''
10017 ,Expression: self.entities->forAll(e1 : Entity, e2 : Entity | e1 <> e2 implies e1.name <> e2.name)
10018 ,Expression: DynamicPage.allInstances()->collect(entity)->asSet() = Entity.allInstances()
10019 ,Expression: webpages->collect(homeLink.target)->forAll(p | p = self.homePage)
10020 ,Expression: creationDateBeforeGoLive()
10021 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
10022 ,Expression: self.homeLink.target.oclIsTypeOf(StaticPage)
10023 ,Expression: not self.name.oclIsUndefined() and name <>''
10024 ,Expression: self.entities->forAll(e1 : Entity, e2 : Entity | e1 <> e2 implies e1.name <> e2.name)
10025 ,Expression: DynamicPage.allInstances()->collect(entity)->asSet() = Entity.allInstances()
10026 ,Expression: webpages->collect(homeLink.target)->forAll(p | p = self.homePage)
10027 ,Expression: creationDateBeforeGoLive()
10028 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
10029 ,Expression: self.homeLink.target.oclIsTypeOf(StaticPage)
10030 ,Expression: not self.name.oclIsUndefined() and name <> ''
10032 ,Expression: not self.name.oclIsUndefined() and name <>''
10033 ,Expression: self.entities->forAll(e1 : Entity, e2 : Entity | e1 <> e2 implies e1.name <> e2.name)
10034 ,Expression: DynamicPage.allInstances()->collect(entity)->asSet() = Entity.allInstances()
10035 ,Expression: webpages->collect(homeLink.target)->forAll(p | p = self.homePage)
10036 ,Expression: creationDateBeforeGoLive()
10037 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
10038 ,Expression: self.homeLink.target.oclIsTypeOf(StaticPage)
10039 ,Expression: (self.debut.oclIsTypeOf(Place) and self.fin.oclIsTypeOf(Transition))or (self.debut.oclIsTypeOf(Transition) and self.fin.oclIsTypeOf(Place))
10040 ,Expression: self.debut <> self.fin
10041 ,Expression: self.poids > 0
10042 ,Expression: self.nbJeton >= 0
10043 ,Expression: self.borne > 0
10044 ,Expression: self.name <> null and self.name <> ''
10045 ,Expression: self.name <> null and self.name <> ''
10046 ,Expression: Process.allInstances()->select(i | i.oclIsTypeOf(WorkDefinition))->forAll(i,j | i<>j implies i.name <> j.name)
10048 ,Expression: self.name <> ''
10049 ,Expression: self.process = self.predecessor.process
10050 ,Expression: self.process = self.successor.process
10051 ,Expression: self.successor <> self.predecessor
10052 ,Expression: self.name <> null and self.name <> ''
10053 ,Expression: self.weight <= self.usedResource.quantity
10054 ,Expression: self.weight >= 0
10055 ,Expression: self.nbJetons >= 0
10056 ,Expression: self.poids > 0
10057 ,Expression: (self.dbt.oclIsTypeOf(Place) and self.fin.oclIsTypeOf(Transition))or (self.dbt.oclIsTypeOf(Transition) and self.fin.oclIsTypeOf(Place))
10058 ,Expression: self.nom <> '' and self.nom <> null
10059 ,Expression: self.name <> '' and self.name <> null
10060 ,Expression: name <> 'PetriNet'
10061 ,Expression: self->select(arc | arc.oclIsTypeOf(Arc))->forAll(i,j|i<>j implies i.name <> j.name)
10062 ,Expression: self->select(pe | pe.oclIsTypeOf(PetriElement))->forAll(i,j|i<>j implies i.name <> j.name)
10063 ,Expression: self.ports->forAll(not connector.connectedports->collect(networkelement)->one(p | p <> self).oclIsKindOf(Host))
10064 ,Expression: user->select(obj |obj.oclIsKindOf(RegisteredUser))->size() > 0 implies (user->select(obj |obj.oclIsKindOf(SysOp))->size() > 0 and user->select(obj | obj.oclIsKindOf(Administrator))->size() > 0)
10065 ,Expression: averageEditedPagesPerUser >= 1
10070 ,Expression: wikiTime >= registrationDateJD
10074 ,Expression: user->select(obj |obj.oclIsKindOf(RegisteredUser))->size() > 0 implies (user->select(obj |obj.oclIsKindOf(SysOp))->size() > 0 and user->select(obj | obj.oclIsKindOf(Administrator))->size() > 0)
10075 ,Expression: averageEditedPagesPerUser >= 1
10080 ,Expression: wikiTime >= registrationDateJD
10085 ,Expression: name.oclIsUndefined() <> true
10086 ,Expression: LiteratureDb.allInstances()->select(db | db.name = self.name)->size() = 1
10087 ,Expression: self.literaturedb.entries->select(e | e.id = self.id)->size() = 1
10092 ,Expression: self.elements->notEmpty()
10093 ,Expression: self.noTokens > 3
10094 ,Expression: self.arguments->size() = self.signature.parameters->size()
10095 ,Expression: Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)
10096 ,Expression: self.age <= self.employer.boss.age
10099 ,Expression: self.age + 10 <= self.employer.boss.age
10101 ,Expression: not (self.boss.oclIsTypeOf(Freelance))
10106 ,Expression: self.calcExpenses() <= self.budget
10112 ,Expression: self.assignment >= 5 and self.assignment <= 30
10113 ,Expression: self.assignment >= 5 and self.assignment <= 40
10114 ,Expression: self.age < 40
10116 ,Expression: self.employeesOfTheMonth->size() <= self.department->size()
10117 ,Expression: self.numberEmployeesOfTheMonth <= self.department->size()
10120 ,Expression: self.age < 40
10121 ,Expression: self.eotmDelta <= 5
10209 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
10251 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
10252 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
10308 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
10309 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
10670 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
10712 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
10713 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
10769 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
10770 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
10907 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
10908 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
10986 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
11028 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
11029 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
11085 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
11086 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
11206 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
11248 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
11249 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
11305 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
11306 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
11350 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
11351 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
11352 ,Expression: self.maxDelay > self.minDelay
11353 ,Expression: if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
11354 ,Expression: if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
11355 ,Expression: if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
11356 ,Expression: self.states->forAll(s1, s2| s1 <> s2 implies s1.name <> s2.name)
11359 ,Expression: self.states->forAll(s1, s2| s1 <> s2 implies s1.name <> s2.name)
11362 ,Expression: worstCaseExecTime > 0
11363 ,Expression: worstCaseExecTime <= implicitDeadline
11365 ,Expression: implicitDeadline <= characteristicPeriod
11366 ,Expression: characteristicPeriod > 0
11367 ,Expression: delay > 0
11368 ,Expression: period > 0
11371 ,Expression: period > 0
11372 ,Expression: availabilityFactor <= 1
11377 ,Expression: end >= start
11378 ,Expression: end <> start
11379 ,Expression: latency > 0
11380 ,Expression: networkBandwidth > 0
11381 ,Expression: switchPorts->size() > 1
11382 ,Expression: destinations->forAll(dest : Module | dest <> source)
11383 ,Expression: BAG > 0
11384 ,Expression: maxFrameSize > 0
11385 ,Expression: Bandwidth > 0
11386 ,Expression: Brick.allInstances()->select(b | b.oclIsTypeOf(DigitalSensor) or b.oclIsTypeOf(DigitalActuator) or b.oclIsTypeOf(AnalogActuator))->size() <= 5
11388 ,Expression: AnalogSensor.allInstances()->size() <= 5
11389 ,Expression: AnalogSensor.allInstances()->size() <= 3
11390 ,Expression: self.time > 0
11391 ,Expression: self.value >= 0 and self.value <= 1023
11392 ,Expression: self.value >= 0 and self.value <= 1023
11393 ,Expression: (Node.allInstances()->select(n | n.parent.oclIsUndefined ()))->size() = 1
11394 ,Expression: self.subnodes->size() > 0 and Transition.allInstances()->exists(t | t.target=self) implies self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() = 1
11395 ,Expression: self.subnodes->size() > 0 implies (self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() <= 1)
11396 ,Expression: (not self.doo.oclIsUndefined()) implies (self.subnodes->size() = 0)
11501 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
11502 ,Expression: self.expression <> self
11503 ,Expression: pos.x >= 0 and pos.y >= 0
11504 ,Expression: View.allInstances()->select(v:View|v.ID=self.ID)->size() = 1
11505 ,Expression: children->size() = (cols * rows)
11506 ,Expression: (options->size() = 0) or (options->includes(default))
11507 ,Expression: (self.default >= 0) and (self.default <= self.max)
11508 ,Expression: max > 0
11509 ,Expression: if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
11510 ,Expression: if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
11610 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
11611 ,Expression: self.expression <> self
11612 ,Expression: not self.name.oclIsUndefined() and self.name <> ''
11613 ,Expression: self.minimum <= self.default and self.default <= self.maximum
11617 ,Expression: self.influences->isUnique(i: Influence | i.feature.name)
11618 ,Expression: if self.operator = MathematicOperator::DIVISION then value <> 0 else true endif
11619 ,Expression: self.parent.oclIsUndefined() or self.parent.subparts->select(b: BodyPart | self.name = b.name)->size() = 1
11620 ,Expression: self.threshold <= self.feature.maximum and self.threshold >= self.feature.minimum
11621 ,Expression: self.features->forAll(f: Feature | self.actions->select(a: Action | a.enable = true).influences.feature->exists(inf_feature: Feature | inf_feature = f))
11622 ,Expression: self.actions->isUnique(a: Action | a.name)
11623 ,Expression: self.features->isUnique(f: Feature | f.name)
11624 ,Expression: self.states->isUnique(s: State | s.name)
11626 ,Expression: self.noTrains >= self.trains->size()
11627 ,Expression: self.noLines >= self.lines->size()
11628 ,Expression: self.trains->size() <= 4
11629 ,Expression: self.carriages > 0 and self.carriages < 3
11630 ,Expression: (self.carriages*6 + 6) >= self.persons->size()
11637 ,Expression: not self->closure(container)->includes(self)
11642 ,Expression: self.table.name = n
11643 ,Expression: not self->closure(super)->includes(self)
11644 ,Expression: Class.allInstances()->forAll(x | x = self or x.name <> self.name)
11706 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
11710 ,Expression: not allOwnedElements()->includes(self)
11711 ,Expression: mustBeOwned() implies owner->notEmpty()
11714 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11715 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
11716 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11717 ,Expression: ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)
11719 ,Expression: redefinedElement->forAll(r | r.leaf = false)
11721 ,Expression: derived = false and derivedUnion = false
11722 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
11723 ,Expression: derivedUnion implies readOnly
11724 ,Expression: aggregation = AggregationKind::composite
11727 ,Expression: derived = false
11730 ,Expression: memberEnd->size() = 2
11732 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
11733 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
11734 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
11735 ,Expression: lower = lowerBound()
11736 ,Expression: upper = upperBound()
11737 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
11740 ,Expression: ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1
11747 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
11748 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
11749 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
11766 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
11770 ,Expression: not allOwnedElements()->includes(self)
11771 ,Expression: mustBeOwned() implies owner->notEmpty()
11774 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11775 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
11776 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11779 ,Expression: redefinedElement->forAll(r | r.leaf = false)
11781 ,Expression: derived = false and derivedUnion = false
11782 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
11783 ,Expression: derivedUnion implies readOnly
11784 ,Expression: aggregation = AggregationKind::composite
11787 ,Expression: derived = false
11790 ,Expression: memberEnd->size() = 2
11792 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
11793 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
11794 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
11795 ,Expression: lower = lowerBound()
11796 ,Expression: upper = upperBound()
11797 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
11807 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
11808 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
11809 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
11820 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
11821 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
11822 ,Expression: self.superType <> self
11823 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
11824 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
11825 ,Expression: self.opposite -> forAll(o | o.opposite = self)
11827 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
11828 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
11834 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
11835 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
11837 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
11838 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
11839 ,Expression: self.editingForm.welcomeForm = false
11840 ,Expression: self.relationship.target = self.editingForm.entity
11841 ,Expression: self.attribute.type = AttributeType::Date
11842 ,Expression: self.attribute.type = AttributeType::Time
11851 ,Expression: self.incomingEdges->size() = 1
11852 ,Expression: self.outgoingEdges->size() >= 2
11854 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
11855 ,Expression: self.incomingEdges->size() >= 2
11856 ,Expression: self.outgoingEdges->size() = 1
11857 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
11858 ,Expression: not (self.terminal and self.initial)
11859 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
11860 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
11861 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
11862 ,Expression: self.incomingEdges->size() = 1
11863 ,Expression: self.outgoingEdges->size() = 1
11864 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
11866 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
11867 ,Expression: self.attribute.type = self.parameterValue.parameter.type
11875 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
11879 ,Expression: not allOwnedElements()->includes(self)
11880 ,Expression: mustBeOwned() implies owner->notEmpty()
11883 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11884 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
11885 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11888 ,Expression: redefinedElement->forAll(r | r.leaf = false)
11890 ,Expression: derived = false and derivedUnion = false
11891 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
11892 ,Expression: derivedUnion implies readOnly
11893 ,Expression: aggregation = AggregationKind::composite
11896 ,Expression: derived = false
11899 ,Expression: memberEnd->size() = 2
11901 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
11902 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
11903 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
11904 ,Expression: lower = lowerBound()
11905 ,Expression: upper = upperBound()
11906 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
11916 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
11917 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
11918 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
11935 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
11939 ,Expression: not allOwnedElements()->includes(self)
11940 ,Expression: mustBeOwned() implies owner->notEmpty()
11943 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11944 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
11945 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
11948 ,Expression: redefinedElement->forAll(r | r.leaf = false)
11950 ,Expression: derived = false and derivedUnion = false
11951 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
11952 ,Expression: derivedUnion implies readOnly
11953 ,Expression: aggregation = AggregationKind::composite
11956 ,Expression: derived = false
11959 ,Expression: memberEnd->size() = 2
11961 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
11962 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
11963 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
11964 ,Expression: lower = lowerBound()
11965 ,Expression: upper = upperBound()
11966 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
11976 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
11977 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
11978 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
11989 ,Expression: maxDelay > minDelay
11996 ,Expression: self.R <= 255 and self.R >= 0
11998 ,Expression: self.G <= 255 and self.G >= 0
12000 ,Expression: self.B <= 255 and self.B >= 0
12008 ,Expression: self.tablas->forAll(t1, t2 : Tabla | t1 <> t2 implies t1.nombre <> t2.nombre)
12009 ,Expression: self.tablas->isUnique(nombre)
12010 ,Expression: self.columnas->forAll(c1, c2 : Columna | c1 <> c2 implies c1.nombre <> c2.nombre)
12011 ,Expression: self.columnas->isUnique(nombre)
12014 ,Expression: self.tablas->forAll(t1, t2 : Tabla | t1 <> t2 implies t1.nombre <> t2.nombre)
12015 ,Expression: self.tablas->isUnique(nombre)
12016 ,Expression: self.columnas->forAll(c1, c2 : Columna | c1 <> c2 implies c1.nombre <> c2.nombre)
12017 ,Expression: self.columnas->isUnique(nombre)
12020 ,Expression: self.states->one(e : StateVertex | e.oclIsKindOf(InitialState))
12021 ,Expression: self.rootNodes()->forAll(n:Node| self.incremental(n))
12022 ,Expression: self.rootNodes()->forAll(n:Node| self.mandatory(n))
12023 ,Expression: self.rootNodes()->forAll(n:Node| self.free(n))
12031 ,Expression: if (self.type.oclIsTypeOf(PreCache)) then true else false endif
12032 ,Expression: not self.parent.oclIsUndefined()
12033 ,Expression: self.actividades->select(nombre<>null)->isUnique(nombre)
12034 ,Expression: self.actividades.espacios->select(nombre<>null)->isUnique(nombre)
12035 ,Expression: self.actividades.espacios.tareas->select(nombre<>null)->isUnique(nombre)
12036 ,Expression: self.actividades.espacios.pruebas->select(nombre<>null)->isUnique(nombre)
12037 ,Expression: self.actividades.espacios.lecciones->select(nombre<>null)->isUnique(nombre)
12038 ,Expression: self.temas.conceptos->select(nombre<>null)->isUnique(nombre)
12043 ,Expression: not title.oclIsUndefined()
12051 ,Expression: self.age >= 18
12052 ,Expression: self <> self.supervisor
12130 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
12172 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
12173 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
12229 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
12230 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
12350 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
12392 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
12393 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
12449 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
12450 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
12570 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
12612 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
12613 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
12669 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
12670 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
12714 ,Expression: self.parentCompositeReference.containment = true
12716 ,Expression: not(self.type.abstract = true)
12852 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
12894 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
12895 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
12951 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
12952 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
13082 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
13124 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
13125 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
13181 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
13182 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
13573 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
13615 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
13616 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
13672 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
13673 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
13815 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
13816 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
13818 ,Expression: base_Dependency.supplier->forAll(oclIsKindOf(uml::Package))
13819 ,Expression: base_Dependency.client->forAll(oclIsKindOf(uml::Package))
13896 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
13938 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
13939 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
13995 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
13996 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
14116 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
14158 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
14159 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
14215 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
14216 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
14260 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
14261 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
14340 ,Expression: memberEnd->forAll(type->notEmpty())
14695 ,Expression: self.types->isUnique(name)
14697 ,Expression: self.classes->isUnique(name)
14699 ,Expression: not self.superTypes->includes(self)
14701 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
14704 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
14708 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
14710 ,Expression: self.fromElement.oclIsTypeOf(Class) or self.fromElement.oclIsTypeOf(Operation)
14712 ,Expression: self.toElements->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.fromElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.fromElement.oclType()) endif)
14718 ,Expression: not self.type.oclIsTypeOf(RVoid)
14730 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
14732 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
14734 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
14736 ,Expression: self.affectedBy->size() > 0
14738 ,Expression: not self.affectedBy->includes(self)
14744 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
14746 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
14750 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
14752 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
14754 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
14758 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
14762 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
14764 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
14765 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
14767 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
14774 ,Expression: self.upperBound > 0 or self.upperBound = - 1
14776 ,Expression: self.lowerBound >= 0
14778 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = - 1
14781 ,Expression: self.types->isUnique(name)
14783 ,Expression: self.classes->isUnique(name)
14785 ,Expression: not self.superTypes->includes(self)
14787 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
14790 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
14794 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
14800 ,Expression: not self.type.oclIsTypeOf(RVoid)
14812 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
14814 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
14816 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
14818 ,Expression: self.affectedBy->size() > 0
14820 ,Expression: not self.affectedBy->includes(self)
14826 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
14828 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
14832 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
14834 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
14836 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
14840 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
14844 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
14846 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
14847 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
14849 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
14856 ,Expression: self.upperBound > 0 or self.upperBound = -1
14858 ,Expression: self.lowerBound >= 0
14860 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = -1
14866 ,Expression: self.villes->forAll(v1, v2:Ville | v1<>v2 implies v1.nom <> v2.nom)
14868 ,Expression: self.batiments->forAll(b1, b2:Batiment | ((b1.oclIsTypeOf(Travail) or b1.oclIsTypeOf(Etude) = false)  and ( b2.oclIsTypeOf(Travail) or b2.oclIsTypeOf(Etude) = false ))  or  ((b1.oclIsTypeOf(Etude) or b1.oclIsTypeOf(Etude) = false)  and (b2.oclIsTypeOf(Etude) or b2.oclIsTypeOf(Travail) = false )))
14869 ,Expression: not self.allOwnedElements()->includes(self)
14941 ,Expression: library.loans->select((book = self))->size() <= copies
14945 ,Expression: self.states->one(e : StateVertex | e.oclIsKindOf(InitialState))
14946 ,Expression: StateMachine.allInstances()->size() = 1
14947 ,Expression: self.container.oclIsUndefined()
14948 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
14949 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
14950 ,Expression: self.states->includes(self.initialState.referencedState)
14951 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
14954 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
14955 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
14956 ,Expression: RequirementsGroup.allInstances() -> forAll(b1,b2 | b1 <> b2 implies b1.id <> b2.id)
14957 ,Expression: Requirement.allInstances() -> exists(b1,b2 | b1 <> b2 and b1.id = b2.id)=false
14959 ,Expression: self.flowInPort <> null
14960 ,Expression: self.flowOutPorts->size() > 1
14961 ,Expression: self.dataOutPorts->size() = 0
14962 ,Expression: self.flowInPort = null
14963 ,Expression: self.flowOutPorts->size() <= 1
14964 ,Expression: ingoingConnections->size()=0
14965 ,Expression: outgoingConnections->size()=0
14966 ,Expression: outgoingConnections->size()>0 and ingoingConnections->size()>0
14967 ,Expression: outgoingConnections->select(targetNode.oclIsTypeOf(Insurance) and (targetNode.oclAsType(Insurance).type= InsuranceType::CarInsurance))->size()>0
14968 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
14969 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
14970 ,Expression: self.superType <> self
14971 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
14972 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
14973 ,Expression: self.opposite -> forAll(o | o.opposite = self)
14975 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
14976 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
14982 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
14983 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
14985 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
14986 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
14987 ,Expression: self.editingForm.welcomeForm = false
14988 ,Expression: self.relationship.target = self.editingForm.entity
14989 ,Expression: self.attribute.type = AttributeType::Date
14990 ,Expression: self.attribute.type = AttributeType::Time
14991 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
14992 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
14993 ,Expression: self.superType <> self
14994 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
14995 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
14996 ,Expression: self.opposite -> forAll(o | o.opposite = self)
14998 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
14999 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15005 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
15006 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
15008 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
15009 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
15010 ,Expression: self.editingForm.welcomeForm = false
15011 ,Expression: self.relationship.target = self.editingForm.entity
15012 ,Expression: self.attribute.type = AttributeType::Date
15013 ,Expression: self.attribute.type = AttributeType::Time
15014 ,Expression: self.isSpecializedBy -> size() = 0 and self.specializes -> size() = 0   implies  self.primaryKey -> size() = 1
15015 ,Expression: self.target <> self.source
15016 ,Expression: self.target <> self.source
15017 ,Expression: self.target <> self.source
15018 ,Expression: self.target <> self.source
15019 ,Expression: StateMachine.allInstances()->size() = 1
15020 ,Expression: self.container.oclIsUndefined()
15021 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
15022 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
15023 ,Expression: self.states->includes(self.initialState.referencedState)
15024 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
15027 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
15028 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
15127 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
15128 ,Expression: self.expression <> self
15129 ,Expression: Entity.allInstances()->forAll(e1 | self<>e1 implies self.name<>e1.name)
15130 ,Expression: not(self.entityAttribute->isEmpty()) and self.superType=null implies (self.entityAttribute->one(a | a.isId=true))
15131 ,Expression: (not(self.entityAttribute->isEmpty()) and self.superType<>null) implies (self.entityAttribute->forAll(a | a.isId=false))
15132 ,Expression: self.superType<>null implies self.superType<>self
15133 ,Expression: self.type=AttributeType::None implies self.enumerationType<>null
15134 ,Expression: self.type<>AttributeType::None implies self.enumerationType=null
15135 ,Expression: self.isId=true implies self.mandatory=true
15136 ,Expression: self.modelForm->notEmpty() implies self.modelForm->one(f | f.isWelcomeForm=true)
15137 ,Expression: self->forAll(self.lowerBound>=0)
15138 ,Expression: self.upperBound<>-1 implies self.upperBound >= self.lowerBound
15139 ,Expression: self->forAll(self.upperBound = -1 or self.upperBound > 0)
15140 ,Expression: self.opposite<>null implies (self.opposite.opposite=self)
15142 ,Expression: self.opposite<>self
15143 ,Expression: Form.allInstances()->forAll(f1 | self<>f1 implies self.name<>f1.name)
15146 ,Expression: self.columns->forAll(col | self.relationshipRef.target.entityAttribute->includes(col.attributeReference))
15147 ,Expression: (self.targetPageElement<>null implies self.targetPage=null) and (self.targetPage<>null implies self.targetPageElement=null)
15148 ,Expression: self.child2<>self.child1
15149 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
15150 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15151 ,Expression: self.superType <> self
15152 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
15153 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
15154 ,Expression: self.opposite -> forAll(o | o.opposite = self)
15156 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
15157 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15163 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
15164 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
15166 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
15167 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
15168 ,Expression: self.editingForm.welcomeForm = false
15169 ,Expression: self.relationship.target = self.editingForm.entity
15170 ,Expression: self.attribute.type = AttributeType::Date
15171 ,Expression: self.attribute.type = AttributeType::Time
15172 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
15173 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15174 ,Expression: self.superType <> self
15175 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
15176 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
15177 ,Expression: self.opposite -> forAll(o | o.opposite = self)
15179 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
15180 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15186 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
15187 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
15189 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
15190 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
15191 ,Expression: self.editingForm.welcomeForm = false
15192 ,Expression: self.relationship.target = self.editingForm.entity
15193 ,Expression: self.attribute.type = AttributeType::Date
15194 ,Expression: self.attribute.type = AttributeType::Time
15195 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
15196 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15197 ,Expression: self.superType <> self
15198 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
15199 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
15200 ,Expression: self.opposite -> forAll(o | o.opposite = self)
15202 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
15203 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
15209 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
15210 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
15212 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
15213 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
15214 ,Expression: self.editingForm.welcomeForm = false
15215 ,Expression: self.relationship.target = self.editingForm.entity
15216 ,Expression: self.attribute.type = AttributeType::Date
15217 ,Expression: self.attribute.type = AttributeType::Time
15218 ,Expression: adresse <> null
15219 ,Expression: adresse = 'rue des facs'
15220 ,Expression: nom = 'Marrec'
15221 ,Expression: prenom = 'Cedric'
15222 ,Expression: telephone = '0606060606'
15223 ,Expression: taille>=0.1
15224 ,Expression: Photo.allInstances()->forAll(p1, p2 | p1 <> p2 implies p1.nom <> p2.nom )
15225 ,Expression: couleurFond = 'White'
15226 ,Expression: couleurPolice = 'Black'
15227 ,Expression: titreSite='SiteWeb'
15228 ,Expression: auteurs= 'Socrate'
15229 ,Expression: taillePolice=14
15230 ,Expression: adresse <> null
15231 ,Expression: adresse = 'rue des facs'
15232 ,Expression: nom = 'Marrec'
15233 ,Expression: prenom = 'Cedric'
15234 ,Expression: telephone = '0606060606'
15235 ,Expression: taille>=0.1
15236 ,Expression: Photo.allInstances()->forAll(p1, p2 | p1 <> p2 implies p1.nom <> p2.nom )
15237 ,Expression: couleurFond = 'White'
15238 ,Expression: couleurPolice = 'Black'
15239 ,Expression: titreSite='SiteWeb'
15240 ,Expression: auteurs= 'Socrate'
15241 ,Expression: taillePolice=14
15242 ,Expression: Symbole.allInstances() -> forAll(s1, s2 | s1 <> s2 implies s1.caractere <> s2.caractere)
15243 ,Expression: Etat.allInstances() -> forAll(s1, s2 | s1 <> s2 implies s1.nom <> s2.nom)
15244 ,Expression: questions->isUnique(id)
15245 ,Expression: questions->select((next = end))->size() > 0
15246 ,Expression: answers->select((correct = true))->size() > 0
15247 ,Expression: answers->isUnique(id)
15248 ,Expression: self.states->collect(s : State | s.uid)->isUnique(n : Integer | n)
15249 ,Expression:  states->select(s : State | s.transitions->select(t: Transition | t.dstId = s)->notEmpty())->size() = 0
15250 ,Expression: transitions->collect(t : Transition | t.nameIn)->isUnique(n : String | n)
15251 ,Expression: rules->notEmpty() or helpers->notEmpty()
15325 ,Expression: memberEnd->forAll(type->notEmpty())
15756 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
15798 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
15799 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
15855 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
15856 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
15900 ,Expression: rules->notEmpty() or helpers->notEmpty()
15901 ,Expression: self.numberOfRows >= 0
15902 ,Expression: self.numberOfColumns >= 0
15906 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
15907 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
15908 ,Expression: self.properties -> forAll(p | p.upperBound = 1 and (p.lowerBound = 0 xor p.lowerBound = 1))
15909 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
15910 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
15911 ,Expression:  self.associationEnds -> forAll(p | p.lowerBound >= 0 and (p.upperBound <> 0 or p.upperBound >= p.lowerBound or p.upperBound = -1))
15912 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
15913 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
15914 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
15918 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
15921 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
15922 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
15923 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
15924 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
15925 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
15926 ,Expression: Category.allInstances()->isUnique(scheme + term)
15928 ,Expression: attributes->isUnique(name)
15929 ,Expression: actions->isUnique(term)
15931 ,Expression: parent->closure(parent)->excludes(self)
15933 ,Expression: attributes.name->excludesAll(parent->closure(parent).attributes.name)
15936 ,Expression: actions->isUnique(term)
15938 ,Expression: depends->closure(depends)->excludes(self)
15939 ,Expression: attributes.name->excludesAll(depends->closure(depends).attributes.name)
15941 ,Expression: Entity.allInstances()->isUnique(id)
15942 ,Expression: attributes->isUnique(name)
15943 ,Expression: mixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
15946 ,Expression: Extension.allInstances()->isUnique(scheme)
15947 ,Expression: kinds->forAll(k | k.scheme = self.scheme)
15948 ,Expression: mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))
15958 ,Expression: actualArgs->size() = declaration.args->size()
15959 ,Expression: args->forAll( a1 , a2 | a1.name = a2.name implies a1 = a2)
15991 ,Expression: true
15992 ,Expression: true
16100 ,Expression: self.name->notEmpty() and self.name.size() > 0
16101 ,Expression: self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
16103 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
16105 ,Expression: self.name <> ''
16106 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
16107 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
16108 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
16161 ,Expression: name <> null
16169 ,Expression: not self->closure(owner)->includes(self)
16174 ,Expression: fixtures->notEmpty() implies tests->notEmpty()
16175 ,Expression: fixtures->forAll(tests->includesAll(self.tests))
16176 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
16264 ,Expression: self.classes->forAll( i, j | i <> j implies i.name <> j.name )
16267 ,Expression: transmitters.remote->excludes(self)
16268 ,Expression: outputs->size() > 0
16269 ,Expression: inputs->size() > 0
16270 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
16279 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
16280 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
16281 ,Expression: self.addsToState = self.parent.importParam
16282 ,Expression: self.addsToState = self.parent.exportParam
16283 ,Expression: self.realizedInState = self.parent.importParam
16284 ,Expression: self.realizedInState = self.parent.exportParam
16285 ,Expression: self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
16286 ,Expression: (states)->exists(s : State | s.initial)
16288 ,Expression: initial implies (((statemachine).states)->select(initial))->size() = 1
16290 ,Expression: let firstLetter : String = (name).substring(1, 1) in firstLetter.toUpperCase() = firstLetter
16292 ,Expression: (name).size() >= 4
16294 ,Expression: let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->isEmpty()
16306 ,Expression: (self.languageTag.size()>0 implies self.uri.size()=0) and (self.uri.size()>0 implies self.languageTag.size()=0)
16329 ,Expression: father.gender <> mother.gender
16333 ,Expression: name.size() >= 5
16334 ,Expression: name <> null
16335 ,Expression: Place.allInstances()->isUnique(name)
16336 ,Expression: tokens >= 0
16337 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
16338 ,Expression: name <> null
16339 ,Expression: Place.allInstances()->isUnique(name)
16340 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
16341 ,Expression: tokens >= 0
16342 ,Expression: Transition.allInstances()->isUnique(name)
16652 ,Expression: not self.allOwnedElements()->includes(self)
16726 ,Expression: self.duration >= 0
16734 ,Expression: self.name.size() > 0
16735 ,Expression: self.url.size() > 0
16736 ,Expression: let s : String = self.url.substring(1, 7) in s = 'http://'
16737 ,Expression: self.arguments->size() = self.signature.parameters->size()
16738 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
16739 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
16740 ,Expression: gate.outlocked implies sec.on
16741 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
16742 ,Expression: gate.outlocked implies sec.on = true
16743 ,Expression: temp < 50 or not on
16744 ,Expression: temp < 30 implies on
16745 ,Expression: house.time < 2 or house.time > 8 or on
16746 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
16747 ,Expression: if pluged then level < 30 implies charging else true endif
16748 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
16749 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
16750 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
16751 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
16752 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
16753 ,Expression: house.time > 22 implies projector.volume < 4
16754 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
16755 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
16756 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
16757 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
16758 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
16759 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
16760 ,Expression: room.temp > 28 implies level > 5
16761 ,Expression: room.temp < 23 implies level = 0
16762 ,Expression: room.house.outtemp > 30 implies level > 5
16763 ,Expression: level > 0 implies level = 9
16764 ,Expression: level <> 0 implies level = 5
16765 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
16766 ,Expression: loaded implies on
16767 ,Expression: loaded implies on = true
16768 ,Expression: battery < 20 implies circle < 30
16769 ,Expression: room.house.time = 7 and loaded implies on
16770 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
16771 ,Expression: room.temp > 20 implies not warming
16772 ,Expression: loaded implies warming = true
16773 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
16774 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
16775 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
16776 ,Expression: self.description.size() > 0
16778 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
16779 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
16780 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
16781 ,Expression: self.ID.attributeOf = self
16782 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
16783 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
16784 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
16785 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
16786 ,Expression: self.description.size() > 0
16787 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
16788 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
16789 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
16800 ,Expression: self.R <= 255 and self.R >= 0
16802 ,Expression: self.G <= 255 and self.G >= 0
16804 ,Expression: self.B <= 255 and self.B >= 0
17368 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
17410 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
17411 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
17467 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
17468 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
17515 ,Expression: width >= 0
17517 ,Expression: height >= 0
17519 ,Expression: width >= 0
17520 ,Expression: height >= 0
17521 ,Expression: header_level >= 0 and header_level <= 6
17522 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
17523 ,Expression: not index_page.oclIsUndefined()
17524 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
17525 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
17527 ,Expression: thickness > 0
17572 ,Expression: true
17573 ,Expression: true
17681 ,Expression: self.name->notEmpty() and self.name.size() > 0
17682 ,Expression: self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
17684 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
17686 ,Expression: self.name <> ''
17687 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
17688 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
17689 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
17742 ,Expression: name <> null
17750 ,Expression: not self->closure(owner)->includes(self)
17755 ,Expression: fixtures->notEmpty() implies tests->notEmpty()
17756 ,Expression: fixtures->forAll(tests->includesAll(self.tests))
17757 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
17824 ,Expression: self.classes->forAll( i, j | i <> j implies i.name <> j.name )
17827 ,Expression: transmitters.remote->excludes(self)
17828 ,Expression: outputs->size() > 0
17829 ,Expression: inputs->size() > 0
17830 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
17839 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
17840 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
17841 ,Expression: self.addsToState = self.parent.importParam
17842 ,Expression: self.addsToState = self.parent.exportParam
17843 ,Expression: self.realizedInState = self.parent.importParam
17844 ,Expression: self.realizedInState = self.parent.exportParam
17845 ,Expression: self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
17846 ,Expression: (states)->exists(s : State | s.initial)
17848 ,Expression: initial implies (((statemachine).states)->select(initial))->size() = 1
17850 ,Expression: let firstLetter : String = (name).substring(1, 1) in firstLetter.toUpperCase() = firstLetter
17852 ,Expression: (name).size() >= 4
17854 ,Expression: let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->isEmpty()
17866 ,Expression: (self.languageTag.size()>0 implies self.uri.size()=0) and (self.uri.size()>0 implies self.languageTag.size()=0)
17889 ,Expression: father.gender <> mother.gender
17893 ,Expression: name.size() >= 5
17894 ,Expression: name <> null
17895 ,Expression: Place.allInstances()->isUnique(name)
17896 ,Expression: tokens >= 0
17897 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
17898 ,Expression: name <> null
17899 ,Expression: Place.allInstances()->isUnique(name)
17900 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
17901 ,Expression: tokens >= 0
17902 ,Expression: Transition.allInstances()->isUnique(name)
18212 ,Expression: not self.allOwnedElements()->includes(self)
18286 ,Expression: self.duration >= 0
18294 ,Expression: self.name.size() > 0
18295 ,Expression: self.url.size() > 0
18296 ,Expression: let s : String = self.url.substring(1, 7) in s = 'http://'
18297 ,Expression: self.arguments->size() = self.signature.parameters->size()
18298 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
18299 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
18300 ,Expression: gate.outlocked implies sec.on
18301 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
18302 ,Expression: gate.outlocked implies sec.on = true
18303 ,Expression: temp < 50 or not on
18304 ,Expression: temp < 30 implies on
18305 ,Expression: house.time < 2 or house.time > 8 or on
18306 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
18307 ,Expression: if pluged then level < 30 implies charging else true endif
18308 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
18309 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
18310 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
18311 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
18312 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
18313 ,Expression: house.time > 22 implies projector.volume < 4
18314 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
18315 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
18316 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
18317 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
18318 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
18319 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
18320 ,Expression: room.temp > 28 implies level > 5
18321 ,Expression: room.temp < 23 implies level = 0
18322 ,Expression: room.house.outtemp > 30 implies level > 5
18323 ,Expression: level > 0 implies level = 9
18324 ,Expression: level <> 0 implies level = 5
18325 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
18326 ,Expression: loaded implies on
18327 ,Expression: loaded implies on = true
18328 ,Expression: battery < 20 implies circle < 30
18329 ,Expression: room.house.time = 7 and loaded implies on
18330 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
18331 ,Expression: room.temp > 20 implies not warming
18332 ,Expression: loaded implies warming = true
18333 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
18334 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
18335 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
18336 ,Expression: self.description.size() > 0
18338 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
18339 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
18340 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
18341 ,Expression: self.ID.attributeOf = self
18342 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
18343 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
18344 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
18345 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
18346 ,Expression: self.description.size() > 0
18347 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
18348 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
18349 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
18360 ,Expression: self.R <= 255 and self.R >= 0
18362 ,Expression: self.G <= 255 and self.G >= 0
18364 ,Expression: self.B <= 255 and self.B >= 0
18928 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
18970 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
18971 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
19027 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
19028 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
19075 ,Expression: width >= 0
19077 ,Expression: height >= 0
19079 ,Expression: width >= 0
19080 ,Expression: height >= 0
19081 ,Expression: header_level >= 0 and header_level <= 6
19082 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
19083 ,Expression: not index_page.oclIsUndefined()
19084 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
19085 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
19087 ,Expression: thickness > 0
19101 ,Expression: name.size() > 0
19102 ,Expression: name <> null
19106 ,Expression: name.size() > 0
19107 ,Expression: name.size() > 0
19108 ,Expression: name <> null
19112 ,Expression: name.size() > 0
19113 ,Expression: name.size() > 0
19114 ,Expression: name <> null
19118 ,Expression: name.size() > 0
19119 ,Expression: self.employees->size() >= self.projects->size()
19120 ,Expression: self.projects->collect(p : Project | p.budget)->sum() <= self.budget
19121 ,Expression: self.departement.employees->includesAll(self.employees)
19122 ,Expression: not(segmentation->excluding(segmentation->last())->exists(e | e.oclIsTypeOf(Return)))
19127 ,Expression: self.hasCRUDActivity->isUnique(CRUDVerb)
19128 ,Expression: self.hasInputRepresentation->isUnique(MediaType)
19129 ,Expression: self.hasOutputRepresentation->isUnique(MediaType)
19130 ,Expression: self.hasProperty->notEmpty() implies self.hasProperty->one(isNamingProperty = true)
19131 ,Expression: (self.isAlgorithmic = true) implies self.hasProperty->isEmpty()
19132 ,Expression: (self.isAlgorithmic = false) implies self.hasProperty->notEmpty()
19134 ,Expression: self.hasResources->isUnique(name)
19135 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))
19136 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))
19137 ,Expression: self.algoModelHasProperty->one(name = 'linklist')
19138 ,Expression: self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()
19139 ,Expression: self.algoControllerHasCRUDActivity->size() = 1
19141 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))
19142 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))
19143 ,Expression: self.hasRMManagerProperty->one(name = 'linklist')
19144 ,Expression: self.rModelHasProperty->one(isNamingProperty = true)
19145 ,Expression: self.rModelHasProperty->one(isPrimaryIdentifier = true)
19146 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))
19147 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))
19148 ,Expression: self.rModelHasProperty->one(name = 'linklist')
19149 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 0)
19150 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 1)
19151 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()
19152 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
19153 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
19154 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
19155 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
19156 ,Expression: self.rControllerHasCRUDActivity->isUnique(crudVerb)
19157 ,Expression: self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()
19164 ,Expression: (self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)
19165 ,Expression: self.hasRDBMSColumns->one(isPrimaryKey = true)
19166 ,Expression: self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})
19167 ,Expression: self.hasResourceModel->isUnique(name)
19168 ,Expression: self.hasResourceModelManager->isUnique(name)
19169 ,Expression: self.hasAlgoResourceModel->isUnique(name)
19170 ,Expression: self.hasResourceController->isUnique(name)
19171 ,Expression: self.hasResourceControllerManager->isUnique(name)
19172 ,Expression: self.hasAlgoResourceController->isUnique(name)
19173 ,Expression: self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})
19174 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name <> rModel2.name implies rModel1.isMappedToRDBMSTable.name <> rModel2.isMappedToRDBMSTable.name)
19175 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))
19176 ,Expression: self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
19177 ,Expression: self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
19178 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
19179 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
19180 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
19181 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies  rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
19182 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
19183 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
19207 ,Expression: self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
19211 ,Expression: self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
19212 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
19213 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
19215 ,Expression: self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
19216 ,Expression: self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
19217 ,Expression: self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
19225 ,Expression: self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
19226 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
19228 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
19229 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
19230 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
19231 ,Expression: self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
19232 ,Expression: self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
19234 ,Expression: self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
19235 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
19236 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
19239 ,Expression: self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
19240 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
19241 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
19247 ,Expression: self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
19250 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
19251 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
19252 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
19253 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
19254 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
19255 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
19279 ,Expression: requiredport -> size() > 1
19280 ,Expression: requiredport -> size() > 0
19281 ,Expression: providedport -> size() > 0
19282 ,Expression: providedport -> size() > 0
19290 ,Expression: self.NAct() > 0
19296 ,Expression: self.NGWD() > 0
19303 ,Expression: self.NSWD() > 0
19310 ,Expression: self.NTWD() > 0
19323 ,Expression: self.NAct() > 0
19325 ,Expression: self.NGIAB() > 0
19327 ,Expression: self.NSIAB() > 0
19329 ,Expression: self.NTIAB() > 0
19332 ,Expression: self.NAct() > 0
19335 ,Expression: self.NEIAB() > 0
19338 ,Expression: self.NAct() > 0
19342 ,Expression: self.NDA() > 0
19344 ,Expression: self.NDA() > 0
19347 ,Expression: self.NAct() > 0
19356 ,Expression: self.NGWDI() > 0
19363 ,Expression: self.NSWDI() > 0
19369 ,Expression: self.NTWDI() > 0
19378 ,Expression: self.NEI() > 0
19383 ,Expression: self.ND() > 0
19385 ,Expression: self.ND() > 0
19424 ,Expression: self.types->isUnique(name)
19426 ,Expression: self.classes->isUnique(name)
19428 ,Expression: not self.superTypes->includes(self)
19430 ,Expression: self.classifier.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
19433 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
19437 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
19443 ,Expression: not self.type.oclIsTypeOf(RVoid)
19455 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
19457 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
19459 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
19461 ,Expression: self.affectedBy->size() > 0
19463 ,Expression: not self.affectedBy->includes(self)
19469 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
19471 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
19475 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
19477 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
19479 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
19483 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
19487 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
19489 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
19490 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
19492 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
19499 ,Expression: self.upperBound > 0 or self.upperBound = -1
19501 ,Expression: self.lowerBound >= 0
19503 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = -1
19513 ,Expression: self.entities->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
19514 ,Expression: self.id.mandatory = true
19516 ,Expression: self <> superType
19518 ,Expression: (self.type = AttributeType::None) <> (self.enumerationType = null)
19519 ,Expression: self.literals->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
19520 ,Expression: self.lowerBound >= 0 and (self.lowerBound <= self.upperBound xor self.upperBound = -1)
19521 ,Expression: self.opposite <> null implies self.opposite.opposite = self
19524 ,Expression: self.editingForm.entity = self.relationship.target
19525 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumerationType <> null
19527 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
19528 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
19529 ,Expression: self.superType <> self
19530 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
19531 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
19532 ,Expression: self.opposite -> forAll(o | o.opposite = self)
19534 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
19535 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
19541 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
19542 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
19544 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
19545 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
19546 ,Expression: self.editingForm.welcomeForm = false
19547 ,Expression: self.relationship.target = self.editingForm.entity
19548 ,Expression: self.attribute.type = AttributeType::Date
19549 ,Expression: self.attribute.type = AttributeType::Time
19550 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
19551 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
19552 ,Expression: self.superType <> self
19553 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
19554 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
19555 ,Expression: self.opposite -> forAll(o | o.opposite = self)
19557 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
19558 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
19564 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
19565 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
19567 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
19568 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
19569 ,Expression: self.editingForm.welcomeForm = false
19570 ,Expression: self.relationship.target = self.editingForm.entity
19571 ,Expression: self.attribute.type = AttributeType::Date
19572 ,Expression: self.attribute.type = AttributeType::Time
19573 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
19574 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
19575 ,Expression: self.superType <> self
19576 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
19577 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
19578 ,Expression: self.opposite -> forAll(o | o.opposite = self)
19580 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
19581 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
19587 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
19588 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
19590 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
19591 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
19592 ,Expression: self.editingForm.welcomeForm = false
19593 ,Expression: self.relationship.target = self.editingForm.entity
19594 ,Expression: self.attribute.type = AttributeType::Date
19595 ,Expression: self.attribute.type = AttributeType::Time
19611 ,Expression: library.loans->select((book = self))->size() <= copies
19614 ,Expression: loans->size() <= 2
19615 ,Expression: loans->isUnique(book)
19619 ,Expression: self.cElements->isUnique(name)
19620 ,Expression: self.oclIsTypeOf(Clafer) implies self.name.size() > 0
19621 ,Expression: cElements-> forAll(c:Clafer, r:Clafer | not c.cSuper.oclIsUndefined() and c.cSuper = r implies r.isAbstract = true)
19622 ,Expression: cElements-> forAll(c:Clafer, r:Clafer | not c.cTarget.oclIsUndefined() and c.cTarget = r implies r.isAbstract = true)
19623 ,Expression: not (cElements->exists(c:Clafer | c.cSuper <> null and c.cTarget <> null))
19624 ,Expression: ClaferModel.allInstances()->size() = 1
19626 ,Expression: let i = self in (i.Min >= 0) and(i.Max >= i.Min or i.Max = -1) and(i.Min = 0 implies i.Max <> 0 or i.Max = 1 or i.Max = -1) and(i.Min = 1 implies i.Max = -1 or i.Max >= 1)
19627 ,Expression: library.loans->select((book = self))->size() <= copies
19630 ,Expression: loans->size() <= 2
19631 ,Expression: loans->isUnique(book)
19642 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
19646 ,Expression: not allOwnedElements()->includes(self)
19647 ,Expression: mustBeOwned() implies owner->notEmpty()
19650 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
19651 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
19652 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
19655 ,Expression: redefinedElement->forAll(r | r.leaf = false)
19657 ,Expression: derived = false and derivedUnion = false
19658 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
19659 ,Expression: derivedUnion implies readOnly
19660 ,Expression: aggregation = AggregationKind::composite
19663 ,Expression: derived = false
19666 ,Expression: memberEnd->size() = 2
19668 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
19669 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
19670 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
19671 ,Expression: lower = lowerBound()
19672 ,Expression: upper = upperBound()
19673 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
19683 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
19684 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
19685 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
19702 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
19706 ,Expression: not allOwnedElements()->includes(self)
19707 ,Expression: mustBeOwned() implies owner->notEmpty()
19710 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
19711 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
19712 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
19715 ,Expression: redefinedElement->forAll(r | r.leaf = false)
19717 ,Expression: derived = false and derivedUnion = false
19718 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
19719 ,Expression: derivedUnion implies readOnly
19720 ,Expression: aggregation = AggregationKind::composite
19723 ,Expression: derived = false
19726 ,Expression: memberEnd->size() = 2
19728 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
19729 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
19730 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
19731 ,Expression: lower = lowerBound()
19732 ,Expression: upper = upperBound()
19733 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
19743 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
19744 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
19745 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
19756 ,Expression: library.loans->select(book = self)->size() <= copies
19775 ,Expression: self.states->one(e : StateVertex | e.oclIsKindOf(InitialState))
19776 ,Expression: self.states->one( e | e.oclIsKindOf(InitialState))
19777 ,Expression: name <> ''
19779 ,Expression: name <> ''
19780 ,Expression: multiplicity > 0
19781 ,Expression: self.petriNet = self.successor.petriNet
19782 ,Expression: self.petriNet = self.predecessor.petriNet
19783 ,Expression: self.predecessor.oclType() <> self.successor.oclType()
19784 ,Expression: marking >= 0
19787 ,Expression: name <> 'Process'
19790 ,Expression: name <> ''
19791 ,Expression: self.process = self.predecessor.process
19792 ,Expression: self.predecessor <> self.successor
19793 ,Expression: self.process = self.successor.process
19794 ,Expression: name <> ''
19795 ,Expression: quantity >= 0
19796 ,Expression: quantity > 0
19797 ,Expression: name <> ''
19798 ,Expression: name <> ''
19800 ,Expression: name <> ''
19801 ,Expression: multiplicity > 0
19802 ,Expression: self.petriNet = self.successor.petriNet
19803 ,Expression: self.petriNet = self.predecessor.petriNet
19804 ,Expression: self.predecessor.oclType() <> self.successor.oclType()
19805 ,Expression: marking >= 0
19806 ,Expression: name <> 'Process'
19809 ,Expression: name <> ''
19810 ,Expression: self.process = self.predecessor.process
19811 ,Expression: self.predecessor <> self.successor
19812 ,Expression: self.process = self.successor.process
19813 ,Expression: name <> ''
19815 ,Expression: name <> ''
19816 ,Expression: multiplicity > 0
19817 ,Expression: self.petriNet = self.successor.petriNet
19818 ,Expression: self.petriNet = self.predecessor.petriNet
19819 ,Expression: self.predecessor.oclType() <> self.successor.oclType()
19820 ,Expression: marking >= 0
19822 ,Expression: self.process = self.predecessor.process
19823 ,Expression: self.process = self.successor.process
19825 ,Expression: self.process = self.predecessor.process
19826 ,Expression: self.process = self.successor.process
19827 ,Expression: name <> ''
19829 ,Expression: name <> ''
19830 ,Expression: multiplicity > 0
19831 ,Expression: self.petriNet = self.successor.petriNet
19832 ,Expression: self.petriNet = self.predecessor.petriNet
19833 ,Expression: self.predecessor.oclType() <> self.successor.oclType()
19834 ,Expression: marking >= 0
19835 ,Expression:     lines->forAll(l1, l2 |     l1 <> l2 implies l1.item <> l2.item    )
19836 ,Expression:     not name.oclIsUndefined()     and name <> ''
19837 ,Expression:     not price.oclIsUndefined() and price > 0
19838 ,Expression: ejercicios->isUnique(name)
19839 ,Expression: ejercicios->isUnique(order)
19840 ,Expression:     not name.oclIsUndefined()     and name <> ''
19841 ,Expression:     not enunciado.oclIsUndefined()    and enunciado <> ''
19842 ,Expression: correctas->size()=1
19843 ,Expression: correctas->size()>0
19844 ,Expression: correctas->size()=1
19845 ,Expression: welcomePage.previousPage = null
19846 ,Expression: title.at(1) = title.at(1).toUpperCase()
19847 ,Expression: allPreviousPages->excludes(self) and allNextPages->excludes(self)
19850 ,Expression: PageElement.allInstances()->select(element | element.elementId = self.elementId)->excluding(self)->isEmpty()
19851 ,Expression: Heading.allInstances() -> select(heading | heading.level < 1) -> isEmpty()
19852 ,Expression: concernsElements->forAll(e | e.page <> item.field.page and not item.field.page.allPreviousPages->includes(e.page))
19854 ,Expression: Tuple {message : String = 'Cannot assign empty name to sort',status : Boolean = name <> ''}.status
19855 ,Expression: Tuple {message : String = 'The super sort of sort ' + name + 'cannot be null',status : Boolean = superSort <> null}.status
19858 ,Expression: name <> ''
19859 ,Expression: Tuple {message : String = 'The return type for operation ' + name + ' was not set.',status : Boolean = returnType <> null}.status
19863 ,Expression: Tuple {message : String = 'The parameter names are not unique for declared strategy: ' + name,status : Boolean = formalParams<> null implies formalParams->isUnique(name)}.status
19864 ,Expression: Tuple {message : String = 'Formal params for strategy ' + name + ' are null',status : Boolean = formalParams <> null}.status
19964 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
19965 ,Expression: self.expression <> self
19967 ,Expression: self.duration >= 0
19969 ,Expression: self.Ventanas->isUnique(Nombre)
19970 ,Expression: self.Marcos->size() <= 2
19972 ,Expression: self.Columnas->isUnique(Nombre)
19973 ,Expression: self.Columnas->select(v | v.ClavePrimaria=true)->size() = 1
19974 ,Expression: self.Tablas->isUnique(Nombre)
19975 ,Expression: self.Relaciones->isUnique(Nombre)
19976 ,Expression: self.Tipo.oclIsUndefined() = false
19977 ,Expression: self.ClavePrimaria = true implies self.Unico = true and self.VNN = true
19978 ,Expression: self.Origen.Tipo = self.Destino.Tipo
19979 ,Expression: self.Destino.ClavePrimaria = true
19980 ,Expression: self.leaveDays > 0 
19981 ,Expression: self.name->size() <> 0 
19982 ,Expression: self.dates->size() <> 0 
19983 ,Expression: self.name->size() <> 0 
19984 ,Expression: self.employees->size() <> 0 
19985 ,Expression: self.standin.name <>  self.name 
19986 ,Expression: self.responsible->size() <> 0 
19987 ,Expression: Category.allInstances()->isUnique(scheme + term)
19989 ,Expression: attributes->isUnique(name)
19990 ,Expression: actions->isUnique(term)
19992 ,Expression: parent->closure(parent)->excludes(self)
19994 ,Expression: attributes.name->excludesAll(parent->closure(parent).attributes.name)
19997 ,Expression: actions->isUnique(term)
19999 ,Expression: depends->closure(depends)->excludes(self)
20000 ,Expression: attributes.name->excludesAll(depends->closure(depends).attributes.name)
20002 ,Expression: Entity.allInstances()->isUnique(id)
20003 ,Expression: attributes->isUnique(name)
20004 ,Expression: mixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
20007 ,Expression: Extension.allInstances()->isUnique(scheme)
20008 ,Expression: kinds->forAll(k | k.scheme = self.scheme)
20009 ,Expression: mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))
20019 ,Expression: mixins->forAll(attributes->isEmpty() and actions->isEmpty() and depends->isEmpty())
20020 ,Expression: Category.allInstances()->isUnique(scheme + term)
20022 ,Expression: attributes->isUnique(name)
20023 ,Expression: actions->isUnique(term)
20025 ,Expression: parent->closure(parent)->excludes(self)
20027 ,Expression: attributes.name->excludesAll(parent->closure(parent).attributes.name)
20030 ,Expression: actions->isUnique(term)
20032 ,Expression: depends->closure(depends)->excludes(self)
20033 ,Expression: attributes.name->excludesAll(depends->closure(depends).attributes.name)
20035 ,Expression: Entity.allInstances()->isUnique(id)
20036 ,Expression: attributes->isUnique(name)
20037 ,Expression: mixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
20040 ,Expression: Extension.allInstances()->isUnique(scheme)
20041 ,Expression: kinds->forAll(k | k.scheme = self.scheme)
20042 ,Expression: mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))
20052 ,Expression: Category.allInstances()->isUnique(scheme + term)
20054 ,Expression: attributes->isUnique(name)
20056 ,Expression: actions->isUnique(term)
20057 ,Expression: constraints->isUnique(name)
20059 ,Expression: owningFSM.attribute.type=self.sliteral.eEnum
20061 ,Expression: parent->closure(parent)->excludes(self)
20063 ,Expression: attributes.name->excludesAll(parent->closure(parent).attributes.name)
20067 ,Expression: depends->closure(depends)->excludes(self)
20068 ,Expression: attributes.name->excludesAll(depends->closure(depends).attributes.name)
20070 ,Expression: Entity.allInstances()->isUnique(id)
20071 ,Expression: attributes->isUnique(name)
20072 ,Expression: parts.mixin->forAll(m |m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
20076 ,Expression: Extension.allInstances()->isUnique(scheme)
20077 ,Expression: kinds->forAll(k | k.scheme = self.scheme)
20078 ,Expression: mixins->forAll(m | m.scheme.substring(1, scheme.size() - 1) = scheme.substring(1,scheme.size() - 1))
20088 ,Expression: mixins->forAll(attributes->isEmpty() and actions->isEmpty() and depends->isEmpty())
20089 ,Expression: microserviceType.versions->select(v:Version | v = version)->notEmpty()
20090 ,Expression: calledMicroservice.restOperations->select(rop:RESTOperation | rop=calledOperation)->notEmpty()
20091 ,Expression: callingMicroservice.restOperations->select(rop:RESTOperation | rop=callingOperation)->notEmpty()
20092 ,Expression: callingMicroservice.versions->select(ver:Version|ver=callingVersion)->notEmpty()
20093 ,Expression: endpoint <> null and restOperation <> null
20094 ,Expression: endpoint.restOperations->select(rop:RESTOperation | rop = restOperation)->notEmpty()
20123 ,Expression: name = rightcomp.name
20124 ,Expression: incoming->isEmpty()
20125 ,Expression: outgoing->isEmpty()
20126 ,Expression: outgoing.speed->sum() <= incoming.speed->sum()
20127 ,Expression: speed <= 4
20128 ,Expression: speed >= 4
20129 ,Expression: backup = null or backup.services->includesAll(services)
20130 ,Expression: designSpeed <= server.speed->sum()
20132 ,Expression: backup <> self
20134 ,Expression: speed > 0 and speed <= 5
20135 ,Expression: backup = null or backup.services->includesAll(services)
20136 ,Expression: designSpeed <= server.speed->sum()
20138 ,Expression: backup <> self
20140 ,Expression: speed > 0 and speed <= 5
20141 ,Expression: self.author.size() <= 32
20144 ,Expression: self.author.size() <= 32
20145 ,Expression: self.author.size() <= 32
20147 ,Expression: self.author.size() <= 32
20172 ,Expression: self.valueFormat.size() <= 80
20174 ,Expression: self.contentVersion.size() <= 9
20175 ,Expression: self.contentRevision.size() <= 3
20177 ,Expression: self.revision.size() <= 3
20183 ,Expression: self.revision.size() <= 3
20186 ,Expression: self.valueFormat.size() <= 80
20187 ,Expression: self.valueFormat.size() <= 80
20193 ,Expression: self.revision.size() <= 3
20194 ,Expression: self.value.size() <= 255
20197 ,Expression: self.languageCode.size() >= 2
20198 ,Expression: self.languageCode.size() <= 3
20200 ,Expression: self.revision.size() <= 3
20205 ,Expression: self.languageCode.size() >= 2
20206 ,Expression: self.languageCode.size() <= 3
20209 ,Expression: self.fileName.size() <= 128
20211 ,Expression: self.dirName.size() <= 128
20214 ,Expression: self.languageCode.size() >= 2
20215 ,Expression: self.languageCode.size() <= 3
20217 ,Expression: self.code.size() <= 18
20218 ,Expression: self.revision.size() <= 3
20219 ,Expression: self.valueFormat.size() <= 80
20220 ,Expression: self.currency.size() <= 3
20222 ,Expression: self.valueFormat.size() <= 80
20223 ,Expression: self.valueFormat.size() <= 80
20225 ,Expression: self.codedName.size() <= 35
20227 ,Expression: self.codedName.size() <= 35
20228 ,Expression: self.value.size() <= 255
20231 ,Expression: self.languageCode.size() >= 2
20232 ,Expression: self.languageCode.size() <= 3
20235 ,Expression: self.languageCode.size() >= 2
20236 ,Expression: self.languageCode.size() <= 3
20238 ,Expression: self.code.size() <= 18
20239 ,Expression: self.valueFormat.size() <= 80
20240 ,Expression: self.valueFormat.size() <= 80
20241 ,Expression: self.valueFormat.size() <= 80
20242 ,Expression: self.valueFormat.size() <= 80
20244 ,Expression: self.value.size() <= 255
20247 ,Expression: self.languageCode.size() >= 2
20248 ,Expression: self.languageCode.size() <= 3
20251 ,Expression: self.revision.size() <= 3
20254 ,Expression: self.recommendedPresentationFormat.size() <= 80
20255 ,Expression: self.valueFormat.size() <= 80
20256 ,Expression: self.valueFormat.size() <= 80
20257 ,Expression: self.valueFormat.size() <= 80
20258 ,Expression: self.currency.size() <= 3
20260 ,Expression: self.valueFormat.size() <= 80
20261 ,Expression: self.valueFormat.size() <= 80
20263 ,Expression: self.language.size() >= 2
20264 ,Expression: self.language.size() <= 3
20266 ,Expression: self.value.size() <= 30
20269 ,Expression: self.languageCode.size() >= 2
20270 ,Expression: self.languageCode.size() <= 3
20272 ,Expression: self.valueCode.size() <= 35
20273 ,Expression: self.valueFormat.size() <= 80
20275 ,Expression: self.revision.size() <= 3
20278 ,Expression: self.value.size() <= 255
20281 ,Expression: self.languageCode.size() >= 2
20282 ,Expression: self.languageCode.size() <= 3
20283 ,Expression: self.valueFormat.size() <= 80
20284 ,Expression: self.valueFormat.size() <= 80
20285 ,Expression: self.translationRevision.size() <= 3
20286 ,Expression: self.valueFormat.size() <= 80
20172 ,Expression: self.valueFormat.size() <= 80
20174 ,Expression: self.contentVersion.size() <= 9
20175 ,Expression: self.contentRevision.size() <= 3
20177 ,Expression: self.revision.size() <= 3
20183 ,Expression: self.revision.size() <= 3
20186 ,Expression: self.valueFormat.size() <= 80
20187 ,Expression: self.valueFormat.size() <= 80
20193 ,Expression: self.revision.size() <= 3
20194 ,Expression: self.value.size() <= 255
20197 ,Expression: self.languageCode.size() >= 2
20198 ,Expression: self.languageCode.size() <= 3
20200 ,Expression: self.revision.size() <= 3
20205 ,Expression: self.languageCode.size() >= 2
20206 ,Expression: self.languageCode.size() <= 3
20209 ,Expression: self.fileName.size() <= 128
20211 ,Expression: self.dirName.size() <= 128
20214 ,Expression: self.languageCode.size() >= 2
20215 ,Expression: self.languageCode.size() <= 3
20217 ,Expression: self.code.size() <= 18
20218 ,Expression: self.revision.size() <= 3
20219 ,Expression: self.valueFormat.size() <= 80
20220 ,Expression: self.currency.size() <= 3
20222 ,Expression: self.valueFormat.size() <= 80
20223 ,Expression: self.valueFormat.size() <= 80
20225 ,Expression: self.codedName.size() <= 35
20227 ,Expression: self.codedName.size() <= 35
20228 ,Expression: self.value.size() <= 255
20231 ,Expression: self.languageCode.size() >= 2
20232 ,Expression: self.languageCode.size() <= 3
20235 ,Expression: self.languageCode.size() >= 2
20236 ,Expression: self.languageCode.size() <= 3
20238 ,Expression: self.code.size() <= 18
20239 ,Expression: self.valueFormat.size() <= 80
20240 ,Expression: self.valueFormat.size() <= 80
20241 ,Expression: self.valueFormat.size() <= 80
20242 ,Expression: self.valueFormat.size() <= 80
20244 ,Expression: self.value.size() <= 255
20247 ,Expression: self.languageCode.size() >= 2
20248 ,Expression: self.languageCode.size() <= 3
20251 ,Expression: self.revision.size() <= 3
20254 ,Expression: self.recommendedPresentationFormat.size() <= 80
20255 ,Expression: self.valueFormat.size() <= 80
20256 ,Expression: self.valueFormat.size() <= 80
20257 ,Expression: self.valueFormat.size() <= 80
20258 ,Expression: self.currency.size() <= 3
20260 ,Expression: self.valueFormat.size() <= 80
20261 ,Expression: self.valueFormat.size() <= 80
20263 ,Expression: self.language.size() >= 2
20264 ,Expression: self.language.size() <= 3
20266 ,Expression: self.value.size() <= 30
20269 ,Expression: self.languageCode.size() >= 2
20270 ,Expression: self.languageCode.size() <= 3
20272 ,Expression: self.valueCode.size() <= 35
20273 ,Expression: self.valueFormat.size() <= 80
20275 ,Expression: self.revision.size() <= 3
20278 ,Expression: self.value.size() <= 255
20281 ,Expression: self.languageCode.size() >= 2
20282 ,Expression: self.languageCode.size() <= 3
20283 ,Expression: self.valueFormat.size() <= 80
20284 ,Expression: self.valueFormat.size() <= 80
20285 ,Expression: self.translationRevision.size() <= 3
20286 ,Expression: self.valueFormat.size() <= 80
20336 ,Expression: self.valueFormat.size() <= 80
20338 ,Expression: self.contentVersion.size() <= 9
20339 ,Expression: self.contentRevision.size() <= 3
20341 ,Expression: self.revision.size() <= 3
20347 ,Expression: self.revision.size() <= 3
20350 ,Expression: self.valueFormat.size() <= 80
20351 ,Expression: self.valueFormat.size() <= 80
20357 ,Expression: self.revision.size() <= 3
20358 ,Expression: self.value.size() <= 255
20361 ,Expression: self.languageCode.size() >= 2
20362 ,Expression: self.languageCode.size() <= 3
20364 ,Expression: self.revision.size() <= 3
20369 ,Expression: self.languageCode.size() >= 2
20370 ,Expression: self.languageCode.size() <= 3
20373 ,Expression: self.fileName.size() <= 128
20375 ,Expression: self.dirName.size() <= 128
20378 ,Expression: self.languageCode.size() >= 2
20379 ,Expression: self.languageCode.size() <= 3
20381 ,Expression: self.code.size() <= 18
20382 ,Expression: self.revision.size() <= 3
20383 ,Expression: self.valueFormat.size() <= 80
20384 ,Expression: self.currency.size() <= 3
20386 ,Expression: self.valueFormat.size() <= 80
20387 ,Expression: self.valueFormat.size() <= 80
20389 ,Expression: self.codedName.size() <= 35
20391 ,Expression: self.codedName.size() <= 35
20392 ,Expression: self.value.size() <= 255
20395 ,Expression: self.languageCode.size() >= 2
20396 ,Expression: self.languageCode.size() <= 3
20399 ,Expression: self.languageCode.size() >= 2
20400 ,Expression: self.languageCode.size() <= 3
20402 ,Expression: self.code.size() <= 18
20403 ,Expression: self.valueFormat.size() <= 80
20404 ,Expression: self.valueFormat.size() <= 80
20405 ,Expression: self.valueFormat.size() <= 80
20406 ,Expression: self.valueFormat.size() <= 80
20408 ,Expression: self.value.size() <= 255
20411 ,Expression: self.languageCode.size() >= 2
20412 ,Expression: self.languageCode.size() <= 3
20415 ,Expression: self.revision.size() <= 3
20418 ,Expression: self.recommendedPresentationFormat.size() <= 80
20419 ,Expression: self.valueFormat.size() <= 80
20420 ,Expression: self.valueFormat.size() <= 80
20421 ,Expression: self.valueFormat.size() <= 80
20422 ,Expression: self.currency.size() <= 3
20424 ,Expression: self.valueFormat.size() <= 80
20425 ,Expression: self.valueFormat.size() <= 80
20427 ,Expression: self.language.size() >= 2
20428 ,Expression: self.language.size() <= 3
20430 ,Expression: self.value.size() <= 30
20433 ,Expression: self.languageCode.size() >= 2
20434 ,Expression: self.languageCode.size() <= 3
20436 ,Expression: self.valueCode.size() <= 35
20437 ,Expression: self.valueFormat.size() <= 80
20439 ,Expression: self.revision.size() <= 3
20442 ,Expression: self.value.size() <= 255
20445 ,Expression: self.languageCode.size() >= 2
20446 ,Expression: self.languageCode.size() <= 3
20447 ,Expression: self.valueFormat.size() <= 80
20448 ,Expression: self.valueFormat.size() <= 80
20449 ,Expression: self.translationRevision.size() <= 3
20450 ,Expression: self.valueFormat.size() <= 80
20575 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
20576 ,Expression: self.expression <> self
20577 ,Expression: transmitters.remote->excludes(self)
20578 ,Expression: outputs->size() > 0
20579 ,Expression: inputs->size() > 0
20580 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
20581 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies (a.resourceContainer_AllocationContext=b.resourceContainer_AllocationContext and a.assemblyContext_AllocationContext <> b.assemblyContext_AllocationContext))
20582 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext | not hwNodes->exists(h|a.resourceContainer_AllocationContext=h))
20583 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext | a.resourceContainer_AllocationContext<>fromHwNode and a.resourceContainer_AllocationContext=toHwNode)
20585 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies a.resourceContainer_AllocationContext<>b.resourceContainer_AllocationContext)
20586 ,Expression: assemblyContexts->forAll(a : composition::AssemblyContext, b : composition::AssemblyContext | a<> b implies (a.encapsulatedComponent__AssemblyContext = b.encapsulatedComponent__AssemblyContext))
20587 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies (a.assemblyContext_AllocationContext=b.assemblyContext_AllocationContext and a.resourceContainer_AllocationContext<>b.resourceContainer_AllocationContext))
20594 ,Expression: self.consistsOf.transition-> forAll(m:ManufacturingSystemElement| m.transition <> self.start)
20595 ,Expression: self.responsible->size() = 1
20598 ,Expression: let ms:Integer = Step.allInstances()->select(responsible=self)->size() in ms>0 and ms<4
20599 ,Expression: ManufacturingSystem.allInstances()->collect(start)->includes(self) implies ManufacturingSystemElement.allInstances() -> collect(transition) -> excludes(self)
20602 ,Expression: width >= 0
20604 ,Expression: height >= 0
20606 ,Expression: width >= 0
20607 ,Expression: height >= 0
20608 ,Expression: header_level >= 0 and header_level <= 6
20609 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
20610 ,Expression: not index_page.oclIsUndefined()
20611 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
20612 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
20614 ,Expression: thickness > 0
20615 ,Expression: StateMachine.allInstances()->size() = 1
20616 ,Expression: self.container.oclIsUndefined()
20617 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
20618 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
20619 ,Expression: self.states->includes(self.initialState.referencedState)
20620 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
20623 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
20624 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
20625 ,Expression: name = rightcomp.name
20626 ,Expression: name = rightcomp.name
20627 ,Expression: incoming->isEmpty()
20628 ,Expression: outgoing->isEmpty()
20629 ,Expression: outgoing.speed->sum() <= incoming.speed->sum()
20630 ,Expression: speed <= 4
20631 ,Expression: speed >= 4
20632 ,Expression: backup = null or backup.services->includesAll(services)
20633 ,Expression: designSpeed <= server.speed->sum()
20635 ,Expression: backup <> self
20637 ,Expression: speed > 0 and speed <= 5
20638 ,Expression: name = rightcomp.name
20639 ,Expression: incoming->isEmpty()
20640 ,Expression: outgoing->isEmpty()
20641 ,Expression: outgoing.speed->sum() <= incoming.speed->sum()
20642 ,Expression: speed <= 4
20643 ,Expression: speed >= 4
20644 ,Expression: backup = null or backup.services->includesAll(services)
20645 ,Expression: designSpeed <= server.speed->sum()
20647 ,Expression: backup <> self
20649 ,Expression: speed > 0 and speed <= 5
20651 ,Expression: name <> null
20653 ,Expression: name <> null
20655 ,Expression: tokens >= 0
20656 ,Expression: Transition.allInstances()->isUnique(name)
20657 ,Expression: name <> null
20658 ,Expression: Place.allInstances()->isUnique(name)
20659 ,Expression: tokens >= 0
20660 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
20661 ,Expression: name <> null
20662 ,Expression: Place.allInstances()->isUnique(name)
20663 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
20664 ,Expression: self.superclass <> self
20665 ,Expression: Class.allInstances() -> select(c | c.name = self.name) -> excluding(self) ->isEmpty()
20666 ,Expression: (self.properties -> select(p : Property| p.isID = true))-> forAll(p | p.lowerBound = 1 and p.upperBound = 1)
20667 ,Expression: (self.lowerBound = 0 or self.lowerBound = 1) and self.upperBound = 1
20668 ,Expression: (self.lowerBound <> null) and (self.upperBound <> null) and (self.type <> null) and (self.name <> null)
20669 ,Expression: NamedType.allInstances() -> select(nt | nt.name = self.name) -> excluding(self) -> isEmpty()
20670 ,Expression: (self.classes -> select(c : Class| c.superclass=null))-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 1)
20671 ,Expression: (self.classes -> select(c : Class| c.superclass<>null))-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 0)
20672 ,Expression: (self.lowerBound <= self.upperBound) or self.upperBound = -1
20673 ,Expression: self.lowerBound >= 0 and (self.upperBound >= 1 or self.upperBound = -1)
20674 ,Expression: self.navigableassociationend.type <> self.nonnavigableassociationend.type
20675 ,Expression: self.literal -> forAll(l1, l2 | l1 <> l2 implies l1.name <> l2.name and l1.value <> l2.value)
20676 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
20677 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
20678 ,Expression: self.properties -> forAll(p | p.upperBound = 1 and (p.lowerBound = 0 xor p.lowerBound = 1))
20679 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
20680 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
20681 ,Expression:  self.associationEnds -> forAll(p | p.lowerBound >= 0 and (p.upperBound <> 0 or p.upperBound >= p.lowerBound or p.upperBound = -1))
20682 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
20683 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
20684 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
20688 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
20691 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
20692 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
20693 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
20694 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
20695 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
20696 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
20697 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
20698 ,Expression: self.properties -> forAll(p | p.upperBound = 1 and (p.lowerBound = 0 xor p.lowerBound = 1))
20699 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
20700 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
20701 ,Expression:  self.associationEnds -> forAll(p | p.lowerBound >= 0 and (p.upperBound <> 0 or p.upperBound >= p.lowerBound or p.upperBound = -1))
20702 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
20703 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
20704 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
20708 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
20711 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
20712 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
20713 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
20714 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
20715 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
20716 ,Expression: self.hasCRUDActivity->isUnique(CRUDVerb)
20717 ,Expression: self.hasInputRepresentation->isUnique(MediaType)
20718 ,Expression: self.hasOutputRepresentation->isUnique(MediaType)
20719 ,Expression: self.hasProperty->notEmpty() implies self.hasProperty->one(isNamingProperty = true)
20720 ,Expression: (self.isAlgorithmic = true) implies self.hasProperty->isEmpty()
20721 ,Expression: (self.isAlgorithmic = false) implies self.hasProperty->notEmpty()
20723 ,Expression: self.hasResources->isUnique(name)
20724 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))
20725 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))
20726 ,Expression: self.algoModelHasProperty->one(name = 'linklist')
20727 ,Expression: self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()
20728 ,Expression: self.algoControllerHasCRUDActivity->size() = 1
20730 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))
20731 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))
20732 ,Expression: self.hasRMManagerProperty->one(name = 'linklist')
20733 ,Expression: self.rModelHasProperty->one(isNamingProperty = true)
20734 ,Expression: self.rModelHasProperty->one(isPrimaryIdentifier = true)
20735 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))
20736 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))
20737 ,Expression: self.rModelHasProperty->one(name = 'linklist')
20738 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 0)
20739 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 1)
20740 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()
20741 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
20742 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
20743 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
20744 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
20745 ,Expression: self.rControllerHasCRUDActivity->isUnique(crudVerb)
20746 ,Expression: self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()
20753 ,Expression: (self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)
20754 ,Expression: self.hasRDBMSColumns->one(isPrimaryKey = true)
20755 ,Expression: self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})
20756 ,Expression: self.hasResourceModel->isUnique(name)
20757 ,Expression: self.hasResourceModelManager->isUnique(name)
20758 ,Expression: self.hasAlgoResourceModel->isUnique(name)
20759 ,Expression: self.hasResourceController->isUnique(name)
20760 ,Expression: self.hasResourceControllerManager->isUnique(name)
20761 ,Expression: self.hasAlgoResourceController->isUnique(name)
20762 ,Expression: self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})
20763 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name <> rModel2.name implies rModel1.isMappedToRDBMSTable.name <> rModel2.isMappedToRDBMSTable.name)
20764 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))
20765 ,Expression: self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
20766 ,Expression: self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
20767 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
20768 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
20769 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
20770 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies  rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
20771 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
20772 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
20796 ,Expression: self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
20800 ,Expression: self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
20801 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
20802 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
20804 ,Expression: self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
20805 ,Expression: self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
20806 ,Expression: self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
20814 ,Expression: self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
20815 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
20817 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
20818 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
20819 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
20820 ,Expression: self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
20821 ,Expression: self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
20823 ,Expression: self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
20824 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
20825 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
20828 ,Expression: self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
20829 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
20830 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
20836 ,Expression: self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
20839 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
20840 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
20841 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
20842 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
20843 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
20844 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
20868 ,Expression: self.hasCRUDActivity->isUnique(CRUDVerb)
20869 ,Expression: self.hasInputRepresentation->isUnique(MediaType)
20870 ,Expression: self.hasOutputRepresentation->isUnique(MediaType)
20871 ,Expression: self.hasProperty->notEmpty() implies self.hasProperty->one(isNamingProperty = true)
20872 ,Expression: (self.isAlgorithmic = true) implies self.hasProperty->isEmpty()
20873 ,Expression: (self.isAlgorithmic = false) implies self.hasProperty->notEmpty()
20875 ,Expression: self.hasResources->isUnique(name)
20876 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))
20877 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))
20878 ,Expression: self.algoModelHasProperty->one(name = 'linklist')
20879 ,Expression: self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()
20880 ,Expression: self.algoControllerHasCRUDActivity->size() = 1
20882 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))
20883 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))
20884 ,Expression: self.hasRMManagerProperty->one(name = 'linklist')
20885 ,Expression: self.rModelHasProperty->one(isNamingProperty = true)
20886 ,Expression: self.rModelHasProperty->one(isPrimaryIdentifier = true)
20887 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))
20888 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))
20889 ,Expression: self.rModelHasProperty->one(name = 'linklist')
20890 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 0)
20891 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 1)
20892 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()
20893 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
20894 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
20895 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
20896 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
20897 ,Expression: self.rControllerHasCRUDActivity->isUnique(crudVerb)
20898 ,Expression: self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()
20905 ,Expression: (self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)
20906 ,Expression: self.hasRDBMSColumns->one(isPrimaryKey = true)
20907 ,Expression: self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})
20908 ,Expression: self.hasResourceModel->isUnique(name)
20909 ,Expression: self.hasResourceModelManager->isUnique(name)
20910 ,Expression: self.hasAlgoResourceModel->isUnique(name)
20911 ,Expression: self.hasResourceController->isUnique(name)
20912 ,Expression: self.hasResourceControllerManager->isUnique(name)
20913 ,Expression: self.hasAlgoResourceController->isUnique(name)
20914 ,Expression: self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})
20915 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name <> rModel2.name implies rModel1.isMappedToRDBMSTable.name <> rModel2.isMappedToRDBMSTable.name)
20916 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))
20917 ,Expression: self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
20918 ,Expression: self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
20919 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
20920 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
20921 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
20922 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies  rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
20923 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
20924 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
20948 ,Expression: self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
20952 ,Expression: self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
20953 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
20954 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
20956 ,Expression: self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
20957 ,Expression: self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
20958 ,Expression: self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
20966 ,Expression: self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
20967 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
20969 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
20970 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
20971 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
20972 ,Expression: self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
20973 ,Expression: self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
20975 ,Expression: self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
20976 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
20977 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
20980 ,Expression: self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
20981 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
20982 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
20988 ,Expression: self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
20991 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
20992 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
20993 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
20994 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
20995 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
20996 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
21020 ,Expression: StateMachine.allInstances()->size() = 1
21021 ,Expression: self.container.oclIsUndefined()
21022 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
21023 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
21024 ,Expression: self.states->includes(self.initialState.referencedState)
21025 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
21028 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
21029 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
21030 ,Expression: self.requirementOwnedBy.personOwnsCategory->forAll(c | not c.requirement->includes(self))
21031 ,Expression: self.dependencySource->select(oclIsTypeOf(Requires))->forAll(requires: Dependency | findLeafNodes(requires.oclAsType(Requires).argument)->forAll(ra: RequirementArgument | ra.requirement <> self))
21033 ,Expression: Category.allInstances()->size() <= Requirement.allInstances()->size()
21034 ,Expression: self.personOwnsCategory->size() + self.personOwnsRequirement->size() > 0
21035 ,Expression: not self.dependencyTarget.dependencySource->includes(self)
21037 ,Expression: startActivity.thread = self or startActivity.oclIsKindOf(Join) or startActivity.oclIsKindOf(FinalActivity)
21038 ,Expression: startActivity.JoinsCorrectly(Sequence{self}, Set{})->includesAll(Activity.allInstances()->asSet())
21040 ,Expression: let basicModel: BasicModel = BasicModel.allInstances()->asSequence()->first() in                        let reachableActivities: Set(Activity) = basicModel.startActivity.JoinsCorrectly(Sequence{basicModel}, Set{}) in                            reachableActivities->exists(a | a = self)
21048 ,Expression: self.UsesSameThread(nextActivity)
21051 ,Expression: maxThreadCount >= 0
21052 ,Expression: forkedThreads->forAll(t | self.UsesDifferentThread(t.startActivity))
21056 ,Expression: branches->forAll(b | self.UsesSameThread(b.nextActivity))
21059 ,Expression: true
21062 ,Expression: duration >= 1
21067 ,Expression: Reference.allInstances()->select(r | r.name = activityName and not r.oclIsKindOf(NestedThread))->isEmpty()
21069 ,Expression: Reference.allInstances()->select(r | r.name = name and not r.oclIsKindOf(NestedThread))->size() <= 1
21074 ,Expression: type.containerTypes->includes(parent.type) or parent = null
21075 ,Expression: name.size() > 0
21076 ,Expression: (students->notEmpty() and self.numberOfStudents > 0) or ((self.students->isEmpty() or self.students = null) and self.numberOfStudents = 0)
21077 ,Expression: (students->notEmpty() and self.averageLength > 0) or ((self.students->isEmpty() or self.students = null) and self.averageLength = 0)
21078 ,Expression: self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
21080 ,Expression: self.attributes -> includes(self.identifier) or self.supertypes.visibleAttributes -> includes(self.identifier)
21083 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
21084 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
21085 ,Expression: self.superType <> self
21086 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
21087 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
21088 ,Expression: self.opposite -> forAll(o | o.opposite = self)
21089 ,Expression: self.opposite <> null implies self.target = Entity.allInstances() -> select(e | e.features -> select(f | f.oclIsKindOf(Relationship)) -> includes(self.opposite)) -> asOrderedSet() -> first()
21090 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
21091 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
21093 ,Expression: Form.allInstances() -> select(f | f.welcomeForm = true) -> size() = 1
21097 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
21098 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
21100 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
21101 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
21102 ,Expression: self.editingForm.welcomeForm = false
21103 ,Expression: self.relationship.target = self.editingForm.entity
21104 ,Expression: self.attribute.type = AttributeType::Date
21105 ,Expression: self.attribute.type = AttributeType::Time
21106 ,Expression: name.size()>0
21107 ,Expression: name.size() > 0
21108 ,Expression: mnr.size()=7
21109 ,Expression: self.students->isUnique(mnr)
21113 ,Expression: self.precision >= self.scale and self.precision >= 0 and self.scale >= 0
21114 ,Expression: (self.type <> InputType::BUTTON implies self.action->isEmpty())and(self.type <> InputType::BUTTON implies self.buttonValue->isEmpty())and (self.type <> InputType::TEXT implies self.textValue->isEmpty())
21115 ,Expression: self.Name.size()>1
21116 ,Expression: Course.allInstances()->isUnique(ID)
21117 ,Expression: self.StudentGroups.Submitted.AssesedBy.Name = self.TeachingAssistant.Name
21118 ,Expression: self.Students.Submitted.AssesedBy.Name = self.TeachingAssistant.Name
21119 ,Expression: self.GroupMember->forAll(p:Person  |  self.Course.Students->includes(p))
21120 ,Expression: self.Name.size()>2
21121 ,Expression: self.jetons >= 0
21122 ,Expression: self.nom.size() > 0
21123 ,Expression: self.nbJetons >= 0
21124 ,Expression: Place.allInstances()->exists(jetons > 0)
21125 ,Expression: self.etageMin <> 13 and self.etageMin <> 13
21126 ,Expression: hote->select(p1 : Personne | p1.age > 4)->size() < nbLits                        and hote->select(p1 : Personne | p1.age < 4) -> size() <= 1
21127 ,Expression: hote->size() < self.nbLits or  hote->size() <= self.nbLits + 1 and hote->exists(p:Personne| p.age < 4)
21128 ,Expression: etage >= hotel.etageMin or etage <= hotel.etageMax
21129 ,Expression: Employe.allInstances()->              forAll(e1,e2|e1.project->size() > e2.project->size()implies              e1.salary > e2.salary )
21130 ,Expression: self.employe->size() >= self.project->size()
21131 ,Expression:            project->collect(p:Project| p.budget)->sum() <= budget
21132 ,Expression: self.budget <= self.departement.budget
21133 ,Expression: departement.employe->includesAll(employe)
21137 ,Expression:  if self.title = null then SpecialIssues = true      else SpecialIssues = false     endif
21138 ,Expression:  publie->excludesAll(submit)
21139 ,Expression: publie->forAll(p:Paper | p.reviewer->size()=3)
21141 ,Expression: reviewer->forAll(r:Reviewer | redaction->select(a:Autheur|a.nameAuthor = r.nameReviewer )->size()<1)                              and reviewer->size()<3
21142 ,Expression: not self.swagger.oclIsUndefined()
21143 ,Expression: not self.info.oclIsUndefined()
21144 ,Expression: self.swagger = '2.0'
21145 ,Expression: pathsIsSet()
21146 ,Expression: not self.title.oclIsUndefined()
21147 ,Expression: not self.version.oclIsUndefined()
21148 ,Expression: not self.name.oclIsUndefined()
21151 ,Expression: self.parameters -> collect(t | Tuple{name : String = t.name,location : ParameterLocation = t.location})->asSet() -> size() = self.parameters -> size()
21153 ,Expression: self.responses -> size() <> 0
21154 ,Expression: not self.url.oclIsUndefined()
21155 ,Expression: not name.oclIsUndefined()
21156 ,Expression: not location = ParameterLocation::unspecified
21158 ,Expression: not self.firstName.oclIsUndefined() and self.firstName <> ''
21159 ,Expression: not self.lastName.oclIsUndefined() and self.lastName <> ''
21160 ,Expression: not self.firstName.oclIsUndefined() and self.firstName <> ''
21161 ,Expression: not self.lastName.oclIsUndefined() and self.lastName <> ''
21162 ,Expression: not self.firstName.oclIsUndefined() and self.firstName <> ''
21163 ,Expression: not self.lastName.oclIsUndefined() and self.lastName <> ''
21164 ,Expression: connectedPorts->at(1).parentComponent <> connectedPorts->at(2).parentComponent
21165 ,Expression: entities->forAll(e : Entity | relships->forAll(r : Relship | e.name <> r.name))
21166 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
21167 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
21168 ,Expression: attrs->forAll(a1 : Attribute, a2 : Attribute | a1.name = a2.name implies a1 = a2)
21169 ,Expression: attrs->exists(a : Attribute | a.isKey = true)
21170 ,Expression: ends->forAll(e1 : RelshipEnd, e2 : RelshipEnd | e1.name = e2.name implies e1 = e2)
21171 ,Expression: entities->forAll(e : Entity | relships->forAll(r : Relship | e.name <> r.name))
21172 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
21173 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
21174 ,Expression: attrs->forAll(a1 : Attribute, a2 : Attribute | a1.name = a2.name implies a1 = a2)
21175 ,Expression: attrs->exists(a : Attribute | a.isKey = true)
21176 ,Expression: ends->forAll(e1 : RelshipEnd, e2 : RelshipEnd | e1.name = e2.name implies e1 = e2)
21177 ,Expression: true
21178 ,Expression: result.oclIsNew() and result.name=name and result.portal=p
21179 ,Expression: Product::allInstances()->collect(s|s.price)->sum()>10
21180 ,Expression: c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()
21181 ,Expression: not c.oclIsTypeOf(GoldCustomer)
21182 ,Expression: p.stock > 0
21184 ,Expression: Product::allInstances()->forAll(p|p.stock>=5)
21185 ,Expression: true
21186 ,Expression: result.oclIsNew() and result.name=name and result.portal=p
21187 ,Expression: c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()
21188 ,Expression: not c.oclIsTypeOf(GoldCustomer)
21189 ,Expression: p.stock > 0
21191 ,Expression: Product::allInstances()->forAll(p|p.stock>=5)
21193 ,Expression: pets->at(1) <> null
21194 ,Expression: self.oclIsKindOf(Person)
21195 ,Expression: Paper::allInstances()->forAll(p|p.wordCount < 10000)
21196 ,Expression: Paper::allInstances()->forAll(p| p.referee->forAll(r| not r.isStudent))
21197 ,Expression: Paper::allInstances()->exists(p|p.studentPaper) and Paper::allInstances()->select(p|p.studentPaper)->size() < 5
21198 ,Expression: Paper::allInstances()->forAll(p|p.studentPaper = p.author->exists(x|x.isStudent))
21199 ,Expression: Researcher::allInstances()->forAll(r|r.submission->excludes(r.manuscript))
21200 ,Expression: connectedPorts->at(1).parentComponent <> connectedPorts->at(2).parentComponent
21201 ,Expression: entities->forAll(e : Entity | relships->forAll(r : Relship | e.name <> r.name))
21202 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
21203 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
21204 ,Expression: attrs->forAll(a1 : Attribute, a2 : Attribute | a1.name = a2.name implies a1 = a2)
21205 ,Expression: attrs->exists(a : Attribute | a.isKey = true)
21206 ,Expression: ends->forAll(e1 : RelshipEnd, e2 : RelshipEnd | e1.name = e2.name implies e1 = e2)
21207 ,Expression: entities->forAll(e : Entity | relships->forAll(r : Relship | e.name <> r.name))
21208 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
21209 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
21210 ,Expression: attrs->forAll(a1 : Attribute, a2 : Attribute | a1.name = a2.name implies a1 = a2)
21211 ,Expression: attrs->exists(a : Attribute | a.isKey = true)
21212 ,Expression: ends->forAll(e1 : RelshipEnd, e2 : RelshipEnd | e1.name = e2.name implies e1 = e2)
21213 ,Expression: true
21214 ,Expression: result.oclIsNew() and result.name=name and result.portal=p
21215 ,Expression: Product::allInstances()->collect(s|s.price)->sum()>10
21216 ,Expression: c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()
21217 ,Expression: not c.oclIsTypeOf(GoldCustomer)
21218 ,Expression: p.stock > 0
21220 ,Expression: Product::allInstances()->forAll(p|p.stock>=5)
21221 ,Expression: true
21222 ,Expression: result.oclIsNew() and result.name=name and result.portal=p
21223 ,Expression: c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()
21224 ,Expression: not c.oclIsTypeOf(GoldCustomer)
21225 ,Expression: p.stock > 0
21227 ,Expression: Product::allInstances()->forAll(p|p.stock>=5)
21229 ,Expression: pets->at(1) <> null
21230 ,Expression: self.oclIsKindOf(Person)
21231 ,Expression: Paper::allInstances()->forAll(p|p.wordCount < 10000)
21232 ,Expression: Paper::allInstances()->forAll(p| p.referee->forAll(r| not r.isStudent))
21233 ,Expression: Paper::allInstances()->exists(p|p.studentPaper) and Paper::allInstances()->select(p|p.studentPaper)->size() < 5
21234 ,Expression: Paper::allInstances()->forAll(p|p.studentPaper = p.author->exists(x|x.isStudent))
21235 ,Expression: Researcher::allInstances()->forAll(r|r.submission->excludes(r.manuscript))
21236 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
21237 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
21238 ,Expression: gate.outlocked implies sec.on
21239 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
21240 ,Expression: gate.outlocked implies sec.on = true
21241 ,Expression: temp < 50 or not on
21242 ,Expression: temp < 30 implies on
21243 ,Expression: house.time < 2 or house.time > 8 or on
21244 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
21245 ,Expression: if pluged then level < 30 implies charging else true endif
21246 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
21247 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
21248 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
21249 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
21250 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
21251 ,Expression: house.time > 22 implies projector.volume < 4
21252 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
21253 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
21254 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
21255 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
21256 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
21257 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
21258 ,Expression: room.temp > 28 implies level > 5
21259 ,Expression: room.temp < 23 implies level = 0
21260 ,Expression: room.house.outtemp > 30 implies level > 5
21261 ,Expression: level > 0 implies level = 9
21262 ,Expression: level <> 0 implies level = 5
21263 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
21264 ,Expression: loaded implies on
21265 ,Expression: loaded implies on = true
21266 ,Expression: battery < 20 implies circle < 30
21267 ,Expression: room.house.time = 7 and loaded implies on
21268 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
21269 ,Expression: room.temp > 20 implies not warming
21270 ,Expression: loaded implies warming = true
21271 ,Expression: pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
21272 ,Expression: VM.allInstances()->size() < 10
21273 ,Expression: VM.allInstances()->select(host.name = self.host.name)
21274 ,Expression: host->collect(e | e.req)->sum() <= res
21275 ,Expression: VM.allInstances()->select(e | e.plc = self)
21276 ,Expression: self.core < self.plc.core
21277 ,Expression: backup->forAll(e|e.plc <> self.plc)
21278 ,Expression: 30
21279 ,Expression: frqt->forAll(v|v.plc.near->includes(self.plc))
21280 ,Expression: VM.allInstances()->select(v|v.app.name = self.app.name)
21281 ,Expression: hosting->collect(e|e.mem)->sum() < mem
21282 ,Expression: VM.allInstances()->select(plc=self)
21283 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
21284 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
21285 ,Expression: gate.outlocked implies sec.on
21286 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
21287 ,Expression: gate.outlocked implies sec.on = true
21288 ,Expression: temp < 50 or not on
21289 ,Expression: temp < 30 implies on
21290 ,Expression: house.time < 2 or house.time > 8 or on
21291 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
21292 ,Expression: if pluged then level < 30 implies charging else true endif
21293 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
21294 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
21295 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
21296 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
21297 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
21298 ,Expression: house.time > 22 implies projector.volume < 4
21299 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
21300 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
21301 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
21302 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
21303 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
21304 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
21305 ,Expression: room.temp > 28 implies level > 5
21306 ,Expression: room.temp < 23 implies level = 0
21307 ,Expression: room.house.outtemp > 30 implies level > 5
21308 ,Expression: level > 0 implies level = 9
21309 ,Expression: level <> 0 implies level = 5
21310 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
21311 ,Expression: loaded implies on
21312 ,Expression: loaded implies on = true
21313 ,Expression: battery < 20 implies circle < 30
21314 ,Expression: room.house.time = 7 and loaded implies on
21315 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
21316 ,Expression: room.temp > 20 implies not warming
21317 ,Expression: loaded implies warming = true
21318 ,Expression: pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
21319 ,Expression: backup->forAll(vm : VM | self.plc <> vm.plc)
21320 ,Expression: frequent->forAll(v : VM | self.plc.near->includes(v.plc))
21321 ,Expression: pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
21322 ,Expression: backup->forAll(vm : VM | self.plc <> vm.plc)
21323 ,Expression: frequent->forAll(v : VM | self.plc.near->includes(v.plc))
21324 ,Expression: VM.allInstances()->select(host.name = self.host.name)
21325 ,Expression: backup->forAll(vm : VM | self.plc <> vm.plc)
21326 ,Expression: frequent->forAll(v : VM | self.plc.near->includes(v.plc) or self.plc = v.plc)
21327 ,Expression: VM.allInstances()->select(v|v.host.name = self.host.name and v<>self)
21328 ,Expression: host->collect(e | e.req)->sum() <= res
21329 ,Expression: VM.allInstances()->select(e | e.plc = self)
21330 ,Expression: self.core <= self.plc.core
21331 ,Expression: 80
21332 ,Expression: backup->forAll(e|e.plc <> self.plc)
21333 ,Expression: 40
21334 ,Expression: syncPeak->forAll(e|e.plc <> self.plc)
21335 ,Expression: 30
21336 ,Expression: frqt->forAll(v|v.plc.near->includes(self.plc))
21337 ,Expression: 10 * stability
21338 ,Expression: plc.stable = true
21339 ,Expression: self.bit64 implies self.plc.bit64
21340 ,Expression: hosting->collect(e|e.mem)->sum()<=mem
21341 ,Expression: 20
21342 ,Expression: hosting->size() = 0
21343 ,Expression: 60
21344 ,Expression: hosting->collect(e|e.tp)->sum() <= tpLimit
21345 ,Expression: VM.allInstances()->select(plc=self)
21346 ,Expression: self.core <= self.plc.core
21347 ,Expression: 80
21348 ,Expression: backup->forAll(e|e.plc <> self.plc)
21349 ,Expression: 30
21350 ,Expression: frqt->forAll(v|v.plc.near->includes(self.plc))
21351 ,Expression: VM.allInstances()->select(v|v<> self and v.app.name = self.app.name)
21352 ,Expression: hosting->collect(e|e.mem)->sum() < mem
21353 ,Expression: VM.allInstances()->select(plc=self)
21354 ,Expression: self.core <= self.plc.core
21355 ,Expression: 80
21356 ,Expression: backup->forAll(e|e.plc <> self.plc)
21357 ,Expression: 40
21358 ,Expression: syncPeak->forAll(e|e.plc <> self.plc)
21359 ,Expression: 30
21360 ,Expression: frqt->forAll(v|v.plc.near->includes(self.plc))
21361 ,Expression: 10 * stability
21362 ,Expression: plc.stable = true
21363 ,Expression: self.bit64 implies self.plc.bit64
21364 ,Expression: hosting->collect(e|e.mem)->sum()<=mem
21365 ,Expression: 20
21366 ,Expression: hosting->size() = 0
21367 ,Expression: 60
21368 ,Expression: hosting->collect(e|e.tp)->sum() <= tpLimit
21369 ,Expression: VM.allInstances()->select(plc=self)
21372 ,Expression: self.getRootContainer().spaceWireNetworkTopology.subnet.node->select(i : Node | i.id = self.id).port->select(i | i.number = self.port).oclAsType(Port)->union(self.getRootContainer().spaceWireNetworkTopology.subnet.router->select(i : Router | i.id = self.id).port->select(i | i.number = self.port))->asBag()
21576 ,Expression: let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
21577 ,Expression: self.types->isUnique(name)
21579 ,Expression: self.classes->isUnique(name)
21581 ,Expression: not self.superTypes->includes(self)
21583 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
21586 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
21588 ,Expression: not (self.externalAspect = self.Aspect)
21590 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
21592 ,Expression: self.fromElement.oclIsTypeOf(Class) or self.fromElement.oclIsTypeOf(Operation)
21594 ,Expression: self.toElements->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.fromElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.fromElement.oclType()) endif)
21596 ,Expression: let clazz : Class = if fromElement.oclIsTypeOf(Operation) then fromElement.oclAsType(Operation).Classifier else fromElement endif in self.Instantiation.externalAspect.structuralView.classes->includes(clazz) and self.toElements->forAll(element : MappableElement | let clazz : Class = if element.oclIsTypeOf(Operation) then element.oclAsType(Operation).Classifier else element endif in if clazz.oclIsKindOf(PrimitiveType) then self.Instantiation.Aspect.structuralView.types->includes(clazz) else self.Instantiation.Aspect.structuralView.classes->includes(clazz) endif)
21598 ,Expression: if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.StructuralView.Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
21600 ,Expression: not self.type.oclIsTypeOf(RVoid)
21612 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
21614 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
21616 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
21618 ,Expression: self.affectedBy->size() > 0
21620 ,Expression: not self.affectedBy->includes(self)
21622 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then if self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) then self.interaction.fragments->indexOf(self.sendEvent) < self.interaction.fragments->indexOf(self.receiveEvent) else true endif else true endif
21624 ,Expression: if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
21626 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21628 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
21630 ,Expression: let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
21632 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
21634 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
21636 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21638 ,Expression: if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
21640 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
21642 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
21644 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
21646 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
21647 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
21649 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
21651 ,Expression: if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
21653 ,Expression: self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
21656 ,Expression: self.upperBound > 0 or self.upperBound = - 1
21658 ,Expression: self.lowerBound >= 0
21660 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = - 1
21662 ,Expression: let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
21663 ,Expression: self.types->isUnique(name)
21665 ,Expression: self.classes->isUnique(name)
21667 ,Expression: not self.superTypes->includes(self)
21669 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
21672 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
21674 ,Expression: not (self.externalAspect = self.Aspect)
21676 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
21680 ,Expression: if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.oclContainer().oclAsType(StructuralView).Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
21682 ,Expression: not self.type.oclIsTypeOf(RVoid)
21694 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
21696 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
21698 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
21700 ,Expression: self.affectedBy->size() > 0
21702 ,Expression: not self.affectedBy->includes(self)
21704 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let sendEvent : InteractionFragment = self.sendEvent.oclAsType(InteractionFragment) in let receiveEvent : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in if sendEvent.covered->asOrderedSet()->at(1) = receiveEvent.covered->asOrderedSet()->at(1) then sendEvent.container.fragments->indexOf(self.sendEvent) < receiveEvent.container.fragments->indexOf(self.receiveEvent) else true endif else true endif
21706 ,Expression: if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
21708 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21710 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
21712 ,Expression: let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
21714 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
21716 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
21718 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21720 ,Expression: if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
21722 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
21724 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
21726 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
21728 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
21729 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
21731 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
21733 ,Expression: if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
21735 ,Expression: self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
21738 ,Expression: self.upperBound > 0 or self.upperBound = -1
21740 ,Expression: self.lowerBound >= 0
21742 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = -1
21748 ,Expression: OrderedSet{}
21749 ,Expression: self.name.at(1).matches('[A-Z]')
21750 ,Expression: self.name.size() <> 0
21751 ,Expression: ViewGroup.allInstances() -> select(f | f.welcomeViewGroup = true) -> size() = 1
21752 ,Expression: self.name.at(1).matches('[A-Z]')
21753 ,Expression: ViewElements.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
21754 ,Expression: self.visibilitycondition -> forAll(c | c.conditionType = self.conditionType)
21755 ,Expression: self.superclass->excludes(self)
21756 ,Expression:  (self.Property -> select(k | k.isID=true)-> size() = 1) or (self.superclass -> size() > 0)
21757 ,Expression: self.LowerBound <= 1
21758 ,Expression: self.LowerBound >= 0
21759 ,Expression: self.UpperBound = 1
21760 ,Expression: self.type = PropertyType::DataType or self.type = PropertyType::Enumeration
21761 ,Expression: self.LowerBound <= self.UpperBound or self.UpperBound = -1 and (self.LowerBound >= 0 and self.UpperBound > 0 or self.UpperBound = -1)
21769 ,Expression: isComponent implies not isInteractionSurface
21770 ,Expression: not self->closure(hostedBy.target)->includes(self)
21771 ,Expression: not isInteractionSurface implies not hostedBy->isEmpty()
21772 ,Expression: not hosts->isEmpty()
21773 ,Expression: hosts->isEmpty()
21774 ,Expression: not hosts->isEmpty() and not implementedBy->isEmpty()
21775 ,Expression: self->closure(hostedBy.target)->select(isInteractionSurface)
21776 ,Expression: self.interactionSurfaces.implementedBy->flatten().oclAsType(Implementation).source->asSet()->union(self.implementedBy->collect(source)->asSet())->asOrderedSet()
21777 ,Expression: source.hostedBy->forAll(h : Hosting | h <> self implies h.target <> self.target)
21778 ,Expression: target.isInteractionSurface
21779 ,Expression: source.isInteractionSurface and target.isInteractionSurface
21878 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
21879 ,Expression: self.expression <> self
21880 ,Expression: self.activites -> one( a : Activite | a.suivante.oclIsUndefined())
21881 ,Expression: self.activites -> one(a : Activite | a.precedente.oclIsUndefined())
21882 ,Expression: Activite.allInstances()->one(a : Activite | a.name = self.name)
21883 ,Expression: self.pasDansSuivant(self)
21885 ,Expression: self.activites -> one( a : Activite | a.suivante.oclIsUndefined())
21886 ,Expression: self.activites -> one(a : Activite | a.precedente.oclIsUndefined())
21887 ,Expression: Activite.allInstances()->one(a : Activite | a.name = self.name)
21888 ,Expression: self.pasDansSuivant(self)
21890 ,Expression: self.reference.precedente.oclIsUndefined()
21891 ,Expression: self.reference.suivante.oclIsUndefined()
21892 ,Expression: self.source.oclType() <> self.target.oclType()
21893 ,Expression: self.poids > 0
21894 ,Expression: self.nbJetons >= 0
21895 ,Expression: name <> 'Process'
21896 ,Expression: self.processElements-> select(pe|pe.oclIsTypeOf(WorkDefinition))-> collect(pe|pe.oclAsType(WorkDefinition))-> forAll(a,b|a <> b implies a.name <> b.name)
21897 ,Expression: Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
21898 ,Expression: self.name.size() > 0
21899 ,Expression: self.process = self.predecessor.process
21900 ,Expression: self.process = self.successor.process
21901 ,Expression: self.predecessor <> self.successor
21902 ,Expression: self.name.size() > 0
21903 ,Expression: self.quantity > 0
21904 ,Expression: self.quantity > 0
21905 ,Expression: self.quantity <= self.ressource.quantity
21906 ,Expression: Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
21907 ,Expression: self.process = self.predecessor.process
21908 ,Expression: self.process = self.successor.process
21915 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
21918 ,Expression: name
21919 ,Expression: not allOwnedElements()->includes(self)
21920 ,Expression: mustBeOwned() implies owner->notEmpty()
21923 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
21924 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
21925 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
21926 ,Expression: ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)
21928 ,Expression: redefinedElement->forAll(r | r.leaf = false)
21930 ,Expression: derived = false and derivedUnion = false
21931 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
21932 ,Expression: derivedUnion implies readOnly
21933 ,Expression: aggregation = AggregationKind::composite
21935 ,Expression: memberEnd->symmetricDifference(ownedEnd)->isEmpty()
21936 ,Expression: derived = false
21937 ,Expression: memberEnd->exists(e | e.aggregation <> AggregationKind::none) implies memberEnd->size() = 2
21939 ,Expression: memberEnd->size() = 2
21940 ,Expression: memberEnd.type
21941 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
21942 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
21943 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
21944 ,Expression: lower = lowerBound()
21945 ,Expression: upper = upperBound()
21946 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
21949 ,Expression: ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1
21956 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
21957 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
21958 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
21975 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
21978 ,Expression: name
21979 ,Expression: not allOwnedElements()->includes(self)
21980 ,Expression: mustBeOwned() implies owner->notEmpty()
21983 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
21984 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
21985 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
21986 ,Expression: ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)
21988 ,Expression: redefinedElement->forAll(r | r.leaf = false)
21990 ,Expression: derived = false and derivedUnion = false
21991 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
21992 ,Expression: derivedUnion implies readOnly
21993 ,Expression: aggregation = AggregationKind::composite
21995 ,Expression: memberEnd->symmetricDifference(ownedEnd)->isEmpty()
21996 ,Expression: derived = false
21997 ,Expression: memberEnd->exists(e | e.aggregation <> AggregationKind::none) implies memberEnd->size() = 2
21999 ,Expression: memberEnd->size() = 2
22000 ,Expression: memberEnd.type
22001 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
22002 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
22003 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
22004 ,Expression: lower = lowerBound()
22005 ,Expression: upper = upperBound()
22006 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
22009 ,Expression: ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1
22016 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
22017 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
22018 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
22029 ,Expression: self.world.people->forAll(p | p.name <> self.name or p = self)
22030 ,Expression: self.company.employees->forAll(e | e.name <> self.name or e = self)
22031 ,Expression: self.world.people->forAll(p | p.name <> self.name or p = self)
22032 ,Expression: self.company.employees->forAll(e | e.name <> self.name or e = self)
22033 ,Expression: features->forAll(f | f.classes->isEmpty())
22035 ,Expression: horzLength + vertLength
22036 ,Expression: self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
22037 ,Expression: self.attributes->union(self.systemUnit.attributes)->includesAll(self.processibleEvents->selectByKind(ChangeEvent).changeExpression.booleanFunctionCall.parameters.valueSpecification->selectByKind(AttributeValueSpecification).attribute)
22038 ,Expression: self.nodes->selectByKind(State)->select(s | s.initial)->size() = 1
22039 ,Expression: self.nodes->selectByKind(State)->select(s | s.terminal)->size() <= 1
22040 ,Expression: self.edges.target->selectByKind(State)->select(s | s.initial)->size() = 0
22041 ,Expression: self.edges.source->selectByKind(State)->select(s | s.initial)->size() = 1
22042 ,Expression: self.nodes->selectByType(State)->select(s |s.terminal)->size() = 0 or self.edges.target->selectByType(State)->select(s | s.terminal)->size() = 1
22043 ,Expression: self.edges.source->selectByKind(State)->select(s | s.terminal)->size() = 0
22044 ,Expression: self.oclContainer.oclAsType(StateSystem).edges->select(e | e.source = self)
22045 ,Expression: self.oclContainer.oclAsType(StateSystem).edges->select(e | e.target = self)
22046 ,Expression: self.incomingEdges->size() = 1
22047 ,Expression: self.outgoingEdges->size() >= 2
22048 ,Expression: self.outgoingEdges.target->selectByType(Transition)->select(t |t.trigger.oclIsUndefined())->size() <= 1
22049 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
22050 ,Expression: self.incomingEdges->size() >= 2
22051 ,Expression: self.outgoingEdges->size() = 1
22052 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
22053 ,Expression: not (self.terminal and self.initial)
22054 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
22055 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
22056 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
22057 ,Expression: self.incomingEdges->size() = 1
22058 ,Expression: self.outgoingEdges->size() = 1
22059 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
22060 ,Expression: self.parameters.parameter->includesAll(self.function.parameters->select(p |p.direction = ParameterDirectionKind::IN))
22061 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
22062 ,Expression: self.attribute.type = self.parameterValue.parameter.type
22063 ,Expression: self.booleanFunctionCall.function.parameters->exists(p |p.direction = ParameterDirectionKind::RETURN and p.type.name = 'Boolean')
22140 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
22182 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
22183 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
22239 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
22240 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
22616 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
22658 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
22659 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
22715 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
22716 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
22848 ,Expression: base_Class.ownedReception->isEmpty()
22849 ,Expression: (base_Class.generalization->size()) <= 1
22850 ,Expression: (base_Class.generalization->notEmpty()) implies (base_Class.generalization->forAll (g | g.isSubstitutable))
22851 ,Expression: base_Class.ownedAttribute->forAll(at | at.type->size() = 1)
22852 ,Expression: base_Class.nestedClassifier->isEmpty()
22854 ,Expression: base_Class.generalization->size() <= 1
22855 ,Expression: base_Connector.end->size() = 2
22856 ,Expression: base_StateMachine.region->size() = 1
22857 ,Expression: (base_StateMachine.ownedParameter->size()=0) and (base_StateMachine.ownedParameterSet->size() = 0)
22858 ,Expression: (base_StateMachine.behavioredClassifier->size()=1) and (base_StateMachine.behavioredClassifier.oclIsKindOf(Class))
22859 ,Expression: base_State.isComposite implies            (base_State.region->size() = 1)
22860 ,Expression: base_State.doActivity->size() = 0
22861 ,Expression: base_State.deferrableTrigger->size() = 0
22867 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
22868 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
22869 ,Expression: not (currentRowAxisProvider.oclIsKindOf(nattableaxisprovider::ISlaveAxisProvider) and currentColumnAxisProvider.oclIsKindOf(nattableaxisprovider::ISlaveAxisProvider))
22946 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
22988 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
22989 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
23045 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
23046 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
23166 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
23208 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
23209 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
23265 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
23266 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
23310 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
23311 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
23312 ,Expression:   (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
23313 ,Expression:   (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
23314 ,Expression: self.oclType().allInstances()->size() = 1
23315 ,Expression: self.oclType().allInstances()->forAll(c1, c2 |c1 <> c2 implies c1.actor <>  c2.actor or c1.processorType <>  c2.processorType)
23316 ,Expression: self.oclType().allInstances()->forAll(id1, id2 |id1 <> id2 implies id1.identifier <> id2.identifier)
23317 ,Expression: self.oclType().allInstances()->size() = 1
23318 ,Expression: self.processors->forAll(p1, p2 | p1 <> p2 implies p1.identifier <> p2.identifier)
23319 ,Expression: self.processors->forAll(p |p.island = self)
23320 ,Expression: self.processors.initialState->forAll(cs1, cs2 | cs1.frequency = cs2.frequency)
23321 ,Expression: self.possibleStates->forAll(ps1, ps2 | ps1 <> ps2 implies ps1.frequency <>  ps2.frequency or ps1.isWorking <>  ps2.isWorking)
23322 ,Expression: self.possibleStates->forAll( s|s.processorType = self)
23323 ,Expression: self.island.processors->includes(self)
23324 ,Expression: self.type.possibleStates->includes(self.initialState)
23325 ,Expression: self.processorType.possibleStates->includes(self)
23326 ,Expression: self.possibleStateChanges->forAll (psc | psc.source = self)
23327 ,Expression: self.possibleStateChanges->forAll(sc1, sc2 | sc1 <> sc2 implies sc1.source <>  sc2.source or sc1.target <>  sc2.target)
23328 ,Expression: self.source.processorType = self.target.processorType
23329 ,Expression: self.source <> self.target
23330 ,Expression: self.oclType().allInstances()->size() = 1
23331 ,Expression: self. incomingChannels->forAll( c | c.target = self)
23332 ,Expression: self. outgoingChannels->forAll( c | c.source = self)
23333 ,Expression: self.target.incomingChannels->includes(self)
23334 ,Expression: self.source.outgoingChannels->includes(self)
23340 ,Expression: self.template->isUnique(name)
23341 ,Expression: self.oclType().allInstances()->size() = 1
23342 ,Expression: self.processors->forAll(p1, p2 | p1 <> p2 implies p1.identifier <> p2.identifier)
23343 ,Expression: self.processors->forAll(p |p.island = self)
23344 ,Expression: self.processors.initialState->forAll(cs1, cs2 | cs1.frequency = cs2.frequency)
23345 ,Expression: self.possibleStates->forAll(ps1, ps2 | ps1 <> ps2 implies ps1.frequency <>  ps2.frequency or ps1.isWorking <>  ps2.isWorking)
23346 ,Expression: self.possibleStates->forAll( s|s.processorType = self)
23347 ,Expression: self.island.processors->includes(self)
23348 ,Expression: self.type.possibleStates->includes(self.initialState)
23349 ,Expression: self.processorType.possibleStates->includes(self)
23350 ,Expression: self.possibleStateChanges->forAll (psc | psc.source = self)
23351 ,Expression: self.possibleStateChanges->forAll(sc1, sc2 | sc1 <> sc2 implies sc1.source <>  sc2.source or sc1.target <>  sc2.target)
23352 ,Expression: self.source.processorType = self.target.processorType
23353 ,Expression: self.source <> self.target
23354 ,Expression: self.oclType().allInstances()->forAll(id1, id2 |id1 <> id2 implies id1.identifier <> id2.identifier)
23356 ,Expression:   self.assemblyconnector->forAll( a |   let c1 : Container = GetContainerOfContext(a.providedAssemblyContext),  c2: Container = GetContainerOfContext(a.requiredAssemblyContext)  in c1 = c2  or environment.IsLinked(c1,c2))
23359 ,Expression: self.delegationconnector->forAll( d | d.role->includesAll(providedrole) or d.role->includesAll(requiredrole))
23360 ,Expression: self.delegationconnector->size() = self.requiredrole->size() + self.providedrole->size()
23362 ,Expression:  self.role->first().oclType() = self.role->last().oclType()
23363 ,Expression:  self.role->first().interface = self.role->last().interface
23366 ,Expression:  let composites : Collection(CompositeComponent) = self.allocationcontext->select(a | a.assemblycontext.component.oclIsTypeOf(CompositeComponent)).assemblycontext.component.oclAsType(CompositeComponent)in self.allocationcontext.assemblycontext->excludesAll(composites.assemblycontext)
23367 ,Expression: tables->forAll(table1,table2 | table1 <> table2 implies table1.name <> table2.name)
23368 ,Expression: columns->forAll(column1, column2 | column1 <> column2 implies column1.name <> column2.name)
23369 ,Expression: Sequence{1 .. self.nombre.size()}->collect(i | self.nombre.substring(i, i))->excludes(' ')
23370 ,Expression: self.clases->isUnique(nombre)
23371 ,Expression: clases->collect(c | c.relacionesBT)->size() = clases->collect(c| c.relacionesBT->collect(rBT | c.atributos->select(a | a.nombre.toLowerCase() = rBT.destino_BT.nombre.toString().toLowerCase())))->size()
23372 ,Expression: self.atributos->isUnique(nombre)
23373 ,Expression: self.destino_BT <> self.origen_BT
23374 ,Expression: self.destino_HMT <> self.origen_HMT
23375 ,Expression: Sequence{1 .. self.nombre.size()}->collect(i | self.nombre.substring(i, i))->excludes(' ')
23376 ,Expression: self.clases->isUnique(nombre)
23377 ,Expression: clases->collect(c | c.relacionesBT)->size() = clases->collect(c| c.relacionesBT->collect(rBT | c.atributos->select(a | a.nombre.toLowerCase() = rBT.destino_BT.nombre.toString().toLowerCase() and a.tipo.toString() = 'integer' )))->size()
23378 ,Expression: self.atributos->isUnique(nombre)
23379 ,Expression: self.destino_a <> self.origen_a
23380 ,Expression: self.destino_c <> self.origen_c
23381 ,Expression: not (self.name->isEmpty())
23382 ,Expression: Sequence{1 .. self.name.size()}->collect(i | self.name.substring(i, i))->excludes(' ')
23383 ,Expression: self.tables->isUnique(name.toUpperCase())
23384 ,Expression: not (self.columns->exists(name.toUpperCase() = 'id'.toUpperCase()))
23385 ,Expression: self.columns->isUnique(name.toUpperCase())
23386 ,Expression: not(self.foreignKeys->notEmpty() and self.foreignKeys->exists(reference.name = self.name))
23387 ,Expression: self.column.type = self.reference.primaryKey.type
23388 ,Expression: keySet->forAll(k1:Key, k2:Key | k1.keyAttributes->intersection(k2.keyAttributes)->includesAll(k1.keyAttributes) and k1.keyAttributes->symmetricDifference(k2.keyAttributes)->isEmpty() implies k1=k2)
23392 ,Expression: ModellingConcept.allInstances()->symmetricDifference(Gerund.allInstances())->forAll(m1:ModellingConcept, m2:ModellingConcept | m1.name = m2.name implies m1=m2)
23395 ,Expression: ISA.allInstances().subtypes->forAll(e1:Entity | ISA.allInstances().subtypes->select(e2 | e1.name=e2.name)->size()<2)
23398 ,Expression: self.contains_nodes->select(n|n.oclIsTypeOf(StartNode))->size()=1
23399 ,Expression: self.contains_nodes->select(n|n.oclIsTypeOf(EndNode))->size()>0
23400 ,Expression:  (self.contains_arcs->size()) >= (self.contains_nodes->size()-1)
23401 ,Expression: self.incoming->size() > 0
23402 ,Expression: self.outgoing->size() > 0
23403 ,Expression: self.outgoing->size() > 0
23404 ,Expression: self.incoming->size() = 0
23405 ,Expression: self.incoming->size() > 0
23406 ,Expression: self.outgoing->size() = 0
23407 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23408 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23409 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23410 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23411 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23412 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23413 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23414 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23415 ,Expression: self.relations->size() > 0
23416 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23417 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23418 ,Expression: self.attrs->size() > 0
23419 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23420 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23421 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23422 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23423 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23424 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23425 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23426 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23427 ,Expression: self.relations->size() > 0
23428 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23429 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23430 ,Expression: self.attrs->size() > 0
23431 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23432 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23433 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23434 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23435 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23436 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23437 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23438 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23439 ,Expression: self.relations->size() > 0
23440 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23441 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23442 ,Expression: self.attrs->size() > 0
23443 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23444 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23445 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23446 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23447 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23448 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23449 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23450 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23451 ,Expression: self.relations->size() > 0
23452 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23453 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23454 ,Expression: self.attrs->size() > 0
23455 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23456 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23457 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23458 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23459 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23460 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23461 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23462 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23463 ,Expression: self.relations->size() > 0
23464 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23465 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23466 ,Expression: self.attrs->size() > 0
23467 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23468 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23469 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23470 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23471 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23472 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23473 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23474 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23475 ,Expression: self.relations->size() > 0
23476 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23477 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23478 ,Expression: self.attrs->size() > 0
23479 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
23480 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
23481 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23482 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
23483 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
23484 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
23485 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
23486 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
23487 ,Expression: self.relations->size() > 0
23488 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
23489 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
23490 ,Expression: self.attrs->size() > 0
23571 ,Expression: isUnmarshall = true
23572 ,Expression: not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
23573 ,Expression: input->size() = 0
23574 ,Expression: (self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
23582 ,Expression: fromAction.input->forAll(oclIsKindOf(ActionInputPin))
23583 ,Expression: fromAction.output->size() = 1
23585 ,Expression: ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
23588 ,Expression: activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
23589 ,Expression: containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
23594 ,Expression: (incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
23595 ,Expression: activity.ownedParameter->includes(parameter)
23596 ,Expression: type = parameter.type
23598 ,Expression: incoming->isEmpty() or outgoing->isEmpty()
23599 ,Expression: (not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
23600 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
23601 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
23602 ,Expression: isDimension implies superPartition->isEmpty()
23603 ,Expression: Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
23604 ,Expression: name->notEmpty()
23605 ,Expression: value<>null
23607 ,Expression: value <> null
23609 ,Expression: parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
23610 ,Expression: Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
23611 ,Expression: memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
23612 ,Expression: memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
23613 ,Expression: memberEnd->forAll(type->notEmpty())
23615 ,Expression: self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
23616 ,Expression: ownedAttribute->intersection(ownedEnd)->isEmpty()
23618 ,Expression: specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
23624 ,Expression: isAbstract implies method->isEmpty()
23627 ,Expression: classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
23628 ,Expression: argument->size() = signal.allAttributes()->size()
23630 ,Expression: onPort=null
23633 ,Expression: result->notEmpty() implies isSynchronous
23636 ,Expression: onPort=null
23639 ,Expression: if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
23640 ,Expression: not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
23645 ,Expression: parents()->forAll(c | self.maySpecializeType(c))
23646 ,Expression: powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
23647 ,Expression: parents()->forAll(not isFinalSpecialization)
23648 ,Expression: not allParents()->includes(self)
23665 ,Expression: allowSubstitutable implies constrainingClassifier->notEmpty()
23666 ,Expression: parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
23667 ,Expression: (not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)
23668 ,Expression:  templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))
23669 ,Expression: templateParameterSubstitution.actual->forAll( a |  let arg : Classifier = a.oclAsType(Classifier) in    constrainingClassifier->forAll(      cc |           arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))      ))
23670 ,Expression: constrainingClassifier->forAll(     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc)))
23674 ,Expression: object.is(1,1)
23675 ,Expression: association.memberEnd->exists(self.object.type.conformsTo(type))
23676 ,Expression: result<>null implies result.type = object.type
23677 ,Expression: result<>null implies result.is(1,1)
23678 ,Expression: roleBinding->collect(client)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.structuredClassifier = ce2.structuredClassifier)and  roleBinding->collect(supplier)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.collaboration = ce2.collaboration)
23679 ,Expression: type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
23680 ,Expression: type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))
23681 ,Expression: interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
23682 ,Expression: ((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
23684 ,Expression: endType->forAll (oclIsKindOf(DeploymentTarget))
23685 ,Expression: nestedClassifier->isEmpty()
23686 ,Expression: nestingClass <> null implies packagedElement->isEmpty()
23690 ,Expression: result.incoming->isEmpty()
23691 ,Expression: input->isEmpty()
23695 ,Expression: clause->closure(predecessorClause)->intersection(clause)->isEmpty()
23697 ,Expression: exit->forAll(kind = PseudostateKind::exitPoint)
23698 ,Expression: entry->forAll(kind = PseudostateKind::entryPoint)
23699 ,Expression: type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
23702 ,Expression: partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
23703 ,Expression: (role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
23704 ,Expression: self.compatibleWith(definingEnd)
23705 ,Expression: partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
23707 ,Expression: (interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
23708 ,Expression: message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
23709 ,Expression: not constrainedElement->includes(self)
23710 ,Expression:  enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
23712 ,Expression: enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
23713 ,Expression: (source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
23714 ,Expression: not self.association().isAbstract
23715 ,Expression: result.is(1,1)
23716 ,Expression: result.type = association()
23717 ,Expression: self.association().oclIsKindOf(AssociationClass)
23718 ,Expression: not classifier.isAbstract 
23719 ,Expression: result.is(1,1)
23720 ,Expression: not classifier.oclIsKindOf(AssociationClass)
23721 ,Expression: result.type = classifier
23722 ,Expression: (decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
23724 ,Expression: incoming->includes(decisionInputFlow)
23726 ,Expression: (incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
23728 ,Expression: decisionInput<>null implies   (decisionInput.ownedParameter->forAll(par |      par.direction <> ParameterDirectionKind::out and      par.direction <> ParameterDirectionKind::inout ) and   decisionInput.ownedParameter->one(par |      par.direction <> ParameterDirectionKind::return))     
23730 ,Expression: deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
23731 ,Expression: deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
23733 ,Expression: target.is(1,1)
23734 ,Expression: target.type= null
23735 ,Expression: let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self
23736 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
23737 ,Expression: if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
23738 ,Expression: constrainedElement->size() = 1 or constrainedElement->size()=2
23739 ,Expression: if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
23740 ,Expression: mustBeOwned() implies owner->notEmpty()
23741 ,Expression: not allOwnedElements()->includes(self)
23744 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
23745 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
23748 ,Expression: ownedAttribute->forAll(isReadOnly)
23750 ,Expression: handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
23751 ,Expression: (protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
23754 ,Expression: handlerBody.owner=protectedNode.owner
23755 ,Expression: exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
23756 ,Expression: start.covered = finish.covered
23757 ,Expression: regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
23758 ,Expression: extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
23759 ,Expression: metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
23760 ,Expression: memberEnd->size() = 2
23765 ,Expression: (lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
23766 ,Expression: self.aggregation = AggregationKind::composite
23767 ,Expression: name->notEmpty ()
23768 ,Expression: outgoing->isEmpty()
23769 ,Expression: exit->isEmpty()
23770 ,Expression: outgoing->size() = 0
23771 ,Expression: region->size() = 0
23772 ,Expression: submachine->isEmpty()
23773 ,Expression: entry->isEmpty()
23774 ,Expression: doActivity->isEmpty()
23776 ,Expression: incoming->size()=1
23777 ,Expression: self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
23778 ,Expression: ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
23781 ,Expression: interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
23782 ,Expression: isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
23783 ,Expression: isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endif
23784 ,Expression: isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
23785 ,Expression: isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
23786 ,Expression: isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
23795 ,Expression: after->closure(toAfter.after)->excludes(before)
23796 ,Expression: generalization->collect(general)->asSet()->size() <= 1
23797 ,Expression: powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
23798 ,Expression: (self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
23799 ,Expression: self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
23800 ,Expression: (self.represented->select(oclIsKindOf(InformationItem))->forAll(p |  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
23801 ,Expression: self.generalization->isEmpty() and self.feature->isEmpty()
23802 ,Expression: isAbstract
23803 ,Expression: incoming->isEmpty()
23804 ,Expression: outgoing->forAll(oclIsKindOf(ControlFlow))
23806 ,Expression: deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
23807 ,Expression: classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
23808 ,Expression: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
23809 ,Expression: deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
23810 ,Expression: enclosingInteraction->isEmpty()
23812 ,Expression: minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
23813 ,Expression: maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
23814 ,Expression: maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
23817 ,Expression: returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
23819 ,Expression: feature->forAll(visibility = VisibilityKind::public)
23820 ,Expression: interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
23821 ,Expression: outgoing->size() = 1
23822 ,Expression: if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
23823 ,Expression:  self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
23826 ,Expression: self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
23827 ,Expression: inputValue->asBag()=endData.allPins()
23828 ,Expression: endData.end = self.association().memberEnd->asBag()
23829 ,Expression: endData->forAll(not end.isStatic)
23833 ,Expression: value<>null implies value.type.conformsTo(end.type)
23834 ,Expression: value<>null implies value.is(1,1)
23835 ,Expression: value->excludesAll(qualifier.value)
23836 ,Expression: end.association <> null
23837 ,Expression: end.qualifier->includesAll(qualifier.qualifier)
23855 ,Expression: result.incoming->isEmpty()
23856 ,Expression: loopVariableInput.outgoing->isEmpty()
23857 ,Expression: setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
23858 ,Expression: bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
23863 ,Expression: allOwnedNodes()->includesAll(loopVariable.outgoing.target)
23864 ,Expression: outgoing->size()=1
23869 ,Expression: (messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
23870 ,Expression: signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
23878 ,Expression: upperBound() >= lowerBound()
23879 ,Expression: lowerBound() >= 0
23880 ,Expression: lowerValue <> null implies lowerValue.integerValue() <> null
23881 ,Expression: upperValue <> null implies upperValue.unlimitedValue() <> null
23890 ,Expression: (namespace = null and owner <> null) implies visibility = null
23891 ,Expression: (name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
23892 ,Expression: name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
23899 ,Expression: membersAreDistinguishable()
23900 ,Expression: packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
23901 ,Expression: elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
23907 ,Expression: part->forAll(oclIsKindOf(Node))
23909 ,Expression: not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
23911 ,Expression: selection<>null implies source.oclIsKindOf(ObjectNode)
23912 ,Expression: not (isMulticast and isMultireceive)
23914 ,Expression: (selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
23915 ,Expression: (not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
23918 ,Expression: behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
23919 ,Expression: behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()
23926 ,Expression: self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
23927 ,Expression: bodyCondition <> null implies isQuery
23937 ,Expression: packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)
23945 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
23946 ,Expression: visibility = null implies namespace = null
23949 ,Expression: end->notEmpty() implies collaboration->notEmpty()
23950 ,Expression: (isStream and behavior <> null) implies not behavior.isReentrant
23951 ,Expression: not (isException and isStream)
23952 ,Expression: (type.oclIsKindOf(DataType)) implies (effect = null)
23954 ,Expression: parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
23956 ,Expression: parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
23959 ,Expression: isControl implies isControlType
23961 ,Expression: aggregation = AggregationKind::composite
23962 ,Expression: type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
23963 ,Expression: owner = encapsulatedClassifier
23968 ,Expression: metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
23969 ,Expression: metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
23972 ,Expression: subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
23973 ,Expression: isDerivedUnion implies isReadOnly
23974 ,Expression: isComposite and association <> null implies opposite.upperBound() <= 1
23975 ,Expression: (redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
23976 ,Expression: subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
23977 ,Expression: (self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))
23978 ,Expression: isDerivedUnion implies isDerived
23979 ,Expression: deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
23980 ,Expression: subsettedProperty->forAll(sp | sp.name <> name)
23981 ,Expression: (opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
23982 ,Expression: qualifier->notEmpty() implies association->notEmpty()
23989 ,Expression: region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
23990 ,Expression: region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
23991 ,Expression: region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
23993 ,Expression: effect = null
23994 ,Expression: container.belongsToPSM()
23997 ,Expression: (kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
23998 ,Expression: (kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
23999 ,Expression: (kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
24000 ,Expression: (kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
24001 ,Expression: ((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
24002 ,Expression: (kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
24003 ,Expression: (kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
24005 ,Expression: value.is(1,1)
24006 ,Expression: value.type.conformsTo(qualifier.type)
24007 ,Expression: linkEndData.end.qualifier->includes(qualifier)
24008 ,Expression: result.type = classifier
24010 ,Expression: object.type = null
24011 ,Expression: result.is(1,1)
24012 ,Expression: result.type = Boolean
24013 ,Expression: object.is(1,1)
24014 ,Expression: self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
24015 ,Expression: self.openEnd()->first().compatibleWith(result)
24017 ,Expression: self.openEnd()->size() = 1
24018 ,Expression: self.openEnd()->first().isNavigable()
24020 ,Expression: end.association <> null
24021 ,Expression: object.is(1,1)
24022 ,Expression: end.association.memberEnd->forAll(e | not e.isStatic)
24023 ,Expression: result.type = end.type
24024 ,Expression: result.is(1,1)
24025 ,Expression: object.type = end.association
24026 ,Expression: end.association.oclIsKindOf(AssociationClass)
24027 ,Expression: object.is(1,1)
24028 ,Expression: object.type = qualifier.associationEnd.association
24029 ,Expression: qualifier.is(1,1)
24030 ,Expression: qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
24031 ,Expression: result.is(1,1)
24032 ,Expression: result.type = qualifier.type
24033 ,Expression: qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
24034 ,Expression: qualifier.associationEnd <> null
24036 ,Expression: result.is(1,1)
24039 ,Expression: structuralFeature.compatibleWith(result)
24040 ,Expression: result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
24041 ,Expression: result.type =variable.type and result.isOrdered = variable.isOrdered
24042 ,Expression: variable.compatibleWith(result)
24043 ,Expression: name = signal.name
24045 ,Expression: object.type = null
24046 ,Expression: not newClassifier->exists(isAbstract)
24047 ,Expression: object.is(1,1)
24048 ,Expression: redefinedElement->forAll(re | re.isConsistentWith(self))
24049 ,Expression: redefinedElement->forAll(re | not re.isLeaf)
24050 ,Expression: redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
24054 ,Expression: classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))
24057 ,Expression: reducer.outputParameters().type->forAll(conformsTo(result.type))
24060 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1
24061 ,Expression: subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1
24062 ,Expression: (stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
24063 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1
24070 ,Expression: replyToCall.event.oclIsKindOf(CallEvent)
24071 ,Expression: onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
24073 ,Expression: argument->size()=signal.allAttributes()->size()
24074 ,Expression: not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
24075 ,Expression: object.is(1,1)
24076 ,Expression: object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
24079 ,Expression: object.is(1,1)
24080 ,Expression: self.behavior()<>null
24081 ,Expression: onPort->isEmpty()
24086 ,Expression: connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
24087 ,Expression: isSubmachineState implies connection->notEmpty( )
24088 ,Expression: connectionPoint->notEmpty() implies isComposite
24089 ,Expression: self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
24090 ,Expression: isComposite implies not isSubmachineState
24098 ,Expression: connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
24100 ,Expression: specification <> null implies connectionPoint->isEmpty()
24105 ,Expression: ownedAttribute.association->forAll(memberEnd->size()=2)
24106 ,Expression: allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
24107 ,Expression: ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
24111 ,Expression: operand->forAll (oclIsKindOf (LiteralString))
24112 ,Expression: if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
24113 ,Expression: object.is(1,1)
24116 ,Expression: not structuralFeature.isStatic
24117 ,Expression: structuralFeature.featuringClassifier->size() = 1
24121 ,Expression: output.outgoing.target->excludesAll(allOwnedNodes()-input)
24122 ,Expression: edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
24123 ,Expression: input.incoming.source->excludesAll(allOwnedNodes()-output)
24128 ,Expression: parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
24129 ,Expression: signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
24130 ,Expression: default <> null implies default.isCompatibleWith(parameteredElement)
24131 ,Expression: actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
24132 ,Expression: template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
24133 ,Expression: parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
24136 ,Expression: first.is(1,1) and second.is(1,1)
24137 ,Expression: first.type= null and second.type = null
24138 ,Expression: result.type=Boolean
24139 ,Expression: constrainedElement->size() = 1
24140 ,Expression: when.integerValue() >= 0
24141 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
24144 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
24145 ,Expression: (kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
24146 ,Expression: source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
24147 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))
24148 ,Expression: (source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))
24149 ,Expression: (kind = TransitionKind::local) implies((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))
24151 ,Expression: (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())
24154 ,Expression: port->notEmpty() implies event.oclIsKindOf(MessageEvent)
24156 ,Expression: unmarshallType.allAttributes()->size() >= 1
24157 ,Expression: unmarshallType.allAttributes()->size() = result->size()
24159 ,Expression: object.is(1,1)
24160 ,Expression: object.type.conformsTo(unmarshallType)
24161 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
24162 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
24163 ,Expression: not allIncludedUseCases()->includes(self)
24164 ,Expression: name -> notEmpty ()
24166 ,Expression: incoming->isEmpty()
24167 ,Expression: value.type.conformsTo(type)
24176 ,Expression: result.is(1,1)
24177 ,Expression: value.type.conformsTo(result.type)
24179 ,Expression: variable.isAccessibleBy(self)
24186 ,Expression: result <> null implies result.is(1,1)
24187 ,Expression: value <> null implies value.type.conformsTo(structuralFeature.type)
24188 ,Expression: value<>null implies value.is(1,1)
24189 ,Expression: result <> null implies result.type = object.type
24190 ,Expression: value <> null implies value.type.conformsTo(variable.type)
24191 ,Expression: value<>null implies value.is(1,1)
24192 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
24193 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
24194 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
24195 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
24196 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
24197 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
24198 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
24199 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
24200 ,Expression: self.relations->size() > 0
24201 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
24202 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
24203 ,Expression: self.attrs->size() > 0
24206 ,Expression: isUnmarshall = true
24207 ,Expression: not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
24208 ,Expression: input->size() = 0
24209 ,Expression: (self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
24217 ,Expression: fromAction.input->forAll(oclIsKindOf(ActionInputPin))
24218 ,Expression: fromAction.output->size() = 1
24220 ,Expression: ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
24223 ,Expression: activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
24224 ,Expression: containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
24229 ,Expression: (incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
24230 ,Expression: activity.ownedParameter->includes(parameter)
24231 ,Expression: type = parameter.type
24233 ,Expression: incoming->isEmpty() or outgoing->isEmpty()
24234 ,Expression: (not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
24235 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
24236 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
24237 ,Expression: isDimension implies superPartition->isEmpty()
24238 ,Expression: Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
24239 ,Expression: name->notEmpty()
24240 ,Expression: value<>null
24242 ,Expression: value <> null
24244 ,Expression: parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
24245 ,Expression: Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
24246 ,Expression: memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
24247 ,Expression: memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
24248 ,Expression: memberEnd->forAll(type->notEmpty())
24250 ,Expression: self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
24251 ,Expression: ownedAttribute->intersection(ownedEnd)->isEmpty()
24253 ,Expression: specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
24259 ,Expression: isAbstract implies method->isEmpty()
24262 ,Expression: classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
24263 ,Expression: argument->size() = signal.allAttributes()->size()
24265 ,Expression: onPort=null
24268 ,Expression: result->notEmpty() implies isSynchronous
24271 ,Expression: onPort=null
24274 ,Expression: if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
24275 ,Expression: not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
24280 ,Expression: parents()->forAll(c | self.maySpecializeType(c))
24281 ,Expression: powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
24282 ,Expression: parents()->forAll(not isFinalSpecialization)
24283 ,Expression: not allParents()->includes(self)
24300 ,Expression: allowSubstitutable implies constrainingClassifier->notEmpty()
24301 ,Expression: parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
24302 ,Expression: (not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)
24303 ,Expression:  templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))
24304 ,Expression: templateParameterSubstitution.actual->forAll( a |  let arg : Classifier = a.oclAsType(Classifier) in    constrainingClassifier->forAll(      cc |           arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))      ))
24305 ,Expression: constrainingClassifier->forAll(     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc)))
24309 ,Expression: object.is(1,1)
24310 ,Expression: association.memberEnd->exists(self.object.type.conformsTo(type))
24311 ,Expression: result<>null implies result.type = object.type
24312 ,Expression: result<>null implies result.is(1,1)
24313 ,Expression: roleBinding->collect(client)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.structuredClassifier = ce2.structuredClassifier)and  roleBinding->collect(supplier)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.collaboration = ce2.collaboration)
24314 ,Expression: type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
24315 ,Expression: type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))
24316 ,Expression: interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
24317 ,Expression: ((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
24319 ,Expression: endType->forAll (oclIsKindOf(DeploymentTarget))
24320 ,Expression: nestedClassifier->isEmpty()
24321 ,Expression: nestingClass <> null implies packagedElement->isEmpty()
24325 ,Expression: result.incoming->isEmpty()
24326 ,Expression: input->isEmpty()
24330 ,Expression: clause->closure(predecessorClause)->intersection(clause)->isEmpty()
24332 ,Expression: exit->forAll(kind = PseudostateKind::exitPoint)
24333 ,Expression: entry->forAll(kind = PseudostateKind::entryPoint)
24334 ,Expression: type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
24337 ,Expression: partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
24338 ,Expression: (role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
24339 ,Expression: self.compatibleWith(definingEnd)
24340 ,Expression: partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
24342 ,Expression: (interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
24343 ,Expression: message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
24344 ,Expression: not constrainedElement->includes(self)
24345 ,Expression:  enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
24347 ,Expression: enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
24348 ,Expression: (source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
24349 ,Expression: not self.association().isAbstract
24350 ,Expression: result.is(1,1)
24351 ,Expression: result.type = association()
24352 ,Expression: self.association().oclIsKindOf(AssociationClass)
24353 ,Expression: not classifier.isAbstract 
24354 ,Expression: result.is(1,1)
24355 ,Expression: not classifier.oclIsKindOf(AssociationClass)
24356 ,Expression: result.type = classifier
24357 ,Expression: (decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
24359 ,Expression: incoming->includes(decisionInputFlow)
24361 ,Expression: (incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
24363 ,Expression: decisionInput<>null implies   (decisionInput.ownedParameter->forAll(par |      par.direction <> ParameterDirectionKind::out and      par.direction <> ParameterDirectionKind::inout ) and   decisionInput.ownedParameter->one(par |      par.direction <> ParameterDirectionKind::return))     
24365 ,Expression: deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
24366 ,Expression: deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
24368 ,Expression: target.is(1,1)
24369 ,Expression: target.type= null
24370 ,Expression: let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self
24371 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
24372 ,Expression: if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
24373 ,Expression: constrainedElement->size() = 1 or constrainedElement->size()=2
24374 ,Expression: if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
24375 ,Expression: mustBeOwned() implies owner->notEmpty()
24376 ,Expression: not allOwnedElements()->includes(self)
24379 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
24380 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
24383 ,Expression: ownedAttribute->forAll(isReadOnly)
24385 ,Expression: handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
24386 ,Expression: (protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
24389 ,Expression: handlerBody.owner=protectedNode.owner
24390 ,Expression: exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
24391 ,Expression: start.covered = finish.covered
24392 ,Expression: regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
24393 ,Expression: extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
24394 ,Expression: metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
24395 ,Expression: memberEnd->size() = 2
24400 ,Expression: (lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
24401 ,Expression: self.aggregation = AggregationKind::composite
24402 ,Expression: name->notEmpty ()
24403 ,Expression: outgoing->isEmpty()
24404 ,Expression: exit->isEmpty()
24405 ,Expression: outgoing->size() = 0
24406 ,Expression: region->size() = 0
24407 ,Expression: submachine->isEmpty()
24408 ,Expression: entry->isEmpty()
24409 ,Expression: doActivity->isEmpty()
24411 ,Expression: incoming->size()=1
24412 ,Expression: self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
24413 ,Expression: ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
24416 ,Expression: interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
24417 ,Expression: isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
24418 ,Expression: isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endif
24419 ,Expression: isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
24420 ,Expression: isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
24421 ,Expression: isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
24430 ,Expression: after->closure(toAfter.after)->excludes(before)
24431 ,Expression: generalization->collect(general)->asSet()->size() <= 1
24432 ,Expression: powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
24433 ,Expression: (self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
24434 ,Expression: self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
24435 ,Expression: (self.represented->select(oclIsKindOf(InformationItem))->forAll(p |  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
24436 ,Expression: self.generalization->isEmpty() and self.feature->isEmpty()
24437 ,Expression: isAbstract
24438 ,Expression: incoming->isEmpty()
24439 ,Expression: outgoing->forAll(oclIsKindOf(ControlFlow))
24441 ,Expression: deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
24442 ,Expression: classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
24443 ,Expression: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
24444 ,Expression: deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
24445 ,Expression: enclosingInteraction->isEmpty()
24447 ,Expression: minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
24448 ,Expression: maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
24449 ,Expression: maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
24452 ,Expression: returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
24454 ,Expression: feature->forAll(visibility = VisibilityKind::public)
24455 ,Expression: interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
24456 ,Expression: outgoing->size() = 1
24457 ,Expression: if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
24458 ,Expression:  self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
24461 ,Expression: self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
24462 ,Expression: inputValue->asBag()=endData.allPins()
24463 ,Expression: endData.end = self.association().memberEnd->asBag()
24464 ,Expression: endData->forAll(not end.isStatic)
24468 ,Expression: value<>null implies value.type.conformsTo(end.type)
24469 ,Expression: value<>null implies value.is(1,1)
24470 ,Expression: value->excludesAll(qualifier.value)
24471 ,Expression: end.association <> null
24472 ,Expression: end.qualifier->includesAll(qualifier.qualifier)
24490 ,Expression: result.incoming->isEmpty()
24491 ,Expression: loopVariableInput.outgoing->isEmpty()
24492 ,Expression: setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
24493 ,Expression: bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
24498 ,Expression: allOwnedNodes()->includesAll(loopVariable.outgoing.target)
24499 ,Expression: outgoing->size()=1
24504 ,Expression: (messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
24505 ,Expression: signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
24513 ,Expression: upperBound() >= lowerBound()
24514 ,Expression: lowerBound() >= 0
24515 ,Expression: lowerValue <> null implies lowerValue.integerValue() <> null
24516 ,Expression: upperValue <> null implies upperValue.unlimitedValue() <> null
24525 ,Expression: (namespace = null and owner <> null) implies visibility = null
24526 ,Expression: (name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
24527 ,Expression: name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
24534 ,Expression: membersAreDistinguishable()
24535 ,Expression: packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
24536 ,Expression: elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
24542 ,Expression: part->forAll(oclIsKindOf(Node))
24544 ,Expression: not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
24546 ,Expression: selection<>null implies source.oclIsKindOf(ObjectNode)
24547 ,Expression: not (isMulticast and isMultireceive)
24549 ,Expression: (selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
24550 ,Expression: (not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
24553 ,Expression: behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
24554 ,Expression: behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()
24561 ,Expression: self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
24562 ,Expression: bodyCondition <> null implies isQuery
24572 ,Expression: packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)
24580 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
24581 ,Expression: visibility = null implies namespace = null
24584 ,Expression: end->notEmpty() implies collaboration->notEmpty()
24585 ,Expression: (isStream and behavior <> null) implies not behavior.isReentrant
24586 ,Expression: not (isException and isStream)
24587 ,Expression: (type.oclIsKindOf(DataType)) implies (effect = null)
24589 ,Expression: parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
24591 ,Expression: parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
24594 ,Expression: isControl implies isControlType
24596 ,Expression: aggregation = AggregationKind::composite
24597 ,Expression: type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
24598 ,Expression: owner = encapsulatedClassifier
24603 ,Expression: metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
24604 ,Expression: metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
24607 ,Expression: subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
24608 ,Expression: isDerivedUnion implies isReadOnly
24609 ,Expression: isComposite and association <> null implies opposite.upperBound() <= 1
24610 ,Expression: (redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
24611 ,Expression: subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
24612 ,Expression: (self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))
24613 ,Expression: isDerivedUnion implies isDerived
24614 ,Expression: deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
24615 ,Expression: subsettedProperty->forAll(sp | sp.name <> name)
24616 ,Expression: (opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
24617 ,Expression: qualifier->notEmpty() implies association->notEmpty()
24624 ,Expression: region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
24625 ,Expression: region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
24626 ,Expression: region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
24628 ,Expression: effect = null
24629 ,Expression: container.belongsToPSM()
24632 ,Expression: (kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
24633 ,Expression: (kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
24634 ,Expression: (kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
24635 ,Expression: (kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
24636 ,Expression: ((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
24637 ,Expression: (kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
24638 ,Expression: (kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
24640 ,Expression: value.is(1,1)
24641 ,Expression: value.type.conformsTo(qualifier.type)
24642 ,Expression: linkEndData.end.qualifier->includes(qualifier)
24643 ,Expression: result.type = classifier
24645 ,Expression: object.type = null
24646 ,Expression: result.is(1,1)
24647 ,Expression: result.type = Boolean
24648 ,Expression: object.is(1,1)
24649 ,Expression: self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
24650 ,Expression: self.openEnd()->first().compatibleWith(result)
24652 ,Expression: self.openEnd()->size() = 1
24653 ,Expression: self.openEnd()->first().isNavigable()
24655 ,Expression: end.association <> null
24656 ,Expression: object.is(1,1)
24657 ,Expression: end.association.memberEnd->forAll(e | not e.isStatic)
24658 ,Expression: result.type = end.type
24659 ,Expression: result.is(1,1)
24660 ,Expression: object.type = end.association
24661 ,Expression: end.association.oclIsKindOf(AssociationClass)
24662 ,Expression: object.is(1,1)
24663 ,Expression: object.type = qualifier.associationEnd.association
24664 ,Expression: qualifier.is(1,1)
24665 ,Expression: qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
24666 ,Expression: result.is(1,1)
24667 ,Expression: result.type = qualifier.type
24668 ,Expression: qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
24669 ,Expression: qualifier.associationEnd <> null
24671 ,Expression: result.is(1,1)
24674 ,Expression: structuralFeature.compatibleWith(result)
24675 ,Expression: result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
24676 ,Expression: result.type =variable.type and result.isOrdered = variable.isOrdered
24677 ,Expression: variable.compatibleWith(result)
24678 ,Expression: name = signal.name
24680 ,Expression: object.type = null
24681 ,Expression: not newClassifier->exists(isAbstract)
24682 ,Expression: object.is(1,1)
24683 ,Expression: redefinedElement->forAll(re | re.isConsistentWith(self))
24684 ,Expression: redefinedElement->forAll(re | not re.isLeaf)
24685 ,Expression: redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
24689 ,Expression: classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))
24692 ,Expression: reducer.outputParameters().type->forAll(conformsTo(result.type))
24695 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1
24696 ,Expression: subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1
24697 ,Expression: (stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
24698 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1
24705 ,Expression: replyToCall.event.oclIsKindOf(CallEvent)
24706 ,Expression: onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
24708 ,Expression: argument->size()=signal.allAttributes()->size()
24709 ,Expression: not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
24710 ,Expression: object.is(1,1)
24711 ,Expression: object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
24714 ,Expression: object.is(1,1)
24715 ,Expression: self.behavior()<>null
24716 ,Expression: onPort->isEmpty()
24721 ,Expression: connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
24722 ,Expression: isSubmachineState implies connection->notEmpty( )
24723 ,Expression: connectionPoint->notEmpty() implies isComposite
24724 ,Expression: self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
24725 ,Expression: isComposite implies not isSubmachineState
24733 ,Expression: connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
24735 ,Expression: specification <> null implies connectionPoint->isEmpty()
24740 ,Expression: ownedAttribute.association->forAll(memberEnd->size()=2)
24741 ,Expression: allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
24742 ,Expression: ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
24746 ,Expression: operand->forAll (oclIsKindOf (LiteralString))
24747 ,Expression: if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
24748 ,Expression: object.is(1,1)
24751 ,Expression: not structuralFeature.isStatic
24752 ,Expression: structuralFeature.featuringClassifier->size() = 1
24756 ,Expression: output.outgoing.target->excludesAll(allOwnedNodes()-input)
24757 ,Expression: edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
24758 ,Expression: input.incoming.source->excludesAll(allOwnedNodes()-output)
24763 ,Expression: parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
24764 ,Expression: signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
24765 ,Expression: default <> null implies default.isCompatibleWith(parameteredElement)
24766 ,Expression: actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
24767 ,Expression: template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
24768 ,Expression: parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
24771 ,Expression: first.is(1,1) and second.is(1,1)
24772 ,Expression: first.type= null and second.type = null
24773 ,Expression: result.type=Boolean
24774 ,Expression: constrainedElement->size() = 1
24775 ,Expression: when.integerValue() >= 0
24776 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
24779 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
24780 ,Expression: (kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
24781 ,Expression: source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
24782 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))
24783 ,Expression: (source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))
24784 ,Expression: (kind = TransitionKind::local) implies((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))
24786 ,Expression: (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())
24789 ,Expression: port->notEmpty() implies event.oclIsKindOf(MessageEvent)
24791 ,Expression: unmarshallType.allAttributes()->size() >= 1
24792 ,Expression: unmarshallType.allAttributes()->size() = result->size()
24794 ,Expression: object.is(1,1)
24795 ,Expression: object.type.conformsTo(unmarshallType)
24796 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
24797 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
24798 ,Expression: not allIncludedUseCases()->includes(self)
24799 ,Expression: name -> notEmpty ()
24801 ,Expression: incoming->isEmpty()
24802 ,Expression: value.type.conformsTo(type)
24811 ,Expression: result.is(1,1)
24812 ,Expression: value.type.conformsTo(result.type)
24814 ,Expression: variable.isAccessibleBy(self)
24821 ,Expression: result <> null implies result.is(1,1)
24822 ,Expression: value <> null implies value.type.conformsTo(structuralFeature.type)
24823 ,Expression: value<>null implies value.is(1,1)
24824 ,Expression: result <> null implies result.type = object.type
24825 ,Expression: value <> null implies value.type.conformsTo(variable.type)
24826 ,Expression: value<>null implies value.is(1,1)
24829 ,Expression: isUnmarshall = true
24830 ,Expression: not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
24831 ,Expression: input->size() = 0
24832 ,Expression: (self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
24840 ,Expression: fromAction.input->forAll(oclIsKindOf(ActionInputPin))
24841 ,Expression: fromAction.output->size() = 1
24843 ,Expression: ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
24846 ,Expression: activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
24847 ,Expression: containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
24852 ,Expression: (incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
24853 ,Expression: activity.ownedParameter->includes(parameter)
24854 ,Expression: type = parameter.type
24856 ,Expression: incoming->isEmpty() or outgoing->isEmpty()
24857 ,Expression: (not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
24858 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
24859 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
24860 ,Expression: isDimension implies superPartition->isEmpty()
24861 ,Expression: Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
24862 ,Expression: name->notEmpty()
24863 ,Expression: value<>null
24865 ,Expression: value <> null
24867 ,Expression: parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
24868 ,Expression: Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
24869 ,Expression: memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
24870 ,Expression: memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
24871 ,Expression: memberEnd->forAll(type->notEmpty())
24873 ,Expression: self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
24874 ,Expression: ownedAttribute->intersection(ownedEnd)->isEmpty()
24876 ,Expression: specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
24882 ,Expression: isAbstract implies method->isEmpty()
24885 ,Expression: classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
24886 ,Expression: argument->size() = signal.allAttributes()->size()
24888 ,Expression: onPort=null
24891 ,Expression: result->notEmpty() implies isSynchronous
24894 ,Expression: onPort=null
24897 ,Expression: if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
24898 ,Expression: not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
24903 ,Expression: parents()->forAll(c | self.maySpecializeType(c))
24904 ,Expression: powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
24905 ,Expression: parents()->forAll(not isFinalSpecialization)
24906 ,Expression: not allParents()->includes(self)
24923 ,Expression: allowSubstitutable implies constrainingClassifier->notEmpty()
24924 ,Expression: parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
24925 ,Expression: (not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)
24926 ,Expression:  templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))
24927 ,Expression: templateParameterSubstitution.actual->forAll( a |  let arg : Classifier = a.oclAsType(Classifier) in    constrainingClassifier->forAll(      cc |           arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))      ))
24928 ,Expression: constrainingClassifier->forAll(     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc)))
24932 ,Expression: object.is(1,1)
24933 ,Expression: association.memberEnd->exists(self.object.type.conformsTo(type))
24934 ,Expression: result<>null implies result.type = object.type
24935 ,Expression: result<>null implies result.is(1,1)
24936 ,Expression: roleBinding->collect(client)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.structuredClassifier = ce2.structuredClassifier)and  roleBinding->collect(supplier)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.collaboration = ce2.collaboration)
24937 ,Expression: type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
24938 ,Expression: type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))
24939 ,Expression: interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
24940 ,Expression: ((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
24942 ,Expression: endType->forAll (oclIsKindOf(DeploymentTarget))
24943 ,Expression: nestedClassifier->isEmpty()
24944 ,Expression: nestingClass <> null implies packagedElement->isEmpty()
24948 ,Expression: result.incoming->isEmpty()
24949 ,Expression: input->isEmpty()
24953 ,Expression: clause->closure(predecessorClause)->intersection(clause)->isEmpty()
24955 ,Expression: exit->forAll(kind = PseudostateKind::exitPoint)
24956 ,Expression: entry->forAll(kind = PseudostateKind::entryPoint)
24957 ,Expression: type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
24960 ,Expression: partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
24961 ,Expression: (role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
24962 ,Expression: self.compatibleWith(definingEnd)
24963 ,Expression: partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
24965 ,Expression: (interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
24966 ,Expression: message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
24967 ,Expression: not constrainedElement->includes(self)
24968 ,Expression:  enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
24970 ,Expression: enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
24971 ,Expression: (source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
24972 ,Expression: not self.association().isAbstract
24973 ,Expression: result.is(1,1)
24974 ,Expression: result.type = association()
24975 ,Expression: self.association().oclIsKindOf(AssociationClass)
24976 ,Expression: not classifier.isAbstract 
24977 ,Expression: result.is(1,1)
24978 ,Expression: not classifier.oclIsKindOf(AssociationClass)
24979 ,Expression: result.type = classifier
24980 ,Expression: (decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
24982 ,Expression: incoming->includes(decisionInputFlow)
24984 ,Expression: (incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
24986 ,Expression: decisionInput<>null implies   (decisionInput.ownedParameter->forAll(par |      par.direction <> ParameterDirectionKind::out and      par.direction <> ParameterDirectionKind::inout ) and   decisionInput.ownedParameter->one(par |      par.direction <> ParameterDirectionKind::return))     
24988 ,Expression: deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
24989 ,Expression: deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
24991 ,Expression: target.is(1,1)
24992 ,Expression: target.type= null
24993 ,Expression: let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self
24994 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
24995 ,Expression: if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
24996 ,Expression: constrainedElement->size() = 1 or constrainedElement->size()=2
24997 ,Expression: if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
24998 ,Expression: mustBeOwned() implies owner->notEmpty()
24999 ,Expression: not allOwnedElements()->includes(self)
25002 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
25003 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
25006 ,Expression: ownedAttribute->forAll(isReadOnly)
25008 ,Expression: handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
25009 ,Expression: (protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
25012 ,Expression: handlerBody.owner=protectedNode.owner
25013 ,Expression: exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
25014 ,Expression: start.covered = finish.covered
25015 ,Expression: regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
25016 ,Expression: extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
25017 ,Expression: metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
25018 ,Expression: memberEnd->size() = 2
25023 ,Expression: (lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
25024 ,Expression: self.aggregation = AggregationKind::composite
25025 ,Expression: name->notEmpty ()
25026 ,Expression: outgoing->isEmpty()
25027 ,Expression: exit->isEmpty()
25028 ,Expression: outgoing->size() = 0
25029 ,Expression: region->size() = 0
25030 ,Expression: submachine->isEmpty()
25031 ,Expression: entry->isEmpty()
25032 ,Expression: doActivity->isEmpty()
25034 ,Expression: incoming->size()=1
25035 ,Expression: self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
25036 ,Expression: ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
25039 ,Expression: interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
25040 ,Expression: isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
25041 ,Expression: isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endif
25042 ,Expression: isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
25043 ,Expression: isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
25044 ,Expression: isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
25053 ,Expression: after->closure(toAfter.after)->excludes(before)
25054 ,Expression: generalization->collect(general)->asSet()->size() <= 1
25055 ,Expression: powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
25056 ,Expression: (self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
25057 ,Expression: self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
25058 ,Expression: (self.represented->select(oclIsKindOf(InformationItem))->forAll(p |  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
25059 ,Expression: self.generalization->isEmpty() and self.feature->isEmpty()
25060 ,Expression: isAbstract
25061 ,Expression: incoming->isEmpty()
25062 ,Expression: outgoing->forAll(oclIsKindOf(ControlFlow))
25064 ,Expression: deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
25065 ,Expression: classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
25066 ,Expression: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
25067 ,Expression: deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
25068 ,Expression: enclosingInteraction->isEmpty()
25070 ,Expression: minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
25071 ,Expression: maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
25072 ,Expression: maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
25075 ,Expression: returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
25077 ,Expression: feature->forAll(visibility = VisibilityKind::public)
25078 ,Expression: interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
25079 ,Expression: outgoing->size() = 1
25080 ,Expression: if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
25081 ,Expression:  self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
25084 ,Expression: self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
25085 ,Expression: inputValue->asBag()=endData.allPins()
25086 ,Expression: endData.end = self.association().memberEnd->asBag()
25087 ,Expression: endData->forAll(not end.isStatic)
25091 ,Expression: value<>null implies value.type.conformsTo(end.type)
25092 ,Expression: value<>null implies value.is(1,1)
25093 ,Expression: value->excludesAll(qualifier.value)
25094 ,Expression: end.association <> null
25095 ,Expression: end.qualifier->includesAll(qualifier.qualifier)
25113 ,Expression: result.incoming->isEmpty()
25114 ,Expression: loopVariableInput.outgoing->isEmpty()
25115 ,Expression: setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
25116 ,Expression: bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
25121 ,Expression: allOwnedNodes()->includesAll(loopVariable.outgoing.target)
25122 ,Expression: outgoing->size()=1
25127 ,Expression: (messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
25128 ,Expression: signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
25136 ,Expression: upperBound() >= lowerBound()
25137 ,Expression: lowerBound() >= 0
25138 ,Expression: lowerValue <> null implies lowerValue.integerValue() <> null
25139 ,Expression: upperValue <> null implies upperValue.unlimitedValue() <> null
25148 ,Expression: (namespace = null and owner <> null) implies visibility = null
25149 ,Expression: (name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
25150 ,Expression: name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
25157 ,Expression: membersAreDistinguishable()
25158 ,Expression: packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
25159 ,Expression: elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
25165 ,Expression: part->forAll(oclIsKindOf(Node))
25167 ,Expression: not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
25169 ,Expression: selection<>null implies source.oclIsKindOf(ObjectNode)
25170 ,Expression: not (isMulticast and isMultireceive)
25172 ,Expression: (selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
25173 ,Expression: (not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
25176 ,Expression: behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
25177 ,Expression: behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()
25184 ,Expression: self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
25185 ,Expression: bodyCondition <> null implies isQuery
25195 ,Expression: packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)
25203 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
25204 ,Expression: visibility = null implies namespace = null
25207 ,Expression: end->notEmpty() implies collaboration->notEmpty()
25208 ,Expression: (isStream and behavior <> null) implies not behavior.isReentrant
25209 ,Expression: not (isException and isStream)
25210 ,Expression: (type.oclIsKindOf(DataType)) implies (effect = null)
25212 ,Expression: parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
25214 ,Expression: parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
25217 ,Expression: isControl implies isControlType
25219 ,Expression: aggregation = AggregationKind::composite
25220 ,Expression: type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
25221 ,Expression: owner = encapsulatedClassifier
25226 ,Expression: metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
25227 ,Expression: metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
25230 ,Expression: subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
25231 ,Expression: isDerivedUnion implies isReadOnly
25232 ,Expression: isComposite and association <> null implies opposite.upperBound() <= 1
25233 ,Expression: (redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
25234 ,Expression: subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
25235 ,Expression: (self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))
25236 ,Expression: isDerivedUnion implies isDerived
25237 ,Expression: deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
25238 ,Expression: subsettedProperty->forAll(sp | sp.name <> name)
25239 ,Expression: (opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
25240 ,Expression: qualifier->notEmpty() implies association->notEmpty()
25247 ,Expression: region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
25248 ,Expression: region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
25249 ,Expression: region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
25251 ,Expression: effect = null
25252 ,Expression: container.belongsToPSM()
25255 ,Expression: (kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
25256 ,Expression: (kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
25257 ,Expression: (kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
25258 ,Expression: (kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
25259 ,Expression: ((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
25260 ,Expression: (kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
25261 ,Expression: (kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
25263 ,Expression: value.is(1,1)
25264 ,Expression: value.type.conformsTo(qualifier.type)
25265 ,Expression: linkEndData.end.qualifier->includes(qualifier)
25266 ,Expression: result.type = classifier
25268 ,Expression: object.type = null
25269 ,Expression: result.is(1,1)
25270 ,Expression: result.type = Boolean
25271 ,Expression: object.is(1,1)
25272 ,Expression: self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
25273 ,Expression: self.openEnd()->first().compatibleWith(result)
25275 ,Expression: self.openEnd()->size() = 1
25276 ,Expression: self.openEnd()->first().isNavigable()
25278 ,Expression: end.association <> null
25279 ,Expression: object.is(1,1)
25280 ,Expression: end.association.memberEnd->forAll(e | not e.isStatic)
25281 ,Expression: result.type = end.type
25282 ,Expression: result.is(1,1)
25283 ,Expression: object.type = end.association
25284 ,Expression: end.association.oclIsKindOf(AssociationClass)
25285 ,Expression: object.is(1,1)
25286 ,Expression: object.type = qualifier.associationEnd.association
25287 ,Expression: qualifier.is(1,1)
25288 ,Expression: qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
25289 ,Expression: result.is(1,1)
25290 ,Expression: result.type = qualifier.type
25291 ,Expression: qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
25292 ,Expression: qualifier.associationEnd <> null
25294 ,Expression: result.is(1,1)
25297 ,Expression: structuralFeature.compatibleWith(result)
25298 ,Expression: result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
25299 ,Expression: result.type =variable.type and result.isOrdered = variable.isOrdered
25300 ,Expression: variable.compatibleWith(result)
25301 ,Expression: name = signal.name
25303 ,Expression: object.type = null
25304 ,Expression: not newClassifier->exists(isAbstract)
25305 ,Expression: object.is(1,1)
25306 ,Expression: redefinedElement->forAll(re | re.isConsistentWith(self))
25307 ,Expression: redefinedElement->forAll(re | not re.isLeaf)
25308 ,Expression: redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
25312 ,Expression: classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))
25315 ,Expression: reducer.outputParameters().type->forAll(conformsTo(result.type))
25318 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1
25319 ,Expression: subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1
25320 ,Expression: (stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
25321 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1
25328 ,Expression: replyToCall.event.oclIsKindOf(CallEvent)
25329 ,Expression: onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
25331 ,Expression: argument->size()=signal.allAttributes()->size()
25332 ,Expression: not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
25333 ,Expression: object.is(1,1)
25334 ,Expression: object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
25337 ,Expression: object.is(1,1)
25338 ,Expression: self.behavior()<>null
25339 ,Expression: onPort->isEmpty()
25344 ,Expression: connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
25345 ,Expression: isSubmachineState implies connection->notEmpty( )
25346 ,Expression: connectionPoint->notEmpty() implies isComposite
25347 ,Expression: self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
25348 ,Expression: isComposite implies not isSubmachineState
25356 ,Expression: connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
25358 ,Expression: specification <> null implies connectionPoint->isEmpty()
25363 ,Expression: ownedAttribute.association->forAll(memberEnd->size()=2)
25364 ,Expression: allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
25365 ,Expression: ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
25369 ,Expression: operand->forAll (oclIsKindOf (LiteralString))
25370 ,Expression: if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
25371 ,Expression: object.is(1,1)
25374 ,Expression: not structuralFeature.isStatic
25375 ,Expression: structuralFeature.featuringClassifier->size() = 1
25379 ,Expression: output.outgoing.target->excludesAll(allOwnedNodes()-input)
25380 ,Expression: edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
25381 ,Expression: input.incoming.source->excludesAll(allOwnedNodes()-output)
25386 ,Expression: parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
25387 ,Expression: signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
25388 ,Expression: default <> null implies default.isCompatibleWith(parameteredElement)
25389 ,Expression: actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
25390 ,Expression: template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
25391 ,Expression: parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
25394 ,Expression: first.is(1,1) and second.is(1,1)
25395 ,Expression: first.type= null and second.type = null
25396 ,Expression: result.type=Boolean
25397 ,Expression: constrainedElement->size() = 1
25398 ,Expression: when.integerValue() >= 0
25399 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
25402 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
25403 ,Expression: (kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
25404 ,Expression: source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
25405 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))
25406 ,Expression: (source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))
25407 ,Expression: (kind = TransitionKind::local) implies((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))
25409 ,Expression: (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())
25412 ,Expression: port->notEmpty() implies event.oclIsKindOf(MessageEvent)
25414 ,Expression: unmarshallType.allAttributes()->size() >= 1
25415 ,Expression: unmarshallType.allAttributes()->size() = result->size()
25417 ,Expression: object.is(1,1)
25418 ,Expression: object.type.conformsTo(unmarshallType)
25419 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
25420 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
25421 ,Expression: not allIncludedUseCases()->includes(self)
25422 ,Expression: name -> notEmpty ()
25424 ,Expression: incoming->isEmpty()
25425 ,Expression: value.type.conformsTo(type)
25434 ,Expression: result.is(1,1)
25435 ,Expression: value.type.conformsTo(result.type)
25437 ,Expression: variable.isAccessibleBy(self)
25444 ,Expression: result <> null implies result.is(1,1)
25445 ,Expression: value <> null implies value.type.conformsTo(structuralFeature.type)
25446 ,Expression: value<>null implies value.is(1,1)
25447 ,Expression: result <> null implies result.type = object.type
25448 ,Expression: value <> null implies value.type.conformsTo(variable.type)
25449 ,Expression: value<>null implies value.is(1,1)
25450 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
25451 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
25452 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
25453 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
25454 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
25455 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
25456 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
25457 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
25458 ,Expression: self.relations->size() > 0
25459 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
25460 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
25461 ,Expression: self.attrs->size() > 0
25462 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
25463 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
25464 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
25465 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
25466 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
25467 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
25468 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
25469 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
25470 ,Expression: self.relations->size() > 0
25471 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
25472 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
25473 ,Expression: self.attrs->size() > 0
25474 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
25475 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
25476 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
25477 ,Expression: self.description.size() > 0
25478 ,Expression: RestMethod.allInstances()->includes(self)
25479 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
25480 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
25481 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
25482 ,Expression: self.ID.attributeOf = self
25483 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
25484 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
25485 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
25486 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
25487 ,Expression: self.description.size() > 0
25488 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
25489 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
25490 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
25567 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
25609 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
25610 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
25666 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
25667 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
25711 ,Expression: self.triggers -> size() <= 2
25712 ,Expression: self.triggers -> size() > 1
25713 ,Expression: self.contains -> isUnique(name)
25714 ,Expression: self.run -> select(C|C.main = true) -> size() = 1
25715 ,Expression: if (not self.minSDK -> oclIsUndefined()) then self.minSDK < self.targetSDK else not self.targetSDK ->oclIsUndefined() endif
25717 ,Expression: self.buttonOwner.triggers -> select(c|c.type = self.type) -> size() = 1
25718 ,Expression: self.triggers -> size() <= 2
25719 ,Expression: self.triggers -> size() > 1
25720 ,Expression: self.contains -> isUnique(name)
25721 ,Expression: self.run -> select(C|C.main = true) -> size() = 1
25722 ,Expression: if (not self.minSDK -> oclIsUndefined()) then self.minSDK < self.targetSDK else not self.targetSDK ->oclIsUndefined() endif
25724 ,Expression: self.buttonOwner.triggers -> select(c|c.type = self.type) -> size() = 1
25725 ,Expression: self.name <> ''
25726 ,Expression:         self.name <> ''
25727 ,Expression:             self.predecessors->size() > 0 or self.successors->size() > 0
25728 ,Expression: self.tokensCount > 0
25729 ,Expression: self.successors->size() > 0
25730 ,Expression: self.successors->forAll(s | s.target.oclIsKindOf(Place))
25731 ,Expression: self.tokensCount >= 0
25732 ,Expression: self.successors->forAll(s | s.target.oclIsKindOf(Transition))
25733 ,Expression:         (name <> 'Process' and name <> '')
25734 ,Expression:             self.processElements            ->select(p | p.oclIsTypeOf(WorkDefinition))            ->collect(p | p.oclAsType(WorkDefinition))            ->forAll(wd1, wd2 | wd1 <> wd2 implies wd1.name <> wd2.name)
25735 ,Expression:         self.name <> ''
25736 ,Expression:         self.process = self.predecessor.process
25737 ,Expression:         self.process = self.successor.process
25738 ,Expression:             self.successor <> self.predecessor
25739 ,Expression: self.name <> ''
25740 ,Expression:         self.name <> ''
25741 ,Expression:             self.predecessors->size() > 0 or self.successors->size() > 0
25742 ,Expression: self.tokensCount > 0
25743 ,Expression: self.successors->size() > 0
25744 ,Expression: self.successors->forAll(s | s.target.oclIsKindOf(Place))
25745 ,Expression: self.tokensCount >= 0
25746 ,Expression: self.successors->forAll(s | s.target.oclIsKindOf(Transition))
25747 ,Expression:         (name <> 'Process' and name <> '')
25748 ,Expression:             self.processElements            ->select(p | p.oclIsTypeOf(WorkDefinition))            ->collect(p | p.oclAsType(WorkDefinition))            ->forAll(wd1, wd2 | wd1 <> wd2 implies wd1.name <> wd2.name)
25749 ,Expression:         self.name <> ''
25750 ,Expression:         self.process = self.predecessor.process
25751 ,Expression:         self.process = self.successor.process
25752 ,Expression:             self.successor <> self.predecessor
25753 ,Expression: Sequence{'', 'Scénario'}->forAll(n | self.name <> n)
25754 ,Expression: self.components->select(c | c.oclIsKindOf(Activity))->collect(c | c.oclAsType(Activity))->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
25755 ,Expression: Sequence{'', 'Activité', 'Choix', 'Parallèle', 'Alternative'}->forAll(n | self.name <> n)
25756 ,Expression: self.processElements->select(e | e.oclIsKindOf(WorkDefinition))->collect(e | e.oclAsType(WorkDefinition))->forAll(e1, e2 | e1.name <> e2.name or e1 = e2)
25757 ,Expression: Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
25758 ,Expression: self.process = self.predecessor.process
25759 ,Expression: self.process = self.successor.process
25760 ,Expression:             relativeFrequencies.value->sum() = 1.0
25761 ,Expression:             relativeFrequencies->forAll(f1,f2|             (f1 <> f2 and not(f1.behaviorModel.oclIsUndefined() or f2.behaviorModel.oclIsUndefined()))                 implies f1.behaviorModel <> f2.behaviorModel)
25762 ,Expression:             value >= 0.0 and value <= 1.0
25763 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2|                 (b1 <> b2 and not(b1.name.oclIsUndefined() or b2.name.oclIsUndefined()))                     implies b1.name <> b2.name                )
25764 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2 |                (b1 <> b2 and not(b1.filename.oclIsUndefined() or b2.filename.oclIsUndefined()))                    implies b1.filename <> b2.filename)
25765 ,Expression:             Service.allInstances()->                forAll(s|markovStates->exists(m|m.service = s))
25766 ,Expression:             not initialState.oclIsUndefined() implies markovStates->includes(initialState)
25767 ,Expression:             markovStates->forAll(s|                 s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (markovStates->includes(t.targetState)                    or t.targetState = exitState)))
25768 ,Expression:             probability >= 0.0 and probability <= 1.0
25769 ,Expression:             Transition.allInstances()->                forAll(t1,t2|                    not (t1.thinkTime.oclIsUndefined() or t2.thinkTime.oclIsUndefined()) implies                     t1.thinkTime.oclType() = t2.thinkTime.oclType()                )
25770 ,Expression:             outgoingTransitions.probability->sum() = 1.0
25771 ,Expression:             MarkovState.allInstances()->                forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                    implies s1.service <> s2.service                )
25772 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies t1.targetState <> t2.targetState                )
25773 ,Expression:             not service.oclIsUndefined() implies             ApplicationState.allInstances()->exists(as|service = as.service and                outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies as.outgoingTransitions->exists(at|                        (at.targetState.oclIsTypeOf(ApplicationExitState) and                         t.targetState.oclIsTypeOf(BehaviorModelExitState)) or                       ((t.targetState.oclIsTypeOf(MarkovState) and                         at.targetState.oclIsTypeOf(ApplicationState) and                         at.targetState.oclAsType(ApplicationState).service =                         t.targetState.oclAsType(MarkovState).service)))))
25774 ,Expression:     Service.allInstances()->                forAll(s1,s2|                    (s1 <> s2 and not(s1.name.oclIsUndefined() or s2.name.oclIsUndefined()))                     implies s1.name <> s2.name                )
25775 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
25776 ,Expression:          properties->forAll(p1,p2 |              (p1 <> p2 and not(p1.key.oclIsUndefined() or p2.key.oclIsUndefined()))                implies p1.key <> p2.key         )
25777 ,Expression:         parameters->forAll(p1,p2 |             (p1 <> p2 and not(p1.name.oclIsUndefined() or p2.name.oclIsUndefined()))             implies p1.name <> p2.name        )
25778 ,Expression:         Request.allInstances()->forAll(r1,r2 | r1.oclType() = r2.oclType())
25779 ,Expression:             outgoingTransitions->                forAll(t1,t2|                    (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                    implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
25780 ,Expression:             protocolStates->forAll(s1,s2|                (s1 <> s2 and not(s1.request.oclIsUndefined() or s2.request.oclIsUndefined()))                 implies s1.request <> s2.request            )
25781 ,Expression:             not initialState.oclIsUndefined() implies protocolStates->includes(initialState)
25782 ,Expression:             protocolStates->forAll(s|                s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (protocolStates->includes(t.targetState) or t.targetState = exitState)))
25783 ,Expression:             applicationStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                 implies s1.service <> s2.service            )
25784 ,Expression:             not initialState.oclIsUndefined() implies applicationStates->includes(initialState)
25785 ,Expression:            numberOfSessions >= 0
25786 ,Expression:             mean >= 0.0 and deviation >= 0.0 and deviation <= mean
25787 ,Expression:             relativeFrequencies.value->sum() = 1.0
25788 ,Expression:             relativeFrequencies->forAll(f1,f2|             (f1 <> f2 and not(f1.behaviorModel.oclIsUndefined() or f2.behaviorModel.oclIsUndefined()))                 implies f1.behaviorModel <> f2.behaviorModel)
25789 ,Expression:             value >= 0.0 and value <= 1.0
25790 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2|                 (b1 <> b2 and not(b1.name.oclIsUndefined() or b2.name.oclIsUndefined()))                     implies b1.name <> b2.name                )
25791 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2 |                (b1 <> b2 and not(b1.filename.oclIsUndefined() or b2.filename.oclIsUndefined()))                    implies b1.filename <> b2.filename)
25792 ,Expression:             Service.allInstances()->                forAll(s|markovStates->exists(m|m.service = s))
25793 ,Expression:             not initialState.oclIsUndefined() implies markovStates->includes(initialState)
25794 ,Expression:             markovStates->forAll(s|                 s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (markovStates->includes(t.targetState)                    or t.targetState = exitState)))
25795 ,Expression:             markovStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                    implies s1.service <> s2.service                )
25796 ,Expression:             probability >= 0.0 and probability <= 1.0
25797 ,Expression:             Transition.allInstances()->                forAll(t1,t2|                    not (t1.thinkTime.oclIsUndefined() or t2.thinkTime.oclIsUndefined()) implies                     t1.thinkTime.oclType() = t2.thinkTime.oclType()                )
25798 ,Expression:             outgoingTransitions.probability->exists(p | p > 0) implies            outgoingTransitions.probability->sum() = 1.0
25799 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies t1.targetState <> t2.targetState                )
25800 ,Expression:             not service.oclIsUndefined() implies             ApplicationState.allInstances()->exists(as|service = as.service and                outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies as.outgoingTransitions->exists(at|                        (at.targetState.oclIsTypeOf(ApplicationExitState) and                         t.targetState.oclIsTypeOf(BehaviorModelExitState)) or                       ((t.targetState.oclIsTypeOf(MarkovState) and                         at.targetState.oclIsTypeOf(ApplicationState) and                         at.targetState.oclAsType(ApplicationState).service =                         t.targetState.oclAsType(MarkovState).service)))))
25801 ,Expression:     Service.allInstances()->                forAll(s1,s2|                    (s1 <> s2 and not(s1.name.oclIsUndefined() or s2.name.oclIsUndefined()))                     implies s1.name <> s2.name                )
25802 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
25803 ,Expression:          properties->forAll(p1,p2 |              (p1 <> p2 and not(p1.key.oclIsUndefined() or p2.key.oclIsUndefined()))                implies p1.key <> p2.key         )
25804 ,Expression:         parameters->forAll(p1,p2 |             (p1 <> p2 and not(p1.name.oclIsUndefined() or p2.name.oclIsUndefined()))             implies p1.name <> p2.name        )
25805 ,Expression:         Request.allInstances()->forAll(r1,r2 | r1.oclType() = r2.oclType())
25806 ,Expression:             outgoingTransitions->                forAll(t1,t2|                    (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                    implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
25807 ,Expression:             protocolStates->forAll(s1,s2|                (s1 <> s2 and not(s1.request.oclIsUndefined() or s2.request.oclIsUndefined()))                 implies s1.request <> s2.request            )
25808 ,Expression:             not initialState.oclIsUndefined() implies protocolStates->includes(initialState)
25809 ,Expression:             protocolStates->forAll(s|                s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (protocolStates->includes(t.targetState) or t.targetState = exitState)))
25810 ,Expression:             applicationStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                 implies s1.service <> s2.service            )
25811 ,Expression:             not initialState.oclIsUndefined() implies applicationStates->includes(initialState)
25812 ,Expression:            numberOfSessions >= 0
25813 ,Expression:             mean >= 0.0 and deviation >= 0.0 and deviation <= mean
25814 ,Expression: self.inParameter->forAll(c1, c2 | (c1<>c2 and c1.datatype.name = c2.datatype.name) implies c1.name <> c2.name)
25815 ,Expression: DataTypeLibrary.allInstances().datatype.name->includes(self.datatype.name)
25816 ,Expression: self.datatype->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
25817 ,Expression: self.transition -> select(t:Transition|t.trigger.oclIsUndefined()) -> size() = 0
25818 ,Expression: self.systemunits->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
25819 ,Expression: self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial) -> size()= 1
25820 ,Expression: self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).function -> isEmpty()
25821 ,Expression: self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isTerminal).function -> isEmpty()
25822 ,Expression: node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).edge -> size() = 1
25823 ,Expression: self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
25824 ,Expression: self.attributes->union(self.systemUnit.attributes)->includesAll(self.processibleEvents->selectByKind(ChangeEvent).changeExpression.booleanFunctionCall.parameters.valueSpecification->selectByKind(AttributeValueSpecification).attribute)
25825 ,Expression: self.nodes->selectByKind(State)->select(s | s.initial)->size() = 1
25826 ,Expression: self.nodes->selectByKind(State)->select(s | s.terminal)->size() <= 1
25827 ,Expression: self.edges.target->selectByKind(State)->select(s | s.initial)->size() = 0
25828 ,Expression: self.edges.source->selectByKind(State)->select(s | s.initial)->size() = 1
25829 ,Expression: self.nodes->selectByType(State)->select(s |s.terminal)->size() = 0 or self.edges.target->selectByType(State)->select(s | s.terminal)->size() = 1
25830 ,Expression: self.edges.source->selectByKind(State)->select(s | s.terminal)->size() = 0
25831 ,Expression: self.oclContainer.oclAsType(StateSystem).edges->select(e | e.source = self)
25832 ,Expression: self.oclContainer.oclAsType(StateSystem).edges->select(e | e.target = self)
25833 ,Expression: self.incomingEdges->size() = 1
25834 ,Expression: self.outgoingEdges->size() >= 2
25835 ,Expression: self.outgoingEdges.target->selectByType(Transition)->select(t |t.trigger.oclIsUndefined())->size() <= 1
25836 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
25837 ,Expression: self.incomingEdges->size() >= 2
25838 ,Expression: self.outgoingEdges->size() = 1
25839 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
25840 ,Expression: not (self.terminal and self.initial)
25841 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
25842 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
25843 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
25844 ,Expression: self.incomingEdges->size() = 1
25845 ,Expression: self.outgoingEdges->size() = 1
25846 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
25847 ,Expression: self.parameters.parameter->includesAll(self.function.parameters->select(p |p.direction = ParameterDirectionKind::IN))
25848 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
25849 ,Expression: self.attribute.type = self.parameterValue.parameter.type
25850 ,Expression: self.booleanFunctionCall.function.parameters->exists(p |p.direction = ParameterDirectionKind::RETURN and p.type.name = 'Boolean')
25851 ,Expression: self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
25852 ,Expression: self.attributes->union(self.systemUnit.attributes)->includesAll(self.processibleEvents->selectByKind(ChangeEvent).changeExpression.booleanFunctionCall.parameters.valueSpecification->selectByKind(AttributeValueSpecification).attribute)
25853 ,Expression: self.nodes->selectByKind(State)->select(s | s.initial)->size() = 1
25854 ,Expression: self.nodes->selectByKind(State)->select(s | s.terminal)->size() <= 1
25855 ,Expression: self.edges.target->selectByKind(State)->select(s | s.initial)->size() = 0
25856 ,Expression: self.edges.source->selectByKind(State)->select(s | s.initial)->size() = 1
25857 ,Expression: self.nodes->selectByType(State)->select(s |s.terminal)->size() = 0 or self.edges.target->selectByType(State)->select(s | s.terminal)->size() = 1
25858 ,Expression: self.edges.source->selectByKind(State)->select(s |s.terminal)->size() = 0
25859 ,Expression: self.incomingEdges->size() = 1
25860 ,Expression: self.outgoingEdges->size() >= 2
25861 ,Expression: self.outgoingEdges.target->selectByType(Transition)->select(t |t.trigger.oclIsUndefined())->size() <= 1
25862 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
25863 ,Expression: self.incomingEdges->size() >= 2
25864 ,Expression: self.outgoingEdges->size() = 1
25865 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
25866 ,Expression: not (self.terminal and self.initial)
25867 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
25868 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
25869 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
25870 ,Expression: self.incomingEdges->size() = 1
25871 ,Expression: self.outgoingEdges->size() = 1
25872 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
25873 ,Expression: self.parameters.parameter->includesAll(self.function.parameters->select(p| p.direction = ParameterDirectionKind::IN))
25874 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
25875 ,Expression: self.attribute.type = self.parameterValue.parameter.type
25876 ,Expression: self.booleanFunctionCall.function.parameters->exists(p |p.direction = ParameterDirectionKind::RETURN and p.type.name = 'Boolean')
25877 ,Expression: self.pages->forAll(p1, p2 | p1 <> p2 implies p1.name<>p2.name)
25878 ,Expression: not self.targets->includes(self)
25879 ,Expression: self.targets->forAll ( t1 | self.targets -> one ( t2 | t2 = t1))
