1 ,Expression: OclVoid
2 ,Expression: OrderedSet{}
3 ,Expression: self.forms -> forAll(f | f.mainForm=true)
4 ,Expression: not localScopedReference and not globalScopedReference
5 ,Expression: tablas->isUnique(nombre)
6 ,Expression: columnas->isUnique(nombre)
7 ,Expression: nombre.toUpperCase() = nombre
11 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
16 ,Expression: company.employees->select(manager = self)
17 ,Expression: Employee.allInstances()->select(reportsTo(self))
18 ,Expression: if (manager.oclIsUndefined()) then    OrderedSet{}else    manager.reportingChain->prepend(manager)endif
19 ,Expression: name <> null
20 ,Expression: 100
60 ,Expression: not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
64 ,Expression: company.employees->select(manager = self)
65 ,Expression: Employee.allInstances()->select(reportsTo(self))
66 ,Expression: if (manager.oclIsUndefined()) then    OrderedSet{}else    manager.reportingChain->prepend(manager)endif
67 ,Expression: name <> null
83 ,Expression: label()
91 ,Expression: propertyMappings->selectByKind(CreateProperty)->isUnique(newName)
106 ,Expression: label()
109 ,Expression: Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)
110 ,Expression: self.age <= self.employer.boss.age
113 ,Expression: self.age + 10 <= self.employer.boss.age
115 ,Expression: not (self.boss.oclIsTypeOf(Freelance))
116 ,Expression: self.employee->exists(e | e.age > 45)
117 ,Expression: self.employee->select(e|e.age < 25)->size()<self.maxJuniors
118 ,Expression: self.employee->select(e|e.salary >= self.boss.salary)->size() <= 1
120 ,Expression: self.calcExpenses() <= self.budget
122 ,Expression: self.department2division->notEmpty()
125 ,Expression: let numFreelance : Integer = self.employee->select(e : Employee | e.oclIsKindOf(Freelance))->size() in let numStudent : Integer = self.employee->select(e : Employee | e.oclIsKindOf(Student))->size() in if numFreelance < numStudent then numStudent else numFreelance endif
126 ,Expression: self.assignment >= 5 and self.assignment <= 30
127 ,Expression: self.assignment >= 5 and self.assignment <= 40
128 ,Expression: self.age < 40
129 ,Expression: self.department->collect(d| d.employee->including(d.boss)).salary->sum() < budget
130 ,Expression: self.employeesOfTheMonth->size() <= self.department->size()
131 ,Expression: self.numberEmployeesOfTheMonth <= self.department->size()
132 ,Expression: self.department.employeeOfTheMonth
133 ,Expression: self.employeesOfTheMonth->size()
134 ,Expression: self.age < 40
135 ,Expression: self.eotmDelta <= 5
136 ,Expression: let maxEOTMDivision:Division=self.division->sortedBy(i | i.numberEmployeesOfTheMonth)->last() in let minEOTMDivision:Division=self.division->sortedBy(i | i.numberEmployeesOfTheMonth)->first() in maxEOTMDivision.numberEmployeesOfTheMonth - minEOTMDivision.numberEmployeesOfTheMonth
137 ,Expression: self.division.director
138 ,Expression: if self.division->isEmpty() then  'Company with no division'else  'Company with division '.concat(self.division.name)endif
139 ,Expression: self.values->forAll(cv:CodeValue |      cv.type = self.abapType)
267 ,Expression: self.getType().conformsTo(self.variable.getType())
269 ,Expression: (self.object.getType().isMany() implies (self.getType().isMany() and not self.getType().unique)) and  (self.object.getType().lowerMultiplicity = 0 implies (self.getType()->isEmpty() or self.getType().lowerMultiplicity = 0))
270 ,Expression: not self.classToInstantiate.isAbstract()
272 ,Expression: self.ownedTypeDefinition->notEmpty()
273 ,Expression: not self.classToInstantiate.valueType
274 ,Expression: self.initializers->forAll( a, b | a <> b implies a.methodSignature <> b.methodSignature )
278 ,Expression: self.left.getType().conformsTo(self.right.getType()) or  self.right.getType().conformsTo(self.left.getType())
279 ,Expression: self.object.getType().conformsToIgnoringMultiplicity(self.toEnd.otherEnd().type)
280 ,Expression: self.getType() = self.toEnd.type
281 ,Expression: self.toEnd.navigable
282 ,Expression: let numberOfMandatoryParameters:Integer =    self.getSignature().input->select(p|p.defaultValue->isEmpty())->size()  in  self.parameters->size() >= numberOfMandatoryParameters and  self.parameters->size() <= self.getSignature().input->size() and  self.parameters->forAll(parameter |    parameter.getType().conformsTo(self.getSignature().input->at(self.parameters->indexOf(parameter)).getType()) )
288 ,Expression: self.getType().upperMultiplicity = 1 and  self.getType().lowerMultiplicity = 1
290 ,Expression: self.with.getType().conformsTo(self.steps->at(self.steps->size()).to.type)
293 ,Expression: to.otherEnd().contributesToEquality
294 ,Expression: self.object.getType().ordered
295 ,Expression: self.object.getType().ordered
297 ,Expression: self.trueExpr.getType().conformsTo(self.getType()) or  self.falseExpr.getType().conformsTo(self.getType())
302 ,Expression: self.valueClass.valueType
303 ,Expression: self.propertyValues->forAll(vi|vi.forEnd.otherEnd().type.clazz = self.valueClass)
304 ,Expression: self.valueClass.getEqualityRelevantAssociationEnds()->select(ae | ae.otherEnd().type.lowerMultiplicity > 0)->forAll(ae |      self.propertyValues->exists(pv | pv.forEnd.otherEnd() = ae))
306 ,Expression: self.value.getType().conformsTo(self.forEnd.type)
307 ,Expression: self.accumulator->notEmpty() implies  (self.accumulator.ownedTypeDefinition->notEmpty() implies     self.accumulator.ownedTypeDefinition.conformsTo(self.iteratorExpression.getType()))
308 ,Expression: self.argument.getType().ordered
311 ,Expression: self.ownedTypeDefinition->notEmpty()
317 ,Expression: self.selectionExpr.isSideEffectFree()
320 ,Expression: self.condition->forAll(c | c.isSideEffectFree())
323 ,Expression: self.fromExpression.isSideEffectFree()
324 ,Expression: self.characteristicFunction.input->size() = 1 and   self.cellSet.factsType.conformsToIgnoringMultiplicity(self.characteristicFunction.input->at(1).getType())    -- Add the following again once we have NestedTypeDefinitions under control...    -- and  self.characteristicFunction.input->at(1).getType().upperMultiplicity = 1
325 ,Expression: not self.characteristicFunction.isAbstract()
327 ,Expression: self.aggregationFunction.input->size() = 1 and   self.keyFigureType().conformsTo(self.aggregationFunction.input->at(1).getType())
328 ,Expression: not self.aggregationFunction.isAbstract()
329 ,Expression: self.valueFunction->forAll(vf | not vf.isAbstract())
333 ,Expression: self.facts.getType().conformsTo(self.dimensionParameter.ownerSignature.input->at(1).getType())
335 ,Expression: self.dimensionParameter.ownerSignature.input->indexOf(self.dimensionParameter) > 1
336 ,Expression: self.mapExpression->notEmpty() implies self.groupedFacts->notEmpty()
337 ,Expression: if self.mapExpression->notEmpty() then    self.mapExpression.isSideEffectFree()  else    true  endif
338 ,Expression: self.dimensions.iterator->asSet()->union(self.groupedFacts->asSet())->union(self.fact->asSet())->forAll(i, j | i<>j implies i.name<>j.name)
339 ,Expression: self.expression.isSideEffectFree()
342 ,Expression: self.classes->forAll( i, j | i <> j implies i.name <> j.name )
343 ,Expression: not self.hasOwnershipCycle(Set{})
346 ,Expression: not self.ofClass.valueType
350 ,Expression: self.expressions->forAll( e | e.isSideEffectFree() )
351 ,Expression: true
352 ,Expression: library.loans->select((book = self))->size() <= copies
354 ,Expression: library.loans->select(book = self)
355 ,Expression: loans->size() <= 2
356 ,Expression: loans->isUnique(book)
357 ,Expression: library.loans->select(member = self)
358 ,Expression: loans->collect(book)
361 ,Expression: isUnmarshall = true
363 ,Expression: not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
364 ,Expression: input->size() = 0
365 ,Expression: (self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
375 ,Expression: fromAction.input->forAll(oclIsKindOf(ActionInputPin))
376 ,Expression: fromAction.output->size() = 1
379 ,Expression: ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
383 ,Expression: activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
385 ,Expression: containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
391 ,Expression: (incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
392 ,Expression: activity.ownedParameter->includes(parameter)
393 ,Expression: type = parameter.type
395 ,Expression: incoming->isEmpty() or outgoing->isEmpty()
397 ,Expression: (not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
398 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
399 ,Expression: (represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
400 ,Expression: isDimension implies superPartition->isEmpty()
402 ,Expression: Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
403 ,Expression: name->notEmpty()
405 ,Expression: value<>null
407 ,Expression: value <> null
409 ,Expression: parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
410 ,Expression: Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
411 ,Expression: memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
412 ,Expression: memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
413 ,Expression: memberEnd->forAll(type->notEmpty())
416 ,Expression: self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
417 ,Expression: ownedAttribute->intersection(ownedEnd)->isEmpty()
420 ,Expression: specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
428 ,Expression: isAbstract implies method->isEmpty()
432 ,Expression: classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
434 ,Expression: argument->size() = signal.allAttributes()->size()
436 ,Expression: onPort=null
440 ,Expression: result->notEmpty() implies isSynchronous
444 ,Expression: onPort=null
447 ,Expression: if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
449 ,Expression: not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
457 ,Expression: parents()->forAll(c | self.maySpecializeType(c))
458 ,Expression: powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
459 ,Expression: parents()->forAll(not isFinalSpecialization)
460 ,Expression: not allParents()->includes(self)
485 ,Expression: allowSubstitutable implies constrainingClassifier->notEmpty()
486 ,Expression: parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
487 ,Expression: (not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)
488 ,Expression:  templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))
489 ,Expression: templateParameterSubstitution.actual->forAll( a |  let arg : Classifier = a.oclAsType(Classifier) in    constrainingClassifier->forAll(      cc |           arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))      ))
490 ,Expression: constrainingClassifier->forAll(     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc)))
496 ,Expression: object.is(1,1)
497 ,Expression: association.memberEnd->exists(self.object.type.conformsTo(type))
498 ,Expression: result<>null implies result.type = object.type
499 ,Expression: result<>null implies result.is(1,1)
500 ,Expression: roleBinding->collect(client)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.structuredClassifier = ce2.structuredClassifier)and  roleBinding->collect(supplier)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.collaboration = ce2.collaboration)
501 ,Expression: type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
502 ,Expression: type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))
504 ,Expression: interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
505 ,Expression: ((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
508 ,Expression: endType->forAll (oclIsKindOf(DeploymentTarget))
509 ,Expression: nestedClassifier->isEmpty()
510 ,Expression: nestingClass <> null implies packagedElement->isEmpty()
515 ,Expression: result.incoming->isEmpty()
516 ,Expression: input->isEmpty()
520 ,Expression: clause->closure(predecessorClause)->intersection(clause)->isEmpty()
523 ,Expression: exit->forAll(kind = PseudostateKind::exitPoint)
524 ,Expression: entry->forAll(kind = PseudostateKind::entryPoint)
525 ,Expression: type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
529 ,Expression: partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
530 ,Expression: (role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
531 ,Expression: self.compatibleWith(definingEnd)
532 ,Expression: partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
535 ,Expression: (interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
536 ,Expression: message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
537 ,Expression: not constrainedElement->includes(self)
538 ,Expression:  enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
540 ,Expression: enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
542 ,Expression: (source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
543 ,Expression: not self.association().isAbstract
545 ,Expression: result.is(1,1)
546 ,Expression: result.type = association()
547 ,Expression: self.association().oclIsKindOf(AssociationClass)
549 ,Expression: not classifier.isAbstract 
550 ,Expression: result.is(1,1)
551 ,Expression: not classifier.oclIsKindOf(AssociationClass)
552 ,Expression: result.type = classifier
553 ,Expression: (decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
555 ,Expression: incoming->includes(decisionInputFlow)
557 ,Expression: (incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
559 ,Expression: decisionInput<>null implies   (decisionInput.ownedParameter->forAll(par |      par.direction <> ParameterDirectionKind::out and      par.direction <> ParameterDirectionKind::inout ) and   decisionInput.ownedParameter->one(par |      par.direction <> ParameterDirectionKind::return))     
562 ,Expression: deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
563 ,Expression: deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
565 ,Expression: target.is(1,1)
566 ,Expression: target.type= null
567 ,Expression: let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self
569 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
571 ,Expression: if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
572 ,Expression: constrainedElement->size() = 1 or constrainedElement->size()=2
574 ,Expression: if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
576 ,Expression: mustBeOwned() implies owner->notEmpty()
577 ,Expression: not allOwnedElements()->includes(self)
583 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
584 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
588 ,Expression: ownedAttribute->forAll(isReadOnly)
590 ,Expression: handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
591 ,Expression: (protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
594 ,Expression: handlerBody.owner=protectedNode.owner
595 ,Expression: exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
597 ,Expression: start.covered = finish.covered
598 ,Expression: regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
600 ,Expression: extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
601 ,Expression: metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
602 ,Expression: memberEnd->size() = 2
612 ,Expression: (lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
613 ,Expression: self.aggregation = AggregationKind::composite
615 ,Expression: name->notEmpty ()
617 ,Expression: outgoing->isEmpty()
619 ,Expression: exit->isEmpty()
620 ,Expression: outgoing->size() = 0
621 ,Expression: region->size() = 0
622 ,Expression: submachine->isEmpty()
623 ,Expression: entry->isEmpty()
624 ,Expression: doActivity->isEmpty()
627 ,Expression: incoming->size()=1
629 ,Expression: self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
630 ,Expression: ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
635 ,Expression: interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
636 ,Expression: isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
637 ,Expression: isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endif
638 ,Expression: isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
639 ,Expression: isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
640 ,Expression: isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
650 ,Expression: after->closure(toAfter.after)->excludes(before)
651 ,Expression: generalization->collect(general)->asSet()->size() <= 1
652 ,Expression: powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
654 ,Expression: (self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
655 ,Expression: self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
656 ,Expression: (self.represented->select(oclIsKindOf(InformationItem))->forAll(p |  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
657 ,Expression: self.generalization->isEmpty() and self.feature->isEmpty()
658 ,Expression: isAbstract
660 ,Expression: incoming->isEmpty()
661 ,Expression: outgoing->forAll(oclIsKindOf(ControlFlow))
665 ,Expression: deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
666 ,Expression: classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
667 ,Expression: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
668 ,Expression: deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
670 ,Expression: enclosingInteraction->isEmpty()
673 ,Expression: minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
674 ,Expression: maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
675 ,Expression: maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
679 ,Expression: returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
682 ,Expression: feature->forAll(visibility = VisibilityKind::public)
683 ,Expression: interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
685 ,Expression: outgoing->size() = 1
686 ,Expression: if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
688 ,Expression:  self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
691 ,Expression: self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
693 ,Expression: inputValue->asBag()=endData.allPins()
694 ,Expression: endData.end = self.association().memberEnd->asBag()
695 ,Expression: endData->forAll(not end.isStatic)
700 ,Expression: value<>null implies value.type.conformsTo(end.type)
701 ,Expression: value<>null implies value.is(1,1)
702 ,Expression: value->excludesAll(qualifier.value)
703 ,Expression: end.association <> null
704 ,Expression: end.qualifier->includesAll(qualifier.qualifier)
734 ,Expression: result.incoming->isEmpty()
735 ,Expression: loopVariableInput.outgoing->isEmpty()
736 ,Expression: setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
737 ,Expression: bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
742 ,Expression: allOwnedNodes()->includesAll(loopVariable.outgoing.target)
744 ,Expression: outgoing->size()=1
751 ,Expression: (messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
752 ,Expression: signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
761 ,Expression: upperBound() >= lowerBound()
762 ,Expression: lowerBound() >= 0
763 ,Expression: lowerValue <> null implies lowerValue.integerValue() <> null
764 ,Expression: upperValue <> null implies upperValue.unlimitedValue() <> null
778 ,Expression: (namespace = null and owner <> null) implies visibility = null
779 ,Expression: (name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
780 ,Expression: name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
792 ,Expression: membersAreDistinguishable()
793 ,Expression: packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
794 ,Expression: elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
805 ,Expression: part->forAll(oclIsKindOf(Node))
807 ,Expression: not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
809 ,Expression: selection<>null implies source.oclIsKindOf(ObjectNode)
810 ,Expression: not (isMulticast and isMultireceive)
813 ,Expression: (selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
814 ,Expression: (not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
819 ,Expression: behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
820 ,Expression: behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()
833 ,Expression: self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
834 ,Expression: bodyCondition <> null implies isQuery
849 ,Expression: packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)
861 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
862 ,Expression: visibility = null implies namespace = null
865 ,Expression: end->notEmpty() implies collaboration->notEmpty()
866 ,Expression: (isStream and behavior <> null) implies not behavior.isReentrant
867 ,Expression: not (isException and isStream)
868 ,Expression: (type.oclIsKindOf(DataType)) implies (effect = null)
871 ,Expression: parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
873 ,Expression: parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
879 ,Expression: isControl implies isControlType
881 ,Expression: aggregation = AggregationKind::composite
882 ,Expression: type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
883 ,Expression: owner = encapsulatedClassifier
889 ,Expression: metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
890 ,Expression: metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
896 ,Expression: subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
897 ,Expression: isDerivedUnion implies isReadOnly
898 ,Expression: isComposite and association <> null implies opposite.upperBound() <= 1
899 ,Expression: (redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
900 ,Expression: subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
901 ,Expression: (self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))
902 ,Expression: isDerivedUnion implies isDerived
903 ,Expression: deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
904 ,Expression: subsettedProperty->forAll(sp | sp.name <> name)
905 ,Expression: (opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
906 ,Expression: qualifier->notEmpty() implies association->notEmpty()
917 ,Expression: region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
918 ,Expression: region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
919 ,Expression: region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
922 ,Expression: effect = null
923 ,Expression: container.belongsToPSM()
927 ,Expression: (kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
928 ,Expression: (kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
929 ,Expression: (kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
930 ,Expression: (kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
931 ,Expression: ((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
932 ,Expression: (kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
933 ,Expression: (kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
936 ,Expression: value.is(1,1)
937 ,Expression: value.type.conformsTo(qualifier.type)
938 ,Expression: linkEndData.end.qualifier->includes(qualifier)
939 ,Expression: result.type = classifier
941 ,Expression: object.type = null
942 ,Expression: result.is(1,1)
943 ,Expression: result.type = Boolean
944 ,Expression: object.is(1,1)
945 ,Expression: self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
946 ,Expression: self.openEnd()->first().compatibleWith(result)
948 ,Expression: self.openEnd()->size() = 1
949 ,Expression: self.openEnd()->first().isNavigable()
952 ,Expression: end.association <> null
953 ,Expression: object.is(1,1)
954 ,Expression: end.association.memberEnd->forAll(e | not e.isStatic)
955 ,Expression: result.type = end.type
956 ,Expression: result.is(1,1)
957 ,Expression: object.type = end.association
958 ,Expression: end.association.oclIsKindOf(AssociationClass)
959 ,Expression: object.is(1,1)
960 ,Expression: object.type = qualifier.associationEnd.association
961 ,Expression: qualifier.is(1,1)
962 ,Expression: qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
963 ,Expression: result.is(1,1)
964 ,Expression: result.type = qualifier.type
965 ,Expression: qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
966 ,Expression: qualifier.associationEnd <> null
968 ,Expression: result.is(1,1)
972 ,Expression: structuralFeature.compatibleWith(result)
973 ,Expression: result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
974 ,Expression: result.type =variable.type and result.isOrdered = variable.isOrdered
975 ,Expression: variable.compatibleWith(result)
976 ,Expression: name = signal.name
979 ,Expression: object.type = null
980 ,Expression: not newClassifier->exists(isAbstract)
981 ,Expression: object.is(1,1)
982 ,Expression: redefinedElement->forAll(re | re.isConsistentWith(self))
983 ,Expression: redefinedElement->forAll(re | not re.isLeaf)
984 ,Expression: redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
991 ,Expression: classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))
995 ,Expression: reducer.outputParameters().type->forAll(conformsTo(result.type))
1001 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1
1002 ,Expression: subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1
1003 ,Expression: (stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
1004 ,Expression: self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1
1014 ,Expression: replyToCall.event.oclIsKindOf(CallEvent)
1016 ,Expression: onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
1019 ,Expression: argument->size()=signal.allAttributes()->size()
1020 ,Expression: not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
1022 ,Expression: object.is(1,1)
1023 ,Expression: object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
1027 ,Expression: object.is(1,1)
1028 ,Expression: self.behavior()<>null
1029 ,Expression: onPort->isEmpty()
1038 ,Expression: connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
1039 ,Expression: isSubmachineState implies connection->notEmpty( )
1040 ,Expression: connectionPoint->notEmpty() implies isComposite
1041 ,Expression: self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
1042 ,Expression: isComposite implies not isSubmachineState
1053 ,Expression: connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
1055 ,Expression: specification <> null implies connectionPoint->isEmpty()
1061 ,Expression: ownedAttribute.association->forAll(memberEnd->size()=2)
1062 ,Expression: allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
1063 ,Expression: ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
1069 ,Expression: operand->forAll (oclIsKindOf (LiteralString))
1070 ,Expression: if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
1072 ,Expression: object.is(1,1)
1075 ,Expression: not structuralFeature.isStatic
1076 ,Expression: structuralFeature.featuringClassifier->size() = 1
1081 ,Expression: output.outgoing.target->excludesAll(allOwnedNodes()-input)
1082 ,Expression: edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
1083 ,Expression: input.incoming.source->excludesAll(allOwnedNodes()-output)
1089 ,Expression: parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
1090 ,Expression: signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
1092 ,Expression: default <> null implies default.isCompatibleWith(parameteredElement)
1093 ,Expression: actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
1094 ,Expression: template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
1095 ,Expression: parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
1101 ,Expression: first.is(1,1) and second.is(1,1)
1102 ,Expression: first.type= null and second.type = null
1103 ,Expression: result.type=Boolean
1104 ,Expression: constrainedElement->size() = 1
1106 ,Expression: when.integerValue() >= 0
1108 ,Expression: expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
1113 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
1114 ,Expression: (kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
1115 ,Expression: source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
1116 ,Expression: (target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))
1117 ,Expression: (source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))
1118 ,Expression: (kind = TransitionKind::local) implies((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))
1120 ,Expression: (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())
1125 ,Expression: port->notEmpty() implies event.oclIsKindOf(MessageEvent)
1129 ,Expression: unmarshallType.allAttributes()->size() >= 1
1130 ,Expression: unmarshallType.allAttributes()->size() = result->size()
1132 ,Expression: object.is(1,1)
1133 ,Expression: object.type.conformsTo(unmarshallType)
1135 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
1136 ,Expression: Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
1137 ,Expression: not allIncludedUseCases()->includes(self)
1138 ,Expression: name -> notEmpty ()
1142 ,Expression: incoming->isEmpty()
1143 ,Expression: value.type.conformsTo(type)
1161 ,Expression: result.is(1,1)
1162 ,Expression: value.type.conformsTo(result.type)
1164 ,Expression: variable.isAccessibleBy(self)
1172 ,Expression: result <> null implies result.is(1,1)
1173 ,Expression: value <> null implies value.type.conformsTo(structuralFeature.type)
1174 ,Expression: value<>null implies value.is(1,1)
1175 ,Expression: result <> null implies result.type = object.type
1176 ,Expression: value <> null implies value.type.conformsTo(variable.type)
1177 ,Expression: value<>null implies value.is(1,1)
1232 ,Expression: true
1233 ,Expression: true
1234 ,Expression: null
1241 ,Expression: true
1242 ,Expression: true
1243 ,Expression: 1
1244 ,Expression: 1
1247 ,Expression: BType.allInstances()->select(references->includes(self))->asSequence()->first()
1280 ,Expression: not name.oclIsUndefined()
1284 ,Expression: true
1286 ,Expression: true
1296 ,Expression: states->exists(s | s.initial)
1297 ,Expression: let firstLetter : String = invalid.substring(1, 1) in firstLetter.toUpperCase() = firstLetter
1298 ,Expression: if referredRule <> null then referredRule.name else '' endif
2839 ,Expression: extendedTarget.uri
2840 ,Expression: object.oclAsType(kleisli::KleisliModelEndpoint).extendedTargetUri
2846 ,Expression: if depender.oclIsUndefined() or dependee.oclIsUndefined() then '' else depender.name.concat(' 2 ').concat(dependee.name) endif
2847 ,Expression: if depender.oclIsUndefined() or dependee.oclIsUndefined() then '' else depender.name.concat(' 2 ').concat(dependee.name) endif
2848 ,Expression: dependums->forAll(linksAsSrc->isEmpty() and linksAsTgt->isEmpty())
2849 ,Expression: intentions->forAll(dependerLinks->isEmpty() and dependeeLinks->isEmpty())
2850 ,Expression: if src.oclIsUndefined() or tgt.oclIsUndefined() then '' else src.name.concat(' 2 ').concat(tgt.name) endif
2851 ,Expression: src.oclIsTypeOf(Task)
2852 ,Expression: tgt.oclIsTypeOf(Goal)
2853 ,Expression: tgt.oclIsTypeOf(Task)
2854 ,Expression: tgt.oclIsTypeOf(SoftGoal)
2855 ,Expression: if depender.oclIsUndefined() or dependum.oclIsUndefined() then '' else depender.name.concat(' 2 ').concat(dependum.name) endif
2856 ,Expression: if dependum.oclIsUndefined() or dependee.oclIsUndefined() then '' else dependum.name.concat(' 2 ').concat(dependee.name) endif
2866 ,Expression: src.oclIsKindOf(Place) and tgt.oclIsKindOf(Transition) or src.oclIsKindOf(Transition) and tgt.oclIsKindOf(Place)
2888 ,Expression: Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
2889 ,Expression: features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
2890 ,Expression: self.superType <> self
2891 ,Expression: self.type <> AttributeType::None xor self.enumeration <> null
2892 ,Expression: self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
2893 ,Expression: self.opposite -> forAll(o | o.opposite = self)
2894 ,Expression: self.opposite <> null implies self.target = Entity.allInstances() -> select(e | e.features -> select(f | f.oclIsKindOf(Relationship)) -> includes(self.opposite)) -> asOrderedSet() -> first()
2895 ,Expression: Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
2896 ,Expression: literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
2897 ,Expression: self.title.at(1).matches('[A-Z]')
2898 ,Expression: Form.allInstances() -> select(f | f.welcomeForm = true) -> size() = 1
2899 ,Expression: self.entity.features -> union(self.entity -> closure(superType).features) -> includesAll(self.pages.pageElements -> selectByKind(AttributePageElement).attribute.oclAsType(Feature) -> union(self.pages.pageElements -> selectByKind(RelationshipPageElement).relationship.oclAsType(Feature)))
2900 ,Expression: (self.pages.pageElements -> selectByKind(AttributePageElement).attribute)-> includesAll(self.pages.condition -> selectByKind(CompositeCondition) -> closure(v:CompositeCondition | v.composedConditions -> selectByKind(CompositeCondition)) -> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(AttributeValueCondition).attribute -> union(self.pages.condition -> selectByKind(AttributeValueCondition).attribute) -> union(self.pages.condition -> selectByKind(CompositeCondition).composedConditions -> selectByKind(AttributeValueCondition).attribute)-> union(self.pages.pageElements.condition -> selectByKind(CompositeCondition) -> closure(v:CompositeCondition | v.composedConditions -> selectByKind(CompositeCondition)) -> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(AttributeValueCondition).attribute -> union(self.pages.pageElements.condition -> selectByKind(AttributeValueCondition).attribute) -> union(self.pages.pageElements.condition -> selectByKind(CompositeCondition).composedConditions -> selectByKind(AttributeValueCondition).attribute)))
2901 ,Expression: self.title.at(1).matches('[A-Z]')
2902 ,Expression: PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
2903 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
2904 ,Expression: self.editingForm.entity.features -> union(self.editingForm.entity -> closure(superType).features) -> includesAll(self.columns.attribute)
2905 ,Expression: Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
2906 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
2907 ,Expression: self.editingForm.welcomeForm = false
2908 ,Expression: self.relationship.target = self.editingForm.entity
2909 ,Expression: self.attribute.type = AttributeType::Date
2910 ,Expression: self.attribute.type = AttributeType::Time
2936 ,Expression: self.nodes->select(n| n.oclIsKindOf(Task))->select(t: Task | t.start = true)->size() = 1
2937 ,Expression: self.nodes->select(n| n.oclIsKindOf(Task))->select(t: Task | t.end = true)->size() = 1
2938 ,Expression: let allRefs : Bag = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks)->union(self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.task))->union(self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks))->union(self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(i: IfElse | i.tasks))->union(self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(w: WaitForOne | w.task))->union(self.nodes->select(t| t.oclIsKindOf(Simple))->collect(s: Simple | s.task)),uniqueRef : Set = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks)->asSet()->union(self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.task)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(i: IfElse | i.tasks)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(w: WaitForOne | w.task)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(Simple))->collect(s: Simple | s.task)->asSet())in uniqueRef->size() = allRefs->size()
2939 ,Expression: self.nodes->select(t | t.oclIsKindOf(Task))->forAll(p1, p2 | p1 <> p2 implies p1.name <> p2.name)
2940 ,Expression: self.name.oclIsUndefined() = false 
2942 ,Expression: self.transition->size() < 2
2943 ,Expression: self.previousTasks->size() = 1
2944 ,Expression: self.tasks->select(t | t.start = true)->size() = 0
2945 ,Expression: self.previousTasks->size() > 1
2946 ,Expression: self.task->select(t | t.start = true)->size() = 0
2947 ,Expression: self.previousTasks->size() = 1
2948 ,Expression: self.task->select(t | t.start = true)->size() = 0
2949 ,Expression: self.previousTasks->size() = 1
2950 ,Expression: self.tasks->select(t | t.start = true)->size() = 0
2951 ,Expression: self.previousTasks->size() = 1
2952 ,Expression: self.tasks->select(t | t.start = true)->size() = 0
2953 ,Expression: self.previousTasks->size() > 1
2954 ,Expression: self.task->select(t | t.start = true)->size() = 0
2955 ,Expression: not (self.name->isEmpty())
2956 ,Expression: Sequence{1 .. self.name.size()}->collect(i | self.name.substring(i, i))->excludes(' ')
2957 ,Expression: self.tables->isUnique(name.toUpperCase())
2958 ,Expression: not (self.columns->exists(name.toUpperCase() = 'id'.toUpperCase()))
2959 ,Expression: self.columns->isUnique(name.toUpperCase())
2960 ,Expression: not(self.foreignKeys->notEmpty() and self.foreignKeys->exists(reference.name = self.name))
2961 ,Expression: self.column.type = self.reference.primaryKey.type
2976 ,Expression: self.StartNodes->select(m : SimpleBPMN | m.oclIsTypeOf(Start))->size() < 2
2977 ,Expression: self.EndNodes->select(m : SimpleBPMN | m.oclIsTypeOf(End))->size() < 2
2978 ,Expression: self.from <> self.to
2979 ,Expression: self.cond.size() > 0
2980 ,Expression: self.cond.size() > 0
2981 ,Expression: self.name.size() >= 0
2982 ,Expression: self.name.size() > 0
2983 ,Expression: self.name.size() > 0
2984 ,Expression: self.name.size() > 0
2985 ,Expression: self.name.size() > 0
2986 ,Expression: self.name.size() > 0
3028 ,Expression: (self.code.size() = 5 and self.code.toInteger() > 0 and self.code.toInteger() <99999)
3029 ,Expression: self.code.matches('^[0-9]+')
3030 ,Expression: (self.city.size() <= 35 and self.city.size() > 0)
3031 ,Expression: self.age.matches('^[0-9]+')
3032 ,Expression: self.isoCode.size() = 3
3033 ,Expression: self.isoCode.matches('^[A-Z]+')
3034 ,Expression: (self.isoCode.size() <= 55 and self.isoCode.size() >= 3)
3035 ,Expression: self.status.size() = 1
3036 ,Expression: self.status.matches('^[1-9]+')
3037 ,Expression: self.status.size() <= 255
3038 ,Expression: (self.address.size() <= 55 and self.address.size() >= 5)
3039 ,Expression: (self.theater.size() <= 55 and self.theater.size() >= 5)
3040 ,Expression: (self.fullName.size() >= 3 and self.fullName.size() <= 55)
3041 ,Expression: self.genres->isEmpty() = false
3042 ,Expression: self.directors->isEmpty() = false
3043 ,Expression: (self.title.size() >= 3 and self.title.size() <= 150)
3044 ,Expression: (self.synopsis.size() >= 10 and self.synopsis.size() <= 255)
3045 ,Expression: (self.duration > 60000)
3046 ,Expression: self.languages->size() = 2
3047 ,Expression: self.description.size() <= 255
3048 ,Expression: self.isoCode.size() = 3
3049 ,Expression: self.isoCode.matches('^[A-Z0]+')
3050 ,Expression: (self.languageName.size() >= 3 and self.languageName.size() <= 55)
3051 ,Expression: (self.videoFormat.size() >= 3 and self.videoFormat.size() <= 20)
3052 ,Expression: self.description.size() <= 255
3053 ,Expression: (self.genre.size() >= 3 and self.genre.size() <= 25)
3054 ,Expression: self.description.size() < 255
3055 ,Expression: (self.code.size() = 5 and self.code.toInteger() > 0 and self.code.toInteger() <99999)
3056 ,Expression: self.code.matches('^[0-9]+')
3057 ,Expression: (self.city.size() <= 35 and self.city.size() > 0)
3058 ,Expression: self.age.matches('^[0-9]+')
3059 ,Expression: self.isoCode.size() = 3
3060 ,Expression: self.isoCode.matches('^[A-Z]+')
3061 ,Expression: (self.isoCode.size() <= 55 and self.isoCode.size() >= 3)
3062 ,Expression: self.status.size() = 1
3063 ,Expression: self.status.matches('^[1-9]+')
3064 ,Expression: self.status.size() <= 255
3065 ,Expression: (self.address.size() <= 55 and self.address.size() >= 5)
3066 ,Expression: (self.theater.size() <= 55 and self.theater.size() >= 5)
3067 ,Expression: self.rooms->isEmpty() = false
3068 ,Expression: (self.fullName.size() >= 3 and self.fullName.size() <= 55)
3069 ,Expression: self.genres->isEmpty() = false
3070 ,Expression: self.directors->isEmpty() = false
3071 ,Expression: (self.title.size() >= 3 and self.title.size() <= 150)
3072 ,Expression: (self.synopsis.size() >= 10 and self.synopsis.size() <= 255)
3073 ,Expression: (self.duration > 60000)
3074 ,Expression: self.film <> null
3075 ,Expression: self.status <> null
3076 ,Expression: self.audioFormat <> null
3077 ,Expression: self.videoFormat <> null
3078 ,Expression: self.languages->size() = 2
3079 ,Expression: self.description.size() <= 255
3080 ,Expression: self.isoCode.size() = 3
3081 ,Expression: self.isoCode.matches('^[A-Z0]+')
3082 ,Expression: (self.languageName.size() >= 3 and self.languageName.size() <= 55)
3083 ,Expression: (self.videoFormat.size() >= 3 and self.videoFormat.size() <= 20)
3084 ,Expression: self.description.size() <= 255
3085 ,Expression: (self.genre.size() >= 3 and self.genre.size() <= 25)
3086 ,Expression: self.description.size() < 255
3087 ,Expression: self.room <> null
3088 ,Expression: self.posterBoard <> null
3089 ,Expression: self.seats->isEmpty() = false
3090 ,Expression: self.number.matches('^[1-9]+')
3091 ,Expression: (self.number.size() > 0 and self.number.size() < 3)
3092 ,Expression: (self.name.size() > 5 and self.name.size() < 25)
3093 ,Expression: self.number.matches('^[1-9]+')
3094 ,Expression: (self.number.size() > 0 and self.number.size() < 4)
3095 ,Expression: self.row.matches('^[A-Z]+')
3096 ,Expression: (self.row.size() > 0 and self.row.size() < 3)
3097 ,Expression: (self.fullName <> null and self.fullName.size() >= 5 and self.fullName.size() <=150)
3098 ,Expression: self.videoType <> null
3099 ,Expression: self.localityType <> null
3100 ,Expression: self.price > 0
3101 ,Expression: self.points > 0
3102 ,Expression: self.card <> null
3103 ,Expression: self.gender <> null
3104 ,Expression: (self.lastNames <> null and self.lastNames.size() >= 3 and self.lastNames.size()<= 25)
3105 ,Expression: self.email.matches('^[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}\\@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+')
3106 ,Expression: (self.idNumber.size() > 5 and self.idNumber.size() < 20)
3107 ,Expression: (self.fullName <> null and self.fullName.size() >= 3 and self.fullName.size() <=25)
3109 ,Expression: self.points >= 0
3110 ,Expression: self.idNum > 0
3111 ,Expression: self.idNum > 0
3112 ,Expression: self.chairs->isEmpty() = false
3113 ,Expression: self.presentation <> null
3114 ,Expression: self.prices->isEmpty() = false
3121 ,Expression: namespace->isEmpty() implies visibility->isEmpty()
3124 ,Expression: name
3125 ,Expression: not allOwnedElements()->includes(self)
3126 ,Expression: mustBeOwned() implies owner->notEmpty()
3129 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
3130 ,Expression: importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
3131 ,Expression: visibility = VisibilityKind::public or visibility = VisibilityKind::private
3132 ,Expression: ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)
3134 ,Expression: redefinedElement->forAll(r | r.leaf = false)
3136 ,Expression: derived = false and derivedUnion = false
3137 ,Expression: composite implies (upperBound()->isEmpty() or upperBound() <= 1)
3138 ,Expression: derivedUnion implies readOnly
3139 ,Expression: aggregation = AggregationKind::composite
3141 ,Expression: memberEnd->symmetricDifference(ownedEnd)->isEmpty()
3142 ,Expression: derived = false
3143 ,Expression: memberEnd->exists(e | e.aggregation <> AggregationKind::none) implies memberEnd->size() = 2
3145 ,Expression: memberEnd->size() = 2
3146 ,Expression: memberEnd.type
3147 ,Expression: upperBound()->notEmpty() implies upperBound() > 0
3148 ,Expression: lowerBound()->notEmpty() implies lowerBound() >= 0
3149 ,Expression: (upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
3150 ,Expression: lower = lowerBound()
3151 ,Expression: upper = upperBound()
3152 ,Expression: upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
3155 ,Expression: ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1
3162 ,Expression: classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
3163 ,Expression: slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
3164 ,Expression: classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
3235 ,Expression: classifiers->isUnique(name)
3236 ,Expression: pages->isUnique(name)
3237 ,Expression: menus->isUnique(name)
3240 ,Expression: useCaptcha implies not authenticates.captchaSiteKey.oclIsUndefined() and not authenticates.captchaSecretKey.oclIsUndefined()
3241 ,Expression: not name.oclIsUndefined() implies name.size() > 0
3242 ,Expression: allFeatures->includesAll(keys)
3245 ,Expression: features->select(f | f.oclIsKindOf(Attribute)).oclAsType(Attribute)->asOrderedSet()
3246 ,Expression: features->select(f | f.oclIsKindOf(Association)).oclAsType(Association)->asOrderedSet()
3247 ,Expression: allFeatures->select(f | f.oclIsKindOf(Association)).oclAsType(Association)->asOrderedSet()
3251 ,Expression: entityFeatures->isUnique(f | f.name)
3252 ,Expression: primaryKey implies cardinality <> Cardinality::Optional
3253 ,Expression: cardinality = Cardinality::Optional and targetCardinality = Cardinality::Required implies bidirectional
3261 ,Expression: units->isUnique(name)
3262 ,Expression: entries->select(e | e.oclIsKindOf(MenuFeature))->isEmpty()
3263 ,Expression: true
3264 ,Expression: true
3265 ,Expression: not selection.oclIsUndefined() implies selection.limit = 1
3269 ,Expression: actions->select(a | a.oclIsKindOf(SelectAction))->size() < 2
3270 ,Expression: actions->select(a | a.oclIsKindOf(DeleteAction))->isEmpty()
3289 ,Expression: actions->select(a | a.oclIsKindOf(DeleteAction))->size() < 2
3297 ,Expression: self.containsAttributes -> size() >= 1
3298 ,Expression: not self.hasPK -> isEmpty()
3300 ,Expression: not self.name.oclIsUndefined()
3301 ,Expression: not self.name.oclIsUndefined()
3303 ,Expression: self.type <>  EGenericType::UNDEFINED
3304 ,Expression: self.states->one(e : StateVertex | e.oclIsKindOf(InitialState))
3305 ,Expression: rowAxisProviders->includes(defaultRowAxisProvider)
3306 ,Expression: columnAxisProviders->includes(defaultColumnAxisProvider)
3310 ,Expression: axisManagers->forAll(am1 : AxisManagerRepresentation, am2 : AxisManagerRepresentation | am1.axisManagerId <> am2.axisManagerId)
3311 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
3312 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
3313 ,Expression: self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
3314 ,Expression: self.base_Component.clientDependency.supplier->select(oclIsKindOf(Classifier)).oclAsType(Classifier).extension_Specificaiton->notEmpty()
3315 ,Expression: self.base_Class.extension_Realization->isEmpty()
3316 ,Expression: self.base_Classifier.extension_ImplementationClass->isEmpty()
3317 ,Expression: self.base_Classifier.extension_Type->isEmpty()
3318 ,Expression: self.base_Class.extension_Specification->isEmpty()
3558 ,Expression: if schemaQualifiedName.oclIsUndefined() then '' else schemaQualifiedName.name endif
3559 ,Expression: columns->size() = referencedColumns->size()
3560 ,Expression: let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
3561 ,Expression: self.types->isUnique(name)
3563 ,Expression: self.classes->isUnique(name)
3565 ,Expression: not self.superTypes->includes(self)
3567 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
3569 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
3571 ,Expression: not (self.externalAspect = self.Aspect)
3573 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(sourceModelElement = element)) else true endif
3575 ,Expression: self.sourceModelElement.oclIsTypeOf(Class) or self.sourceModelElement.oclIsTypeOf(Operation)
3577 ,Expression: self.maps->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.sourceModelElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.sourceModelElement.oclType()) endif)
3579 ,Expression: let clazz : Class = if sourceModelElement.oclIsTypeOf(Operation) then sourceModelElement.oclAsType(Operation).Classifier else sourceModelElement endif in self.Instantiation.externalAspect.structuralView.classes->includes(clazz) and self.maps->forAll(element : MappableElement | let clazz : Class = if element.oclIsTypeOf(Operation) then element.oclAsType(Operation).Classifier else element endif in if clazz.oclIsKindOf(PrimitiveType) then self.Instantiation.Aspect.structuralView.types->includes(clazz) else self.Instantiation.Aspect.structuralView.classes->includes(clazz) endif)
3581 ,Expression: if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.StructuralView.Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specification = self) else true endif
3583 ,Expression: not self.type.oclIsTypeOf(RVoid)
3595 ,Expression: if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif
3597 ,Expression: self.affectedBy->size() > 0
3599 ,Expression: not self.affectedBy->includes(self)
3601 ,Expression: if metaClass then self.name = '' else true endif
3605 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
3607 ,Expression: self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(parameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = parameter))
3609 ,Expression: self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents.operations->includes(self.signature)
3611 ,Expression: if self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) then self.interaction.fragments->indexOf(self.sendEvent) < self.interaction.fragments->indexOf(self.receiveEvent) else true endif
3613 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
3615 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
3617 ,Expression: let indexDifference : Integer = self.interaction.fragments->indexOf(self.receiveEvent) - self.interaction.fragments->indexOf(self.sendEvent) in indexDifference = 1 or indexDifference = - 1
3619 ,Expression: if self.assignTo <> null then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
3621 ,Expression: let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
3623 ,Expression: if self.message.messageSort = MessageSort::createMessage then self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) >= self.container.fragments->indexOf(self) else true endif) else true endif
3625 ,Expression: self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) <= self.container.fragments->indexOf(self) else true endif)
3627 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
3629 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
3631 ,Expression: if self.value <> null then let type : Type = if self.value.oclIsTypeOf(Attribute) then self.value.oclAsType(Attribute).type else if self.value.oclIsTypeOf(Reference) then self.value.oclAsType(Reference).type else self.value.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass endif endif in type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType()) else true endif
3633 ,Expression: if self.value.oclIsKindOf(LiteralSpecification) then false else true endif
3635 ,Expression: self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
3638 ,Expression: self.upperBound > 0 or self.upperBound = - 1
3640 ,Expression: self.lowerBound >= 0
3642 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = - 1
3697 ,Expression: result = ConnectorEnd.allInstances()->select(e | e.role=self)
3721 ,Expression: result = Transition.allInstances()->select(t | t.source=self)
3722 ,Expression: result = Transition.allInstances()->select(t | t.target=self)
3752 ,Expression: result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
3753 ,Expression: result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
3758 ,Expression: Tuple {message : String = 'The name of class "' + name + '" must begin uppercase.',status : Boolean = let firstLetter: String = (name).substring(1,1)in firstLetter.toUpperCase() = firstLetter}.status
3759 ,Expression: Tuple {message : String = 'The names of all attributes of a class must be unambiguous.',status : Boolean = true}.status
3760 ,Expression: Tuple {message : String = 'The name of class "' + name + '" must begin lowercase.',status : Boolean = let firstLetter: String = (name).substring(1,1)in firstLetter.toLowerCase() = firstLetter}.status
3761 ,Expression: Tuple {message : String = 'The name of constant "' + name + '" must be all uppercase.',status : Boolean = name.toUpperCase() = name}.status
3764 ,Expression: Tuple {message : String = 'Connectors cannot have the same source and target.',status : Boolean =             source <> target}.status
3765 ,Expression: Tuple {message : String = 'The data types of source and target ports must match.',status : Boolean =             source <> target}.status
3767 ,Expression: value.size() = 10
3768 ,Expression: Set{1 .. 12}->includes(self.month)
3769 ,Expression: let daysInMonth : Integer = if Set{1, 3, 5, 7, 8, 10, 12}->includes(self.month) then 31 else 30 endif in day <= daysInMonth - if month = 2 then if year.mod(4) = 0 and ((year.mod(100) <> 0 or year.mod(400) = 0)) then 1 else 2 endif else 0 endif
3770 ,Expression: Set{8, 9, 0}->includes(self.old)
3777 ,Expression: self.properties-> forAll (p: Property | p.multiplicityLowerBound = 0 or p.multiplicityLowerBound = 1)
3778 ,Expression: self.properties-> forAll (p: Property | p.multiplicityUpperBound = 1)
3779 ,Expression: if self.isId->notEmpty() then self.isId.multiplicityLowerBound = 1 and self.isId.multiplicityUpperBound = 1 else true endif
3780 ,Expression: if self.superclass->isEmpty() then self.properties -> includes(self.isId) else self.isId->isEmpty() endif
3781 ,Expression:  self.properties -> forAll (p: Property | p.type.oclIsTypeOf(DataType) or p.type.oclIsTypeOf(Enumeration))
3782 ,Expression: self.subclass->excludes(self)
3783 ,Expression: self.superclass->excludes(self)
3784 ,Expression: self.superclass <> self.subclass
3785 ,Expression: Class.allInstances() -> select(superclass = self)
3786 ,Expression: Association.allInstances() -> select(begin.type = self)
3787 ,Expression: Association.allInstances() -> select(end.type = self)
3788 ,Expression: self.literals->isUnique(name)
3789 ,Expression: self.begin.multiplicityLowerBound >= 0
3790 ,Expression: self.begin.multiplicityUpperBound = -1 or (self.begin.multiplicityLowerBound <= self.begin.multiplicityUpperBound and self.begin.multiplicityUpperBound > 0)
3791 ,Expression: self.end.multiplicityLowerBound >= 0
3792 ,Expression: self.end.multiplicityUpperBound = -1 or (self.end.multiplicityLowerBound <= self.end.multiplicityUpperBound and self.end.multiplicityUpperBound > 0)
3793 ,Expression: self.begin.type.oclIsTypeOf(Class)
3794 ,Expression: self.end.type.oclIsTypeOf(Class)
3795 ,Expression: self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
3796 ,Expression: self.dataTypes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
3797 ,Expression: Enumeration.allInstances()->isUnique(name)
3798 ,Expression: Association.allInstances()->isUnique(name)
3799 ,Expression: Condition.allInstances()->isUnique(conditionID)
3800 ,Expression: (self -> closure(o: ViewElement | o.oclContainer()) -> select(oclIsTypeOf(ClassOperationView))).oclAsType(ClassOperationView) -> forAll((instance->closure(superclass)).properties->includes(self.propertyRef))
3801 ,Expression: self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)
3802 ,Expression: self.propertyRef.type.oclIsTypeOf(DataType) and (self.propertyRef.type.name = 'Date' or self.propertyRef.type.name = 'Time' or self.propertyRef.type.name = 'DateTime')
3803 ,Expression: self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)
3804 ,Expression: if self.propertyRef.type.oclIsTypeOf(Enumeration) then self.propertyRef.type.oclAsType(Enumeration).literals->asSet() else null endif
3805 ,Expression: (self -> closure(oclContainer()) -> select(oclIsTypeOf(TableViewElement))).oclAsType(TableViewElement) -> forAll((classRef->closure(superclass)).properties->includes(self.propertyRef))
3806 ,Expression: self.cond1 <> self.cond2
3807 ,Expression: (self.cond1.result = self.result and self.cond2.result = self.result)
3808 ,Expression:  self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
3809 ,Expression: self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
3810 ,Expression: self.properties -> forAll(p | p.upperBound = 1 and (p.lowerBound = 0 xor p.lowerBound = 1))
3811 ,Expression:  self.id.upperBound = 1 and self.id.lowerBound = 1
3812 ,Expression: self.superClass -> closure(superClass) -> excludes(self)
3813 ,Expression:  self.associationEnds -> forAll(p | p.lowerBound >= 0 and (p.upperBound <> 0 or p.upperBound >= p.lowerBound or p.upperBound = -1))
3814 ,Expression: self.views -> select(v | v.startView = true) -> size() = 1
3815 ,Expression: ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
3816 ,Expression: self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
3817 ,Expression: self.class.properties -> union(self.class -> closure(superClass).properties) -> includesAll(self.elementGroups.viewElements -> selectByKind(PropertyElement).property)
3818 ,Expression: self.elementGroups.viewElements -> selectByKind(AssociationElement) -> forAll(a | a.association.associationEnds -> excluding(a.association.navigableEnd).type -> includesAll(self.class -> union(self.class -> closure(superClass))))
3819 ,Expression: self.elementGroups.viewElements -> includesAll(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(CompositeCondition) -> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(ComparisonCondition).property -> union(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(ComparisonCondition).property) -> union(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(CompositeCondition).composedConditions -> selectByKind(ComparisonCondition).property)-> asSet())
3820 ,Expression: ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
3821 ,Expression: self.link.targetView.class  -> includes(self.association.navigableEnd.type) or self.link -> isEmpty()
3822 ,Expression: self.association.navigableEnd.type -> selectByType(Class).properties ->union(self.association.navigableEnd.type -> selectByType(Class) -> closure(superClass).properties) -> includesAll(self.columns.property)
3823 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3824 ,Expression: self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
3825 ,Expression: self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
3826 ,Expression: VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
3827 ,Expression: self.composedConditions -> forAll(c | c.type = self.type)
3868 ,Expression: maxDelay > minDelay
3869 ,Expression: not(self.oclIsTypeOf(FixedPhone))
3870 ,Expression: self.oclIsTypeOf(CellPhone) or self.oclIsTypeOf(FixedPhone)
3871 ,Expression: oclIsTypeOf(Brasileiro) or oclIsTypeOf(Aluno)
3872 ,Expression: not (oclIsTypeOf(Aluno))
3876 ,Expression: not(self.oclIsTypeOf(FixedPhone))
3877 ,Expression: self.oclIsTypeOf(MobilePhone) or self.oclIsTypeOf(FixedPhone)
3880 ,Expression: StateMachine.allInstances()->size() = 1
3881 ,Expression: self.container.oclIsUndefined()
3882 ,Expression: if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
3883 ,Expression: not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
3884 ,Expression: self.states->includes(self.initialState.referencedState)
3885 ,Expression: self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
3888 ,Expression: not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
3889 ,Expression: Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
3900 ,Expression: self.conPatologias = false
3901 ,Expression: self.edad >= 18 and self.edad <= 60
3902 ,Expression: self.estatura >= 142 and self.estatura<=191
3903 ,Expression: (self.peso >= self.calcularPT() * 0.90) and                          (self.peso <= self.calcularPT() * 1.10)
3909 ,Expression: (self.calcularEnergia() >= self.usuario.calcularGET() * 0.90) and (self.calcularEnergia() <= self.usuario.calcularGET() * 1.10)
3912 ,Expression: self.preparaciones.ingredientes->intersection(self.usuario.intolerables)->isEmpty() and  self.preparaciones.ingredientes->intersection(self.usuario.favoritos)->notEmpty()  and  self.calcularPrecio() <= self.usuario.presupuesto
3923 ,Expression: self.port->size() = 2
3924 ,Expression: self.port->forAll(p1, p2 | p1<>p2 implies (p1.outComponent->size() + p2.outComponent->size() = 1 and p1.inComponent->size() + p2.inComponent->size() = 1))
3925 ,Expression: self.connect->size() = 1
3926 ,Expression: self.outComponent->size() + self.inComponent->size() = 1
3927 ,Expression: self.component.name -> asSet() -> size() = self.component.name -> size()
3928 ,Expression: self.connectors.name -> asSet() -> size() = self.connectors.name -> size()
3929 ,Expression: self.ports.name -> asSet() -> size() = self.ports.name -> size()
3930 ,Expression: self.instances.name -> asSet() -> size() = self.instances.name -> size()
3931 ,Expression: self.port_type.name -> asSet() -> size() = self.port_type.name -> size()
3932 ,Expression: self.initialState -> size() >0
3933 ,Expression: Tuple {message : String = 'Probability of all outgoing transitions must be 1.0.',status : Boolean =             self.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001}.status
3934 ,Expression: Tuple {message : String = 'There must not be any nondeterminism. Please union transitions to the same target.',status : Boolean = self.outgoing.to->asSet()->size() = self.outgoing->size()}.status
3935 ,Expression: Tuple {message : String = 'Labels must be unique per state.',status : Boolean = self.labels.name->asSet()->size() = self.labels->size()}.status
3936 ,Expression: Tuple {message : String = 'Exit rate must be greater than 0.',status : Boolean =     exitRate > 0.0 or self.outgoing->size() = 0}.status
3937 ,Expression: Tuple {message : String = 'Probability must be between 0 and 1.',status : Boolean =             prob >= 0.0 and prob <= 1.0}.status
3938 ,Expression: self.initialState -> size() >0
3939 ,Expression: Tuple {message : String = 'Probability of all outgoing transitions must be 1.0.',status : Boolean = self.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001}.status
3940 ,Expression: Tuple {message : String = 'There must not be any nondeterminism. Please union transitions to the same target.',status : Boolean = self.outgoing.to->asSet()->size() = self.outgoing->size()}.status
3941 ,Expression: Tuple {message : String = 'Labels must be unique per state.',status : Boolean = self.labels.name->asSet()->size() = self.labels->size()}.status
3942 ,Expression: Tuple {message : String = 'Probability must be between 0 and 1.',status : Boolean =  prob >= 0.0 and prob <= 1.0}.status
3943 ,Expression: self.inputGate->size() + self.outputGate->size() + self.inEvent->size() > 0
3944 ,Expression: self.inputEvents->forAll(e : Event | (e.oclIsTypeOf(BasicEvent) or e.oclIsTypeOf(IntermediateEvent)) and not e.oclIsTypeOf(Hazard))
3945 ,Expression: self.outputEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)) and not e.oclIsTypeOf(BasicEvent))
3946 ,Expression: self.inputGates->size() + self.inputEvents->size() >= 2
3947 ,Expression: self.outputGate->size() + self.outputEvent->size() = 1
3948 ,Expression: if self.inputGates->size() > 0 then self.inputGates->select(g : Gate | g.id = self.id)->size() = 0 else true endif
3949 ,Expression: if self.outputGate <> null then self.outputGate.id <> self.id else true endif
3950 ,Expression: self.name->size() > 0
3951 ,Expression: self.inEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(BasicEvent)))
3952 ,Expression: self.inputGate->size() + self.outputGate->size() + self.inEvent->size() + self.outEvent->size()> 0
3953 ,Expression: self.outEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)))
3954 ,Expression: self.inputGate->size() + self.outputGate->size() + self.outEvent->size()> 0
3955 ,Expression: self.inputGate->size() + self.outputGate->size() > 0
3956 ,Expression: if self.type = TypeType::PH1PH2 then self.entryPhaseActivities->size() > 0 else true endif
3957 ,Expression: if self.type = TypeType::GRAPH then self.entryActivityGraph->size() > 0 else true endif
3958 ,Expression: self.packagedElement -> select(element : uml::PackageableElement| element.oclIsKindOf(uml::Interaction)) -> size() < 2
3960 ,Expression: transitions -> select(t | not t.probability.oclIsUndefined()) -> size() = 0or transitions -> select(t | not t.probability.oclIsUndefined()) -> collect(probability) -> sum() = 1.0
3961 ,Expression: rate.oclIsUndefined() xor probability.oclIsUndefined()
3964 ,Expression: ManagerTransition.allInstances()->forAll(t1 : ManagerTransition, t2 : ManagerTransition | t1 <> t2 implies t1.target <> t2.target or t1.source <> t2.source)
3965 ,Expression: ManagerState.allInstances()->forAll(m1 : ManagerState, m2 : ManagerState | m1 <> m2 implies m1.name <> m2.name)
3966 ,Expression: ManagedElement.allInstances()->forAll(m1 : ManagedElement, m2 : ManagedElement | m1 <> m2 implies m1.name <> m2.name)
3967 ,Expression: finalState->forAll(s : ManagerState | s <> initialState)
3968 ,Expression: finalState->forAll(s : ManagerState | s.outgoingTransition->size() = 0)
3969 ,Expression: ManagerTransition.allInstances()->forAll(m1 : ManagerTransition, m2 : ManagerTransition | m1 <> m2 implies m1.name <> m2.name)
3970 ,Expression: finalState->forAll(s : ManagerState | s.incomingTransition->size() > 0)
3971 ,Expression: initialState.isStart and not initialState.isEnd
3972 ,Expression: ManagerParameter.allInstances()->forAll(m1 : ManagerParameter, m2 : ManagerParameter | m1 <> m2 implies m1.name <> m2.name)
3973 ,Expression: finalState->forAll(s : ManagerState | s.isEnd and not s.isStart)
3974 ,Expression: if isEnd then owningManager.finalState->includes(self) else true endif
3975 ,Expression: if not owningManager.initialState.oclAsSet()->includes(self) and not owningManager.finalState->includes(self) then outgoingTransition->size() > 0 and incomingTransition->size() > 0 else true endif
3976 ,Expression: not (isStart and isEnd)
3977 ,Expression: if isStart then owningManager.initialState.oclAsSet()->includes(self) else true endif
3978 ,Expression: if not owningManager.finalState->includes(self) then outgoingTransition->collect(transProb)->iterate(p : Real ; res : Real = 0 | res + p) = 1.0 else true endif
3979 ,Expression: not name.oclIsUndefined()
3980 ,Expression: transProb <= 1.0 and not transProb.oclIsUndefined()
3981 ,Expression: not name.oclIsUndefined()
3982 ,Expression: not name.oclIsUndefined()
3983 ,Expression: not name.oclIsUndefined()
4004 ,Expression: self.name.at(1).matches('[A-Z]')
4005 ,Expression: self.superType <> self.name
4006 ,Expression: Class.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
4007 ,Expression: self.id.multiplicityLowerBound = 1 and self.id.multiplicityUpperBound = 1
4008 ,Expression: self.multiplicityLowerBound >= 0           and (self.multiplicityUpperBound >= multiplicityLowerBound or self.multiplicityUpperBound = -1)
4009 ,Expression: ViewGroup.allInstances() -> select(w | w.welcomeViewGroup = true) -> size() = 1
4010 ,Expression: self.compositeConditions -> forAll(c | c.type = self.type)
4051 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
4052 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
4053 ,Expression: self.name <> ''
4054 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
4055 ,Expression: self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
4056 ,Expression: PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
4057 ,Expression: self.parent.initialize.implementsInitP1=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP1.name)->notEmpty()
4059 ,Expression: self.parent.initialize.implementsInitP2=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP2.name)->notEmpty()
4061 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
4062 ,Expression: self.parent.parent.implementsSetServices <> null and self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='1')->notEmpty()
4063 ,Expression: self.registeredInSetServices or self.advertisesAtLeastOneField
4064 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
4065 ,Expression: self.parent.parent.implementsSetServices <> null and self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='2')->notEmpty()
4066 ,Expression: self.registeredInSetServices or self.realizesAtLeastOneField
4067 ,Expression: self.addsToState = self.parent.importParam
4068 ,Expression: self.addsToState = self.parent.exportParam
4069 ,Expression: self.realizedInState = self.parent.importParam
4070 ,Expression: self.realizedInState = self.parent.exportParam
4072 ,Expression: self.parent.genericImports.importsLabelSetModelCount <> null and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelCount).userRoutine->asSequence()->first()
4073 ,Expression: self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelServices).userRoutine->asSequence()->first()
4074 ,Expression: self.parent.genericImports.importsLabelSetModelCount <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelCount).userRoutine->asSequence()->first()
4075 ,Expression: self.parent.genericImports.importsLabelSetModelServices <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelServices).userRoutine->asSequence()->first()
4076 ,Expression: self.parent.genericImports.importsLabelSetModelPetLists <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelPetLists).userRoutine->asSequence()->first()
4078 ,Expression: self.parent.initialize.implementsInitP1=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP1.name)->notEmpty()
4080 ,Expression: self.parent.initialize.implementsInitP2=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP2.name)->notEmpty()
4082 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
4083 ,Expression: self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='1')->notEmpty()
4084 ,Expression: self.registeredInSetServices or self.advertisesAtLeastOneField
4085 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
4086 ,Expression: self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='2')->notEmpty()
4087 ,Expression: self.registeredInSetServices or self.realizesAtLeastOneField
4088 ,Expression: self.addsToState = self.parent.importParam
4089 ,Expression: self.addsToState = self.parent.exportParam
4090 ,Expression: self.realizedInState = self.parent.importParam
4091 ,Expression: self.realizedInState = self.parent.exportParam
4093 ,Expression: ''
4094 ,Expression: ''
4096 ,Expression: self.Operations->forAll(op1, op2 | Operations->indexOf(op1)+1 = Operations->indexOf(op2) and op1.oclIsKindOf(Movement) and op2.oclIsKindOf(Movement) implies op1.oclAsType(Movement).duration <> 0.0)
4097 ,Expression: self.duration >= 0
4336 ,Expression: self.constrainingCategory.oclIsUndefined() implies self.constrainingClassifier = self.constrainingCategory
4954 ,Expression: true
4955 ,Expression: true
5065 ,Expression: getThumbRankings()
5066 ,Expression: getThumbRankings()
5067 ,Expression: getMetaInformations()
5068 ,Expression: getMetaInformations()
5069 ,Expression: getMetaInformations()
5070 ,Expression: getMetaInformations()
5071 ,Expression: getMetaInformations()
5072 ,Expression: getMetaInformations()
5075 ,Expression: getInformationObjects()
5076 ,Expression: getMetaTagged()
5077 ,Expression: getMetaTagged()
5078 ,Expression: getMetaTagged()
5208 ,Expression: self.name->notEmpty() and self.name.size() > 0
5209 ,Expression: self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
5250 ,Expression: GenLiteralExpressionProvider
5285 ,Expression: Transition.allInstances()->one(x | x.oclIsNew() and x.source.name = src and x.target.name = trg and self.transitions->includes(x))
5286 ,Expression: StateMachine.allInstances()->forAll(x | x.states@pre = x.states)
5287 ,Expression: State.allInstances()->forAll(x | x.name@pre = x.name)
5291 ,Expression: not self->closure(owner)->includes(self)
5390 ,Expression: fixtures->notEmpty() implies tests->notEmpty()
5391 ,Expression: fixtures->forAll(tests->includesAll(self.tests))
5490 ,Expression: transmitters.remote->excludes(self)
5491 ,Expression: outputs->size() > 0
5492 ,Expression: inputs->size() > 0
5493 ,Expression: (inputs->size() > 0 or outputs->size() > 0)
5502 ,Expression: self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
5503 ,Expression: self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
5504 ,Expression: self.addsToState = self.parent.importParam
5505 ,Expression: self.addsToState = self.parent.exportParam
5506 ,Expression: self.realizedInState = self.parent.importParam
5507 ,Expression: self.realizedInState = self.parent.exportParam
5508 ,Expression: self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
5530 ,Expression: GenLiteralExpressionProvider
5553 ,Expression: father.gender <> mother.gender
5555 ,Expression: parents->any(gender = Gender::MALE)
5556 ,Expression: parents->any(gender = Gender::FEMALE)
5563 ,Expression: name <> null
5564 ,Expression: Place.allInstances()->isUnique(name)
5565 ,Expression: tokens >= 0
5566 ,Expression: connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
5567 ,Expression: name <> null
5568 ,Expression: Place.allInstances()->isUnique(name)
5569 ,Expression: connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
5784 ,Expression: self.name = n
5785 ,Expression: self.name = n
5786 ,Expression: self.table.name = n
5882 ,Expression: not self.allOwnedElements()->includes(self)
5884 ,Expression: self.mustBeOwned() implies owner.oclAsSet()->notEmpty()
5892 ,Expression: self.name.oclAsSet()->isEmpty() or self.allNamespaces()->select(ns : Namespace | ns.name.oclAsSet()->isEmpty())->notEmpty() implies self.qualifiedName.oclAsSet()->isEmpty()
5894 ,Expression: namespace.oclAsSet()->isEmpty() implies visibility.oclAsSet()->isEmpty()
5902 ,Expression: if name.oclAsSet()->isEmpty() or allNamespaces()->select(ns : Namespace | ns.name.oclAsSet()->isEmpty())->notEmpty() then null else allNamespaces()->iterate(ns : Namespace ; all : String = name | ns.name.concat(separator()).concat(all)) endif
5903 ,Expression: if self.oclIsKindOf(Generalization) then Set{self.oclAsType(Generalization).specific} else null endif
5904 ,Expression: if self.oclIsKindOf(Generalization) then Set{self.oclAsType(Generalization).general} else null endif
5905 ,Expression: if self.oclIsKindOf(DirectedRelationship) then self.oclAsType(DirectedRelationship).source->union(self.oclAsType(DirectedRelationship).target) else if self.oclIsKindOf(Association) then self.oclAsType(Association).endType else null endif endif
5967 ,Expression: self.oclAsSet()->collect(cells)->forAll(c : PresentationCell | c.row <= self.rows and c.row > 0)
5968 ,Expression: self.oclAsSet()->collect(cells)->forAll(c : PresentationCell | c.column <= self.columns and c.column > 0)
5969 ,Expression: self.oclAsSet()->collect(cells)->forAll(c : PresentationCell | self.oclAsSet()->collect(cells)->select(pc : PresentationCell | (pc.row = c.row and pc.column = c.column))->size() = 1)
5970 ,Expression: self.oclAsSet()->collect(text)->forAll(c : String | c.size() > 0)
5971 ,Expression: self.name.size() > 0
5972 ,Expression: self.url.size() > 0
5973 ,Expression: let s : String = self.url.substring(1, 7) in s = 'http://'
5976 ,Expression: self.arguments->size() = self.signature.parameters->size()
6579 ,Expression: eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
6580 ,Expression: eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
6581 ,Expression: gate.outlocked implies sec.on
6582 ,Expression: sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
6583 ,Expression: gate.outlocked implies sec.on = true
6584 ,Expression: temp < 50 or not on
6585 ,Expression: temp < 30 implies on
6586 ,Expression: house.time < 2 or house.time > 8 or on
6587 ,Expression: temp < 30 and (house.time < 2 or house.time > 8) implies on = true
6588 ,Expression: if pluged then level < 30 implies charging else true endif
6589 ,Expression: if pluged then house.eprice < 10 implies charging else true endif
6590 ,Expression: temp < 18 implies heating->exists(e : Heating | e.level > 0)
6591 ,Expression: temp < 10 implies heating.level->sum() > 3 * heating->size()
6592 ,Expression: window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
6593 ,Expression: heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
6594 ,Expression: house.time > 22 implies projector.volume < 4
6595 ,Expression: projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
6596 ,Expression: air > 5 implies window->exists(e : Window | e.opened)
6597 ,Expression: house.outtemp > 5 or window->forAll(e : Window | not e.opened)
6598 ,Expression: air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
6599 ,Expression: temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
6600 ,Expression: projector.on implies window->asSequence()->first().curtainOn = true
6601 ,Expression: room.temp > 28 implies level > 5
6602 ,Expression: room.temp < 23 implies level = 0
6603 ,Expression: room.house.outtemp > 30 implies level > 5
6604 ,Expression: level > 0 implies level = 9
6605 ,Expression: level <> 0 implies level = 5
6606 ,Expression: if room.wm <> null then not room.wm.on or not on else true endif
6607 ,Expression: loaded implies on
6608 ,Expression: loaded implies on = true
6609 ,Expression: battery < 20 implies circle < 30
6610 ,Expression: room.house.time = 7 and loaded implies on
6611 ,Expression: room.house.ev->exists(e : EV | e.pluged) or on
6612 ,Expression: room.temp > 20 implies not warming
6613 ,Expression: loaded implies warming = true
6614 ,Expression: self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
6615 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
6616 ,Expression: ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
6617 ,Expression: self.description.size() > 0
6618 ,Expression: RestMethod.allInstances()->includes(self)
6619 ,Expression: self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
6620 ,Expression: not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
6621 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
6622 ,Expression: self.ID.attributeOf = self
6623 ,Expression: DataType.allInstances()->exists(d : DataType | self.itemType = d)
6624 ,Expression: CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
6625 ,Expression: self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
6626 ,Expression: self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
6627 ,Expression: self.description.size() > 0
6628 ,Expression: self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
6629 ,Expression: ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
6630 ,Expression: self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
6641 ,Expression: self.R <= 255 and self.R >= 0
6643 ,Expression: self.G <= 255 and self.G >= 0
6645 ,Expression: self.B <= 255 and self.B >= 0
7353 ,Expression:   (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
7354 ,Expression:   (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
7358 ,Expression: width >= 0
7360 ,Expression: height >= 0
7362 ,Expression: width >= 0
7363 ,Expression: height >= 0
7364 ,Expression: header_level >= 0 and header_level <= 6
7365 ,Expression: self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
7366 ,Expression: not index_page.oclIsUndefined()
7367 ,Expression: index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
7368 ,Expression: item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
7369 ,Expression: self.picture.oclAsSet()->size() + self.text.oclAsSet()->size() >= 1
7370 ,Expression: thickness > 0
14171 ,Expression: replicas>0
14172 ,Expression: labels -> isUnique(key)
14173 ,Expression: containers -> isUnique(name)
14174 ,Expression: containers -> isUnique(containerPort)
14175 ,Expression: environments -> isUnique(name)
14176 ,Expression: services -> isUnique(name)
14177 ,Expression: services -> isUnique(port)
14178 ,Expression: cloud = CloudType::LOCAL implies services -> forAll (s:Service | s.type<>ServiceType::LoadBalancer)
14179 ,Expression: self.microservices->isUnique(m:Microservice | m.name)
14180 ,Expression: self.microservices->isUnique(m:Microservice | m.port)
14181 ,Expression: self.microservices->forAll(m:Microservice | m.port = 0) implies self.microservices.port = self.microservices.imagePort
14182 ,Expression: self.group->isUnique(g:Group | g.name)
14183 ,Expression: self.toConnection ->select(type = ConnectionType::EXTERNAL)->size()<=1
14184 ,Expression: type = ConnectionType::EXTERNAL implies toMicroservice->isEmpty()
14237 ,Expression: self.consistsOf->selectByKind(Step).oclAsType(ManufacturingSystemElement).responsible->excludes(self.responsible)
14238 ,Expression: self.consistsOf.transition-> forAll(m:ManufacturingSystemElement| m.transition <> self.start)
14239 ,Expression: self.responsible->size() = 1
14240 ,Expression: Step.allInstances()->select(transition->includes(self))->forAll(output.outputTypes->excludesAll(self.input->selectByType(WorkPieceCondition).requiresType)=false)
14241 ,Expression: Step.allInstances()->select(transition->includes(self))->selectByKind(Step)->forAll(speed<=self.speed)
14242 ,Expression: let ms:Integer = Step.allInstances()->select(responsible=self)->size() in ms>0 and ms<4
14243 ,Expression: ManufacturingSystem.allInstances()->collect(start)->includes(self) implies ManufacturingSystemElement.allInstances() -> collect(transition) -> excludes(self)
14245 ,Expression: self.input->selectByKind(WorkPieceCondition).requiresType ->includesAll(self.contains.start.stores)and self.output.outputTypes->includesAll(self.contains.end.stores)
14246 ,Expression: self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
14247 ,Expression: self.attributes->union(self.systemUnit.attributes)->includesAll(self.processibleEvents->selectByKind(ChangeEvent).changeExpression.booleanFunctionCall.parameters.valueSpecification->selectByKind(AttributeValueSpecification).attribute)
14248 ,Expression: self.nodes->selectByKind(State)->select(s | s.initial)->size() = 1
14249 ,Expression: self.nodes->selectByKind(State)->select(s | s.terminal)->size() <= 1
14250 ,Expression: self.edges.target->selectByKind(State)->select(s | s.initial)->size() = 0
14251 ,Expression: self.edges.source->selectByKind(State)->select(s | s.initial)->size() = 1
14252 ,Expression: self.nodes->selectByType(State)->select(s |s.terminal)->size() = 0 or self.edges.target->selectByType(State)->select(s | s.terminal)->size() = 1
14253 ,Expression: self.edges.source->selectByKind(State)->select(s |s.terminal)->size() = 0
14254 ,Expression: self.incomingEdges->size() = 1
14255 ,Expression: self.outgoingEdges->size() >= 2
14256 ,Expression: self.outgoingEdges.target->selectByType(Transition)->select(t |t.trigger.oclIsUndefined())->size() <= 1
14257 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
14258 ,Expression: self.incomingEdges->size() >= 2
14259 ,Expression: self.outgoingEdges->size() = 1
14260 ,Expression: self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
14261 ,Expression: not (self.terminal and self.initial)
14262 ,Expression: not (self.initial or self.terminal) or self.actionSequence->isEmpty()
14263 ,Expression: (self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
14264 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
14265 ,Expression: self.incomingEdges->size() = 1
14266 ,Expression: self.outgoingEdges->size() = 1
14267 ,Expression: self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
14268 ,Expression: self.parameters.parameter->includesAll(self.function.parameters->select(p| p.direction = ParameterDirectionKind::IN))
14269 ,Expression: self.functionCall.function.parameters->includes(self.parameter)
14270 ,Expression: self.attribute.type = self.parameterValue.parameter.type
14271 ,Expression: self.booleanFunctionCall.function.parameters->exists(p |p.direction = ParameterDirectionKind::RETURN and p.type.name = 'Boolean')
14292 ,Expression: type.containerTypes->includes(parent.type) or parent = null
14293 ,Expression: attributes->forAll(a : Attribute | a.artifactTypes->includes(self.type)) or type = null
14294 ,Expression: (next->excludes(self) or next->size() = 0) and (previous->excludes(self) or previous->size() = 0)
14295 ,Expression: values->forAll(v : Value | artifact.attributes->includes(v.ofAttribute))
14296 ,Expression: artifact.attributes->forAll(a : Attribute | values->select(v : Value | (v.ofAttribute = a))->size() <= 1)
14297 ,Expression:             if (activity->isEmpty())             then OrderedSet{}             else self->collect(s : State | self.activity.targetState)             endif
14298 ,Expression:             if (fromActivity->isEmpty())             then OrderedSet{}             else self->collect(s : State | self.fromActivity.state)             endif
14299 ,Expression:             if (fromActivity->isEmpty())            then null            else null            endif
14300 ,Expression: state <> targetState
14301 ,Expression: deltas->forAll(d : Delta | state.artifact.attributes->includes(d.value.ofAttribute))
14302 ,Expression: state.artifact.attributes->forAll(a : Attribute | deltas->select(d : Delta | (d.value.ofAttribute = a))->size() <= 1)
14303 ,Expression: ofAttribute.name
14304 ,Expression: activity.targetState.values->select(v : Value | v.ofAttribute = self.onAttribute)->last()
14305 ,Expression: activity.state.values->select(v : Value | v.ofAttribute = self.onAttribute)->last()
14306 ,Expression: if targetValue.oclIsUndefined() or value.oclIsUndefined() then 0 else targetValue.content - value.content endif
14307 ,Expression: ofAttribute.name
14317 ,Expression: self.R <= 255 and self.R >= 0
14319 ,Expression: self.G <= 255 and self.G >= 0
14321 ,Expression: self.B <= 255 and self.B >= 0
14330 ,Expression: ComputeNode.allInstances() ->forAll(n | n.processInputData -> forAll( i |i.providedBy -> size() >0)  )
14332 ,Expression: ComputeNode.allInstances() ->forAll(n | n.produceOutputData -> forAll(d |n.storeOutput -> forAll( s |d.providedBy -> includes(s)) ))
14334 ,Expression: Permission.allInstances() ->forAll(p | p.protectedData.providedBy ->size() > 0 )
14335 ,Expression: Permission.allInstances() ->forAll(p | p.actionType -> forAll( a |a.schemaField -> forAll(f |p.protectedData.fields -> includes(f))))
14336 ,Expression: Permission.allInstances() ->select(p |p.actionType -> exists(a |not a.operation = DataOperation::READ)) -> forAll(p | p.protectedData.providedBy -> exists( ds |ds.oclIsKindOf(StorageSystem)))
14339 ,Expression: requiresPeerVm -> forAll(platform | ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = platform.elementId and      b.providedexecutionplatform.owner.oclIsTypeOf(VM)))
14340 ,Expression: requiresSlaveVm -> forAll(platform | ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = platform.elementId and          b.providedexecutionplatform.owner.oclIsTypeOf(VM)))
14341 ,Expression: ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = requiresMasterVm.elementId and          b.providedexecutionplatform.owner.oclIsTypeOf(VM))
14343 ,Expression: Tuple {message : String = 'The following variables are defined more than once: ' + variables->select(v | (variables->select(v1 | (v1.name = v.name))->size() > 1))->collect(name)->toString(),status : Boolean = variables->isUnique(name)}.status
14344 ,Expression: Tuple {message : String = 'Cannot assign empty name to sort',status : Boolean = name <> ''}.status
14345 ,Expression: Tuple {message : String = 'The super sort of sort ' + name + 'cannot be null',status : Boolean = superSort <> null}.status
14346 ,Expression: Tuple {message : String = 'There are some sorts in the adt that appear more than once: ' + sorts->select(s1 | (sorts->select(s2 | (s2.name = s1.name))->size() > 1))->collect(name)->toString(),status : Boolean = sorts <> null implies sorts->isUnique(name)}.status
14347 ,Expression: Tuple {message : String = 'There are some operations in the adt that appear more than once: ' + allOperations->select(op1 | (allOperations->select(op2 | (op2.name = op1.name))->size() > 1))->collect(name)->toString(),status : Boolean = allOperations->isUnique(name)}.status
14348 ,Expression: name <> ''
14349 ,Expression: Tuple {message : String = 'The return type for operation ' + name + ' was not set.',status : Boolean = returnType <> null}.status
14350 ,Expression: Tuple {message : String = 'Invalid number of parameters for term: ' + self.toString() + '. Required ' +operationSymbol.formalParameters->size()->toString() + ', found ' + subterms->size()->toString(),status : Boolean = (operationSymbol <> null) implies subterms->size() = operationSymbol.formalParameters->size()}.status
14352 ,Expression: Tuple {message : String = 'Some subterms do not have the same adt as the parent term: ' +self.toString(),status : Boolean = (subterms <> null) implies subterms->forAll(t | t.adt = self.adt)}.status
14353 ,Expression: Tuple {message : String = 'The parameter names are not unique for declared strategy: ' + name,status : Boolean = formalParams<> null implies formalParams->isUnique(name)}.status
14354 ,Expression: Tuple {message : String = 'Formal params for strategy ' + name + ' are null',status : Boolean = formalParams <> null}.status
14355 ,Expression: Tuple {message : String = 'Invalid number of parameters for strategy ' + name + '. Required ' +declaration.formalParams->size()->toString() + ', found ' + actualParams->size()->toString(),status : Boolean = (declaration <> null) implies declaration.formalParams->size() = actualParams->size()}.status
14359 ,Expression: self.taille >= 0 and self.taille < self.espece.tailleMaxAdulte
14360 ,Expression: self.sexe = M implies self.datePonte->isEmpty()
14361 ,Expression: self.espece.repartitionGeographique.lieu->includes(self.lieuHabite)
14366 ,Expression: self.regimeGeneral->includesAll(self.especeTortue.modeElevage.regimeCaptivite)
14367 ,Expression: self.tempJour > self.tempNuit
15010 ,Expression: self.name<>null
15011 ,Expression: self.location<>null
15012 ,Expression: self.trule<>null
15013 ,Expression: self.testScenarios->size() > 0
15238 ,Expression: AbstractPage.allInstances() -> forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(AbstractPage).ID <> e2.oclAsType(AbstractPage).ID)
15239 ,Expression: self.title.matches('[A-Z].*')
15240 ,Expression: PageElement.allInstances() -> forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)
15241 ,Expression: (self.isMandatory and self.label.matches('.*[*]')) or (self.isMandatory = false)
15242 ,Expression: self.level>0
15243 ,Expression: (self.isMandatory and self.text.matches('.*') or (self.isMandatory = false))
15244 ,Expression: (self.isMandatory and self.text.matches('.*') or (self.isMandatory = false))
15245 ,Expression: self.predecessor->excludes(self)
15246 ,Expression: self.predecessor->excludes(self) and self.successor->excludes(self)
15247 ,Expression: ID > predecessor and ID < successor
15248 ,Expression: self.successor->excludes(self)
15249 ,Expression: previousPage->asSet()->union(previousPage->asSet()->closure(previousPage))
15250 ,Expression: nextPage->asSet()->union(nextPage->asSet()->closure(nextPage))
15331 ,Expression: self.preArc -> notEmpty()
15351 ,Expression: actualArgs->size() = declaration.args->size()
15352 ,Expression: args->forAll( a1 , a2 | a1.name = a2.name implies a1 = a2)
15359 ,Expression: not self.functionName.oclIsUndefined()
15362 ,Expression: not self.nodeID.oclIsUndefined()
15363 ,Expression: not self.nodeID.oclIsUndefined()
15364 ,Expression: self->closure(equipments).resources->asOrderedSet()
15365 ,Expression: self->closure(equipments)->asOrderedSet()
15366 ,Expression: self.equipments->size()
15367 ,Expression: self->closure(equipmentRefs).equipmentResources->asOrderedSet()
15368 ,Expression: self->closure(equipmentRefs)->asOrderedSet()
15369 ,Expression: self.equipments->size()
15370 ,Expression: not self.functionName.oclIsUndefined()
15371 ,Expression: self->closure(functions)->asOrderedSet()
15372 ,Expression: not self.nodeID.oclIsUndefined()
15373 ,Expression: not self.nodeID.oclIsUndefined()
15374 ,Expression: self->closure(equipments).resources->asOrderedSet()
15375 ,Expression: self->closure(equipments)->asOrderedSet()
15376 ,Expression: self.equipments->size()
15377 ,Expression: self->closure(equipmentRefs).equipmentResources->asOrderedSet()
15378 ,Expression: self->closure(equipmentRefs)->asOrderedSet()
15379 ,Expression: self.equipments->size()
15380 ,Expression: not self.functionName.oclIsUndefined()
15381 ,Expression: self->closure(functions)->asOrderedSet()
15382 ,Expression: not self.nodeID.oclIsUndefined()
15396 ,Expression: not self.functionName.oclIsUndefined()
15399 ,Expression: not self.nodeID.oclIsUndefined()
15431 ,Expression: self->closure(equipments).equipmentResources->asOrderedSet()
15432 ,Expression: self->closure(equipments)->asOrderedSet()
15433 ,Expression: self.equipments->size()
15434 ,Expression: self->closure(equipmentRefs).equipmentResources->asOrderedSet()
15435 ,Expression: self->closure(equipmentRefs)->asOrderedSet()
15436 ,Expression: self.equipments->size()
15437 ,Expression: not self.functionName.oclIsUndefined()
15438 ,Expression: self->closure(functions).functionResources->asOrderedSet()
15439 ,Expression: self->closure(functions)->asOrderedSet()
15440 ,Expression: not self.nodeID.oclIsUndefined()
15451 ,Expression: not self.functionName.oclIsUndefined()
15454 ,Expression: not self.nodeID.oclIsUndefined()
15465 ,Expression: Entity.allInstances()->forAll(e1 | self<>e1 implies self.name<>e1.name)
15466 ,Expression: not(self.entityAttribute->isEmpty()) and self.superType=null implies (self.entityAttribute->one(a | a.isId=true))
15467 ,Expression: (not(self.entityAttribute->isEmpty()) and self.superType<>null) implies (self.entityAttribute->forAll(a | a.isId=false))
15468 ,Expression: self.superType<>null implies self.superType<>self
15469 ,Expression: self.type=AttributeType::None implies self.enumerationType<>null
15470 ,Expression: self.type<>AttributeType::None implies self.enumerationType=null
15471 ,Expression: self.isId=true implies self.mandatory=true
15472 ,Expression: self.modelForm->notEmpty() implies self.modelForm->one(f | f.isWelcomeForm=true)
15473 ,Expression: self->forAll(self.lowerBound>=0)
15474 ,Expression: self.upperBound<>-1 implies self.upperBound >= self.lowerBound
15475 ,Expression: self->forAll(self.upperBound = -1 or self.upperBound > 0)
15476 ,Expression: self.opposite<>null implies (self.opposite.opposite=self)
15477 ,Expression: self.opposite<>null implies (self.Entity=opposite.target)
15478 ,Expression: self.opposite<>self
15479 ,Expression: Form.allInstances()->forAll(f1 | self<>f1 implies self.name<>f1.name)
15480 ,Expression: self.pages->forAll(pa |pa.pageElements->select(oclIsKindOf(AttributePageElement))->forAll(pa:AttributePageElement | ((self.formEntity->closure(e | e.superType)).entityAttribute)->includes(pa.attributeRef)))
15481 ,Expression: self.pages->forAll(pa |pa.pageElements->select(oclIsKindOf(RelationshipPageElement))->forAll(pa:RelationshipPageElement | (self.formEntity.relationship)->includes(pa.relationshipRef)))
15482 ,Expression: self.columns->forAll(col | self.relationshipRef.target.entityAttribute->includes(col.attributeReference))
15483 ,Expression: (self.targetPageElement<>null implies self.targetPage=null) and (self.targetPage<>null implies self.targetPageElement=null)
15484 ,Expression: self.child2<>self.child1
15554 ,Expression: self.organized->select(p | p.isWelcome)->size() = 1 and self.organized->select(p | p.isWelcome)->forAll(p | p.predecessor->isEmpty())
15555 ,Expression: self.organized->select(p | p.predecessor->isEmpty())->size() = 1
15556 ,Expression: not (Title.size()=0) and Title.at(1) = Title.at(1).toUpper()
15557 ,Expression: self.predecessor->asSet()->union(self.predecessor->closure(p | p.predecessor))->excludes(self)
15558 ,Expression: PageElement.allInstances()->forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)
15559 ,Expression: self.Type <> SelectionType::RADIO or (self.consists->select(preselected)->size() <= 1 and self.consists->select(selected)->size() <= 1)
15560 ,Expression: self.displayElementVisible -> forAll(e |e.contained.predecessor->asSet()->union(e.contained.predecessor->closure(p | p.predecessor))->includes(self.contained.contained))
15723 ,Expression: true and true
15727 ,Expression: 'a' + 'b'
16055 ,Expression: self.systemunits->forAll(s1, s2 | s1 <> s2 implies s1.name <> s2.name)
16057 ,Expression: if(self.incoming.source = SelectionDivergence) then self.trigger->size()=1 else self.trigger->size()>=0 endif
16058 ,Expression: self.outgoing->size()>1
16059 ,Expression: self.incoming->size()=1
16061 ,Expression: self.incoming->size()>1 and self.outgoing->size()=1
16063 ,Expression: self.incoming->size()=0
16064 ,Expression: self.outgoing->size()=1
16065 ,Expression: self.functioncall->size()=0
16067 ,Expression: self.outgoing->size()=0
16068 ,Expression: self.incoming->size()=1
16069 ,Expression: self.functioncall->size()=0
16071 ,Expression: self.outgoing->size()=1
16072 ,Expression: self.incoming->size()=1
16101 ,Expression: self.name <> null
16102 ,Expression: self.orderedTasks->size() >= 1
16103 ,Expression: self.orderedTasks->forAll(t1 : Task, t2 : Task | t1 <> t2 implies t1.name <> t2.name)
16104 ,Expression: self.name <> null
16105 ,Expression: self.subFolders->forAll(f1 : Folder, f2 : Folder | f1 <> f2 implies f1.name <> f2.name)
16106 ,Expression: self.orderedTasks->size() > 1
16107 ,Expression: self.orderedTasks->size() > 1
16108 ,Expression: self.rootFolder.parent = null
16109 ,Expression: tasks->isUnique(id)
16110 ,Expression: self.folders->isUnique(id)
16111 ,Expression: self.folders->includes(self.rootFolder)
16112 ,Expression: folder.orderedTasks->size() > 1
16113 ,Expression: folder.orderedTasks->size() > 1
16119 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
16120 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
16121 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
16122 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
16123 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
16124 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
16125 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
16126 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
16127 ,Expression: self.relations->size() > 0
16128 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
16129 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
16130 ,Expression: self.attrs->size() > 0
16131 ,Expression: srcPort.parentBlock.parentBlock = dstPort.parentBlock.parentBlock and dstPort.parentBlock.parentBlock = self.parentBlock
16132 ,Expression: srcPort.dataType.baseType = dstPort.dataType.baseType and srcPort.dataType.dimensions = dstPort.dataType.dimensions
16133 ,Expression: not sourceBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
16135 ,Expression: not sinkBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
16136 ,Expression: srcPort.parentBlock.parentBlock = dstPort.parentBlock.parentBlock and dstPort.parentBlock.parentBlock = self.parentBlock
16137 ,Expression: srcPort.dataType.baseType = dstPort.dataType.baseType and srcPort.dataType.dimensions = dstPort.dataType.dimensions
16138 ,Expression: not sourceBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
16140 ,Expression: not sinkBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
16156 ,Expression: srcPort.parentBlock.parentBlock = dstPort.parentBlock.parentBlock and dstPort.parentBlock.parentBlock = self.parentBlock
16157 ,Expression: srcPort.dataType.baseType = dstPort.dataType.baseType and srcPort.dataType.dimensions = dstPort.dataType.dimensions
16158 ,Expression: not sourceBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
16160 ,Expression: not sinkBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
16161 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
16162 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
16164 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
16165 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
16166 ,Expression: Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
16169 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
16170 ,Expression: Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
16172 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
16173 ,Expression: Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
16174 ,Expression: Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
16197 ,Expression: Tuple {message : String = 'Name must not be empty.',status : Boolean = if name.size() > 0 then true else null endif}.status
16198 ,Expression: Tuple {message : String = 'Node cannot connect to itself.',status : Boolean = if sourceConnections->forAll(c | c.source <> c.target) then true else null endif}.status
16203 ,Expression: if (self.direction=Direction::IN) then (not (self.incomingConnection=null)) else (self.outgoingConnection->size()>0) endif
16204 ,Expression: (self.gid <> null and self.gid.size() > 0) and(self.content <> null and self.content.size() > 0)
16208 ,Expression: self.name = 'Module'
16210 ,Expression: (self.name = 'Solution' and self.isAbstract = false) or(self.name = 'Solution' and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or (self.name = 'Context' and self.isAbstract = false) or(self.name = 'Context' and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or(self.name = 'Solution' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or     (self.name = 'Context' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
16211 ,Expression: (self.name = 'AwayGoal') or(self.name = 'AwaySolution') or(self.name = 'AwayContext')
16212 ,Expression: (self.name = 'Goal' and self.assumed = false and self.isAbstract = false) or(self.name = 'Goal' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or(self.name = 'Goal' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='TBSC') and not self.taggedValue->exists(t|t.sKey='undeveloped')) or (self.name ='Assumption' and self.assumed = true and self.isAbstract = false) or(self.name ='Assumption' and self.assumed = true and self.isAbstract = false and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or (self.name = 'Justification' and self.assumed = false and self.isAbstract = false) or(self.name = 'Justification' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))  or(self.name = 'Goal' and self.assumed = false and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'undeveloped') and not self.taggedValue->exists(t|t.sKey='TBSC')) or(self.name = 'Context' and self.assumed = true and self.isAbstract = false) or(self.name = 'Goal' and self.assumed = false and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
16213 ,Expression: (AssertedInference.allInstances()->select(as|as.reasoning = self)->size() = 1 and self.name = 'Strategy' and self.isAbstract = false) or (self.name = 'Strategy' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'undeveloped')) or(self.name = 'Strategy' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
16217 ,Expression: self.attributes -> includes(self.identifier) or self.supertypes.attributes -> includes(self.identifier)
16218 ,Expression: self.relationships -> forAll(r: Relationship | r.opposite -> isEmpty() or r.opposite.target = self and r.opposite.opposite = r)
16219 ,Expression: self.enumerationType -> isEmpty() or self.type = AttributeType::None
16220 ,Expression: self.lowerBound >= 0 and (self.lowerBound <= self.upperBound or self.upperBound = -1)
16221 ,Expression: (self.consists.contains -> selectByKind(AttributePageElement)).refers_to -> forAll(a: Attribute | self.associated_with.attributes -> includes(a) or self.associated_with.supertypes -> forAll(e: Entity | e.attributes -> includes(a)))
16222 ,Expression: (self.consists.contains -> selectByKind(RelationshipPageElement)).refers_to -> forAll(r: Relationship | self.associated_with.relationships -> includes(r))
16223 ,Expression: (self.consists.contains -> selectByKind(Table)).consists.refers_to -> forAll(a: Attribute | self.associated_with.attributes -> includes(a) or associated_with.supertypes -> forAll(e: Entity | e.attributes -> includes(a)))
16224 ,Expression: self.refers_to.type = AttributeType::Boolean xor not self.refers_to.enumerationType.oclIsUndefined()
16225 ,Expression: self.combinesAttributeValue -> size() + self.combinesComposite -> size() = 2
16226 ,Expression: self.conditionsPageElement -> isEmpty() xor self.conditionsPage -> isEmpty()
16227 ,Expression: (self.forms.isWelcomeForm -> excluding(false)) -> size() = 1
16228 ,Expression: not self.name.oclIsUndefined() and name <>''
16229 ,Expression: self.entities->forAll(e1 : Entity, e2 : Entity | e1 <> e2 implies e1.name <> e2.name)
16230 ,Expression: DynamicPage.allInstances()->collect(entity)->asSet() = Entity.allInstances()
16231 ,Expression: webpages->collect(homeLink.target)->forAll(p | p = self.homePage)
16232 ,Expression: creationDateBeforeGoLive()
16233 ,Expression: self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
16234 ,Expression: self.homeLink.target.oclIsTypeOf(StaticPage)
16251 ,Expression: (self.debut.oclIsTypeOf(Place) and self.fin.oclIsTypeOf(Transition))or (self.debut.oclIsTypeOf(Transition) and self.fin.oclIsTypeOf(Place))
16252 ,Expression: self.debut <> self.fin
16253 ,Expression: self.poids > 0
16254 ,Expression: self.nbJeton >= 0
16255 ,Expression: self.borne > 0
16256 ,Expression: self.name <> null and self.name <> ''
16257 ,Expression: self.name <> null and self.name <> ''
16258 ,Expression: Process.allInstances()->select(i | i.oclIsTypeOf(WorkDefinition))->forAll(i,j | i<>j implies i.name <> j.name)
16259 ,Expression: Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
16260 ,Expression: self.name <> ''
16261 ,Expression: self.process = self.predecessor.process
16262 ,Expression: self.process = self.successor.process
16263 ,Expression: self.successor <> self.predecessor
16264 ,Expression: self.name <> null and self.name <> ''
16265 ,Expression: self.weight <= self.usedResource.quantity
16266 ,Expression: self.weight >= 0
16267 ,Expression: self.nbJetons >= 0
16268 ,Expression: self.poids > 0
16269 ,Expression: (self.dbt.oclIsTypeOf(Place) and self.fin.oclIsTypeOf(Transition))or (self.dbt.oclIsTypeOf(Transition) and self.fin.oclIsTypeOf(Place))
16270 ,Expression: self.nom <> '' and self.nom <> null
16271 ,Expression: self.name <> '' and self.name <> null
16272 ,Expression: name <> 'PetriNet'
16273 ,Expression: self->select(arc | arc.oclIsTypeOf(Arc))->forAll(i,j|i<>j implies i.name <> j.name)
16274 ,Expression: self->select(pe | pe.oclIsTypeOf(PetriElement))->forAll(i,j|i<>j implies i.name <> j.name)
16275 ,Expression: self.ports->forAll(not connector.connectedports->collect(networkelement)->one(p | p <> self).oclIsKindOf(Host))
16276 ,Expression: user->select(obj |obj.oclIsKindOf(RegisteredUser))->size() > 0 implies (user->select(obj |obj.oclIsKindOf(SysOp))->size() > 0 and user->select(obj | obj.oclIsKindOf(Administrator))->size() > 0)
16277 ,Expression: averageEditedPagesPerUser >= 1
16278 ,Expression: user.countRevisions->sum() / user->size()
16279 ,Expression: self.Wikipedia.currentDateJD
16280 ,Expression: self.authoredRevisions->size()
16281 ,Expression: Revision.allInstances()->select(author = self)
16282 ,Expression: wikiTime >= registrationDateJD
16283 ,Expression: wikiTime - registrationDateJD
16297 ,Expression: name.oclIsUndefined() <> true
16298 ,Expression: LiteratureDb.allInstances()->select(db | db.name = self.name)->size() = 1
16299 ,Expression: self.literaturedb.entries->select(e | e.id = self.id)->size() = 1
16304 ,Expression: self.elements->notEmpty()
16305 ,Expression: self.noTokens > 3
17989 ,Expression: rowAxisProviders->includes(defaultRowAxisProvider)
17990 ,Expression: columnAxisProviders->includes(defaultColumnAxisProvider)
17994 ,Expression: axisManagers->forAll(am1 : AxisManagerRepresentation, am2 : AxisManagerRepresentation | am1.axisManagerId <> am2.axisManagerId)
17995 ,Expression: rowAxisProvidersHistory->includes(currentRowAxisProvider)
17996 ,Expression: columnAxisProvidersHistory->includes(currentColumnAxisProvider)
17997 ,Expression: self.maxDelay > self.minDelay
18005 ,Expression: if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
18022 ,Expression: self.states->forAll(s1, s2| s1 <> s2 implies s1.name <> s2.name)
18023 ,Expression: self.oclContainer.oclAsType(FiniteStateMachine).states->forAll(s1| s1 <> self implies s1.name <> self.name)
18024 ,Expression: self.oclContainer.oclAsType(State).outgoingTransitions->forAll(t| t <> self implies t.input <> self.input)
18030 ,Expression: worstCaseExecTime > 0
18031 ,Expression: worstCaseExecTime <= implicitDeadline
18033 ,Expression: implicitDeadline <= characteristicPeriod
18034 ,Expression: characteristicPeriod > 0
18035 ,Expression: delay > 0
18036 ,Expression: period > 0
18038 ,Expression: if (partition->size() > 0)then partition->collect(p | p.availabilityFactor)->sum()else 0.0endif
18039 ,Expression: period > 0
18040 ,Expression: availabilityFactor <= 1
18045 ,Expression: end >= start
18046 ,Expression: end <> start
18047 ,Expression: latency > 0
18048 ,Expression: networkBandwidth > 0
18049 ,Expression: switchPorts->size() > 1
18050 ,Expression: destinations->forAll(dest : Module | dest <> source)
18051 ,Expression: BAG > 0
18052 ,Expression: maxFrameSize > 0
18053 ,Expression: Bandwidth > 0
18054 ,Expression: Brick.allInstances()->select(b | b.oclIsTypeOf(DigitalSensor) or b.oclIsTypeOf(DigitalActuator) or b.oclIsTypeOf(AnalogActuator))->size() <= 5
18056 ,Expression: AnalogSensor.allInstances()->size() <= 5
18057 ,Expression: AnalogSensor.allInstances()->size() <= 3
18058 ,Expression: self.time > 0
18059 ,Expression: self.value >= 0 and self.value <= 1023
18060 ,Expression: self.value >= 0 and self.value <= 1023
18061 ,Expression: (Node.allInstances()->select(n | n.parent.oclIsUndefined ()))->size() = 1
18062 ,Expression: self.subnodes->size() > 0 and Transition.allInstances()->exists(t | t.target=self) implies self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() = 1
18063 ,Expression: self.subnodes->size() > 0 implies (self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() <= 1)
18064 ,Expression: (not self.doo.oclIsUndefined()) implies (self.subnodes->size() = 0)
18065 ,Expression: let lca : State = LCA(self.source, self.target) in self.owner = lca or isAncestor(self.owner, lca)
18066 ,Expression: (self.target.parent <> self.source) and isAncestor(self.target.parent, self.source)
18067 ,Expression: (self.source.oclIsTypeOf(Connector) and self.source.name='initial') implies (Transition.allInstances()->select(t | t.source = self.source)->size()) <= 1
18068 ,Expression: (self.source.oclIsTypeOf(Connector) and self.source.name='initial') implies guard.oclIsUndefined()
18169 ,Expression: self.calledFunction.numberOfArguments = self.arguments->size()
18170 ,Expression: self.expression <> self
18171 ,Expression: pos.x >= 0 and pos.y >= 0
18172 ,Expression: View.allInstances()->select(v:View|v.ID=self.ID)->size() = 1
18173 ,Expression: children->size() = (cols * rows)
18174 ,Expression: (options->size() = 0) or (options->includes(default))
18175 ,Expression: (self.default >= 0) and (self.default <= self.max)
18176 ,Expression: max > 0
18290 ,Expression: not self.name.oclIsUndefined() and self.name <> ''
18291 ,Expression: self.minimum <= self.default and self.default <= self.maximum
18292 ,Expression: self.activationConditions->selectByType(StateActivationCondition)->forAll(s: StateActivationCondition | self <> s.state)
18293 ,Expression: self.activationConditions->selectByKind(LogicActivationCondition).terms->selectByType(StateActivationCondition)->forAll(s: StateActivationCondition | self <> s.state)
18294 ,Expression: self.activationConditions->selectByKind(LogicActivationCondition).oclAsSet()->closure(l: LogicActivationCondition | l.terms->selectByKind(LogicActivationCondition)).terms->selectByType(StateActivationCondition)->forAll(s: StateActivationCondition | self <> s.state)
18295 ,Expression: self.influences->isUnique(i: Influence | i.feature.name)
18296 ,Expression: if self.operator = MathematicOperator::DIVISION then value <> 0 else true endif
18297 ,Expression: self.parent.oclIsUndefined() or self.parent.subparts->select(b: BodyPart | self.name = b.name)->size() = 1
18298 ,Expression: self.threshold <= self.feature.maximum and self.threshold >= self.feature.minimum
18299 ,Expression: self.features->forAll(f: Feature | self.actions->select(a: Action | a.enable = true).influences.feature->exists(inf_feature: Feature | inf_feature = f))
18300 ,Expression: self.actions->isUnique(a: Action | a.name)
18301 ,Expression: self.features->isUnique(f: Feature | f.name)
18302 ,Expression: self.states->isUnique(s: State | s.name)
18303 ,Expression: self.states->selectByType(StateDead)->size() > 0
18304 ,Expression: self.noTrains >= self.trains->size()
18305 ,Expression: self.noLines >= self.lines->size()
18306 ,Expression: self.trains->size() <= 4
18307 ,Expression: self.carriages > 0 and self.carriages < 3
18308 ,Expression: (self.carriages*6 + 6) >= self.persons->size()
18316 ,Expression: self.as->forAll(x,y | x = y or x.key <> y.key)
18317 ,Expression: self.bs->forAll(x,y | x = y or x.key <> y.key)
18318 ,Expression: self.name = n
18319 ,Expression: self.name = n
18320 ,Expression: self.table.name = n
18321 ,Expression: not self->closure(super)->includes(self)
18322 ,Expression: Class.allInstances()->forAll(x | x = self or x.name <> self.name)
18323 ,Expression: self.attributes->forAll(x | self.attributes->forAll(y | x = y or x.name <> y.name))
18324 ,Expression: self.name = n
18325 ,Expression: Package.allInstances()->forAll(x | x.classes@pre = x.classes)
18326 ,Expression: Package.allInstances()->forAll(x | x.name@pre = x.name)
18327 ,Expression: Attribute.allInstances()-> forAll(x | x.name@pre = x.name)
18328 ,Expression: Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes)
18329 ,Expression: Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent)
18332 ,Expression: Class.allInstances()-> forAll(x | x.super@pre = x.super)
18334 ,Expression: Class.allInstances()-> forAll(x | x.name@pre = x.name or x = self)
18335 ,Expression: Package.allInstances()->forAll(x | x.classes@pre = x.classes)
18336 ,Expression: Package.allInstances()->forAll(x | x.name@pre = x.name)
18338 ,Expression: Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes or x = self)
18339 ,Expression: Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent)
18342 ,Expression: Class.allInstances()-> forAll(x | x.super@pre = x.super)
18344 ,Expression: Class.allInstances()-> forAll(x | x.name@pre = x.name)
18345 ,Expression: Attribute.allInstances()->one(x | x.oclIsNew() and x.name = n and self.attributes->includes(x))
18346 ,Expression: Package.allInstances()->forAll(x | x.classes@pre = x.classes)
18347 ,Expression: Package.allInstances()->forAll(x | x.name@pre = x.name)
18348 ,Expression: Attribute.allInstances()-> forAll(x | x.name@pre = x.name)
18349 ,Expression: Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes)
18350 ,Expression: Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent or x = self)
18353 ,Expression: Class.allInstances()-> forAll(x | x.super@pre = x.super)
18355 ,Expression: Class.allInstances()-> forAll(x | x.name@pre = x.name)
18356 ,Expression: self.name = n
18357 ,Expression: Package.allInstances()->forAll(x | x.classes@pre = x.classes)
18358 ,Expression: Package.allInstances()->forAll(x | x.name@pre = x.name)
18359 ,Expression: Class.allInstances()-> forAll(x | x.name@pre = x.name)
18360 ,Expression: Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes)
18361 ,Expression: Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent)
18364 ,Expression: Class.allInstances()-> forAll(x | x.super@pre = x.super)
18366 ,Expression: Attribute.allInstances()-> forAll(x | x.name@pre = x.name or x = self)
18370 ,Expression: not self->closure(super)->includes(self)
18371 ,Expression: self.attributes->forAll(x | self.attributes->forAll(y | x = y or x.name <> y.name))
18372 ,Expression: Attribute.allInstances()->one(x | x.oclIsNew() and x.name = n and self.attributes->includes(x))
18373 ,Expression: Class.allInstances()->forAll(x | x.attributes@pre = x.attributes or x = self)
18376 ,Expression: self.name = n
18377 ,Expression: NamedEntity.allInstances()->forAll(x | x.name@pre = x.name or x = self)
18674 ,Expression: self.R <= 255 and self.R >= 0
18676 ,Expression: self.G <= 255 and self.G >= 0
18678 ,Expression: self.B <= 255 and self.B >= 0
18686 ,Expression: self.tablas->forAll(t1, t2 : Tabla | t1 <> t2 implies t1.nombre <> t2.nombre)
18687 ,Expression: self.tablas->isUnique(nombre)
18688 ,Expression: self.columnas->forAll(c1, c2 : Columna | c1 <> c2 implies c1.nombre <> c2.nombre)
18689 ,Expression: self.columnas->isUnique(nombre)
18690 ,Expression: self.nombre = self.nombre.toUpper()
18691 ,Expression: self.nombre.substring(1, 1) = self.nombre.substring(1, 1).toUpper()
18699 ,Expression: self.rootNodes()->forAll(n:Node| self.incremental(n))
18700 ,Expression: self.rootNodes()->forAll(n:Node| self.mandatory(n))
18701 ,Expression: self.rootNodes()->forAll(n:Node| self.free(n))
18709 ,Expression: if (self.type.oclIsTypeOf(PreCache)) then true else false endif
18710 ,Expression: not self.parent.oclIsUndefined()
18711 ,Expression: self.actividades->select(nombre<>null)->isUnique(nombre)
18712 ,Expression: self.actividades.espacios->select(nombre<>null)->isUnique(nombre)
18713 ,Expression: self.actividades.espacios.tareas->select(nombre<>null)->isUnique(nombre)
18714 ,Expression: self.actividades.espacios.pruebas->select(nombre<>null)->isUnique(nombre)
18715 ,Expression: self.actividades.espacios.lecciones->select(nombre<>null)->isUnique(nombre)
18716 ,Expression: self.temas.conceptos->select(nombre<>null)->isUnique(nombre)
18721 ,Expression: not title.oclIsUndefined()
18722 ,Expression: let topics : Set(mindmap::Topic) =self.elements->select(oclIsKindOf(mindmap::Topic))->collect(oclAsType(mindmap::Topic))->asSet() in topics->asOrderedSet()->symmetricDifference(topics.subtopics->asSet())->asOrderedSet()
18723 ,Expression: self.end >= self.start
18727 ,Expression: self.employee->size()
18728 ,Expression: self.employee->iterate(p; sum:Integer = 0 | sum + p.age)
18729 ,Expression: self.age >= 18
18730 ,Expression: self <> self.supervisor
18731 ,Expression: self.firstName.concat(' ').concat(self.name)
19476 ,Expression: self.parentCompositeReference.containment = true
19478 ,Expression: not(self.type.abstract = true)
19481 ,Expression: not(self.name = null)
19482 ,Expression: self.operation.eParameters->size() = 0
19765 ,Expression: self.base_Class
19768 ,Expression: Component.allInstances()->select(c|c.implementation->includes(self)).configProperty->flatten()
19769 ,Expression: Component.allInstances()->select(c|c.implementation->includes(self)).ownedPort->flatten()
19770 ,Expression: self.interconnect.connectedNode->flatten()
19771 ,Expression: self.nodeConnector.communicationPath->flatten()
20573 ,Expression: base_Collaboration.generalization->size() <= 1
20574 ,Expression: base_Connector.end->size() = 2
20595 ,Expression: base_Dependency.supplier->forAll(oclIsKindOf(uml::Package))
20596 ,Expression: base_Dependency.client->forAll(oclIsKindOf(uml::Package))
21124 ,Expression: memberEnd->forAll(type->notEmpty())
21477 ,Expression: let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
21478 ,Expression: self.types->isUnique(name)
21480 ,Expression: self.classes->isUnique(name)
21482 ,Expression: not self.superTypes->includes(self)
21484 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
21487 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
21489 ,Expression: not (self.externalAspect = self.Aspect)
21491 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
21493 ,Expression: self.fromElement.oclIsTypeOf(Class) or self.fromElement.oclIsTypeOf(Operation)
21495 ,Expression: self.toElements->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.fromElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.fromElement.oclType()) endif)
21497 ,Expression: let clazz : Class = if fromElement.oclIsTypeOf(Operation) then fromElement.oclAsType(Operation).Classifier else fromElement endif in self.Instantiation.externalAspect.structuralView.classes->includes(clazz) and self.toElements->forAll(element : MappableElement | let clazz : Class = if element.oclIsTypeOf(Operation) then element.oclAsType(Operation).Classifier else element endif in if clazz.oclIsKindOf(PrimitiveType) then self.Instantiation.Aspect.structuralView.types->includes(clazz) else self.Instantiation.Aspect.structuralView.classes->includes(clazz) endif)
21499 ,Expression: if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.StructuralView.Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
21501 ,Expression: not self.type.oclIsTypeOf(RVoid)
21513 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
21515 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
21517 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
21519 ,Expression: self.affectedBy->size() > 0
21521 ,Expression: not self.affectedBy->includes(self)
21523 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then if self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) then self.interaction.fragments->indexOf(self.sendEvent) < self.interaction.fragments->indexOf(self.receiveEvent) else true endif else true endif
21525 ,Expression: if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
21527 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21529 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
21531 ,Expression: let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
21533 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
21535 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
21537 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21539 ,Expression: if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
21541 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
21543 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
21545 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
21547 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
21548 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
21550 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
21552 ,Expression: if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
21554 ,Expression: self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
21557 ,Expression: self.upperBound > 0 or self.upperBound = - 1
21559 ,Expression: self.lowerBound >= 0
21561 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = - 1
21563 ,Expression: let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
21564 ,Expression: self.types->isUnique(name)
21566 ,Expression: self.classes->isUnique(name)
21568 ,Expression: not self.superTypes->includes(self)
21570 ,Expression: self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
21573 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
21575 ,Expression: not (self.externalAspect = self.Aspect)
21577 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
21581 ,Expression: if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.oclContainer().oclAsType(StructuralView).Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
21583 ,Expression: not self.type.oclIsTypeOf(RVoid)
21595 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
21597 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
21599 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
21601 ,Expression: self.affectedBy->size() > 0
21603 ,Expression: not self.affectedBy->includes(self)
21605 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let sendEvent : InteractionFragment = self.sendEvent.oclAsType(InteractionFragment) in let receiveEvent : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in if sendEvent.covered->asOrderedSet()->at(1) = receiveEvent.covered->asOrderedSet()->at(1) then sendEvent.container.fragments->indexOf(self.sendEvent) < receiveEvent.container.fragments->indexOf(self.receiveEvent) else true endif else true endif
21607 ,Expression: if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
21609 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21611 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
21613 ,Expression: let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
21615 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
21617 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
21619 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
21621 ,Expression: if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
21623 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
21625 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
21627 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
21629 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
21630 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
21632 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
21634 ,Expression: if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
21636 ,Expression: self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
21639 ,Expression: self.upperBound > 0 or self.upperBound = -1
21641 ,Expression: self.lowerBound >= 0
21643 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = -1
21649 ,Expression: self.villes->forAll(v1, v2:Ville | v1<>v2 implies v1.nom <> v2.nom)
21650 ,Expression: self.batiments->selectByType(Etude)->size() <= 1and self.batiments->selectByType(Travail)->size() <= 1 and self.batiments->selectByType(Soins)->size() <= 2
21651 ,Expression: self.batiments->forAll(b1, b2:Batiment | ((b1.oclIsTypeOf(Travail) or b1.oclIsTypeOf(Etude) = false)  and ( b2.oclIsTypeOf(Travail) or b2.oclIsTypeOf(Etude) = false ))  or  ((b1.oclIsTypeOf(Etude) or b1.oclIsTypeOf(Etude) = false)  and (b2.oclIsTypeOf(Etude) or b2.oclIsTypeOf(Travail) = false )))
21746 ,Expression: RequirementsGroup.allInstances() -> forAll(b1,b2 | b1 <> b2 implies b1.id <> b2.id)
21747 ,Expression: Requirement.allInstances() -> exists(b1,b2 | b1 <> b2 and b1.id = b2.id)=false
21752 ,Expression: leading <> null or integration <> null
21754 ,Expression: self.flowInPort <> null
21755 ,Expression: self.flowOutPorts->size() > 1
21756 ,Expression: self.dataOutPorts->size() = 0
21757 ,Expression: self.flowInPort = null
21758 ,Expression: self.flowOutPorts->size() <= 1
21759 ,Expression: ingoingConnections->size()=0
21760 ,Expression: outgoingConnections->size()=0
21761 ,Expression: outgoingConnections->size()>0 and ingoingConnections->size()>0
21762 ,Expression: outgoingConnections->select(targetNode.oclIsTypeOf(Insurance) and (targetNode.oclAsType(Insurance).type= InsuranceType::CarInsurance))->size()>0
21809 ,Expression: if self.superType -> isEmpty() then self.id -> notEmpty() else self.id -> isEmpty() endif
21810 ,Expression: if self.id -> notEmpty() then self.id.mandatory = true else true endif
21811 ,Expression: self.superType <> self
21813 ,Expression: self.lowerBound >= 0 and (self.upperBound >= self.lowerBound or self.upperBound = -1) 
21815 ,Expression: self.relationshipToEnterValues.target = self.editingForm.entity
21817 ,Expression: self.isSpecializedBy -> size() = 0 and self.specializes -> size() = 0   implies  self.primaryKey -> size() = 1
21818 ,Expression: self.target <> self.source
21819 ,Expression: self.target <> self.source
21820 ,Expression: self.target <> self.source
21821 ,Expression: self.target <> self.source
22021 ,Expression: adresse <> null
22022 ,Expression: adresse = 'rue des facs'
22023 ,Expression: nom = 'Marrec'
22024 ,Expression: prenom = 'Cedric'
22025 ,Expression: telephone = '0606060606'
22026 ,Expression: taille>=0.1
22027 ,Expression: Photo.allInstances()->forAll(p1, p2 | p1 <> p2 implies p1.nom <> p2.nom )
22028 ,Expression: couleurFond = 'White'
22029 ,Expression: couleurPolice = 'Black'
22030 ,Expression: titreSite='SiteWeb'
22031 ,Expression: auteurs= 'Socrate'
22032 ,Expression: taillePolice=14
22045 ,Expression: Symbole.allInstances() -> forAll(s1, s2 | s1 <> s2 implies s1.caractere <> s2.caractere)
22046 ,Expression: Etat.allInstances() -> forAll(s1, s2 | s1 <> s2 implies s1.nom <> s2.nom)
22047 ,Expression: questions->isUnique(id)
22048 ,Expression: questions->select((next = end))->size() > 0
22049 ,Expression: answers->select((correct = true))->size() > 0
22050 ,Expression: answers->isUnique(id)
22051 ,Expression: self.states->collect(s : State | s.uid)->isUnique(n : Integer | n)
22052 ,Expression:  states->select(s : State | s.transitions->select(t: Transition | t.dstId = s)->notEmpty())->size() = 0
22053 ,Expression: transitions->collect(t : Transition | t.nameIn)->isUnique(n : String | n)
22054 ,Expression: rules->notEmpty() or helpers->notEmpty()
22704 ,Expression: self.numberOfRows >= 0
22705 ,Expression: self.numberOfColumns >= 0
22706 ,Expression: self.row_sheet->size() <= self.numberOfRows
22707 ,Expression: self.row_sheet.columns->forAll(map : EIntegerObjectToCellColumnMap | map.key <= numberOfColumns)
22729 ,Expression: Category.allInstances()->isUnique(scheme + term)
22731 ,Expression: attributes->isUnique(name)
22732 ,Expression: actions->isUnique(term)
22733 ,Expression: scheme = self.oclContainer().oclAsType(Extension).scheme
22734 ,Expression: parent->closure(parent)->excludes(self)
22736 ,Expression: attributes.name->excludesAll(parent->closure(parent).attributes.name)
22737 ,Expression: Entity.allInstances()->select(kind = self)
22739 ,Expression: actions->isUnique(term)
22740 ,Expression: let ownerScheme = self.oclContainer().oclAsType(Extension).scheme in scheme.substring(1,ownerScheme.size()-1) = ownerScheme.substring(1,ownerScheme.size()-1)
22741 ,Expression: depends->closure(depends)->excludes(self)
22742 ,Expression: attributes.name->excludesAll(depends->closure(depends).attributes.name)
22743 ,Expression: Entity.allInstances()->select(mixins->includes(self))
22744 ,Expression: Entity.allInstances()->isUnique(id)
22745 ,Expression: attributes->isUnique(name)
22746 ,Expression: mixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
22749 ,Expression: Extension.allInstances()->isUnique(scheme)
22750 ,Expression: kinds->forAll(k | k.scheme = self.scheme)
22751 ,Expression: mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))
22752 ,Expression: kinds.term->intersection(mixins.term)->isEmpty()
22753 ,Expression: kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer() in parentExtension = self or import->includes(parentExtension))
22754 ,Expression: mixins.depends->forAll(let extension = oclContainer() in extension = self or import->includes(extension))
22755 ,Expression: mixins.applies->forAll(let extension = oclContainer() in extension = self or import->includes(extension))
22756 ,Expression: use->includesAll(resources.kind.oclContainer())
22757 ,Expression: use->includesAll(resources.mixins.oclContainer())
22758 ,Expression: use->includesAll(resources.links.kind.oclContainer())
22759 ,Expression: use->includesAll(resources.links.mixins.oclContainer())
22760 ,Expression: resources.links.target->forAll(r | r.oclContainer() = self)
26415 ,Expression: self.employees->size() >= self.projects->size()
26416 ,Expression: self.projects->collect(p : Project | p.budget)->sum() <= self.budget
26417 ,Expression: self.departement.employees->includesAll(self.employees)
26418 ,Expression: not(segmentation->excluding(segmentation->last())->exists(e | e.oclIsTypeOf(Return)))
26423 ,Expression: self.hasCRUDActivity->isUnique(CRUDVerb)
26424 ,Expression: self.hasInputRepresentation->isUnique(MediaType)
26425 ,Expression: self.hasOutputRepresentation->isUnique(MediaType)
26426 ,Expression: self.hasProperty->notEmpty() implies self.hasProperty->one(isNamingProperty = true)
26427 ,Expression: (self.isAlgorithmic = true) implies self.hasProperty->isEmpty()
26428 ,Expression: (self.isAlgorithmic = false) implies self.hasProperty->notEmpty()
26430 ,Expression: self.hasResources->isUnique(name)
26431 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))
26432 ,Expression: self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))
26433 ,Expression: self.algoModelHasProperty->one(name = 'linklist')
26434 ,Expression: self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()
26435 ,Expression: self.algoControllerHasCRUDActivity->size() = 1
26437 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))
26438 ,Expression: self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))
26439 ,Expression: self.hasRMManagerProperty->one(name = 'linklist')
26440 ,Expression: self.rModelHasProperty->one(isNamingProperty = true)
26441 ,Expression: self.rModelHasProperty->one(isPrimaryIdentifier = true)
26442 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))
26443 ,Expression: self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))
26444 ,Expression: self.rModelHasProperty->one(name = 'linklist')
26445 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 0)
26446 ,Expression: self.rCManagerHasCRUDActivity->one(crudVerb = 1)
26447 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()
26448 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
26449 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
26450 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
26451 ,Expression: self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
26452 ,Expression: self.rControllerHasCRUDActivity->isUnique(crudVerb)
26453 ,Expression: self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()
26460 ,Expression: (self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)
26461 ,Expression: self.hasRDBMSColumns->one(isPrimaryKey = true)
26462 ,Expression: self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})
26463 ,Expression: self.hasResourceModel->isUnique(name)
26464 ,Expression: self.hasResourceModelManager->isUnique(name)
26465 ,Expression: self.hasAlgoResourceModel->isUnique(name)
26466 ,Expression: self.hasResourceController->isUnique(name)
26467 ,Expression: self.hasResourceControllerManager->isUnique(name)
26468 ,Expression: self.hasAlgoResourceController->isUnique(name)
26469 ,Expression: self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})
26470 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name <> rModel2.name implies rModel1.isMappedToRDBMSTable.name <> rModel2.isMappedToRDBMSTable.name)
26471 ,Expression: self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))
26472 ,Expression: self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
26473 ,Expression: self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
26474 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
26475 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
26476 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
26477 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies  rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
26478 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
26479 ,Expression: self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
26503 ,Expression: self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
26507 ,Expression: self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
26508 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
26509 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
26510 ,Expression: self.JavaAlgoModelHasProperty->one(name = 'linklist') and self.JavaAlgoModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
26511 ,Expression: self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
26512 ,Expression: self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
26513 ,Expression: self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
26521 ,Expression: self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
26522 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
26524 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
26525 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
26526 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
26527 ,Expression: self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
26528 ,Expression: self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
26529 ,Expression: self.JavaRModelHasHibernateAnnotation->one('@Entity') and self.JavaRModelHasHibernateAnnotation->one('@Table(name="' + self.parentName + '")')
26530 ,Expression: self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
26531 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
26532 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
26533 ,Expression: self.JavaRModelHasProperty->one(name = 'linklist') and self.JavaRModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
26535 ,Expression: self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
26536 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
26537 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
26538 ,Expression: self.JavaRMManagerHasProperty->one(name = 'linklist') and self.JavaRMManagerHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
26539 ,Expression: ((self.bIsPrimaryIdentifier  implies  ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) ) and ( ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) implies self.bIsPrimaryIdentifier ) )
26543 ,Expression: self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
26546 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
26547 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
26548 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
26549 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
26550 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
26551 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
26575 ,Expression: requiredport -> size() > 1
26576 ,Expression: requiredport -> size() > 0
26577 ,Expression: providedport -> size() > 0
26578 ,Expression: providedport -> size() > 0
26586 ,Expression: self.NAct() > 0
26592 ,Expression: self.NGWD() > 0
26599 ,Expression: self.NSWD() > 0
26606 ,Expression: self.NTWD() > 0
26619 ,Expression: self.NAct() > 0
26621 ,Expression: self.NGIAB() > 0
26623 ,Expression: self.NSIAB() > 0
26625 ,Expression: self.NTIAB() > 0
26628 ,Expression: self.NAct() > 0
26631 ,Expression: self.NEIAB() > 0
26634 ,Expression: self.NAct() > 0
26638 ,Expression: self.NDA() > 0
26640 ,Expression: self.NDA() > 0
26643 ,Expression: self.NAct() > 0
26652 ,Expression: self.NGWDI() > 0
26659 ,Expression: self.NSWDI() > 0
26665 ,Expression: self.NTWDI() > 0
26674 ,Expression: self.NEI() > 0
26679 ,Expression: self.ND() > 0
26681 ,Expression: self.ND() > 0
26719 ,Expression: let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
26720 ,Expression: self.types->isUnique(name)
26722 ,Expression: self.classes->isUnique(name)
26724 ,Expression: not self.superTypes->includes(self)
26726 ,Expression: self.classifier.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
26729 ,Expression: if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
26731 ,Expression: not (self.externalAspect = self.Aspect)
26733 ,Expression: if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
26737 ,Expression: if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.oclContainer().oclAsType(StructuralView).Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
26739 ,Expression: not self.type.oclIsTypeOf(RVoid)
26751 ,Expression: if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
26753 ,Expression: if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
26755 ,Expression: if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
26757 ,Expression: self.affectedBy->size() > 0
26759 ,Expression: not self.affectedBy->includes(self)
26761 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let sendEvent : InteractionFragment = self.sendEvent.oclAsType(InteractionFragment) in let receiveEvent : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in if sendEvent.covered->asOrderedSet()->at(1) = receiveEvent.covered->asOrderedSet()->at(1) then sendEvent.container.fragments->indexOf(self.sendEvent) < receiveEvent.container.fragments->indexOf(self.receiveEvent) else true endif else true endif
26763 ,Expression: if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
26765 ,Expression: if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
26767 ,Expression: if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
26769 ,Expression: let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
26771 ,Expression: if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
26773 ,Expression: if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
26775 ,Expression: if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
26777 ,Expression: if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
26779 ,Expression: if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
26781 ,Expression: if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
26783 ,Expression: if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
26785 ,Expression: if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
26786 ,Expression: if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
26788 ,Expression: if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
26790 ,Expression: if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
26792 ,Expression: self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
26795 ,Expression: self.upperBound > 0 or self.upperBound = -1
26797 ,Expression: self.lowerBound >= 0
26799 ,Expression: self.lowerBound <= self.upperBound or self.upperBound = -1
26809 ,Expression: self.entities->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
26810 ,Expression: self.id.mandatory = true
26811 ,Expression: self.attributes -> includes(self.id) or self.superTypes.attributes -> includes(self.id)
26812 ,Expression: self <> superType
26813 ,Expression: self -> closure(superType)
26814 ,Expression: (self.type = AttributeType::None) <> (self.enumerationType = null)
26815 ,Expression: self.literals->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
26816 ,Expression: self.lowerBound >= 0 and (self.lowerBound <= self.upperBound xor self.upperBound = -1)
26817 ,Expression: self.opposite <> null implies self.opposite.opposite = self
26818 ,Expression: (self.page.form.entity.attributes->union(self.page.form.entity.superTypes.attributes) -> includes(self.attribute))
26819 ,Expression: (self.page.form.entity.relationships->union(self.page.form.entity.superTypes.relationships) -> includes(self.relationship))
26820 ,Expression: self.editingForm.entity = self.relationship.target
26821 ,Expression: self.attribute.type = AttributeType::Boolean or self.attribute.enumerationType <> null
26822 ,Expression: (self.table.relationship.target.attributes -> union(self.table.relationship.target.superTypes.attributes)) -> includes(self.attribute)
26915 ,Expression: self.cElements->isUnique(name)
26916 ,Expression: self.oclIsTypeOf(Clafer) implies self.name.size() > 0
26917 ,Expression: cElements-> forAll(c:Clafer, r:Clafer | not c.cSuper.oclIsUndefined() and c.cSuper = r implies r.isAbstract = true)
26918 ,Expression: cElements-> forAll(c:Clafer, r:Clafer | not c.cTarget.oclIsUndefined() and c.cTarget = r implies r.isAbstract = true)
26919 ,Expression: not (cElements->exists(c:Clafer | c.cSuper <> null and c.cTarget <> null))
26920 ,Expression: ClaferModel.allInstances()->size() = 1
26922 ,Expression: let i = self in (i.Min >= 0) and(i.Max >= i.Min or i.Max = -1) and(i.Min = 0 implies i.Max <> 0 or i.Max = 1 or i.Max = -1) and(i.Min = 1 implies i.Max = -1 or i.Max >= 1)
26930 ,Expression: startFragment = null or displayElements->includes(startFragment)
26931 ,Expression: self.screen <> null and buttonClickEvents->size() <= 1 or self.screen = null
26932 ,Expression: self.screen <> null and listClickEvents->size() <= 1 or self.screen = null
26933 ,Expression: self.menuBarElements->forAll(menubarItem : DisplayElement | menubarItem.oclIsTypeOf(Button) or menubarItem.oclIsTypeOf(ImageButton) or menubarItem.oclIsTypeOf(Label) or menubarItem.oclIsTypeOf(CheckBox) or menubarItem.oclIsTypeOf(Image))
26934 ,Expression: to.screen = from.screen
26935 ,Expression: self.innerBindings->forAll(binding : PrimitiveBinding | self.domainEntity.eAttributes->includes(binding.attribute))
26936 ,Expression: self.innerBindings->forAll(binding : PrimitiveBinding | binding.oclIsKindOf(StringBinding) and self.uiElement.containedDisplayElements->includes(binding.oclAsType(StringBinding).uiElement) or binding.oclIsKindOf(BooleanBinding) and self.uiElement.containedDisplayElements->includes(binding.oclAsType(BooleanBinding).checkBox))
26937 ,Expression: self.attribute.eType.name = 'EString'
26938 ,Expression: self.attribute.eType.name = 'EBoolean'
26939 ,Expression: namespace.matches('[a-z0-9]+([.][a-z0-9]+)+')
26940 ,Expression: generatorConfigs->isUnique(targetPlatform)
26941 ,Expression: name.matches('[A-Z][a-z0-9_]*([A-Z][a-z0-9_]*)*')
27090 ,Expression: self.finalPosition.minus(self.initialPosition)
27091 ,Expression: self.finalPosition.minus(self.initialPosition).divideBy(self.duration)
27092 ,Expression: self.finalVelocity.minus(self.initialVelocity).divideBy(self.duration)
27095 ,Expression: name <> ''
27096 ,Expression: self.petriNetElements->select(p : PetriNetElement | p.oclIsKindOf(Node))->forAll(j : Node, k : Node | j <> k implies j.name <> k.name)
27097 ,Expression: name <> ''
27098 ,Expression: multiplicity > 0
27099 ,Expression: self.petriNet = self.successor.petriNet
27100 ,Expression: self.petriNet = self.predecessor.petriNet
27101 ,Expression: self.predecessor.oclType() <> self.successor.oclType()
27102 ,Expression: marking >= 0
27103 ,Expression: self.processElements->select(p : ProcessElement | p.oclIsTypeOf(WorkDefinition))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
27104 ,Expression: self.processElements->select(p : ProcessElement | p.oclIsTypeOf(Ressource))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
27105 ,Expression: name <> 'Process'
27106 ,Expression: self.processElements->select(p : ProcessElement | p.oclIsTypeOf(NeedSet))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
27107 ,Expression: Process.allInstances()->select(p : Process | p.processElements->includes(self))->asSequence()->first()
27108 ,Expression: name <> ''
27109 ,Expression: self.process = self.predecessor.process
27110 ,Expression: self.predecessor <> self.successor
27111 ,Expression: self.process = self.successor.process
27112 ,Expression: name <> ''
27113 ,Expression: quantity >= 0
27114 ,Expression: quantity > 0
27115 ,Expression: name <> ''
27124 ,Expression: name <> 'Process'
27125 ,Expression: self.processElements->select(p : ProcessElement | p.oclIsTypeOf(WorkDefinition))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
27126 ,Expression: Process.allInstances()->select(p : Process | p.processElements->includes(self))->asSequence()->first()
27127 ,Expression: name <> ''
27128 ,Expression: self.process = self.predecessor.process
27129 ,Expression: self.predecessor <> self.successor
27130 ,Expression: self.process = self.successor.process
27153 ,Expression:     lines->forAll(l1, l2 |     l1 <> l2 implies l1.item <> l2.item    )
27154 ,Expression:     not name.oclIsUndefined()     and name <> ''
27155 ,Expression:     not price.oclIsUndefined() and price > 0
27156 ,Expression: ejercicios->isUnique(name)
27157 ,Expression: ejercicios->isUnique(order)
27158 ,Expression:     not name.oclIsUndefined()     and name <> ''
27159 ,Expression:     not enunciado.oclIsUndefined()    and enunciado <> ''
27160 ,Expression: correctas->size()=1
27161 ,Expression: correctas->size()>0
27162 ,Expression: correctas->size()=1
27287 ,Expression: self.Ventanas->isUnique(Nombre)
27288 ,Expression: self.Marcos->size() <= 2
27289 ,Expression: self.Elementos_Menu->size()
27290 ,Expression: self.Columnas->isUnique(Nombre)
27291 ,Expression: self.Columnas->select(v | v.ClavePrimaria=true)->size() = 1
27292 ,Expression: self.Tablas->isUnique(Nombre)
27293 ,Expression: self.Relaciones->isUnique(Nombre)
27294 ,Expression: self.Tipo.oclIsUndefined() = false
27295 ,Expression: self.ClavePrimaria = true implies self.Unico = true and self.VNN = true
27296 ,Expression: self.Origen.Tipo = self.Destino.Tipo
27297 ,Expression: self.Destino.ClavePrimaria = true
27298 ,Expression: self.leaveDays > 0 
27299 ,Expression: self.name->size() <> 0 
27300 ,Expression: self.dates->size() <> 0 
27301 ,Expression: self.name->size() <> 0 
27302 ,Expression: self.employees->size() <> 0 
27303 ,Expression: self.standin.name <>  self.name 
27304 ,Expression: self.responsible->size() <> 0 
27370 ,Expression: Category.allInstances()->isUnique(scheme + term)
27372 ,Expression: attributes->isUnique(name)
27373 ,Expression: self.name.toLowerCase().oclAsType(ecore::EString)
27374 ,Expression: actions->isUnique(term)
27375 ,Expression: constraints->isUnique(name)
27376 ,Expression: attribute.type.oclIsTypeOf(ecore::EEnum)
27377 ,Expression: owningFSM.attribute.type=self.sliteral.eEnum
27378 ,Expression: scheme = self.oclContainer().oclAsType(Extension).scheme
27379 ,Expression: parent->closure(parent)->excludes(self)
27381 ,Expression: attributes.name->excludesAll(parent->closure(parent).attributes.name)
27382 ,Expression: Entity.allInstances()->select(kind = self)
27385 ,Expression: depends->closure(depends)->excludes(self)
27386 ,Expression: attributes.name->excludesAll(depends->closure(depends).attributes.name)
27387 ,Expression: Entity.allInstances()->select(parts.mixin->includes(self))
27388 ,Expression: Entity.allInstances()->isUnique(id)
27389 ,Expression: attributes->isUnique(name)
27390 ,Expression: parts.mixin->forAll(m |m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
27391 ,Expression: parts.mixin->asSet()
27394 ,Expression: Extension.allInstances()->isUnique(scheme)
27395 ,Expression: kinds->forAll(k | k.scheme = self.scheme)
27396 ,Expression: mixins->forAll(m | m.scheme.substring(1, scheme.size() - 1) = scheme.substring(1,scheme.size() - 1))
27397 ,Expression: kinds.term->intersection(mixins.term)->isEmpty()
27398 ,Expression: kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer()in parentExtension = self or import->includes(parentExtension))
27399 ,Expression: mixins.depends->forAll(let extension = oclContainer()in extension = self or import->includes(extension))
27400 ,Expression: mixins.applies->forAll(let extension = oclContainer()in extension = self or import->includes(extension))
27401 ,Expression: use->includesAll(resources.kind.oclContainer())
27402 ,Expression: /* Previously use->includesAll(resources.mixins.oclContainer()) */resources.parts.mixin->forAll(mo |let mixinOwner = mo.oclContainer()in if mixinOwner.oclIsTypeOf(Extension)then self.use->includes(mixinOwner.oclAsType(Extension)) else self.mixins->includes(mo) endif)
27403 ,Expression: use->includesAll(resources.links.kind.oclContainer())
27404 ,Expression: /* Previously use->includesAll(resources.links.mixins.oclContainer()) */resources.links.parts.mixin->forAll(mo |let mixinOwner = mo.oclContainer()in if mixinOwner.oclIsTypeOf(Extension)then self.use->includes(mixinOwner.oclAsType(Extension)) else self.mixins->includes(mo) endif)
27405 ,Expression: resources.links.target->forAll(r | r.oclContainer() = self)
27406 ,Expression: mixins->forAll(attributes->isEmpty() and actions->isEmpty() and depends->isEmpty())
27407 ,Expression: microserviceType.versions->select(v:Version | v = version)->notEmpty()
27408 ,Expression: calledMicroservice.restOperations->select(rop:RESTOperation | rop=calledOperation)->notEmpty()
27409 ,Expression: callingMicroservice.restOperations->select(rop:RESTOperation | rop=callingOperation)->notEmpty()
27410 ,Expression: callingMicroservice.versions->select(ver:Version|ver=callingVersion)->notEmpty()
27411 ,Expression: endpoint <> null and restOperation <> null
27412 ,Expression: endpoint.restOperations->select(rop:RESTOperation | rop = restOperation)->notEmpty()
27413 ,Expression: 0 <= self.blue and self.blue <= 255 and 0 <= self.green and self.green <= 255 and 0 <= self.red and self.red <= 255
27415 ,Expression: self.processes->select(p : Process | p.name = 'Main')->size() = 1
27416 ,Expression: self.name = 'Main' implies containProcessSelectorTask(self.startTask.oclAsType(wcore::Task))
27419 ,Expression: self.page.oclIsTypeOf(gcore::MapPage) implies self.outputData -> size() = 2 and self.outputData -> forAll(var:Variable|var.eType=ecore::EDouble)
27420 ,Expression: self.page.oclIsTypeOf(gcore::LoginPage) implies self.outputData -> size() = 1 and self.outputData -> forAll(var:Variable|var.eType=ecore::EBoolean)
27421 ,Expression: self.page.oclIsTypeOf(gcore::LoginPage) implies self.input -> size() = 2 and self.input -> forAll(var:Variable|var.eType=ecore::EString)
27422 ,Expression: self.page.oclIsTypeOf(gcore::ViewPage) implies self.outputData -> size() = 1 and self.outputData -> forAll(var:Variable|var.eType.oclIsKindOf(ecore::EObject))
27423 ,Expression: self.page.oclIsTypeOf(gcore::EditPage) implies self.outputData -> size() = 1 and self.input -> size() = 1 and self.input -> forAll(var:Variable|var.eType=self.outputData -> at(1).eType)
27424 ,Expression: self.page.oclIsTypeOf(gcore::SelectableListPage) or self.page.oclIsTypeOf(gcore::ListPage) implies self.outputData -> size() = 1 and self.outputData -> forAll(var:Variable|var.upperBound=-1)
27425 ,Expression: self.page.oclIsTypeOf(gcore::SelectableListPage) implies self.input -> size() = 1 and self.input -> forAll(var:Variable|var.eType=self.outputData -> at(1).eType and var.upperBound=1)
27426 ,Expression: self.oclAsType(wcore::ProcessSelector).processes -> select(proc:wcore::Process|containInvokeGUITask(proc.startTask.oclAsType(wcore::Task))) -> size() = (self.oclAsType(wcore::ProcessSelector).processes -> size())
27441 ,Expression: name = rightcomp.name
27442 ,Expression: incoming->isEmpty()
27443 ,Expression: outgoing->isEmpty()
27444 ,Expression: outgoing.speed->sum() <= incoming.speed->sum()
27445 ,Expression: speed <= 4
27446 ,Expression: speed >= 4
27447 ,Expression: backup = null or backup.services->includesAll(services)
27448 ,Expression: designSpeed <= server.speed->sum()
27449 ,Expression: services->select(s | s.type = ServiceType::IMPORTANT)->size() <= 1
27450 ,Expression: backup <> self
27452 ,Expression: speed > 0 and speed <= 5
27459 ,Expression: self.author.size() <= 32
27460 ,Expression: self.dimension.matches('([0-9]|([1-9][0-9]+))([.][0-9]+)? x              ([0-9]|([1-9][0-9]+))([.][0-9]+)? x              ([0-9]|([1-9][0-9]+))([.][0-9]+)?              (centimeters|cm|in|inches)')
27461 ,Expression: self.isbn.matches('[0-9]{3}-[0-9]{2}-[0-9]{4}-[0-9]{3}-[0-9]')
27462 ,Expression: self.author.size() <= 32
27475 ,Expression: self.countryCode.matches('[A-z]*')
27476 ,Expression: self.languageCode.matches('[A-z]*')
27490 ,Expression: self.valueFormat.size() <= 80
27491 ,Expression: self.contentVersion.matches('[0-9]+')
27492 ,Expression: self.contentVersion.size() <= 9
27493 ,Expression: self.contentRevision.size() <= 3
27495 ,Expression: self.revision.size() <= 3
27496 ,Expression: self.status.matches('[^\\-]* [^\\s]*')
27501 ,Expression: self.revision.size() <= 3
27502 ,Expression: self.status.matches('[^\\-]* [^\\s]*')
27504 ,Expression: self.valueFormat.size() <= 80
27505 ,Expression: self.valueFormat.size() <= 80
27509 ,Expression: self.status.matches('[^\\-]* [^\\s]*')
27511 ,Expression: self.revision.size() <= 3
27512 ,Expression: self.value.size() <= 255
27513 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27514 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27515 ,Expression: self.languageCode.size() >= 2
27516 ,Expression: self.languageCode.size() <= 3
27518 ,Expression: self.revision.size() <= 3
27519 ,Expression: self.status.matches('[^\\-]* [^\\s]*')
27521 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27522 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27523 ,Expression: self.languageCode.size() >= 2
27524 ,Expression: self.languageCode.size() <= 3
27526 ,Expression: self.fileName.matches('[^\\s]*')
27527 ,Expression: self.fileName.size() <= 128
27528 ,Expression: self.dirName.matches('[^\\s]*')
27529 ,Expression: self.dirName.size() <= 128
27530 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27531 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27532 ,Expression: self.languageCode.size() >= 2
27533 ,Expression: self.languageCode.size() <= 3
27534 ,Expression: self.code.matches('[^\\-]* [^\\s]*')
27535 ,Expression: self.code.size() <= 18
27536 ,Expression: self.revision.size() <= 3
27537 ,Expression: self.valueFormat.size() <= 80
27538 ,Expression: self.currency.size() <= 3
27540 ,Expression: self.valueFormat.size() <= 80
27541 ,Expression: self.valueFormat.size() <= 80
27542 ,Expression: self.codedName.matches('[^\\-]* [^\\s]*')
27543 ,Expression: self.codedName.size() <= 35
27544 ,Expression: self.codedName.matches('[^\\-]* [^\\s]*')
27545 ,Expression: self.codedName.size() <= 35
27546 ,Expression: self.value.size() <= 255
27547 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27548 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27549 ,Expression: self.languageCode.size() >= 2
27550 ,Expression: self.languageCode.size() <= 3
27551 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27552 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27553 ,Expression: self.languageCode.size() >= 2
27554 ,Expression: self.languageCode.size() <= 3
27555 ,Expression: self.code.matches('[^\\-]* [^\\s]*')
27556 ,Expression: self.code.size() <= 18
27557 ,Expression: self.valueFormat.size() <= 80
27558 ,Expression: self.valueFormat.size() <= 80
27559 ,Expression: self.valueFormat.size() <= 80
27560 ,Expression: self.valueFormat.size() <= 80
27562 ,Expression: self.value.size() <= 255
27563 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27564 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27565 ,Expression: self.languageCode.size() >= 2
27566 ,Expression: self.languageCode.size() <= 3
27569 ,Expression: self.revision.size() <= 3
27570 ,Expression: self.status.matches('[^\\-]* [^\\s]*')
27572 ,Expression: self.recommendedPresentationFormat.size() <= 80
27573 ,Expression: self.valueFormat.size() <= 80
27574 ,Expression: self.valueFormat.size() <= 80
27575 ,Expression: self.valueFormat.size() <= 80
27576 ,Expression: self.currency.size() <= 3
27578 ,Expression: self.valueFormat.size() <= 80
27579 ,Expression: self.valueFormat.size() <= 80
27580 ,Expression: self.language.matches('[^\\-]* [^\\s]*')
27581 ,Expression: self.language.size() >= 2
27582 ,Expression: self.language.size() <= 3
27584 ,Expression: self.value.size() <= 30
27585 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27586 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27587 ,Expression: self.languageCode.size() >= 2
27588 ,Expression: self.languageCode.size() <= 3
27589 ,Expression: self.valueCode.matches('[^\\-]* [^\\s]*')
27590 ,Expression: self.valueCode.size() <= 35
27591 ,Expression: self.valueFormat.size() <= 80
27592 ,Expression: self.supplierRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)? ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}) ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})')
27593 ,Expression: self.revision.size() <= 3
27594 ,Expression: self.status.matches('[^\\-]* [^\\s]*')
27595 ,Expression: self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)? ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}) ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})')
27596 ,Expression: self.value.size() <= 255
27597 ,Expression: self.countryCode.matches('[^\\-]* [^\\s]*')
27598 ,Expression: self.languageCode.matches('[^\\-]* [^\\s]*')
27599 ,Expression: self.languageCode.size() >= 2
27600 ,Expression: self.languageCode.size() <= 3
27601 ,Expression: self.valueFormat.size() <= 80
27602 ,Expression: self.valueFormat.size() <= 80
27603 ,Expression: self.translationRevision.size() <= 3
27604 ,Expression: self.valueFormat.size() <= 80
27611 ,Expression: self.languageCode.matches('[a-z]{2} [a-z]{3}')
27612 ,Expression: self.countryCode.matches('[A-Z]{2}')
27620 ,Expression: self.schemaVersion.matches('eCl@ss XML 2.0')
27911 ,Expression: eventSource.accessedVariable.autosarVariable
27943 ,Expression: entity->select(oclIsKindOf(BswSchedulableEntity)).oclAsType(BswSchedulableEntity)->asOrderedSet()
27973 ,Expression: contextPort.oclAsType(m2::PPortPrototype)
27986 ,Expression: contextPort.oclAsType(m2::RPortPrototype)
28111 ,Expression: self.type.oclAsType(RteBufferQueueType)
28112 ,Expression: self.startExecutable.oclAsType(RunnableEntity)
28113 ,Expression: self.type.oclAsType(ModeQueueType)
28114 ,Expression: self.function.oclAsType(RteApi)->asOrderedSet()
28115 ,Expression: self.function.oclAsType(RteLifecycleApi)->asOrderedSet()
28116 ,Expression: self.function.oclAsType(TaskBody)->asOrderedSet()
28117 ,Expression: self.function.oclAsType(BswSchedulableEntity)->asOrderedSet()
28118 ,Expression: self.function.oclAsType(ComCallback)->asOrderedSet()
28119 ,Expression: self.function.oclAsType(TrustedFunction)->asOrderedSet()
28120 ,Expression: self.function.oclAsType(ExecutableEntity)->asOrderedSet()
28121 ,Expression: self.function.oclAsType(SchmApi)->asOrderedSet()
28122 ,Expression: self.function.oclAsType(ComSignalApiWrapper)->asOrderedSet()
28123 ,Expression: self.function.oclAsType(ComProxyFunction)->asOrderedSet()
28124 ,Expression: self.function.oclAsType(SchmLifecycleApi)->asOrderedSet()
28142 ,Expression: eventSource.accessedVariable.autosarVariable
28174 ,Expression: entity->select(oclIsKindOf(BswSchedulableEntity)).oclAsType(BswSchedulableEntity)->asOrderedSet()
28204 ,Expression: contextPort.oclAsType(m2::PPortPrototype)
28217 ,Expression: contextPort.oclAsType(m2::RPortPrototype)
28361 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies (a.resourceContainer_AllocationContext=b.resourceContainer_AllocationContext and a.assemblyContext_AllocationContext <> b.assemblyContext_AllocationContext))
28362 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext | not hwNodes->exists(h|a.resourceContainer_AllocationContext=h))
28363 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext | a.resourceContainer_AllocationContext<>fromHwNode and a.resourceContainer_AllocationContext=toHwNode)
28364 ,Expression: assemblyContext.parentStructure__AssemblyContext.assemblyContexts__ComposedStructure->select(a : composition::AssemblyContext| a.encapsulatedComponent__AssemblyContext = assemblyContext.encapsulatedComponent__AssemblyContext)->size()=1
28365 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies a.resourceContainer_AllocationContext<>b.resourceContainer_AllocationContext)
28366 ,Expression: assemblyContexts->forAll(a : composition::AssemblyContext, b : composition::AssemblyContext | a<> b implies (a.encapsulatedComponent__AssemblyContext = b.encapsulatedComponent__AssemblyContext))
28367 ,Expression: allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies (a.assemblyContext_AllocationContext=b.assemblyContext_AllocationContext and a.resourceContainer_AllocationContext<>b.resourceContainer_AllocationContext))
28368 ,Expression: connector.providedRole_AssemblyConnector =providedRole and connector.requiredRole_AssemblyConnector=requiredRole
28369 ,Expression: allocationContext.allocation_AllocationContext.allocationContexts_Allocation->select(a : allocation :: AllocationContext|a.assemblyContext_AllocationContext=allocationContext.assemblyContext_AllocationContext)->size()=1
28370 ,Expression: self.aspects->forAll(aspect|aspect.oclIsTypeOf(QMLContract::Frequency) implies (self.dimension.type.oclIsTypeOf(dimensiontypes::DimensionTypeNumeric) or(self.dimension.type.oclIsTypeOf(dimensiontypes::DimensionTypeEnum) and self.dimension.type.oclAsType(dimensiontypes::DimensionTypeEnum).order->size()>0 ) or (self.dimension.type.oclIsTypeOf(dimensiontypes::DimensionTypeSet) and self.dimension.type.oclAsType(dimensiontypes::DimensionTypeSet).order->size()>0 )))
28405 ,Expression: name = rightcomp.name
28444 ,Expression: self.superclass <> self
28445 ,Expression: Class.allInstances() -> select(c | c.name = self.name) -> excluding(self) ->isEmpty()
28446 ,Expression: (self.properties -> select(p : Property| p.isID = true))-> forAll(p | p.lowerBound = 1 and p.upperBound = 1)
28447 ,Expression: (self.lowerBound = 0 or self.lowerBound = 1) and self.upperBound = 1
28448 ,Expression: (self.lowerBound <> null) and (self.upperBound <> null) and (self.type <> null) and (self.name <> null)
28449 ,Expression: NamedType.allInstances() -> select(nt | nt.name = self.name) -> excluding(self) -> isEmpty()
28450 ,Expression: (self.classes -> select(c : Class| c.superclass=null))-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 1)
28451 ,Expression: (self.classes -> select(c : Class| c.superclass<>null))-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 0)
28452 ,Expression: (self.lowerBound <= self.upperBound) or self.upperBound = -1
28453 ,Expression: self.lowerBound >= 0 and (self.upperBound >= 1 or self.upperBound = -1)
28454 ,Expression: self.navigableassociationend.type <> self.nonnavigableassociationend.type
28455 ,Expression: self.literal -> forAll(l1, l2 | l1 <> l2 implies l1.name <> l2.name and l1.value <> l2.value)
28576 ,Expression: self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
28580 ,Expression: self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
28581 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
28582 ,Expression: self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
28583 ,Expression: self.JavaAlgoModelHasProperty->one(name = 'linklist') and self.JavaAlgoModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
28584 ,Expression: self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
28585 ,Expression: self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
28586 ,Expression: self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
28594 ,Expression: self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
28595 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
28597 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
28598 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
28599 ,Expression: self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
28600 ,Expression: self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
28601 ,Expression: self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
28602 ,Expression: self.JavaRModelHasHibernateAnnotation->one('@Entity') and self.JavaRModelHasHibernateAnnotation->one('@Table(name="' + self.parentName + '")')
28603 ,Expression: self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
28604 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
28605 ,Expression: self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
28606 ,Expression: self.JavaRModelHasProperty->one(name = 'linklist') and self.JavaRModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
28608 ,Expression: self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
28609 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
28610 ,Expression: self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
28611 ,Expression: self.JavaRMManagerHasProperty->one(name = 'linklist') and self.JavaRMManagerHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
28612 ,Expression: ((self.bIsPrimaryIdentifier  implies  ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) ) and ( ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) implies self.bIsPrimaryIdentifier ) )
28616 ,Expression: self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
28619 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
28620 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
28621 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
28622 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
28623 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
28624 ,Expression: self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
28812 ,Expression: self.requirementOwnedBy.personOwnsCategory->forAll(c | not c.requirement->includes(self))
28813 ,Expression: self.dependencySource->select(oclIsTypeOf(Requires))->forAll(requires: Dependency | findLeafNodes(requires.oclAsType(Requires).argument)->forAll(ra: RequirementArgument | ra.requirement <> self))
28815 ,Expression: Category.allInstances()->size() <= Requirement.allInstances()->size()
28816 ,Expression: self.personOwnsCategory->size() + self.personOwnsRequirement->size() > 0
28817 ,Expression: not self.dependencyTarget.dependencySource->includes(self)
28818 ,Expression: self.argument.oclAsSet()->closure(arg : Argument | if arg.oclIsKindOf(BinaryOperatorArgument) then arg.oclAsType(BinaryOperatorArgument).leftSideArgument.oclAsSet()->including(arg.oclAsType(BinaryOperatorArgument).rightSideArgument) else if arg.oclIsKindOf(NOTOperator) then arg.oclAsType(NOTOperator).argument.oclAsSet() else arg.oclAsSet() endif endif)->select(arg : Argument | arg.oclIsKindOf(RequirementArgument))->forAll(arg : Argument | not arg.oclAsType(RequirementArgument).requirement.dependencySource->includes(self))
28819 ,Expression: startActivity.thread = self or startActivity.oclIsKindOf(Join) or startActivity.oclIsKindOf(FinalActivity)
28820 ,Expression: startActivity.JoinsCorrectly(Sequence{self}, Set{})->includesAll(Activity.allInstances()->asSet())
28822 ,Expression: let basicModel: BasicModel = BasicModel.allInstances()->asSequence()->first() in                        let reachableActivities: Set(Activity) = basicModel.startActivity.JoinsCorrectly(Sequence{basicModel}, Set{}) in                            reachableActivities->exists(a | a = self)
28826 ,Expression: let temp: Set(Thread) = Thread.allInstances()->select(t | t.activities->exists(a | a = self))            in if temp->size() = 1 then temp->asOrderedSet()->first() else null endif
28827 ,Expression: GetAccessedReferences(Set{}, Set{})
28830 ,Expression: self.UsesSameThread(nextActivity)
28833 ,Expression: maxThreadCount >= 0
28834 ,Expression: forkedThreads->forAll(t | self.UsesDifferentThread(t.startActivity))
28838 ,Expression: branches->forAll(b | self.UsesSameThread(b.nextActivity))
28841 ,Expression: true
28844 ,Expression: duration >= 1
28848 ,Expression: activityName.matches('[A-Za-z_$][A-Za-z0-9_$]*')
28849 ,Expression: Reference.allInstances()->select(r | r.name = activityName and not r.oclIsKindOf(NestedThread))->isEmpty()
28850 ,Expression: name.matches('[A-Za-z_$][A-Za-z0-9_$]*')
28851 ,Expression: Reference.allInstances()->select(r | r.name = name and not r.oclIsKindOf(NestedThread))->size() <= 1
28856 ,Expression: type.containerTypes->includes(parent.type) or parent = null
28857 ,Expression: name.size() > 0
28858 ,Expression: (students->notEmpty() and self.numberOfStudents > 0) or ((self.students->isEmpty() or self.students = null) and self.numberOfStudents = 0)
28859 ,Expression: (students->notEmpty() and self.averageLength > 0) or ((self.students->isEmpty() or self.students = null) and self.averageLength = 0)
28860 ,Expression: self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
28862 ,Expression: self.attributes -> includes(self.identifier) or self.supertypes.visibleAttributes -> includes(self.identifier)
28863 ,Expression: self -> closure(generalizations.general)
28864 ,Expression: self.attributes -> select(a | a.visibility = VisibilityKind::public)
28888 ,Expression: name.size()>0
28891 ,Expression: self.students->isUnique(mnr)
28895 ,Expression: self.precision >= self.scale and self.precision >= 0 and self.scale >= 0
28896 ,Expression: (self.type <> InputType::BUTTON implies self.action->isEmpty())and(self.type <> InputType::BUTTON implies self.buttonValue->isEmpty())and (self.type <> InputType::TEXT implies self.textValue->isEmpty())
28897 ,Expression: self.Name.size()>1
28898 ,Expression: Course.allInstances()->isUnique(ID)
28899 ,Expression: self.StudentGroups.Submitted.AssesedBy.Name = self.TeachingAssistant.Name
28900 ,Expression: self.Students.Submitted.AssesedBy.Name = self.TeachingAssistant.Name
28901 ,Expression: self.GroupMember->forAll(p:Person  |  self.Course.Students->includes(p))
28902 ,Expression: self.Name.size()>2
28903 ,Expression: self.jetons >= 0
28904 ,Expression: self.nom.size() > 0
28905 ,Expression: self.nbJetons >= 0
28906 ,Expression: Place.allInstances()->exists(jetons > 0)
28907 ,Expression: self.etageMin <> 13 and self.etageMin <> 13
28908 ,Expression: hote->select(p1 : Personne | p1.age > 4)->size() < nbLits                        and hote->select(p1 : Personne | p1.age < 4) -> size() <= 1
28909 ,Expression: hote->size() < self.nbLits or  hote->size() <= self.nbLits + 1 and hote->exists(p:Personne| p.age < 4)
28910 ,Expression: etage >= hotel.etageMin or etage <= hotel.etageMax
28911 ,Expression: Employe.allInstances()->              forAll(e1,e2|e1.project->size() > e2.project->size()implies              e1.salary > e2.salary )
28912 ,Expression: self.employe->size() >= self.project->size()
28913 ,Expression:            project->collect(p:Project| p.budget)->sum() <= budget
28914 ,Expression: self.budget <= self.departement.budget
28915 ,Expression: departement.employe->includesAll(employe)
28919 ,Expression:  if self.title = null then SpecialIssues = true      else SpecialIssues = false     endif
28920 ,Expression:  publie->excludesAll(submit)
28921 ,Expression: publie->forAll(p:Paper | p.reviewer->size()=3)
28923 ,Expression: reviewer->forAll(r:Reviewer | redaction->select(a:Autheur|a.nameAuthor = r.nameReviewer )->size()<1)                              and reviewer->size()<3
28924 ,Expression: not self.swagger.oclIsUndefined()
28925 ,Expression: not self.info.oclIsUndefined()
28926 ,Expression: self.swagger = '2.0'
28927 ,Expression: pathsIsSet()
28929 ,Expression: not self.title.oclIsUndefined()
28930 ,Expression: not self.version.oclIsUndefined()
28931 ,Expression: not self.name.oclIsUndefined()
28934 ,Expression: self.parameters -> collect(t | Tuple{name : String = t.name,location : ParameterLocation = t.location})->asSet() -> size() = self.parameters -> size()
28936 ,Expression: self.responses -> size() <> 0
28937 ,Expression: not self.url.oclIsUndefined()
28938 ,Expression: not name.oclIsUndefined()
28939 ,Expression: not location = ParameterLocation::unspecified
28941 ,Expression: not self.firstName.oclIsUndefined() and self.firstName <> ''
28942 ,Expression: not self.lastName.oclIsUndefined() and self.lastName <> ''
29041 ,Expression: connectedPorts->at(1).parentComponent <> connectedPorts->at(2).parentComponent
29042 ,Expression: entities->forAll(e : Entity | relships->forAll(r : Relship | e.name <> r.name))
29043 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
29044 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
29045 ,Expression: attrs->forAll(a1 : Attribute, a2 : Attribute | a1.name = a2.name implies a1 = a2)
29046 ,Expression: attrs->exists(a : Attribute | a.isKey = true)
29047 ,Expression: ends->forAll(e1 : RelshipEnd, e2 : RelshipEnd | e1.name = e2.name implies e1 = e2)
29054 ,Expression: true
29055 ,Expression: result.oclIsNew() and result.name=name and result.portal=p
29056 ,Expression: Product::allInstances()->collect(s|s.price)->sum()>10
29057 ,Expression: c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()
29058 ,Expression: not c.oclIsTypeOf(GoldCustomer)
29059 ,Expression: p.stock > 0
29061 ,Expression: Product::allInstances()->forAll(p|p.stock>=5)
29070 ,Expression: pets->at(1) <> null
29072 ,Expression: Paper::allInstances()->forAll(p|p.wordCount < 10000)
29073 ,Expression: Paper::allInstances()->forAll(p| p.referee->forAll(r| not r.isStudent))
29074 ,Expression: Paper::allInstances()->exists(p|p.studentPaper) and Paper::allInstances()->select(p|p.studentPaper)->size() < 5
29075 ,Expression: Paper::allInstances()->forAll(p|p.studentPaper = p.author->exists(x|x.isStudent))
29076 ,Expression: Researcher::allInstances()->forAll(r|r.submission->excludes(r.manuscript))
29148 ,Expression: pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
29149 ,Expression: VM.allInstances()->size() < 10
29150 ,Expression: VM.allInstances()->select(host.name = self.host.name)
29151 ,Expression: host->collect(e | e.req)->sum() <= res
29152 ,Expression: VM.allInstances()->select(e | e.plc = self)
29195 ,Expression: pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
29196 ,Expression: backup->forAll(vm : VM | self.plc <> vm.plc)
29197 ,Expression: frequent->forAll(v : VM | self.plc.near->includes(v.plc))
29198 ,Expression: pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
29199 ,Expression: backup->forAll(vm : VM | self.plc <> vm.plc)
29200 ,Expression: frequent->forAll(v : VM | self.plc.near->includes(v.plc))
29201 ,Expression: VM.allInstances()->select(host.name = self.host.name)
29202 ,Expression: backup->forAll(vm : VM | self.plc <> vm.plc)
29203 ,Expression: frequent->forAll(v : VM | self.plc.near->includes(v.plc) or self.plc = v.plc)
29204 ,Expression: VM.allInstances()->select(v|v.host.name = self.host.name and v<>self)
29205 ,Expression: host->collect(e | e.req)->sum() <= res
29206 ,Expression: VM.allInstances()->select(e | e.plc = self)
29249 ,Expression: self.getRootContainer().spaceWireNetworkTopology.subnet.node->select(i : Node | i.id = self.id).port->select(i | i.number = self.port).oclAsType(Port)->union(self.getRootContainer().spaceWireNetworkTopology.subnet.router->select(i : Router | i.id = self.id).port->select(i | i.number = self.port))->asBag()
29647 ,Expression: self.name.at(1).matches('[A-Z]')
29648 ,Expression: self.name.size() <> 0
29649 ,Expression: ViewGroup.allInstances() -> select(f | f.welcomeViewGroup = true) -> size() = 1
29650 ,Expression: self.name.at(1).matches('[A-Z]')
29651 ,Expression: ViewElements.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
29652 ,Expression: self.visibilitycondition -> forAll(c | c.conditionType = self.conditionType)
29653 ,Expression: self.superclass->excludes(self)
29654 ,Expression:  (self.Property -> select(k | k.isID=true)-> size() = 1) or (self.superclass -> size() > 0)
29655 ,Expression: self.LowerBound <= 1
29656 ,Expression: self.LowerBound >= 0
29657 ,Expression: self.UpperBound = 1
29658 ,Expression: self.type = PropertyType::DataType or self.type = PropertyType::Enumeration
29659 ,Expression: self.LowerBound <= self.UpperBound or self.UpperBound = -1 and (self.LowerBound >= 0 and self.UpperBound > 0 or self.UpperBound = -1)
29667 ,Expression: isComponent implies not isInteractionSurface
29668 ,Expression: not self->closure(hostedBy.target)->includes(self)
29669 ,Expression: not isInteractionSurface implies not hostedBy->isEmpty()
29670 ,Expression: not hosts->isEmpty()
29671 ,Expression: hosts->isEmpty()
29672 ,Expression: not hosts->isEmpty() and not implementedBy->isEmpty()
29673 ,Expression: self->closure(hostedBy.target)->select(isInteractionSurface)
29674 ,Expression: self.interactionSurfaces.implementedBy->flatten().oclAsType(Implementation).source->asSet()->union(self.implementedBy->collect(source)->asSet())->asOrderedSet()
29675 ,Expression: source.hostedBy->forAll(h : Hosting | h <> self implies h.target <> self.target)
29676 ,Expression: target.isInteractionSurface
29677 ,Expression: source.isInteractionSurface and target.isInteractionSurface
29778 ,Expression: self.activites -> one( a : Activite | a.suivante.oclIsUndefined())
29779 ,Expression: self.activites -> one(a : Activite | a.precedente.oclIsUndefined())
29780 ,Expression: Activite.allInstances()->one(a : Activite | a.name = self.name)
29781 ,Expression: self.pasDansSuivant(self)
29783 ,Expression: self.activites -> one( a : Activite | a.suivante.oclIsUndefined())
29784 ,Expression: self.activites -> one(a : Activite | a.precedente.oclIsUndefined())
29785 ,Expression: Activite.allInstances()->one(a : Activite | a.name = self.name)
29786 ,Expression: self.pasDansSuivant(self)
29788 ,Expression: self.reference.precedente.oclIsUndefined()
29789 ,Expression: self.reference.suivante.oclIsUndefined()
29793 ,Expression: name <> 'Process'
29794 ,Expression: self.processElements-> select(pe|pe.oclIsTypeOf(WorkDefinition))-> collect(pe|pe.oclAsType(WorkDefinition))-> forAll(a,b|a <> b implies a.name <> b.name)
29795 ,Expression: Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
29796 ,Expression: self.name.size() > 0
29797 ,Expression: self.process = self.predecessor.process
29798 ,Expression: self.process = self.successor.process
29799 ,Expression: self.predecessor <> self.successor
29800 ,Expression: self.name.size() > 0
29801 ,Expression: self.quantity > 0
29802 ,Expression: self.quantity > 0
29803 ,Expression: self.quantity <= self.ressource.quantity
29927 ,Expression: self.world.people->forAll(p | p.name <> self.name or p = self)
29931 ,Expression: features->forAll(f | f.classes->isEmpty())
29933 ,Expression: horzLength + vertLength
30747 ,Expression: base_Class.ownedReception->isEmpty()
30748 ,Expression: (base_Class.generalization->size()) <= 1
30749 ,Expression: (base_Class.generalization->notEmpty()) implies (base_Class.generalization->forAll (g | g.isSubstitutable))
30750 ,Expression: base_Class.ownedAttribute->forAll(at | at.type->size() = 1)
30751 ,Expression: base_Class.nestedClassifier->isEmpty()
30753 ,Expression: base_Class.generalization->size() <= 1
30754 ,Expression: base_Connector.end->size() = 2
31229 ,Expression:   (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
31230 ,Expression:   (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
31233 ,Expression: self.oclType().allInstances()->size() = 1
31234 ,Expression: self.oclType().allInstances()->forAll(c1, c2 |c1 <> c2 implies c1.actor <>  c2.actor or c1.processorType <>  c2.processorType)
31235 ,Expression: self.oclType().allInstances()->forAll(id1, id2 |id1 <> id2 implies id1.identifier <> id2.identifier)
31236 ,Expression: self.oclType().allInstances()->size() = 1
31237 ,Expression: self.processors->forAll(p1, p2 | p1 <> p2 implies p1.identifier <> p2.identifier)
31238 ,Expression: self.processors->forAll(p |p.island = self)
31239 ,Expression: self.processors.initialState->forAll(cs1, cs2 | cs1.frequency = cs2.frequency)
31240 ,Expression: self.possibleStates->forAll(ps1, ps2 | ps1 <> ps2 implies ps1.frequency <>  ps2.frequency or ps1.isWorking <>  ps2.isWorking)
31241 ,Expression: self.possibleStates->forAll( s|s.processorType = self)
31242 ,Expression: self.island.processors->includes(self)
31243 ,Expression: self.type.possibleStates->includes(self.initialState)
31244 ,Expression: self.processorType.possibleStates->includes(self)
31245 ,Expression: self.possibleStateChanges->forAll (psc | psc.source = self)
31246 ,Expression: self.possibleStateChanges->forAll(sc1, sc2 | sc1 <> sc2 implies sc1.source <>  sc2.source or sc1.target <>  sc2.target)
31247 ,Expression: self.source.processorType = self.target.processorType
31248 ,Expression: self.source <> self.target
31249 ,Expression: self.oclType().allInstances()->size() = 1
31250 ,Expression: self. incomingChannels->forAll( c | c.target = self)
31251 ,Expression: self. outgoingChannels->forAll( c | c.source = self)
31252 ,Expression: self.target.incomingChannels->includes(self)
31253 ,Expression: self.source.outgoingChannels->includes(self)
31254 ,Expression: self.name.characters()->excludes(' ')
31255 ,Expression: Set{0..9}->excludes(self.name.characters()->first())
31266 ,Expression: self.declaration->collect(variable)->isUnique(name)
31267 ,Expression: self.declaration->select(oclIsKindOf(FunctionDeclaration)).oclAsType(FunctionDeclaration)->collect(function)->isUnique(name)
31268 ,Expression: self.declaration->select(oclIsKindOf(VariableDeclaration)).oclAsType(VariableDeclaration)->collect(variable)->isUnique(name)
31269 ,Expression: self.declaration->select(oclIsKindOf(TypeDeclaration)).oclAsType(TypeDeclaration)->collect(type)->isUnique(name)
31270 ,Expression: not self.declaration->exists(oclIsKindOf(system::TemplateDeclaration))
31271 ,Expression: not self.declaration->exists(oclIsKindOf(system::TemplateDeclaration))
31272 ,Expression: not self.declaration->exists(oclIsKindOf(ChannelVariableDeclaration))
31273 ,Expression: self.declaration->select(oclIsKindOf(system::TemplateDeclaration)).oclAsType(system::TemplateDeclaration)->collect(declaredTemplate)->isUnique(name)
31274 ,Expression: not self.declaration->exists(oclIsKindOf(ChannelVariableDeclaration))
31279 ,Expression: self.parameter->collect(variableDeclaration)->collect(variable)->isUnique(name)
31280 ,Expression: self.type->isUnique(name)
31282 ,Expression: if self.container.oclIsUndefined()then null else self.container.typeDefinition endif
31285 ,Expression: self.variable->isUnique(name)
31287 ,Expression: self.item->select(oclIsKindOf(DefaultChannelPriority))->size() <= 1
31288 ,Expression: self.item->select(oclIsKindOf(ChannelList)).oclAsType(ChannelList)->collect(channelExpression)->isUnique(variable)
31291 ,Expression: self.instantiationList->collect(template)->isUnique(t : templates::AbstractTemplate | t)
31293 ,Expression: self.parameter->collect(variableDeclaration)->collect(variable)->isUnique(name)
31294 ,Expression: self.location->isUnique(name)
31297 ,Expression: self.variable->size() <= 1
31299 ,Expression: (not self.declarations.oclIsUndefined())implies(self.declarations.declaration->forAll(oclIsKindOf(declarations::DataVariableDeclaration)))
31300 ,Expression: self.variable->size() <= 1
31302 ,Expression: self.variable->size() <= 1
31308 ,Expression: self.template->isUnique(name)
31324 ,Expression:   self.assemblyconnector->forAll( a |   let c1 : Container = GetContainerOfContext(a.providedAssemblyContext),  c2: Container = GetContainerOfContext(a.requiredAssemblyContext)  in c1 = c2  or environment.IsLinked(c1,c2))
31327 ,Expression: self.delegationconnector->forAll( d | d.role->includesAll(providedrole) or d.role->includesAll(requiredrole))
31328 ,Expression: self.delegationconnector->size() = self.requiredrole->size() + self.providedrole->size()
31330 ,Expression:  self.role->first().oclType() = self.role->last().oclType()
31331 ,Expression:  self.role->first().interface = self.role->last().interface
31334 ,Expression:  let composites : Collection(CompositeComponent) = self.allocationcontext->select(a | a.assemblycontext.component.oclIsTypeOf(CompositeComponent)).assemblycontext.component.oclAsType(CompositeComponent)in self.allocationcontext.assemblycontext->excludesAll(composites.assemblycontext)
31337 ,Expression: Sequence{1 .. self.nombre.size()}->collect(i | self.nombre.substring(i, i))->excludes(' ')
31338 ,Expression: self.clases->isUnique(nombre)
31339 ,Expression: clases->collect(c | c.relacionesBT)->size() = clases->collect(c| c.relacionesBT->collect(rBT | c.atributos->select(a | a.nombre.toLowerCase() = rBT.destino_BT.nombre.toString().toLowerCase())))->size()
31340 ,Expression: self.atributos->isUnique(nombre)
31341 ,Expression: self.destino_BT <> self.origen_BT
31342 ,Expression: self.destino_HMT <> self.origen_HMT
31343 ,Expression: Sequence{1 .. self.nombre.size()}->collect(i | self.nombre.substring(i, i))->excludes(' ')
31344 ,Expression: self.clases->isUnique(nombre)
31345 ,Expression: clases->collect(c | c.relacionesBT)->size() = clases->collect(c| c.relacionesBT->collect(rBT | c.atributos->select(a | a.nombre.toLowerCase() = rBT.destino_BT.nombre.toString().toLowerCase() and a.tipo.toString() = 'integer' )))->size()
31346 ,Expression: self.atributos->isUnique(nombre)
31347 ,Expression: self.destino_a <> self.origen_a
31348 ,Expression: self.destino_c <> self.origen_c
31356 ,Expression: keySet->forAll(k1:Key, k2:Key | k1.keyAttributes->intersection(k2.keyAttributes)->includesAll(k1.keyAttributes) and k1.keyAttributes->symmetricDifference(k2.keyAttributes)->isEmpty() implies k1=k2)
31360 ,Expression: ModellingConcept.allInstances()->symmetricDifference(Gerund.allInstances())->forAll(m1:ModellingConcept, m2:ModellingConcept | m1.name = m2.name implies m1=m2)
31363 ,Expression: ISA.allInstances().subtypes->forAll(e1:Entity | ISA.allInstances().subtypes->select(e2 | e1.name=e2.name)->size()<2)
31366 ,Expression: self.contains_nodes->select(n|n.oclIsTypeOf(StartNode))->size()=1
31367 ,Expression: self.contains_nodes->select(n|n.oclIsTypeOf(EndNode))->size()>0
31368 ,Expression:  (self.contains_arcs->size()) >= (self.contains_nodes->size()-1)
31369 ,Expression: self.incoming->size() > 0
31370 ,Expression: self.outgoing->size() > 0
31371 ,Expression: self.outgoing->size() > 0
31372 ,Expression: self.incoming->size() = 0
31373 ,Expression: self.incoming->size() > 0
31374 ,Expression: self.outgoing->size() = 0
31375 ,Expression: relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
31376 ,Expression: entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
31377 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
31378 ,Expression: ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
31379 ,Expression: attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
31380 ,Expression: not attrs->exists(a1 : ERAttribute | a1.isKey)
31381 ,Expression: self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
31382 ,Expression: relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
31383 ,Expression: self.relations->size() > 0
31384 ,Expression: attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
31385 ,Expression: attrs->exists(a : RELAttribute | a.isKey = true)
31386 ,Expression: self.attrs->size() > 0
34268 ,Expression: self.triggers -> size() <= 2
34269 ,Expression: self.triggers -> size() > 1
34270 ,Expression: self.contains -> isUnique(name)
34271 ,Expression: self.run -> select(C|C.main = true) -> size() = 1
34272 ,Expression: if (not self.minSDK -> oclIsUndefined()) then self.minSDK < self.targetSDK else not self.targetSDK ->oclIsUndefined() endif
34274 ,Expression: self.buttonOwner.triggers -> select(c|c.type = self.type) -> size() = 1
34282 ,Expression: self.name <> ''
34283 ,Expression:         self.name <> ''
34284 ,Expression:             self.predecessors->size() > 0 or self.successors->size() > 0
34285 ,Expression: self.tokensCount > 0
34286 ,Expression: self.successors->size() > 0
34287 ,Expression: self.successors->forAll(s | s.target.oclIsKindOf(Place))
34288 ,Expression: self.tokensCount >= 0
34289 ,Expression: self.successors->forAll(s | s.target.oclIsKindOf(Transition))
34290 ,Expression:         (name <> 'Process' and name <> '')
34291 ,Expression:             self.processElements            ->select(p | p.oclIsTypeOf(WorkDefinition))            ->collect(p | p.oclAsType(WorkDefinition))            ->forAll(wd1, wd2 | wd1 <> wd2 implies wd1.name <> wd2.name)
34292 ,Expression:         self.name <> ''
34293 ,Expression:         self.process = self.predecessor.process
34294 ,Expression:         self.process = self.successor.process
34295 ,Expression:             self.successor <> self.predecessor
34310 ,Expression: Sequence{'', 'Scénario'}->forAll(n | self.name <> n)
34311 ,Expression: self.components->select(c | c.oclIsKindOf(Activity))->collect(c | c.oclAsType(Activity))->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
34312 ,Expression: Sequence{'', 'Activité', 'Choix', 'Parallèle', 'Alternative'}->forAll(n | self.name <> n)
34317 ,Expression:             relativeFrequencies.value->sum() = 1.0
34318 ,Expression:             relativeFrequencies->forAll(f1,f2|             (f1 <> f2 and not(f1.behaviorModel.oclIsUndefined() or f2.behaviorModel.oclIsUndefined()))                 implies f1.behaviorModel <> f2.behaviorModel)
34319 ,Expression:             value >= 0.0 and value <= 1.0
34320 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2|                 (b1 <> b2 and not(b1.name.oclIsUndefined() or b2.name.oclIsUndefined()))                     implies b1.name <> b2.name                )
34321 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2 |                (b1 <> b2 and not(b1.filename.oclIsUndefined() or b2.filename.oclIsUndefined()))                    implies b1.filename <> b2.filename)
34322 ,Expression:             Service.allInstances()->                forAll(s|markovStates->exists(m|m.service = s))
34323 ,Expression:             not initialState.oclIsUndefined() implies markovStates->includes(initialState)
34324 ,Expression:             markovStates->forAll(s|                 s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (markovStates->includes(t.targetState)                    or t.targetState = exitState)))
34325 ,Expression:             probability >= 0.0 and probability <= 1.0
34326 ,Expression:             Transition.allInstances()->                forAll(t1,t2|                    not (t1.thinkTime.oclIsUndefined() or t2.thinkTime.oclIsUndefined()) implies                     t1.thinkTime.oclType() = t2.thinkTime.oclType()                )
34327 ,Expression:             outgoingTransitions.probability->sum() = 1.0
34328 ,Expression:             MarkovState.allInstances()->                forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                    implies s1.service <> s2.service                )
34329 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies t1.targetState <> t2.targetState                )
34330 ,Expression:             not service.oclIsUndefined() implies             ApplicationState.allInstances()->exists(as|service = as.service and                outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies as.outgoingTransitions->exists(at|                        (at.targetState.oclIsTypeOf(ApplicationExitState) and                         t.targetState.oclIsTypeOf(BehaviorModelExitState)) or                       ((t.targetState.oclIsTypeOf(MarkovState) and                         at.targetState.oclIsTypeOf(ApplicationState) and                         at.targetState.oclAsType(ApplicationState).service =                         t.targetState.oclAsType(MarkovState).service)))))
34331 ,Expression:     Service.allInstances()->                forAll(s1,s2|                    (s1 <> s2 and not(s1.name.oclIsUndefined() or s2.name.oclIsUndefined()))                     implies s1.name <> s2.name                )
34332 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
34333 ,Expression:          properties->forAll(p1,p2 |              (p1 <> p2 and not(p1.key.oclIsUndefined() or p2.key.oclIsUndefined()))                implies p1.key <> p2.key         )
34334 ,Expression:         parameters->forAll(p1,p2 |             (p1 <> p2 and not(p1.name.oclIsUndefined() or p2.name.oclIsUndefined()))             implies p1.name <> p2.name        )
34335 ,Expression:         Request.allInstances()->forAll(r1,r2 | r1.oclType() = r2.oclType())
34336 ,Expression:             outgoingTransitions->                forAll(t1,t2|                    (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                    implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
34337 ,Expression:             protocolStates->forAll(s1,s2|                (s1 <> s2 and not(s1.request.oclIsUndefined() or s2.request.oclIsUndefined()))                 implies s1.request <> s2.request            )
34338 ,Expression:             not initialState.oclIsUndefined() implies protocolStates->includes(initialState)
34339 ,Expression:             protocolStates->forAll(s|                s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (protocolStates->includes(t.targetState) or t.targetState = exitState)))
34340 ,Expression:             applicationStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                 implies s1.service <> s2.service            )
34341 ,Expression:             not initialState.oclIsUndefined() implies applicationStates->includes(initialState)
34342 ,Expression:            numberOfSessions >= 0
34343 ,Expression:             mean >= 0.0 and deviation >= 0.0 and deviation <= mean
34344 ,Expression:             relativeFrequencies.value->sum() = 1.0
34345 ,Expression:             relativeFrequencies->forAll(f1,f2|             (f1 <> f2 and not(f1.behaviorModel.oclIsUndefined() or f2.behaviorModel.oclIsUndefined()))                 implies f1.behaviorModel <> f2.behaviorModel)
34346 ,Expression:             value >= 0.0 and value <= 1.0
34347 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2|                 (b1 <> b2 and not(b1.name.oclIsUndefined() or b2.name.oclIsUndefined()))                     implies b1.name <> b2.name                )
34348 ,Expression:             BehaviorModel.allInstances()->forAll(b1,b2 |                (b1 <> b2 and not(b1.filename.oclIsUndefined() or b2.filename.oclIsUndefined()))                    implies b1.filename <> b2.filename)
34349 ,Expression:             Service.allInstances()->                forAll(s|markovStates->exists(m|m.service = s))
34350 ,Expression:             not initialState.oclIsUndefined() implies markovStates->includes(initialState)
34351 ,Expression:             markovStates->forAll(s|                 s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (markovStates->includes(t.targetState)                    or t.targetState = exitState)))
34352 ,Expression:             markovStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                    implies s1.service <> s2.service                )
34353 ,Expression:             probability >= 0.0 and probability <= 1.0
34354 ,Expression:             Transition.allInstances()->                forAll(t1,t2|                    not (t1.thinkTime.oclIsUndefined() or t2.thinkTime.oclIsUndefined()) implies                     t1.thinkTime.oclType() = t2.thinkTime.oclType()                )
34355 ,Expression:             outgoingTransitions.probability->exists(p | p > 0) implies            outgoingTransitions.probability->sum() = 1.0
34356 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies t1.targetState <> t2.targetState                )
34357 ,Expression:             not service.oclIsUndefined() implies             ApplicationState.allInstances()->exists(as|service = as.service and                outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies as.outgoingTransitions->exists(at|                        (at.targetState.oclIsTypeOf(ApplicationExitState) and                         t.targetState.oclIsTypeOf(BehaviorModelExitState)) or                       ((t.targetState.oclIsTypeOf(MarkovState) and                         at.targetState.oclIsTypeOf(ApplicationState) and                         at.targetState.oclAsType(ApplicationState).service =                         t.targetState.oclAsType(MarkovState).service)))))
34358 ,Expression:     Service.allInstances()->                forAll(s1,s2|                    (s1 <> s2 and not(s1.name.oclIsUndefined() or s2.name.oclIsUndefined()))                     implies s1.name <> s2.name                )
34359 ,Expression:             outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
34360 ,Expression:          properties->forAll(p1,p2 |              (p1 <> p2 and not(p1.key.oclIsUndefined() or p2.key.oclIsUndefined()))                implies p1.key <> p2.key         )
34361 ,Expression:         parameters->forAll(p1,p2 |             (p1 <> p2 and not(p1.name.oclIsUndefined() or p2.name.oclIsUndefined()))             implies p1.name <> p2.name        )
34362 ,Expression:         Request.allInstances()->forAll(r1,r2 | r1.oclType() = r2.oclType())
34363 ,Expression:             outgoingTransitions->                forAll(t1,t2|                    (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                    implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
34364 ,Expression:             protocolStates->forAll(s1,s2|                (s1 <> s2 and not(s1.request.oclIsUndefined() or s2.request.oclIsUndefined()))                 implies s1.request <> s2.request            )
34365 ,Expression:             not initialState.oclIsUndefined() implies protocolStates->includes(initialState)
34366 ,Expression:             protocolStates->forAll(s|                s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (protocolStates->includes(t.targetState) or t.targetState = exitState)))
34367 ,Expression:             applicationStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                 implies s1.service <> s2.service            )
34368 ,Expression:             not initialState.oclIsUndefined() implies applicationStates->includes(initialState)
34369 ,Expression:            numberOfSessions >= 0
34370 ,Expression:             mean >= 0.0 and deviation >= 0.0 and deviation <= mean
34371 ,Expression: self.countryState->forAll(state|state.key=state.value.country)
34372 ,Expression: self.players->count()>=2 or state=0
34373 ,Expression: self.inParameter->forAll(c1, c2 | (c1<>c2 and c1.datatype.name = c2.datatype.name) implies c1.name <> c2.name)
34374 ,Expression: DataTypeLibrary.allInstances().datatype.name->includes(self.datatype.name)
34375 ,Expression: self.datatype->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
34376 ,Expression: self.transition -> select(t:Transition|t.trigger.oclIsUndefined()) -> size() = 0
34377 ,Expression: self.systemunits->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
34378 ,Expression: self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial) -> size()= 1
34379 ,Expression: self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).function -> isEmpty()
34380 ,Expression: self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isTerminal).function -> isEmpty()
34381 ,Expression: node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).edge -> size() = 1
34436 ,Expression: self.pages->forAll(p1, p2 | p1 <> p2 implies p1.name<>p2.name)
34437 ,Expression: not self.targets->includes(self)
34438 ,Expression: self.targets->forAll ( t1 | self.targets -> one ( t2 | t2 = t1))
