@1#E:/FinalProject Repos/repos\708y\TextBE2\model_bt_v2\trunk\org.be.textbe.bt.model.v2\model/textbt.ecore#derivation#BehaviorNode#OclVoid
@2#E:/FinalProject Repos/repos\708y\TextBE2\model_bt_v2\trunk\org.be.textbe.bt.model.v2\model/textbt.ecore#derivation#BehaviorTree#OrderedSet{}
@3#E:/FinalProject Repos/repos\Abadhor\ModelEngineeringRepo\EFML\model/forms.ecore##EFML#self.forms -> forAll(f | f.mainForm=true)
@4#E:/FinalProject Repos/repos\ablunk\dmx\dev-plugins\hub.sam.dmx\resources/dbl.ecore#derivation#StructuralSymbolReference#not localScopedReference and not globalScopedReference
@5#E:/FinalProject Repos/repos\abrahamreq\sma.formularios\metamodel/BD.ecore#TablaNoDuplicado#EsquemaBD#tablas->isUnique(nombre)
@6#E:/FinalProject Repos/repos\abrahamreq\sma.formularios\metamodel/BD.ecore#ColumnaNoDuplicada#Tabla#columnas->isUnique(nombre)
@7#E:/FinalProject Repos/repos\abrahamreq\sma.formularios\metamodel/BD.ecore#NombreMayuscula#Tabla#nombre.toUpperCase() = nombre
@9#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#body#Company#true
@10#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#derivation#Company#let table : Set(Tuple(range : Sequence(Integer), size : CompanySizeKind)) =    Set{Tuple{range=Sequence{0..49}, size=CompanySizeKind::small},         Tuple{range=Sequence{50..999}, size=CompanySizeKind::medium},         Tuple{range=Sequence{1000..1000000}, size=CompanySizeKind::large}} intable->any(range->includes(employees->size())).size
@11#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#mustHaveName#Employee#not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
@12#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#mustHaveNonEmptyName#Employee#Tuple {message : String = 'this is a \'precondition\'\n',status : Boolean = name->notEmpty() implies name.size() > 0}.status
@13#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#body#Employee#self.reportingChain->includes(manager)
@14#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#body#Employee#manager.oclIsUndefined() implies directReports->size() > 0
@15#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#body#Employee#name <> null
@16#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#derivation#Employee#company.employees->select(manager = self)
@17#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#derivation#Employee#Employee.allInstances()->select(reportsTo(self))
@18#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#derivation#Employee#if (manager.oclIsUndefined()) then    OrderedSet{}else    manager.reportingChain->prepend(manager)endif
@19#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#derivation#Employee#name <> null
@20#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/Company.ecore#initial#Bug418716#100
@21#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/HiddenOpposites.ecore#body#Sup2#self.hidden->any(true)
@25#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overridden'
@26#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(Level0)'
@27#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(Level1)'
@28#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(Level2a)'
@29#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(Level2b)'
@30#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(Level3)'
@31#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(Level4)'
@32#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#'Level0::overload(String)'
@33#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#self
@34#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#null
@35#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#null
@36#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#null
@37#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#null
@38#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level0#null
@39#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level1#'Level1::overridden'
@40#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level1#'Level1::ambiguous'
@41#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level1#'Level1::overload(Level1)'
@42#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level1#self
@43#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2a#'Level2a::overridden'
@44#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2a#'Level2a::ambiguous'
@45#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2a#'Level2a::overload(Level2a)'
@46#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2a#self
@47#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2b#'Level2b::overridden'
@48#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2b#'Level2b::ambiguous'
@49#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2b#'Level2b::overload(Level2b)'
@50#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level2b#self
@51#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level3#'Level3::overridden'
@52#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level3#'Level3::overload(Level3)'
@53#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level3#self
@54#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level4#'Level4::overridden'
@55#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level4#'Level4::ambiguous'
@56#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level4#'Level4::overload(Level4)'
@57#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NamesTest.ecore#body#Level4#self
@58#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#body#Company#true
@59#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#derivation#Company#let table : Set(Tuple(range : Sequence(Integer), size : CompanySizeKind)) =    Set{Tuple{range=Sequence{0..49}, size=CompanySizeKind::small},         Tuple{range=Sequence{50..999}, size=CompanySizeKind::medium},         Tuple{range=Sequence{1000..1000000}, size=CompanySizeKind::large}} intable->any(range->includes(employees->size())).size
@60#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#mustHaveName#Employee#not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()
@61#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#body#Employee#self.reportingChain->includes(manager)
@62#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#body#Employee#manager.oclIsUndefined() implies directReports->size() > 0
@63#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#body#Employee#name <> null
@64#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#derivation#Employee#company.employees->select(manager = self)
@65#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#derivation#Employee#Employee.allInstances()->select(reportsTo(self))
@66#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#derivation#Employee#if (manager.oclIsUndefined()) then    OrderedSet{}else    manager.reportingChain->prepend(manager)endif
@67#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.ecore.tests\model/NoReflectionCompany.ecore#derivation#Employee#name <> null
@68#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#CreateOperation#nameLabel(newName) + ' <= ' + operationLabels(oldOperations)
@69#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#CreatePackage#nameLabel(newName) + ' <= ' + packageLabels(oldPackages)
@70#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#CreateProperty#let newType = newType() in if newType <> null then nameLabel(newType.name) + '::' else '' endif + nameLabel(newName) + ' <= ' + propertyLabels(oldProperties)
@71#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#CreateProperty#if newOwningType <> null then newOwningType else if oldProperties->notEmpty() then oldProperties->first().owner else null endif endif
@72#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#CreateType#nameLabel(newName) + ' <= ' + typeLabels(oldTypes)
@73#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#DeleteInheritances#typeLabels(oldTypes) + ' -= ' + typeLabels(excludeTypes) + ', ' + typeLabels(excludeTypesAndProperties) + ', ' + typeLabels(excludeAllTypesAndProperties)
@74#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#'default-label'
@75#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#if name = null then 'null' else name endif
@76#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#operations->select(name <> null)->sortedBy(name)->iterate(p; acc : String = '' | acc + ' ' + p.class.package.name + '::' + p.class.name + '::' + p.name)
@77#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#if p <> null then nameLabel(p.name) else 'null' endif
@78#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#packages->sortedBy(nameLabel(name))->iterate(p; acc : String = '' | acc + ' ' + packageLabel(p))
@79#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#if p <> null then let t = if p.class <> null then p.class else p.association endif in typeLabel(t) + '::' + nameLabel(p.name) else 'null' endif
@80#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#properties->sortedBy(nameLabel(name))->iterate(p; acc : String = '' | acc + ' ' + propertyLabel(p))
@81#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#if t <> null then packageLabel(t.package) + '::' + nameLabel(t.name) else 'null' endif
@82#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#Mapping#types->sortedBy(nameLabel(name))->iterate(t; acc : String = '' | acc + ' ' + typeLabel(t))
@83#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#derivation#Mapping#label()
@84#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#OperationMapping#operationLabels(oldOperations)
@85#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#PackageMapping#packageLabels(oldPackages)
@86#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#PropertyMapping#propertyLabels(oldProperties)
@87#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreControl.ecore#body#TypeMapping#typeLabels(oldTypes)
@88#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#CreateOperation#'nameLabel(newName)' + ' <= ' + 'operationLabels(oldOperations)'
@89#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#CreatePackage#nameLabel(newName) + ' <= ' + packageLabels(oldPackages)
@90#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#CreateProperty#nameLabel(newName) + ' <= ' + propertyLabels(oldProperties)
@91#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#UniqueCreatePropertyNames#CreateType#propertyMappings->selectByKind(CreateProperty)->isUnique(newName)
@92#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#CreateType#nameLabel(newName) + ' <= ' + typeLabels(oldTypes)
@93#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#DeleteOperation#nameLabel(oldName) + ' <= ' + operationLabels(oldOperations)
@94#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#DeletePackage#oldName
@95#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#DeleteProperty#nameLabel(oldName) + ' <= ' + propertyLabels(oldProperties)
@96#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#DeleteType#nameLabel(oldName) + ' <= ' + typeLabels(oldTypes)
@97#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#'default-label'
@98#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#if name = null then 'null' else name endif
@99#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#operations->sortedBy(nameLabel(name))->iterate(p; acc : String = '' | let type : uml::Type = if p.class <> null then p.class else p.interface endif in acc + ' ' + nameLabel(p.class.package.name) + '::' + nameLabel(p.class.name) + '::' + nameLabel(p.name))
@100#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#if p <> null then nameLabel(p.name) else 'null' endif
@101#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#packages->sortedBy(nameLabel(name))->iterate(p; acc : String = '' | acc + ' ' + packageLabel(p))
@102#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#if p <> null then let t = if p.class <> null then p.class else p.association endif in typeLabel(t) + '::' + nameLabel(p.name) else 'null' endif
@103#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#properties->sortedBy(nameLabel(name))->iterate(p; acc : String = '' | acc + ' ' + propertyLabel(p))
@104#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#if t <> null then packageLabel(t.package) + '::' + nameLabel(t.name) else 'null' endif
@105#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#Mapping#types->sortedBy(nameLabel(name))->iterate(t; acc : String = '' | acc + ' ' + typeLabel(t))
@106#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#derivation#Mapping#label()
@107#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#PackageMapping#packageLabels(oldPackages)
@108#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.build\model/UML2EcoreMapping.ecore#body#TypeMapping#typeLabels(oldTypes)
@109#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#UniqueNames#Employee#Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)
@110#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#BossIsOldest#Employee#self.age <= self.employer.boss.age
@111#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#divBossSecretary#Employee#if self.directed->isEmpty() thenself.secretary.oclIsUndefined()elsenot self.secretary.oclIsUndefined()endif
@112#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#secretaryOlderThanBoss#Employee#if self.directed->notEmpty() andnot self.secretary.oclIsUndefined() thenself.age < self.secretary.age else trueendif
@113#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#Boss10YearsOlderThanEmployee#Employee#self.age + 10 <= self.employer.boss.age
@114#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#Secretary10YearsOlderThanBoss#Employee#if self.directed->notEmpty() andnot self.secretary.oclIsUndefined() thenself.age + 10 < self.secretary.age else trueendif
@115#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#NotBossFreelance#Department#not (self.boss.oclIsTypeOf(Freelance))
@116#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#OldEmployee#Department#self.employee->exists(e | e.age > 45)
@117#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#MaxJuniors#Department#self.employee->select(e|e.age < 25)->size()<self.maxJuniors
@118#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#BossHighestSalary#Department#self.employee->select(e|e.salary >= self.boss.salary)->size() <= 1
@119#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#boss10YearsOlderThanJunior#Department#let t:Tuple(boss:Employee,junior:Employee)=Tuple{boss=self.boss, junior=self.employee->sortedBy(age)->first()} int.boss.age > t.junior.age + 10
@120#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#BudgetRestriction#Department#self.calcExpenses() <= self.budget
@121#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#MaxJuniorsWarning#Department#if self.maxJuniors > 1thenself.employee->select(e|e.age < 25)->size()<self.maxJuniors - 1elsetrueendif
@122#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#departmentMustHaveDivision#Department#self.department2division->notEmpty()
@123#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#body#Department#self.employee->iterate(e ; s : Integer = 0 | s + e.salary) + self.boss.salary
@124#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#body#Department#if self.subDepartment->size() >= 1 thenself.subDepartment->iterate(department; return : Integer = 0 | return + department.sumBudget()) + self.budgetelseself.budgetendif 
@125#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#derivation#Department#let numFreelance : Integer = self.employee->select(e : Employee | e.oclIsKindOf(Freelance))->size() in let numStudent : Integer = self.employee->select(e : Employee | e.oclIsKindOf(Student))->size() in if numFreelance < numStudent then numStudent else numFreelance endif
@126#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#ValidAssignment#Freelance#self.assignment >= 5 and self.assignment <= 30
@127#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#ValidAssignmentWarning#Freelance#self.assignment >= 5 and self.assignment <= 40
@128#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#StudentAndFreelancesAge#Freelance#self.age < 40
@129#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#nasty#Division#self.department->collect(d| d.employee->including(d.boss)).salary->sum() < budget
@130#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#limitEmployeesOfTheMonth#Division#self.employeesOfTheMonth->size() <= self.department->size()
@131#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#nestedDerivation#Division#self.numberEmployeesOfTheMonth <= self.department->size()
@132#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#derivation#Division#self.department.employeeOfTheMonth
@133#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#derivation#Division#self.employeesOfTheMonth->size()
@134#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#StudentAndFreelancesAge#Student#self.age < 40
@135#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#eotmDeltaMax#Company#self.eotmDelta <= 5
@136#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#derivation#Company#let maxEOTMDivision:Division=self.division->sortedBy(i | i.numberEmployeesOfTheMonth)->last() in let minEOTMDivision:Division=self.division->sortedBy(i | i.numberEmployeesOfTheMonth)->first() in maxEOTMDivision.numberEmployeesOfTheMonth - minEOTMDivision.numberEmployeesOfTheMonth
@137#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#derivation#Company#self.division.director
@138#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.company\model/company.ecore#derivation#Company#if self.division->isEmpty() then  'Company with no division'else  'Company with division '.concat(self.division.name)endif
@139#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/abapmapping.ecore#TypeOfValuesEqualsAbapType#Code#self.values->forAll(cv:CodeValue |      cv.type = self.abapType)
@140#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/abapmapping.ecore#AbapTypeMustBeUnstructured#AbapClassImplementationAnnotation#self.kind = AbapClassKind::ABAP_TYPE implies    self.abapType.oclIsKindOf(abapmapping::abapdictionary::UnstructuredAbapType)
@261#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#Expression#let parametersAndSignatureAreSideEffectFree:Boolean =    self.oclIsKindOf(SignatureCallExpression) implies      (self.oclAsType(SignatureCallExpression).parameters->forAll(p|p.isSideEffectFree())       and self.oclAsType(SignatureCallExpression).getSignature().sideEffectFree)  in  if self.oclIsKindOf(ObjectBasedExpression) then    self.oclAsType(ObjectBasedExpression).object.isSideEffectFree() and    if self.oclIsKindOf(SignatureCallExpression) then      parametersAndSignatureAreSideEffectFree    else      if self.oclIsKindOf(Replace) then        self.oclAsType(Replace).with.isSideEffectFree()      else        if self.oclIsKindOf(ExpressionWithArgument) and self.oclAsType(ExpressionWithArgument).argument->notEmpty() then          self.oclAsType(ExpressionWithArgument).argument.isSideEffectFree()        else          true        endif      endif    endif  else if self.oclIsKindOf(FunctionCallExpression) then    parametersAndSignatureAreSideEffectFree and self.oclAsType(FunctionCallExpression).calledBlock.isSideEffectFree()  else if self.oclIsKindOf(Equals) then    self.oclAsType(Equals).left.isSideEffectFree() and self.oclAsType(Equals).right.isSideEffectFree()  else if self.oclIsKindOf(ObjectCreationExpression) then    self.oclAsType(ObjectCreationExpression).classToInstantiate.valueType  else if self.oclIsKindOf(dataaccess::analytics::DimensionExpression) then    self.oclAsType(dataaccess::analytics::DimensionExpression).dimensionParameter.ownerSignature.sideEffectFree  else if self.oclIsKindOf(Ternary) then    self.oclAsType(Ternary).condition.isSideEffectFree() and    self.oclAsType(Ternary).trueExpr.isSideEffectFree() and    self.oclAsType(Ternary).falseExpr.isSideEffectFree()  else if self.oclIsKindOf(dataaccess::expressions::collectionexpressions::CollectionExpression) then    self.oclAsType(dataaccess::expressions::collectionexpressions::CollectionExpression).source.isSideEffectFree() and    if self.oclIsKindOf(dataaccess::expressions::collectionexpressions::Iterate) then      (self.oclAsType(dataaccess::expressions::collectionexpressions::Iterate).accumulator.initExpression->notEmpty() implies         self.oclAsType(dataaccess::expressions::collectionexpressions::Iterate).accumulator.initExpression.isSideEffectFree()) and      self.oclAsType(dataaccess::expressions::collectionexpressions::Iterate).iteratorExpression.isSideEffectFree()    else      true    endif  else if self.oclIsKindOf(dataaccess::expressions::literals::ObjectLiteral) then    self.oclAsType(dataaccess::expressions::literals::ObjectLiteral).propertyValues.value->forAll(v|v.isSideEffectFree())  else if self.oclIsKindOf(persistence::expressions::All) or self.oclIsKindOf(Replace) or self.oclIsKindOf(This) or self.oclIsKindOf(VariableExpression) or  self.oclIsKindOf(dataaccess::expressions::literals::Literal) or self.oclIsKindOf(dataaccess::expressions::fp::AnonymousFunctionExpr) then    true  else if self.oclIsKindOf(dataaccess::query::Selection) then    self.oclAsType(dataaccess::query::Selection).object.isSideEffectFree()  else    false  endif  endif  endif  endif  endif  endif  endif  endif  endif  endif
@262#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#Expression#if self=e then    true  else  if self.oclIsKindOf(dataaccess::expressions::literals::NumberLiteral) and e.oclIsKindOf(dataaccess::expressions::literals::NumberLiteral) then    self.oclAsType(dataaccess::expressions::literals::NumberLiteral).literal=e.oclAsType(dataaccess::expressions::literals::NumberLiteral).literal  else    if self.oclIsKindOf(dataaccess::expressions::literals::StringLiteral) and e.oclIsKindOf(dataaccess::expressions::literals::StringLiteral) then      self.oclAsType(dataaccess::expressions::literals::StringLiteral).literal=e.oclAsType(dataaccess::expressions::literals::StringLiteral).literal    else      if self.oclIsKindOf(dataaccess::expressions::literals::ObjectLiteral) and e.oclIsKindOf(dataaccess::expressions::literals::ObjectLiteral) then        self.oclAsType(dataaccess::expressions::literals::ObjectLiteral).isEqualTo(e.oclAsType(dataaccess::expressions::literals::ObjectLiteral))      else        if self.oclIsKindOf(VariableExpression) and e.oclIsKindOf(VariableExpression) then          self.oclAsType(VariableExpression).variable = e.oclAsType(VariableExpression).variable        else          false        endif      endif    endif  endif  endif
@263#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#Expression#if self.oclIsKindOf(VariableExpression) then    if self.oclAsType(VariableExpression).variable.oclIsKindOf(behavioral::actions::Iterator) then      self.oclAsType(VariableExpression).variable.oclAsType(behavioral::actions::Iterator)->select(i | i.fromClause->notEmpty())->asSet()    else      Set{}    endif  else    if self.oclIsKindOf(Replace) then      self.oclAsType(Replace).object.getUsedAliases()->union(      self.oclAsType(Replace).steps.filterFunction.getUsedAliases()->flatten()->asSet())->union(      self.oclAsType(Replace).with.getUsedAliases())    else      if self.oclIsKindOf(dataaccess::query::Selection) then        self.oclAsType(dataaccess::query::Selection).object.getUsedAliases()->union(        self.oclAsType(dataaccess::query::Selection).selectionExpr.getUsedAliases())      else        if self.oclIsKindOf(ObjectBasedExpression) then          let objectAliases:Set(behavioral::actions::Iterator) = self.oclAsType(ObjectBasedExpression).object.getUsedAliases() in          if self.oclIsKindOf(MethodCallExpression) then            objectAliases->union(self.oclAsType(MethodCallExpression).parameters.getUsedAliases()->flatten()->asSet())          else            objectAliases          endif        else          if self.oclIsKindOf(Equals) then            self.oclAsType(Equals).left.getUsedAliases()->union(self.oclAsType(Equals).right.getUsedAliases())          else            if self.oclIsKindOf(FunctionCallExpression) then              self.oclAsType(FunctionCallExpression).calledBlock.getUsedAliases()->union(                           self.oclAsType(FunctionCallExpression).parameters.getUsedAliases()->flatten()->asSet())            else              if self.oclIsKindOf(Ternary) then                let sat:Ternary = self.oclAsType(Ternary) in                sat.condition.getUsedAliases()->union(sat.trueExpr.getUsedAliases())->union(sat.falseExpr.getUsedAliases())             else                 if self.oclIsKindOf(dataaccess::expressions::collectionexpressions::CollectionExpressionWithArgument) then                  self.oclAsType(dataaccess::expressions::collectionexpressions::CollectionExpressionWithArgument).argument.getUsedAliases()->union(                  self.oclAsType(dataaccess::expressions::collectionexpressions::CollectionExpressionWithArgument).source.getUsedAliases())                else                  if self.oclIsKindOf(dataaccess::expressions::collectionexpressions::Iterate) then                    self.oclAsType(dataaccess::expressions::collectionexpressions::Iterate).iteratorExpression.getUsedAliases()->union(                    self.oclAsType(dataaccess::expressions::collectionexpressions::Iterate).accumulator.initExpression.getUsedAliases())->union(                    self.oclAsType(dataaccess::expressions::collectionexpressions::Iterate).source.getUsedAliases())                  else                    if self.oclIsKindOf(dataaccess::query::OqlQuery) then                      self.oclAsType(dataaccess::query::OqlQuery).fromClauses.fromExpression.getUsedAliases()->flatten()->asSet()->union(                      self.oclAsType(dataaccess::query::OqlQuery).condition.getUsedAliases())                    else                      Set{}                    endif                  endif                endif              endif            endif          endif        endif      endif    endif  endif
@264#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#Expression#self.addNamedValuesWithNewNames(  -- First, collect those NamedValues defined immediately for this expression:  -- an iterate's body expression sees the iterators and the accumulator  let accumulator:Set(data::classes::NamedValue)=self.inIterator.accumulator->asSet() in  let iterators:Set(data::classes::NamedValue)=self.inIterator.iterators->asSet() in  -- an OQL "from" clause sees all aliases left of it  let oqlAliases:Set(data::classes::NamedValue)=(if self.fromClause->notEmpty() then    let fromClauses:OrderedSet(dataaccess::query::FromClause) = self.fromClause.fromClauseOfOqlQuery.fromClauses in    let fcIndex:Integer = fromClauses->indexOf(self.fromClause) in      Sequence{1..-1+fcIndex}->collect(i | fromClauses->at(i).alias)->asSet()  else    Set{}  endif)->union(  -- an OQL "where" clause sees all aliases defined by any of the OQL expression's "from" entries  self.conditionOfOqlQuery.fromClauses.alias->asSet()) in  -- a Selection defines an implicit iterator for its filter expression  let selectionIterator:Set(data::classes::NamedValue)=self.selection.iterator->asSet() in  -- a GroupBy's mapExpression sees all dimension iterators and the groupedFacts iterator  let groupByMapExpressionIterators:Set(data::classes::NamedValue)=self.mapExpressionOfGroupBy.groupedFacts->asSet()->union(                                                    self.mapExpressionOfGroupBy.dimensions.iterator->asSet()) in  -- a GroupBy's dimension expression sees the facts iterator  let groupByDimensionFactIterator:Set(data::classes::NamedValue)=self.dimension.groupBy.fact->asSet() in  accumulator->union(iterators)->union(oqlAliases)->union(selectionIterator)->union(groupByMapExpressionIterators)->  union(groupByDimensionFactIterator),  -- Then, add those defined by owning structures such as owning statements or owning expressions  -- an expression that is used by an ExpressionStatement or as condition in a Conditional sees all named values that the statement sees  if self.actualObjectParameter.owningClassTypeDefinition->notEmpty() then    self.actualObjectParameter.owningClassTypeDefinition.getNamedValuesInScope()  else    if self.initExpressionFor.namedValueDeclaration->notEmpty() then      self.initExpressionFor.namedValueDeclaration.getNamedValuesInScope()    else      if self.expressionStatement->notEmpty() then        self.expressionStatement.getNamedValuesInScope()      else        if self.conditional->notEmpty() then          if self.conditional.oclIsKindOf(behavioral::actions::ConditionalStatement) then            self.conditional.oclAsType(behavioral::actions::ConditionalStatement).getNamedValuesInScope()          else            self.conditional.oclAsType(ConditionalExpression).getNamedValuesInScope()          endif        else          if self.argumentOf->notEmpty() and self.argumentOf.oclIsKindOf(behavioral::actions::StatementWithArgument) then            self.argumentOf.oclAsType(behavioral::actions::StatementWithArgument).getNamedValuesInScope()          else            -- add all variables in scope for owning expressions            let oe:Expression = self.getOwningExpression() in              if oe->isEmpty() then                Set{}              else                oe.getNamedValuesInScope()              endif          endif        endif      endif    endif  endif  )
@265#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#Expression#let objectBasedExpressions:Set(Expression)=self.objectBasedExpression->asSet() in  let argumentsOf:Set(Expression)=self.argumentOf->select(ao | ao.oclIsKindOf(Expression)).oclAsType(ExpressionWithArgument)->asSet() in  let equals:Set(Expression)=self.leftOfEquals->asSet()->union(self.rightOfEquals->asSet()) in  let blocksOfFunctionCallExpression:Set(Expression)=self.blockOfFunctionCallExpression->asSet() in  let signatureCalls:Set(Expression)=self.usedAsArgumentInSignatureCall->asSet() in  let creationExpression:Set(Expression)=if self.oclIsKindOf(MethodCallExpression) then    self.oclAsType(MethodCallExpression).creationExpression->asSet()  else    Set{}  endif in  let ternary:Set(Expression)=self.trueOfTernary->asSet()->union(self.falseOfTernary->asSet()) in  let conditional:Set(Expression)=if self.conditional->notEmpty() and self.conditional.oclIsKindOf(ConditionalExpression) then    self.conditional.oclAsType(ConditionalExpression)->asSet()  else    Set{}  endif in  let replace:Set(Expression)=self.withOfReplace->asSet()->union(self.navigationStep.replace->asSet()) in  let oqlQuery:Set(Expression)=self.conditionOfOqlQuery->asSet()->union(self.fromClause.fromClauseOfOqlQuery->asSet()) in  let selection:Set(Expression)=self.selection->asSet() in  let objectLiteral:Set(Expression)=self.valueInit.objectLiteral->asSet() in  let iterator:Set(Expression)=self.inIterator->asSet() in  let collectionExpression:Set(Expression)=self.collectionExpression->asSet() in  let all:Set(Expression)=self.all->asSet() in  let valueInitInObjectLiteral:Set(Expression)=self.valueInit.objectLiteral->asSet() in  let dimensionExpression:Set(Expression)=self.cellSetOfDimensionExpression->asSet()->union(                                                                   self.factsOfDimensionExpression->asSet()) in  let groupByExpression:Set(Expression)=self.dimension.groupBy->asSet()->union(                                                                   self.mapExpressionOfGroupBy->asSet()) in  objectBasedExpressions->union(argumentsOf)->union(equals)->union(blocksOfFunctionCallExpression)->union(  signatureCalls)->union(creationExpression)->union(ternary)->union(conditional)->union(replace)->union(  oqlQuery)->union(selection)->union(objectLiteral)->union(iterator)->union(collectionExpression)->union(  all)->union(valueInitInObjectLiteral)->union(dimensionExpression)->union(groupByExpression)->any(true)
@266#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#Expression#let oe:Expression = self.getOwningExpression() in  if oe->notEmpty() then    oe.getOwningClass()  else    if self.expressionStatement->notEmpty() then      self.expressionStatement.getOwningClass()    else      if self.conditional->notEmpty() and self.conditional.oclIsKindOf(behavioral::actions::Statement) then        self.conditional.oclAsType(behavioral::actions::ConditionalStatement).getOwningClass()      else        if self.argumentOf->notEmpty() and self.argumentOf.oclIsKindOf(behavioral::actions::StatementWithArgument) then          self.argumentOf.oclAsType(behavioral::actions::StatementWithArgument).getOwningClass()        else          if self.initExpressionFor.namedValueDeclaration->notEmpty() then            self.initExpressionFor.namedValueDeclaration.getOwningClass()          else            null          endif        endif      endif    endif  endif
@267#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#VariableExpressionType#VariableExpression#self.getType().conformsTo(self.variable.getType())
@268#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ObjectMustSupportOperation#MethodCallExpression#self.object.getType().getInnermost().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.object.getType().getInnermost().oclAsType(data::classes::ClassTypeDefinition).clazz.conformsTo(self.methodSignature.owner.oclAsType(data::classes::SapClass))
@269#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#OutputMultiplicities#MethodCallExpression#(self.object.getType().isMany() implies (self.getType().isMany() and not self.getType().unique)) and  (self.object.getType().lowerMultiplicity = 0 implies (self.getType()->isEmpty() or self.getType().lowerMultiplicity = 0))
@270#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#CannotInstantiateAbstractClass#ObjectCreationExpression#not self.classToInstantiate.isAbstract()
@271#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ExpressionType#ObjectCreationExpression#self.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.getType().oclAsType(data::classes::ClassTypeDefinition).clazz = self.classToInstantiate and  self.getType().lowerMultiplicity = 1 and  self.getType().upperMultiplicity = 1
@272#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#HasToOwnTypeDefinition#ObjectCreationExpression#self.ownedTypeDefinition->notEmpty()
@273#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#CannotInstantiateValueClass#ObjectCreationExpression#not self.classToInstantiate.valueType
@274#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#NoDuplicateInitializers#ObjectCreationExpression#self.initializers->forAll( a, b | a <> b implies a.methodSignature <> b.methodSignature )
@275#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ResultType#FunctionCallExpression#let fstd:data::classes::FunctionSignatureTypeDefinition = self.calledBlock.getType().getInnermost().oclAsType(data::classes::FunctionSignatureTypeDefinition) in  if fstd.isMany() then    -- calling multiple functions; test is somewhat fuzzy because it doesn't test condormance of nesting structure exactly    self.getType().isMany() and not self.getType().unique and    fstd.signature.output.getInnermost().conformsTo(self.getType().getInnermost()) and    (fstd.lowerMultiplicity = 0 implies (self.getType()->isEmpty() or self.getType().lowerMultiplicity = 0))  else    -- calling a single function    fstd.signature.output.conformsTo(self.getType()) and     (fstd.lowerMultiplicity = 0 implies (self.getType()->isEmpty() or self.getType().lowerMultiplicity = 0))  endif
@276#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#CalledBlockMustBeFunction#FunctionCallExpression#self.calledBlock.getType().getInnermost().oclIsKindOf(data::classes::FunctionSignatureTypeDefinition)
@277#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#documentation#Equals#compares two or more values/objects. Entity type instances are compared based on their identity. Value type instances are compared by their value. The type of an Equals expression is Boolean.The getType() implementation can only infer the type once TypeDefinition is a value type, values of which can be constructed in an OCL expression.
@278#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ConformaceOneWayOrAnother#Equals#self.left.getType().conformsTo(self.right.getType()) or  self.right.getType().conformsTo(self.left.getType())
@279#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ObjectTypeMustMatch#AssociationEndNavigationExpression#self.object.getType().conformsToIgnoringMultiplicity(self.toEnd.otherEnd().type)
@280#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ResultType#AssociationEndNavigationExpression#self.getType() = self.toEnd.type
@281#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#EndMustBeNavigable#AssociationEndNavigationExpression#self.toEnd.navigable
@282#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ParametersTypesMustMatchSignatureParametersTypes#SignatureCallExpression#let numberOfMandatoryParameters:Integer =    self.getSignature().input->select(p|p.defaultValue->isEmpty())->size()  in  self.parameters->size() >= numberOfMandatoryParameters and  self.parameters->size() <= self.getSignature().input->size() and  self.parameters->forAll(parameter |    parameter.getType().conformsTo(self.getSignature().input->at(self.parameters->indexOf(parameter)).getType()) )
@283#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#CallTypeMustMatchSignatureOutput#SignatureCallExpression#if self.getSignature().output.oclIsUndefined() then        self.getType().oclIsUndefined()    else         if self.getMultiplicityOfCallTarget().isMany() and self.getSignature().output.isMany() then            let ntd:data::classes::NestedTypeDefinition = self.getType().oclAsType(data::classes::NestedTypeDefinition) in                self.getType().oclIsKindOf(data::classes::NestedTypeDefinition) and                 ntd.unique = false and                ntd.ordered = self.getMultiplicityOfCallTarget().ordered and                ntd.lowerMultiplicity = self.getMultiplicityOfCallTarget().lowerMultiplicity and                ntd.upperMultiplicity = self.getMultiplicityOfCallTarget().upperMultiplicity and                self.getSignature().output.conformsTo(ntd.type)        else            let target:data::classes::Multiplicity = self.getMultiplicityOfCallTarget() in            let output:data::classes::TypeDefinition = self.getSignature().output in                 ( output.isMany() implies self.getType().unique = output.unique ) and                ( ( output.isMany() or target.isMany() ) implies ( self.getType().ordered = (output.ordered or target.ordered) ) ) and                ( self.getType().lowerMultiplicity = (output.lowerMultiplicity * target.lowerMultiplicity)) and                ( self.getType().upperMultiplicity = (if output.isMany() or target.isMany() then                                                         -1                                                     else                                                         output.upperMultiplicity * target.upperMultiplicity                                                     endif)) and                self.getType().conformsToIgnoringMultiplicity(output)        endif    endif
@284#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#SignatureCallExpression#if self.oclIsKindOf(FunctionCallExpression) then    self.oclAsType(FunctionCallExpression).calledBlock->collect(getType().getInnermost().oclAsType(data::classes::FunctionSignatureTypeDefinition).signature)->any(true)  else    self.oclAsType(MethodCallExpression).methodSignature  endif
@285#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#SignatureCallExpression#if self.oclIsKindOf(FunctionCallExpression) then      self.oclAsType(FunctionCallExpression).calledBlock.getType()  else      self.oclAsType(MethodCallExpression).object.getType()  endif
@286#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#documentation#ObjectCount#Computes the Number 1 for single objects, and the number of objects in a multi-valued object otherwise.Type inference in getType() can be done once TypeDefinition is a value type that can be constructed in OCL.
@287#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#TypeIsNumber#ObjectCount#self.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Number'
@288#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#MultiplicityIsOne#ObjectCount#self.getType().upperMultiplicity = 1 and  self.getType().lowerMultiplicity = 1
@289#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#SourceObjectIsOfValueType#Replace#self.object.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.object.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.valueType
@290#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#WithTypeConformsToLastStepsType#Replace#self.with.getType().conformsTo(self.steps->at(self.steps->size()).to.type)
@291#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#FromEndAttachesToOutputOfPreviousStep#NavigationStep#let i:Integer = self.replace.steps->indexOf(self) in  let t:data::classes::ClassTypeDefinition = if i=1 then      self.replace.object.getType().oclAsType(data::classes::ClassTypeDefinition)    else      self.replace.steps->at(-1 + i).to.type    endif  in  self.to.otherEnd().type.clazz.conformsTo(t.clazz)
@292#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#FilterFunctionExpressionHasFunctionType#NavigationStep#self.filterFunction->notEmpty() implies self.filterFunction.getType().oclIsKindOf(data::classes::FunctionSignatureTypeDefinition)
@293#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#FromEndMustBeEqualityRelevant#NavigationStep#to.otherEnd().contributesToEquality
@294#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#IsOrdered#Head#self.object.getType().ordered
@295#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#IsOrdered#Tail#self.object.getType().ordered
@296#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ConditionMustBeBoolean#Conditional#self.condition.getType().upperMultiplicity = 1 and  self.condition.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.condition.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Boolean'
@297#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#TrueAndFalseExprsConformToResultType#Ternary#self.trueExpr.getType().conformsTo(self.getType()) or  self.falseExpr.getType().conformsTo(self.getType())
@298#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ContentEqualsOnlyForEntities#ContentEquals#self.left.getType().getInnermost().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.right.getType().getInnermost().oclIsKindOf(data::classes::ClassTypeDefinition) and  not self.left.getType().getInnermost().oclAsType(data::classes::ClassTypeDefinition).clazz.valueType and  not self.right.getType().getInnermost().oclAsType(data::classes::ClassTypeDefinition).clazz.valueType
@299#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ObjectTypeMustConformToFunctionArgument#Map#let fstd:data::classes::TypeDefinition = self.argument.getType() in  let sig:data::classes::Signature = fstd.oclAsType(data::classes::FunctionSignatureTypeDefinition).signature in  let t:data::classes::TypeDefinition = self.object.getType() in  let argT:data::classes::TypeDefinition = sig.input->at(1).getType() in  -- if multiplicities match including multiplicities, that's ok  t.conformsTo(argT) or  -- otherwise, pick single multiplicity from object and try again  t.conformsToIgnoringMultiplicity(argT) or  (t.oclIsKindOf(data::classes::NestedTypeDefinition) and t.oclAsType(data::classes::NestedTypeDefinition).type.conformsTo(argT))
@300#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ArgumentMustBeSingleArgumentFunctionWithNonVoidOutput#Map#let fstd:data::classes::TypeDefinition = self.argument.getType() in  fstd.oclIsKindOf(data::classes::FunctionSignatureTypeDefinition) and  (let sig:data::classes::Signature = fstd.oclAsType(data::classes::FunctionSignatureTypeDefinition).signature in  (sig.output->notEmpty() and  sig.input->size() = 1))
@301#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#MapFunctionMustBeSideEffectFree#Map#self.argument.getType().oclAsType(data::classes::FunctionSignatureTypeDefinition).signature.sideEffectFree
@302#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ObjectLiteralsForValueClassesOnly#ObjectLiteral#self.valueClass.valueType
@303#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ObjectLiteralPropertiesOnRightClass#ObjectLiteral#self.propertyValues->forAll(vi|vi.forEnd.otherEnd().type.clazz = self.valueClass)
@304#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ValuesMustBeProvidedForAllMandatoryProperties#ObjectLiteral#self.valueClass.getEqualityRelevantAssociationEnds()->select(ae | ae.otherEnd().type.lowerMultiplicity > 0)->forAll(ae |      self.propertyValues->exists(pv | pv.forEnd.otherEnd() = ae))
@305#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#ObjectLiteral#self.valueClass = o.valueClass and  self.propertyValues->size() = o.propertyValues->size() and  self.propertyValues->forAll(pv | o.propertyValues->exists(opv | opv.forEnd = pv.forEnd and opv.value.evaluatesToEqualAs(pv.value)))
@306#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ValueInitTypeConforms#ValueInit#self.value.getType().conformsTo(self.forEnd.type)
@307#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#AccumulatorTypeEqualsExpressionType#Iterate#self.accumulator->notEmpty() implies  (self.accumulator.ownedTypeDefinition->notEmpty() implies     self.accumulator.ownedTypeDefinition.conformsTo(self.iteratorExpression.getType()))
@308#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#SourceMustBeOrdered#WithPosition#self.argument.getType().ordered
@309#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ArgumentTypeMustConformToCollectionExpressionType#CollectionExpressionWithArgument#let snl : Integer = source.getType().getNestingLevel() in let anl : Integer = argument.getType().getNestingLevel() in    if snl = anl then      source.getType().conformsToIgnoringMultiplicity(argument.getType())    else      if snl = (anl + 1) then        source.getType().oclAsType(data::classes::NestedTypeDefinition).type.conformsToIgnoringMultiplicity(argument.getType())      else        if (snl + 1) = anl then          source.getType().conformsToIgnoringMultiplicity(argument.getType().oclAsType(data::classes::NestedTypeDefinition).type)        else          false        endif      endif    endif
@310#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#TypeMustBeSignatureTypeDefinitionWithImplementation#AnonymousFunctionExpr#self.getType().oclIsKindOf(data::classes::FunctionSignatureTypeDefinition) and  self.getType().oclAsType(data::classes::FunctionSignatureTypeDefinition).signature.oclAsType(data::classes::FunctionSignature).implementation->notEmpty()
@311#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#HasToOwnSignatureTypeDefinition#AnonymousFunctionExpr#self.ownedTypeDefinition->notEmpty()
@312#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#SignatureMustBeFunctionSignature#AnonymousFunctionExpr#self.ownedTypeDefinition.oclAsType(data::classes::FunctionSignatureTypeDefinition).signature.oclIsKindOf(data::classes::FunctionSignature)
@313#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#AnonymousFunctionExpr#self.ownedTypeDefinition.oclAsType(data::classes::FunctionSignatureTypeDefinition).signature.oclAsType(data::classes::FunctionSignature).implementation
@314#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#documentation#FunctionFromMethodExpr#The getType() implementation for this expression type could infer the function type definition from the method signature. However, this would require constructing such a value from within OCL.
@315#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#SignatureAvailableOnObjectsClass#FunctionFromMethodExpr#self.object.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.object.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.conformsTo(self.method.owner.oclAsType(data::classes::SapClass))
@316#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#MethodSignatureConformsToFunctionSignature#FunctionFromMethodExpr#self.getType().oclIsKindOf(data::classes::FunctionSignatureTypeDefinition) and    self.method.conformsTo(self.getType().oclAsType(data::classes::FunctionSignatureTypeDefinition).signature)
@317#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ConditionMustBeSideEffectFree#Selection#self.selectionExpr.isSideEffectFree()
@318#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ConditionMustBeBooleanOrNumeric#Selection#self.selectionExpr.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and (    (      self.selectionExpr.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Boolean' and      self.selectionExpr.getType().upperMultiplicity = 1    )    or    (      self.selectionExpr.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Number'       and       self.object.getType().ordered    )  )
@319#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ConditionMustBeBoolean#OqlQuery#self.condition->notEmpty() implies    (self.condition.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and     self.condition.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name='Boolean')
@320#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#WhereClauseMustBeSideEffectFree#OqlQuery#self.condition->forAll(c | c.isSideEffectFree())
@321#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#HasValueType#OqlQuery#self.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and self.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.valueType
@322#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#SelectedIteratorsMustHaveClassTypeDefinitionAsType#OqlQuery#self.selected->forAll(i | i.getType().oclIsKindOf(data::classes::ClassTypeDefinition))
@323#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#FromClausesMustBeSideEffectFree#FromClause#self.fromExpression.isSideEffectFree()
@324#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#BlockSignatureMustMatch#Dimension#self.characteristicFunction.input->size() = 1 and   self.cellSet.factsType.conformsToIgnoringMultiplicity(self.characteristicFunction.input->at(1).getType())    -- Add the following again once we have NestedTypeDefinitions under control...    -- and  self.characteristicFunction.input->at(1).getType().upperMultiplicity = 1
@325#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#CharacteristicFunctionMustNotBeAbstract#Dimension#not self.characteristicFunction.isAbstract()
@326#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ValueFunctionSignatureMustMatch#CellSet#self.valueFunction->notEmpty() implies    (self.valueFunction.input->size() = 1 and     self.factsType.conformsToIgnoringMultiplicity(self.valueFunction.input->at(1).getType())    -- Add the following again once we have NestedTypeDefinitions under control...    -- and  self.valueFunction.input->at(1).getType().upperMultiplicity = 1    )
@327#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#AggregationFunctionSignatureMustMatch#CellSet#self.aggregationFunction.input->size() = 1 and   self.keyFigureType().conformsTo(self.aggregationFunction.input->at(1).getType())
@328#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#AggregationFunctionMustNotBeAbstract#CellSet#not self.aggregationFunction.isAbstract()
@329#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#ValueFunctionMustNotBeAbstract#CellSet#self.valueFunction->forAll(vf | not vf.isAbstract())
@330#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#CellSet#if self.valueFunction->isEmpty() then    self.factsType  else    self.valueFunction.output  endif
@331#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#CellSet#self.aggregationFunction.output
@332#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#CellSet#self.dimensions->forAll(d|d.characteristicFunction.sideEffectFree) and  (self.valueFunction->notEmpty() implies self.valueFunction.sideEffectFree) and  self.aggregationFunction.sideEffectFree
@333#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#FactsTypeConformsToFirstFunctionParameterType#DimensionExpression#self.facts.getType().conformsTo(self.dimensionParameter.ownerSignature.input->at(1).getType())
@334#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#CellSetExpressionMustHaveFunctionSignatureType#DimensionExpression#self.cellSet.getType().oclIsKindOf(data::classes::FunctionSignatureTypeDefinition)
@335#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#DimensionParameterIsNotFirst#DimensionExpression#self.dimensionParameter.ownerSignature.input->indexOf(self.dimensionParameter) > 1
@336#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#GroupedFactsIteratorMustExistIfMapExpressionExists#GroupBy#self.mapExpression->notEmpty() implies self.groupedFacts->notEmpty()
@337#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#MapExpressionMustBeSideEffectFree#GroupBy#if self.mapExpression->notEmpty() then    self.mapExpression.isSideEffectFree()  else    true  endif
@338#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#GroupByIteratorsMustHaveDistinctNames#GroupBy#self.dimensions.iterator->asSet()->union(self.groupedFacts->asSet())->union(self.fact->asSet())->forAll(i, j | i<>j implies i.name<>j.name)
@339#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#DimensionExpressionMustBeSideEffectFree#DimensionDefinition#self.expression.isSideEffectFree()
@340#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/dataaccess.ecore#body#DimensionDefinition#self.iterator.name
@341#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/integration.ecore#FunctionExpressionHasFunctionType#Binding#self.function.getType().oclIsKindOf(data::classes::FunctionSignatureTypeDefinition)
@342#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/modelmanagement.ecore#DistinctClassNamesPerPackage#Package#self.classes->forAll( i, j | i <> j implies i.name <> j.name )
@343#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/modelmanagement.ecore#NoCyclicOwnership#Package#not self.hasOwnershipCycle(Set{})
@344#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/modelmanagement.ecore#body#Package#if pks->includes(self) then    true  else    if self.owner->isEmpty() then      false    else      if self.owner.oclIsKindOf(Package) then        self.owner.oclAsType(Package).hasOwnershipCycle(pks->including(self))      else        false      endif    endif  endif
@345#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/persistence.ecore#CanStoreOnlyEntities#StatementWithEntityArgument#if self.argument.getType().oclIsKindOf(data::classes::ClassTypeDefinition) then    not self.argument.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.valueType  else    false  endif
@346#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/persistence.ecore#MustBeEntityClass#All#not self.ofClass.valueType
@347#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/persistence.ecore#ExpressionMustBeSnapshotOrTimePoint#All#if self.snapshot = SnapshotSelection::SPECIFIED then    self.snapshotIdentifier.getType().upperMultiplicity = 1 and    self.snapshotIdentifier.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and   Set{'Snapshot', 'TimePoint'}->includes(self.snapshotIdentifier.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name)  else    true  endif
@348#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/persistence.ecore#ReturnsSnapshot#Commit#self.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and  self.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Snapshot'
@349#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/persistence.ecore#SourceObjectIsOfClassType#Snapshot#self.object.getType().oclIsKindOf(data::classes::ClassTypeDefinition)
@350#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.impactanalyzer.testmodel.ngpm\model/ui.ecore#expressionMustBeSideEffectFree#StringTemplate#self.expressions->forAll( e | e.isSideEffectFree() )
@351#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.completeocltutorial\model/EcoreTestFile.ecore#derivation#BadClass#true
@352#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#SufficientCopies#Book#library.loans->select((book = self))->size() <= copies
@353#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#body#Book#loans->size() < copies
@354#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#derivation#Book#library.loans->select(book = self)
@355#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#AtMostTwoLoans#Member#loans->size() <= 2
@356#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#UniqueLoans#Member#loans->isUnique(book)
@357#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#derivation#Member#library.loans->select(member = self)
@358#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.project.oclinecoretutorial\model/Tutorial.ecore#derivation#Member#loans->collect(book)
@359#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#result_pins#AcceptCallAction#let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() inresult->size() = parameter->size() andSequence{1..result->size()}->forAll(i | parameter->at(i).type.conformsTo(result->at(i).type) and parameter->at(i).isOrdered = result->at(i).isOrdered andparameter->at(i).compatibleWith(result->at(i)))
@360#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#trigger_call_event#AcceptCallAction#trigger->size()=1 andtrigger->asSequence()->first().event.oclIsKindOf(CallEvent)
@361#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#unmarshall#AcceptCallAction#isUnmarshall = true
@362#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#AcceptCallAction#An AcceptCallAction is an AcceptEventAction that handles the receipt of a synchronous call request. In addition to the values from the Operation input parameters, the Action produces an output that is needed later to supply the information to the ReplyAction necessary to return control to the caller. An AcceptCallAction is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent ReplyAction will complete immediately with no effect.let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() inresult->size() = parameter->size() andSequence{1..result->size()}->forAll(i | parameter->at(i).type.conformsTo(result->at(i).type) and parameter->at(i).isOrdered = result->at(i).isOrdered andparameter->at(i).compatibleWith(result->at(i)))trigger->size()=1 andtrigger->asSequence()->first().event.oclIsKindOf(CallEvent)isUnmarshall = true<p>From package UML::Actions.</p>
@363#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_output_pin#AcceptEventAction#not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
@364#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_input_pins#AcceptEventAction#input->size() = 0
@365#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_output_pins#AcceptEventAction#(self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
@366#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#unmarshall_signal_events#AcceptEventAction#isUnmarshall and self.oclIsTypeOf(AcceptEventAction) impliestrigger->size()=1 andtrigger->asSequence()->first().event.oclIsKindOf(SignalEvent) andlet attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() inattribute->size()>0 and result->size() = attribute->size() andSequence{1..result->size()}->forAll(i | result->at(i).type = attribute->at(i).type and result->at(i).isOrdered = attribute->at(i).isOrdered andresult->at(i).includesMultiplicity(attribute->at(i)))
@367#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#conforming_type#AcceptEventAction#not isUnmarshall implies result->isEmpty() orlet type: Type = result->first().type intype=null or (trigger->forAll(event.oclIsKindOf(SignalEvent)) and  trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))
@368#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#AcceptEventAction#An AcceptEventAction is an Action that waits for the occurrence of one or more specific Events.not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)input->size() = 0(self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0isUnmarshall and self.oclIsTypeOf(AcceptEventAction) impliestrigger->size()=1 andtrigger->asSequence()->first().event.oclIsKindOf(SignalEvent) andlet attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() inattribute->size()>0 and result->size() = attribute->size() andSequence{1..result->size()}->forAll(i | result->at(i).type = attribute->at(i).type and result->at(i).isOrdered = attribute->at(i).isOrdered andresult->at(i).includesMultiplicity(attribute->at(i)))not isUnmarshall implies result->isEmpty() orlet type: Type = result->first().type intype=null or (trigger->forAll(event.oclIsKindOf(SignalEvent)) and  trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))<p>From package UML::Actions.</p>
@369#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Action#result = (self->asSet())
@370#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Action#result = (input.oclAsType(Pin)->asSet()->union(output->asSet()))
@371#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Action#result = (if inStructuredNode<>null then inStructuredNode.containingBehavior() else if activity<>null then activityelse interaction endifendif)
@372#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Action#result = (let behavior: Behavior = self.containingBehavior() inif behavior=null then nullelse if behavior._'context' = null then behaviorelse behavior._'context'endifendif)
@373#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#action_referenced#ActionExecutionSpecification#(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) andlet parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction
@374#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ActionExecutionSpecification#An ActionExecutionSpecification is a kind of ExecutionSpecification representing the execution of an Action.(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) andlet parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction<p>From package UML::Interactions.</p>
@375#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input_pin#ActionInputPin#fromAction.input->forAll(oclIsKindOf(ActionInputPin))
@376#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_output_pin#ActionInputPin#fromAction.output->size() = 1
@377#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_control_or_object_flow#ActionInputPin#fromAction.incoming->union(outgoing)->isEmpty() andfromAction.input.incoming->isEmpty() andfromAction.output.outgoing->isEmpty()
@378#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ActionInputPin#An ActionInputPin is a kind of InputPin that executes an Action to determine the values to input to another Action.fromAction.input->forAll(oclIsKindOf(ActionInputPin))fromAction.output->size() = 1fromAction.incoming->union(outgoing)->isEmpty() andfromAction.input.incoming->isEmpty() andfromAction.output.outgoing->isEmpty()<p>From package UML::Actions.</p>
@379#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#maximum_one_parameter_node#Activity#ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
@380#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#maximum_two_parameter_nodes#Activity#ownedParameter->forAll(p | p.direction = ParameterDirectionKind::inout implieslet associatedNodes : Set(ActivityNode) = node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in   associatedNodes->size()=2 and  associatedNodes->select(incoming->notEmpty())->size()<=1 and  associatedNodes->select(outgoing->notEmpty())->size()<=1)
@381#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Activity#An Activity is the specification of parameterized Behavior as the coordinated sequencing of subordinate units.ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)ownedParameter->forAll(p | p.direction = ParameterDirectionKind::inout implieslet associatedNodes : Set(ActivityNode) = node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in   associatedNodes->size()=2 and  associatedNodes->select(incoming->notEmpty())->size()<=1 and  associatedNodes->select(outgoing->notEmpty())->size()<=1)<p>From package UML::Activities.</p>
@382#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ActivityEdge#result = (redefiningElement.oclIsKindOf(ActivityEdge))
@383#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#source_and_target#ActivityEdge#activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
@384#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ActivityEdge#An ActivityEdge is an abstract class for directed connections between two ActivityNodes.activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity<p>From package UML::Activities.</p>
@385#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#nodes_and_edges#ActivityGroup#containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
@386#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_contained#ActivityGroup#subgroup->closure(subgroup).containedNode->excludesAll(containedNode) andsuperGroup->closure(superGroup).containedNode->excludesAll(containedNode) and subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)
@387#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ActivityGroup#ActivityGroup is an abstract class for defining sets of ActivityNodes and ActivityEdges in an Activity.containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())subgroup->closure(subgroup).containedNode->excludesAll(containedNode) andsuperGroup->closure(superGroup).containedNode->excludesAll(containedNode) and subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)<p>From package UML::Activities.</p>
@388#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ActivityGroup#result = (if superGroup<>null then superGroup.containingActivity()else inActivityendif)
@389#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ActivityNode#result = (redefiningElement.oclIsKindOf(ActivityNode))
@390#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ActivityNode#result = (if inStructuredNode<>null then inStructuredNode.containingActivity()else activityendif)
@391#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_outgoing_edges#ActivityParameterNode#(incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
@392#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_parameters#ActivityParameterNode#activity.ownedParameter->includes(parameter)
@393#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_type#ActivityParameterNode#type = parameter.type
@394#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_incoming_edges#ActivityParameterNode#(outgoing->notEmpty() and incoming->isEmpty()) implies (parameter.direction = ParameterDirectionKind::_'in' or  parameter.direction = ParameterDirectionKind::inout)
@395#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_edges#ActivityParameterNode#incoming->isEmpty() or outgoing->isEmpty()
@396#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ActivityParameterNode#An ActivityParameterNode is an ObjectNode for accepting values from the input Parameters or providing values to the output Parameters of an Activity.(incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)activity.ownedParameter->includes(parameter)type = parameter.type(outgoing->notEmpty() and incoming->isEmpty()) implies (parameter.direction = ParameterDirectionKind::_'in' or  parameter.direction = ParameterDirectionKind::inout)incoming->isEmpty() or outgoing->isEmpty()<p>From package UML::Activities.</p>
@397#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#represents_classifier#ActivityPartition#(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
@398#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#represents_property_and_is_contained#ActivityPartition#(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
@399#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#represents_property#ActivityPartition#(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
@400#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#dimension_not_contained#ActivityPartition#isDimension implies superPartition->isEmpty()
@401#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ActivityPartition#An ActivityPartition is a kind of ActivityGroup for identifying ActivityNodes that have some characteristic in common.(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))isDimension implies superPartition->isEmpty()<p>From package UML::Activities.</p>
@402#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#associations#Actor#Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
@403#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#must_have_name#Actor#name->notEmpty()
@404#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Actor#An Actor specifies a role played by a user or any other system that interacts with the subject.Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )name->notEmpty()<p>From package UML::UseCases.</p>
@405#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#required_value#AddStructuralFeatureValueAction#value<>null
@406#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#insertAt_pin#AddStructuralFeatureValueAction#if not structuralFeature.isOrdered then insertAt = nullelse   not isReplaceAll implies  insertAt<>null and   insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))endif
@407#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#required_value#AddVariableValueAction#value <> null
@408#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#insertAt_pin#AddVariableValueAction#if not variable.isOrdered then insertAt = nullelse   not isReplaceAll implies  insertAt<>null and   insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))endif
@409#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#specialized_end_number#Association#parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
@410#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#specialized_end_types#Association#Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
@411#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#binary_associations#Association#memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
@412#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#association_ends#Association#memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
@413#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#ends_must_be_typed#Association#memberEnd->forAll(type->notEmpty())
@414#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Association#A link is a tuple of values that refer to typed objects.  An Association classifies a set of links, each of which is an instance of the Association.  Each value in the link refers to an instance of the type of the corresponding end of the Association.parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)memberEnd->forAll(type->notEmpty())<p>From package UML::StructuredClassifiers.</p>
@415#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Association#result = (memberEnd->collect(type)->asSet())
@416#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#cannot_be_defined#AssociationClass#self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
@417#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#disjoint_attributes_ends#AssociationClass#ownedAttribute->intersection(ownedEnd)->isEmpty()
@418#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#AssociationClass#A model element that has both Association and Class properties. An AssociationClass can be seen as an Association that also has Class properties, or as a Class that also has Association properties. It not only connects a set of Classifiers but also defines a set of Features that belong to the Association itself and not to any of the associated Classifiers.self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)ownedAttribute->intersection(ownedEnd)->isEmpty()<p>From package UML::StructuredClassifiers.</p>
@419#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#most_one_behavior#Behavior#specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1
@420#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#parameters_match#Behavior#specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
@421#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#feature_of_context_classifier#Behavior#_'context'.feature->includes(specification)
@422#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Behavior#Behavior is a specification of how its context BehavioredClassifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1specification <> null implies ownedParameter->size() = specification.ownedParameter->size()_'context'.feature->includes(specification)<p>From package UML::CommonBehavior.</p>
@423#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Behavior#result = (if nestingClass <> null then    nullelse    let b:BehavioredClassifier = self.behavioredClassifier(self.owner) in    if b.oclIsKindOf(Behavior) and b.oclAsType(Behavior)._'context' <> null then         b.oclAsType(Behavior)._'context'    else         b     endifendif        )
@424#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Behavior#result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))
@425#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Behavior#result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))
@426#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#BehavioralFeature#result = ((n.oclIsKindOf(BehavioralFeature) and ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()) implies  Set{self}->including(n.oclAsType(BehavioralFeature))->isUnique(ownedParameter->collect(p|  Tuple { name=p.name, type=p.type,effect=p.effect,direction=p.direction,isException=p.isException,              isStream=p.isStream,isOrdered=p.isOrdered,isUnique=p.isUnique,lower=p.lower, upper=p.upper }))  )
@427#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#BehavioralFeature#The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they must have different signatures.<p>From package UML::Classification.</p>
@428#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#abstract_no_method#BehavioralFeature#isAbstract implies method->isEmpty()
@429#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#BehavioralFeature#A BehavioralFeature is a feature of a Classifier that specifies an aspect of the behavior of its instances.  A BehavioralFeature is implemented (realized) by a Behavior. A BehavioralFeature specifies that a Classifier will respond to a designated request by invoking its implementing method.isAbstract implies method->isEmpty()<p>From package UML::Classification.</p>
@430#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#BehavioralFeature#result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))
@431#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#BehavioralFeature#result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))
@432#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#class_behavior#BehavioredClassifier#classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
@433#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#BehavioredClassifier#A BehavioredClassifier may have InterfaceRealizations, and owns a set of Behaviors one of which may specify the behavior of the BehavioredClassifier itself.classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()<p>From package UML::SimpleClassifiers.</p>
@434#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#number_of_arguments#BroadcastSignalAction#argument->size() = signal.allAttributes()->size()
@435#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_ordering_multiplicity#BroadcastSignalAction#let attribute: OrderedSet(Property) = signal.allAttributes() inSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(attribute->at(i).type) and argument->at(i).isOrdered = attribute->at(i).isOrdered andargument->at(i).compatibleWith(attribute->at(i)))
@436#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_onport#BroadcastSignalAction#onPort=null
@437#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#BroadcastSignalAction#A BroadcastSignalAction is an InvocationAction that transmits a Signal instance to all the potential target objects in the system. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instances are sent out and cannot receive reply values.argument->size() = signal.allAttributes()->size()let attribute: OrderedSet(Property) = signal.allAttributes() inSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(attribute->at(i).type) and argument->at(i).isOrdered = attribute->at(i).isOrdered andargument->at(i).compatibleWith(attribute->at(i)))onPort=null<p>From package UML::Actions.</p>
@438#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#argument_pins#CallAction#let parameter: OrderedSet(Parameter) = self.inputParameters() inargument->size() = parameter->size() andSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(parameter->at(i).type) and argument->at(i).isOrdered = parameter->at(i).isOrdered andargument->at(i).compatibleWith(parameter->at(i)))
@439#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#result_pins#CallAction#let parameter: OrderedSet(Parameter) = self.outputParameters() inresult->size() = parameter->size() andSequence{1..result->size()}->forAll(i | parameter->at(i).type.conformsTo(result->at(i).type) and parameter->at(i).isOrdered = result->at(i).isOrdered andparameter->at(i).compatibleWith(result->at(i)))
@440#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#synchronous_call#CallAction#result->notEmpty() implies isSynchronous
@441#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#CallAction#CallAction is an abstract class for Actions that invoke a Behavior with given argument values and (if the invocation is synchronous) receive reply values.let parameter: OrderedSet(Parameter) = self.inputParameters() inargument->size() = parameter->size() andSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(parameter->at(i).type) and argument->at(i).isOrdered = parameter->at(i).isOrdered andargument->at(i).compatibleWith(parameter->at(i)))let parameter: OrderedSet(Parameter) = self.outputParameters() inresult->size() = parameter->size() andSequence{1..result->size()}->forAll(i | parameter->at(i).type.conformsTo(result->at(i).type) and parameter->at(i).isOrdered = result->at(i).isOrdered andparameter->at(i).compatibleWith(result->at(i)))result->notEmpty() implies isSynchronous<p>From package UML::Actions.</p>
@442#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#CallBehaviorAction#result = (behavior.outputParameters())
@443#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#CallBehaviorAction#result = (behavior.inputParameters())
@444#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_onport#CallBehaviorAction#onPort=null
@445#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#CallOperationAction#result = (operation.outputParameters())
@446#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#CallOperationAction#result = (operation.inputParameters())
@447#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_target_pin#CallOperationAction#if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
@448#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#CallOperationAction#A CallOperationAction is a CallAction that transmits an Operation call request to the target object, where it may cause the invocation of associated Behavior. The argument values of the CallOperationAction are passed on the input Parameters of the Operation. If call is synchronous, the execution of the CallOperationAction waits until the execution of the invoked Operation completes and the values of output Parameters of the Operation are placed on the result OutputPins. If the call is asynchronous, the CallOperationAction completes immediately and no results values can be provided.if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif<p>From package UML::Actions.</p>
@449#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#passive_class#Class#not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
@450#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Class#A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports.not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)<p>From package UML::StructuredClassifiers.</p>
@451#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Class#result = (Extension.allInstances()->select(ext |   let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in  endTypes->includes(self) or endTypes.allParents()->includes(self) ))
@452#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Class#result = (self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet())
@453#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (if other.oclIsKindOf(Classifier) then  let otherClassifier : Classifier = other.oclAsType(Classifier) in    self = otherClassifier or allParents()->includes(otherClassifier)else  falseendif)
@454#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query conformsTo() gives true for a Classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.<p>From package UML::Classification.</p>
@455#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (ownedTemplateSignature <> null or general->exists(g | g.isTemplate()))
@456#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query isTemplate() returns whether this Classifier is actually a template.<p>From package UML::Classification.</p>
@457#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#specialize_type#Classifier#parents()->forAll(c | self.maySpecializeType(c))
@458#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#maps_to_generalization_set#Classifier#powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
@459#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#non_final_parents#Classifier#parents()->forAll(not isFinalSpecialization)
@460#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_cycles_in_generalization#Classifier#not allParents()->includes(self)
@461#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#A Classifier represents a classification of instances according to their Features.parents()->forAll(c | self.maySpecializeType(c))powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))parents()->forAll(not isFinalSpecialization)not allParents()->includes(self)<p>From package UML::Classification.</p>
@462#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (attribute->asSequence()->union(parents()->asSequence().allAttributes())->select(p | member->includes(p))->asOrderedSet())
@463#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (member->select(oclIsKindOf(Feature))->collect(oclAsType(Feature))->asSet())
@464#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query allFeatures() gives all of the Features in the namespace of the Classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.<p>From package UML::Classification.</p>
@465#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (parents()->union(parents()->collect(allParents())->asSet()))
@466#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.<p>From package UML::Classification.</p>
@467#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (directlyRealizedInterfaces()->union(self.allParents()->collect(directlyRealizedInterfaces()))->asSet())
@468#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (member->select(oclIsKindOf(StructuralFeature))->  collect(oclAsType(StructuralFeature))->   union(self.inherit(self.allParents()->collect(p | p.attribute)->asSet())->     collect(oclAsType(StructuralFeature)))->asSet())
@469#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (directlyUsedInterfaces()->union(self.allParents()->collect(directlyUsedInterfaces()))->asSet())
@470#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = ((clientDependency->  select(oclIsKindOf(Realization) and supplier->forAll(oclIsKindOf(Interface))))->      collect(supplier.oclAsType(Interface))->asSet())
@471#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = ((supplierDependency->  select(oclIsKindOf(Usage) and client->forAll(oclIsKindOf(Interface))))->    collect(client.oclAsType(Interface))->asSet())
@472#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (parents())
@473#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (n.visibility <> VisibilityKind::private)
@474#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a NamedElement is visible in the classifier. Non-private members are visible. It is only called when the argument is something owned by a parent.<p>From package UML::Classification.</p>
@475#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (inhs->reject(inh |  inh.oclIsKindOf(RedefinableElement) and  ownedMember->select(oclIsKindOf(RedefinableElement))->    select(redefinedElement->includes(inh.oclAsType(RedefinableElement)))       ->notEmpty()))
@476#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query inherit() defines how to inherit a set of elements passed as its argument.  It excludes redefined elements from the result.<p>From package UML::Classification.</p>
@477#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (member->select(m | c.hasVisibilityOf(m)))
@478#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a Classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.<p>From package UML::Classification.</p>
@479#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (inherit(parents()->collect(inheritableMembers(self))->asSet()))
@480#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (substitution.contract->includes(contract))
@481#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (self.oclIsKindOf(c.oclType()))
@482#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.<p>From package UML::Classification.</p>
@483#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Classifier#result = (generalization.general->asSet())
@484#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.<p>From package UML::Classification.</p>
@485#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_constraining_classifier#ClassifierTemplateParameter#allowSubstitutable implies constrainingClassifier->notEmpty()
@486#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#parametered_element_no_features#ClassifierTemplateParameter#parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
@487#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#matching_abstract#ClassifierTemplateParameter#(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)
@488#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#actual_is_classifier#ClassifierTemplateParameter# templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))
@489#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#constraining_classifiers_constrain_args#ClassifierTemplateParameter#templateParameterSubstitution.actual->forAll( a |  let arg : Classifier = a.oclAsType(Classifier) in    constrainingClassifier->forAll(      cc |           arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))      ))
@490#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#constraining_classifiers_constrain_parametered_element#ClassifierTemplateParameter#constrainingClassifier->forAll(     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc)))
@491#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ClassifierTemplateParameter#A ClassifierTemplateParameter exposes a Classifier as a formal template parameter.allowSubstitutable implies constrainingClassifier->notEmpty()parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract) templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))templateParameterSubstitution.actual->forAll( a |  let arg : Classifier = a.oclAsType(Classifier) in    constrainingClassifier->forAll(      cc |           arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))      ))constrainingClassifier->forAll(     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc)))<p>From package UML::Classification.</p>
@492#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body_output_pins#Clause#_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)
@493#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#decider_output#Clause#test.oclAsType(Action).allActions().output->includes(decider) anddecider.type = Boolean anddecider.is(1,1)
@494#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#test_and_body#Clause#test->intersection(_'body')->isEmpty()
@495#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Clause#A Clause is an Element that represents a single branch of a ConditionalNode, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates to true._'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)test.oclAsType(Action).allActions().output->includes(decider) anddecider.type = Boolean anddecider.is(1,1)test->intersection(_'body')->isEmpty()<p>From package UML::Actions.</p>
@496#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ClearAssociationAction#object.is(1,1)
@497#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_type#ClearAssociationAction#association.memberEnd->exists(self.object.type.conformsTo(type))
@498#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_result#ClearStructuralFeatureAction#result<>null implies result.type = object.type
@499#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_result#ClearStructuralFeatureAction#result<>null implies result.is(1,1)
@500#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#client_elements#CollaborationUse#roleBinding->collect(client)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.structuredClassifier = ce2.structuredClassifier)and  roleBinding->collect(supplier)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.collaboration = ce2.collaboration)
@501#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#every_role#CollaborationUse#type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
@502#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#connectors#CollaborationUse#type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))
@503#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#CollaborationUse#A CollaborationUse is used to specify the application of a pattern specified by a Collaboration to a specific situation.roleBinding->collect(client)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.structuredClassifier = ce2.structuredClassifier)and  roleBinding->collect(supplier)->forAll(ne1, ne2 |  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in      ce1.collaboration = ce2.collaboration)type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))<p>From package UML::StructuredClassifiers.</p>
@504#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#break#CombinedFragment#interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
@505#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#consider_and_ignore#CombinedFragment#((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
@506#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#opt_loop_break_neg#CombinedFragment#(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop orinteractionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert orinteractionOperator = InteractionOperatorKind::neg)implies operand->size()=1
@507#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#CombinedFragment#A CombinedFragment defines an expression of InteractionFragments. A CombinedFragment is defined by an interaction operator and corresponding InteractionOperands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner.interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop orinteractionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert orinteractionOperator = InteractionOperatorKind::neg)implies operand->size()=1<p>From package UML::Interactions.</p>
@508#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#association_ends#CommunicationPath#endType->forAll (oclIsKindOf(DeploymentTarget))
@509#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_nested_classifiers#Component#nestedClassifier->isEmpty()
@510#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_packaged_elements#Component#nestingClass <> null implies packagedElement->isEmpty()
@511#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Component#A Component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.  nestedClassifier->isEmpty()nestingClass <> null implies packagedElement->isEmpty()<p>From package UML::StructuredClassifiers.</p>
@512#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Component#result = (let ris : Set(Interface) = allRealizedInterfaces(),        realizingClassifiers : Set(Classifier) =  self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allRealizedInterfaces())),        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),        providedByPorts : Set(Interface) = ports.provided->asSet()in     ris->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet())
@513#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Component#result = (let uis : Set(Interface) = allUsedInterfaces(),        realizingClassifiers : Set(Classifier) = self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allUsedInterfaces())),        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),        usedByPorts : Set(Interface) = ports.required->asSet()in    uis->union(realizingClassifierInterfaces)->union(usedByPorts)->asSet())
@514#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ConditionalNode#result = (self->asSet())
@515#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#result_no_incoming#ConditionalNode#result.incoming->isEmpty()
@516#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_input_pins#ConditionalNode#input->isEmpty()
@517#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_clause_with_executable_node#ConditionalNode#node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | self.clause->select(test->union(_'body')->includes(n))->size()=1)
@518#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#matching_output_pins#ConditionalNode#clause->forAll(bodyOutput->size()=self.result->size() andSequence{1..self.result->size()}->forAll(i |bodyOutput->at(i).type.conformsTo(result->at(i).type) andbodyOutput->at(i).isOrdered = result->at(i).isOrdered andbodyOutput->at(i).isUnique = result->at(i).isUnique andbodyOutput->at(i).compatibleWith(result->at(i))))
@519#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#executable_nodes#ConditionalNode#clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)
@520#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#clause_no_predecessor#ConditionalNode#clause->closure(predecessorClause)->intersection(clause)->isEmpty()
@521#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ConditionalNode#A ConditionalNode is a StructuredActivityNode that chooses one among some number of alternative collections of ExecutableNodes to execute.result.incoming->isEmpty()input->isEmpty()node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | self.clause->select(test->union(_'body')->includes(n))->size()=1)clause->forAll(bodyOutput->size()=self.result->size() andSequence{1..self.result->size()}->forAll(i |bodyOutput->at(i).type.conformsTo(result->at(i).type) andbodyOutput->at(i).isOrdered = result->at(i).isOrdered andbodyOutput->at(i).isUnique = result->at(i).isUnique andbodyOutput->at(i).compatibleWith(result->at(i))))clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)clause->closure(predecessorClause)->intersection(clause)->isEmpty()<p>From package UML::Actions.</p>
@522#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ConnectableElement#result = (ConnectorEnd.allInstances()->select(role = self))
@523#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#exit_pseudostates#ConnectionPointReference#exit->forAll(kind = PseudostateKind::exitPoint)
@524#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#entry_pseudostates#ConnectionPointReference#entry->forAll(kind = PseudostateKind::entryPoint)
@525#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#types#Connector#type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
@526#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#roles#Connector#structuredClassifier <> nulland  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)or  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))
@527#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Connector#A Connector specifies links that enables communication between two or more instances. In contrast to Associations, which specify links between any instance of the associated Classifiers, Connectors specify links between instances playing the connected parts only.type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))structuredClassifier <> nulland  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)or  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))<p>From package UML::StructuredClassifiers.</p>
@528#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Connector#result = (if end->exists(role.oclIsKindOf(Port) and partWithPort->isEmpty()and not role.oclAsType(Port).isBehavior)then ConnectorKind::delegation else ConnectorKind::assembly endif)
@529#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#role_and_part_with_port#ConnectorEnd#partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
@530#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#part_with_port_empty#ConnectorEnd#(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
@531#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ConnectorEnd#self.compatibleWith(definingEnd)
@532#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#self_part_with_port#ConnectorEnd#partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
@533#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ConnectorEnd#A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement.partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()self.compatibleWith(definingEnd)partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)<p>From package UML::StructuredClassifiers.</p>
@534#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ConnectorEnd#result = (if connector.type = null then  null else  let index : Integer = connector.end->indexOf(self) in    connector.type.memberEnd->at(index)endif)
@535#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#consider_or_ignore#ConsiderIgnoreFragment#(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
@536#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type#ConsiderIgnoreFragment#message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
@537#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_apply_to_self#Constraint#not constrainedElement->includes(self)
@538#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#first_or_last_interaction_fragment#Continuation# enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
@539#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_name#Continuation#enclosingOperand.combinedFragment->notEmpty() andlet parentInteraction : Set(Interaction) = enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()in (parentInteraction->size() = 1) and let peerInteractions : Set(Interaction) = (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)-> select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in (peerInteractions->notEmpty()) and   let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment-> select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->   forAll(c : Continuation |  (c.name = self.name) implies   (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self  self.covered->asSet()->  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))   and (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c c.covered->asSet()->  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))  )
@540#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#global#Continuation#enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
@541#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Continuation#A Continuation is a syntactic way to define continuations of different branches of an alternative CombinedFragment. Continuations are intuitively similar to labels representing intermediate points in a flow of control. enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))enclosingOperand.combinedFragment->notEmpty() andlet parentInteraction : Set(Interaction) = enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()in (parentInteraction->size() = 1) and let peerInteractions : Set(Interaction) = (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)-> select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in (peerInteractions->notEmpty()) and   let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment-> select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->   forAll(c : Continuation |  (c.name = self.name) implies   (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self  self.covered->asSet()->  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))   and (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c c.covered->asSet()->  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))  )enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))<p>From package UML::Interactions.</p>
@542#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#object_nodes#ControlFlow#(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and (target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)
@543#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#association_not_abstract#CreateLinkAction#not self.association().isAbstract
@544#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#CreateLinkAction#A CreateLinkAction is a WriteLinkAction for creating links.not self.association().isAbstract<p>From package UML::Actions.</p>
@545#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#CreateLinkObjectAction#result.is(1,1)
@546#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_result#CreateLinkObjectAction#result.type = association()
@547#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#association_class#CreateLinkObjectAction#self.association().oclIsKindOf(AssociationClass)
@548#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#CreateLinkObjectAction#A CreateLinkObjectAction is a CreateLinkAction for creating link objects (AssociationClasse instances).result.is(1,1)result.type = association()self.association().oclIsKindOf(AssociationClass)<p>From package UML::Actions.</p>
@549#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#classifier_not_abstract#CreateObjectAction#not classifier.isAbstract 
@550#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#CreateObjectAction#result.is(1,1)
@551#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#classifier_not_association_class#CreateObjectAction#not classifier.oclIsKindOf(AssociationClass)
@552#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_type#CreateObjectAction#result.type = classifier
@553#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#zero_input_parameters#DecisionNode#(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
@554#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#edges#DecisionNode#let allEdges: Set(ActivityEdge) = incoming->union(outgoing) inlet allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif inallRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))
@555#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#decision_input_flow_incoming#DecisionNode#incoming->includes(decisionInputFlow)
@556#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#two_input_parameters#DecisionNode#(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) impliesdecisionInput.inputParameters()->size()=2
@557#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#incoming_outgoing_edges#DecisionNode#(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
@558#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#incoming_control_one_input_parameter#DecisionNode#(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) impliesdecisionInput.inputParameters()->size()=1
@559#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#parameters#DecisionNode#decisionInput<>null implies   (decisionInput.ownedParameter->forAll(par |      par.direction <> ParameterDirectionKind::out and      par.direction <> ParameterDirectionKind::inout ) and   decisionInput.ownedParameter->one(par |      par.direction <> ParameterDirectionKind::return))     
@560#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#incoming_object_one_input_parameter#DecisionNode#(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) impliesdecisionInput.inputParameters()->size()=1
@561#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#DecisionNode#A DecisionNode is a ControlNode that chooses between outgoing ActivityEdges for the routing of tokens.(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()let allEdges: Set(ActivityEdge) = incoming->union(outgoing) inlet allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif inallRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))incoming->includes(decisionInputFlow)(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) impliesdecisionInput.inputParameters()->size()=2(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) impliesdecisionInput.inputParameters()->size()=1decisionInput<>null implies   (decisionInput.ownedParameter->forAll(par |      par.direction <> ParameterDirectionKind::out and      par.direction <> ParameterDirectionKind::inout ) and   decisionInput.ownedParameter->one(par |      par.direction <> ParameterDirectionKind::return))     (decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) impliesdecisionInput.inputParameters()->size()=1<p>From package UML::Activities.</p>
@562#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deployment_target#DeploymentSpecification#deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
@563#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deployed_elements#DeploymentSpecification#deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
@564#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#DeploymentTarget#result = (deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet())
@565#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#DestroyObjectAction#target.is(1,1)
@566#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_type#DestroyObjectAction#target.type= null
@567#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_occurrence_specifications_below#DestructionOccurrenceSpecification#let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self
@568#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#DestructionOccurrenceSpecification#A DestructionOccurenceSpecification models the destruction of an object.let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self<p>From package UML::Interactions.</p>
@569#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_expr_requires_observation#Duration#expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
@570#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Duration#A Duration is a ValueSpecification that specifies the temporal distance between two time instants.expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))<p>From package UML::Values.</p>
@571#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#first_event_multiplicity#DurationConstraint#if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
@572#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_one_or_two_constrainedElements#DurationConstraint#constrainedElement->size() = 1 or constrainedElement->size()=2
@573#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#DurationConstraint#A DurationConstraint is a Constraint that refers to a DurationInterval.if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endifconstrainedElement->size() = 1 or constrainedElement->size()=2<p>From package UML::Values.</p>
@574#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#first_event_multiplicity#DurationObservation#if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
@575#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#DurationObservation#A DurationObservation is a reference to a duration during an execution. It points out the NamedElement(s) in the model to observe and whether the observations are when this NamedElement is entered or when it is exited.if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif<p>From package UML::Values.</p>
@576#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_owner#Element#mustBeOwned() implies owner->notEmpty()
@577#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_own_self#Element#not allOwnedElements()->includes(self)
@578#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Element#An Element is a constituent of a model. As such, it has the capability of owning other Elements.mustBeOwned() implies owner->notEmpty()not allOwnedElements()->includes(self)<p>From package UML::CommonStructure.</p>
@579#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Element#result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())
@580#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.<p>From package UML::CommonStructure.</p>
@581#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Element#result = (true)
@582#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Element#The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.<p>From package UML::CommonStructure.</p>
@583#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#imported_element_is_public#ElementImport#importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
@584#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#visibility_public_or_private#ElementImport#visibility = VisibilityKind::public or visibility = VisibilityKind::private
@585#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ElementImport#result = (if alias->notEmpty() then  aliaselse  importedElement.nameendif)
@586#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.<p>From package UML::CommonStructure.</p>
@587#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#EncapsulatedClassifier#result = (ownedAttribute->select(oclIsKindOf(Port))->collect(oclAsType(Port))->asOrderedSet())
@588#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#immutable#Enumeration#ownedAttribute->forAll(isReadOnly)
@589#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#EnumerationLiteral#result = (enumeration)
@590#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#handler_body_edges#ExceptionHandler#handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
@591#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#output_pins#ExceptionHandler#(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
@592#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_input#ExceptionHandler#handlerBody.oclIsKindOf(Action) andlet inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input ininputs->size()=1 and inputs->first()=exceptionInput
@593#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#edge_source_target#ExceptionHandler#let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() innodes.outgoing->forAll(nodes->includes(target)) andnodes.incoming->forAll(nodes->includes(source))
@594#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#handler_body_owner#ExceptionHandler#handlerBody.owner=protectedNode.owner
@595#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#exception_input_type#ExceptionHandler#exceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
@596#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ExceptionHandler#An ExceptionHandler is an Element that specifies a handlerBody ExecutableNode to execute in case the specified exception occurs during the execution of the protected ExecutableNode.handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))handlerBody.oclIsKindOf(Action) andlet inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input ininputs->size()=1 and inputs->first()=exceptionInputlet nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() innodes.outgoing->forAll(nodes->includes(target)) andnodes.incoming->forAll(nodes->includes(source))handlerBody.owner=protectedNode.ownerexceptionInput.type=null or exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))<p>From package UML::Activities.</p>
@597#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_lifeline#ExecutionSpecification#start.covered = finish.covered
@598#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#region_as_input_or_output#ExpansionNode#regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
@599#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ExpansionNode#An ExpansionNode is an ObjectNode used to indicate a collection input or output for an ExpansionRegion. A collection input of an ExpansionRegion contains a collection that is broken into its individual elements inside the region, whose content is executed once per element. A collection output of an ExpansionRegion combines individual elements produced by the execution of the region into a collection for use outside the region.regionAsInput->notEmpty() xor regionAsOutput->notEmpty()<p>From package UML::Actions.</p>
@600#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#extension_points#Extend#extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))
@601#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#non_owned_end#Extension#metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
@602#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#is_binary#Extension#memberEnd->size() = 2
@603#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Extension#An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)memberEnd->size() = 2<p>From package UML::Packages.</p>
@604#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Extension#result = (ownedEnd.lowerBound() = 1)
@605#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Extension#The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.<p>From package UML::Packages.</p>
@606#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Extension#result = (metaclassEnd().type.oclAsType(Class))
@607#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Extension#The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).<p>From package UML::Packages.</p>
@608#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Extension#result = (memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true))
@609#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Extension#The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).<p>From package UML::Packages.</p>
@610#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ExtensionEnd#result = (if lowerValue=null then 0 else lowerValue.integerValue() endif)
@611#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ExtensionEnd#The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.<p>From package UML::Packages.</p>
@612#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ExtensionEnd#(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
@613#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#aggregation#ExtensionEnd#self.aggregation = AggregationKind::composite
@614#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ExtensionEnd#An extension end is used to tie an extension to a stereotype when extending a metaclass.The default multiplicity of an extension end is 0..1.(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1self.aggregation = AggregationKind::composite<p>From package UML::Packages.</p>
@615#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#must_have_name#ExtensionPoint#name->notEmpty ()
@616#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ExtensionPoint#An ExtensionPoint identifies a point in the behavior of a UseCase where that behavior can be extended by the behavior of some other (extending) UseCase, as specified by an Extend relationship.name->notEmpty ()<p>From package UML::UseCases.</p>
@617#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_outgoing_edges#FinalNode#outgoing->isEmpty()
@618#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#FinalNode#A FinalNode is an abstract ControlNode at which a flow in an Activity stops.outgoing->isEmpty()<p>From package UML::Activities.</p>
@619#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_exit_behavior#FinalState#exit->isEmpty()
@620#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_outgoing_transitions#FinalState#outgoing->size() = 0
@621#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_regions#FinalState#region->size() = 0
@622#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#cannot_reference_submachine#FinalState#submachine->isEmpty()
@623#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_entry_behavior#FinalState#entry->isEmpty()
@624#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_state_behavior#FinalState#doActivity->isEmpty()
@625#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#FinalState#A special kind of State, which, when entered, signifies that the enclosing Region has completed. If the enclosing Region is directly contained in a StateMachine and all other Regions in that StateMachine also are completed, then it means that the entire StateMachine behavior is completed.exit->isEmpty()outgoing->size() = 0region->size() = 0submachine->isEmpty()entry->isEmpty()doActivity->isEmpty()<p>From package UML::StateMachines.</p>
@626#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#edges#ForkNode#let allEdges : Set(ActivityEdge) = incoming->union(outgoing) inallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))
@627#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_incoming_edge#ForkNode#incoming->size()=1
@628#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ForkNode#A ForkNode is a ControlNode that splits a flow into multiple concurrent flows.let allEdges : Set(ActivityEdge) = incoming->union(outgoing) inallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))incoming->size()=1<p>From package UML::Activities.</p>
@629#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_output_parameter#FunctionBehavior#self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
@630#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#types_of_parameters#FunctionBehavior#ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
@631#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#FunctionBehavior#A FunctionBehavior is an OpaqueBehavior that does not access or modify any objects or other external data.self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1ownedParameter->forAll(p | p.type <> null and  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))<p>From package UML::CommonBehavior.</p>
@632#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#FunctionBehavior#result = (d.ownedAttribute->forAll(a |    a.type.oclIsKindOf(DataType) and      hasAllDataTypeAttributes(a.type.oclAsType(DataType))))
@633#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (true)
@634#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Gate#The query isDistinguishableFrom() specifies that two Gates may coexist in the same Namespace, without an explicit name property. The association end formalGate subsets ownedElement, and since the Gate name attributeis optional, it is allowed to have two formal gates without an explicit name, but having derived names which are distinct.<p>From package UML::Interactions.</p>
@635#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#actual_gate_matched#Gate#interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
@636#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#inside_cf_matched#Gate#isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
@637#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#outside_cf_matched#Gate#isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endif
@638#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#formal_gate_distinguishable#Gate#isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
@639#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#actual_gate_distinguishable#Gate#isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
@640#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#outside_cf_gate_distinguishable#Gate#isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
@641#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#inside_cf_gate_distinguishable#Gate#isInsideCF() implieslet selfOperand : InteractionOperand = self.getOperand() in  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1
@642#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Gate#A Gate is a MessageEnd which serves as a connection point for relating a Message which has a MessageEnd (sendEvent / receiveEvent) outside an InteractionFragment with another Message which has a MessageEnd (receiveEvent / sendEvent)  inside that InteractionFragment.interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endifisFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1isInsideCF() implieslet selfOperand : InteractionOperand = self.getOperand() in  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1<p>From package UML::Interactions.</p>
@643#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (if name->notEmpty() then name->asOrderedSet()->first()else  if isActual() or isOutsideCF()   then if isSend()     then 'out_'.concat(self.message.name->asOrderedSet()->first())    else 'in_'.concat(self.message.name->asOrderedSet()->first())    endif  else if isSend()    then 'in_'.concat(self.message.name->asOrderedSet()->first())    else 'out_'.concat(self.message.name->asOrderedSet()->first())    endif  endifendif)
@644#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (if isInsideCF() then  let oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in    if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)    then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)        in oppMOS.enclosingOperand->asOrderedSet()->first()    else let oppGate : Gate = oppEnd.oclAsType(Gate)        in oppGate.combinedFragment.enclosingOperand->asOrderedSet()->first()    endif  else nullendif)
@645#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (interactionUse->notEmpty())
@646#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (interaction->notEmpty())
@647#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implieslet oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() inif oppEnd.oclIsKindOf(MessageOccurrenceSpecification)then let oppMOS : MessageOccurrenceSpecification= oppEnd.oclAsType(MessageOccurrenceSpecification)in combinedFragment = oppMOS.enclosingOperand.combinedFragmentelse let oppGate : Gate = oppEnd.oclAsType(Gate)in combinedFragment = oppGate.combinedFragment.enclosingOperand.combinedFragmentendif)
@648#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implieslet oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() inif oppEnd.oclIsKindOf(MessageOccurrenceSpecification) then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)in  self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =     oppMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(oppMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet())else let oppGate : Gate = oppEnd.oclAsType(Gate) in self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =     oppGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(oppGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())endif)
@649#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Gate#result = (self.getName() = gateToMatch.getName() and self.message.messageSort = gateToMatch.message.messageSort andself.message.name = gateToMatch.message.name andself.message.sendEvent->includes(self) implies gateToMatch.message.receiveEvent->includes(gateToMatch)  andself.message.receiveEvent->includes(self) implies gateToMatch.message.sendEvent->includes(gateToMatch) andself.message.signature = gateToMatch.message.signature)
@650#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#irreflexive_transitive_closure#GeneralOrdering#after->closure(toAfter.after)->excludes(before)
@651#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#generalization_same_classifier#GeneralizationSet#generalization->collect(general)->asSet()->size() <= 1
@652#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#maps_to_generalization_set#GeneralizationSet#powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
@653#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#GeneralizationSet#A GeneralizationSet is a PackageableElement whose instances represent sets of Generalization relationships.generalization->collect(general)->asSet()->size() <= 1powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )<p>From package UML::Classification.</p>
@654#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#sources_and_targets_kind#InformationFlow#(self.informationSource->forAll( sis |  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or   (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) and(self.informationTarget->forAll( sit |   oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or   oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or   oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or (oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
@655#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#convey_classifiers#InformationFlow#self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
@656#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#sources_and_targets#InformationItem#(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
@657#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_no#InformationItem#self.generalization->isEmpty() and self.feature->isEmpty()
@658#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_instantiable#InformationItem#isAbstract
@659#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InformationItem#InformationItems represent many kinds of information that can flow from sources to targets in very abstract ways.  They represent the kinds of information that may move within a system, but do not elaborate details of the transferred information.  Details of transferred information are the province of other Classifiers that may ultimately define InformationItems.  Consequently, InformationItems cannot be instantiated and do not themselves have features, generalizations, or associations. An important use of InformationItems is to represent information during early design stages, possibly before the detailed modeling decisions that will ultimately define them have been made. Another purpose of InformationItems is to abstract portions of complex models in less precise, but perhaps more general and communicable, ways. (self.represented->select(oclIsKindOf(InformationItem))->forAll(p |  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))self.generalization->isEmpty() and self.feature->isEmpty()isAbstract<p>From package UML::InformationFlows.</p>
@660#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_incoming_edges#InitialNode#incoming->isEmpty()
@661#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#control_edges#InitialNode#outgoing->forAll(oclIsKindOf(ControlFlow))
@662#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InitialNode#An InitialNode is a ControlNode that offers a single control token when initially enabled.incoming->isEmpty()outgoing->forAll(oclIsKindOf(ControlFlow))<p>From package UML::Activities.</p>
@663#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#outgoing_edges_structured_only#InputPin#outgoing->notEmpty() impliesaction<>null andaction.oclIsKindOf(StructuredActivityNode) andaction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)
@664#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InputPin#An InputPin is a Pin that holds input values to be consumed by an Action.outgoing->notEmpty() impliesaction<>null andaction.oclIsKindOf(StructuredActivityNode) andaction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)<p>From package UML::Actions.</p>
@665#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deployment_artifact#InstanceSpecification#deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
@666#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#structural_feature#InstanceSpecification#classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
@667#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#defining_feature#InstanceSpecification#slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
@668#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deployment_target#InstanceSpecification#deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
@669#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InstanceSpecification#An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact.deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))<p>From package UML::Classification.</p>
@670#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_contained#Interaction#enclosingInteraction->isEmpty()
@671#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Interaction#An Interaction is a unit of Behavior that focuses on the observable exchange of information between connectable elements.enclosingInteraction->isEmpty()<p>From package UML::Interactions.</p>
@672#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#minint_maxint#InteractionConstraint#maxint->notEmpty() or minint->notEmpty() impliesinteractionOperand.combinedFragment.interactionOperator =InteractionOperatorKind::loop
@673#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#minint_non_negative#InteractionConstraint#minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
@674#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#maxint_positive#InteractionConstraint#maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
@675#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#maxint_greater_equal_minint#InteractionConstraint#maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
@676#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InteractionConstraint#An InteractionConstraint is a Boolean expression that guards an operand in a CombinedFragment.maxint->notEmpty() or minint->notEmpty() impliesinteractionOperand.combinedFragment.interactionOperator =InteractionOperatorKind::loopminint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )<p>From package UML::Interactions.</p>
@677#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#gates_match#InteractionUse#actualGate->notEmpty() implies refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) andself.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)
@678#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#returnValueRecipient_coverage#InteractionUse#returnValueRecipient->asSet()->notEmpty() implieslet covCE : Set(ConnectableElement) = covered.represents->asSet() in covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in allProps->includes(returnValueRecipient)
@679#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#returnValue_type_recipient_correspondence#InteractionUse#returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
@680#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#all_lifelines#InteractionUse#let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()) inparentInteraction->size()=1 and let refInteraction : Interaction = refersTo inparentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and (( refLifeline.selector.oclIsKindOf(LiteralString) implies  intLifeline.selector.oclIsKindOf(LiteralString) and   refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and( refLifeline.selector.oclIsKindOf(LiteralInteger) implies  intLifeline.selector.oclIsKindOf(LiteralInteger) and   refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )) implies self.covered->asSet()->includes(intLifeline)))
@681#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InteractionUse#An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referenced Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal Gates with the actual ones.actualGate->notEmpty() implies refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) andself.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)returnValueRecipient->asSet()->notEmpty() implieslet covCE : Set(ConnectableElement) = covered.represents->asSet() in covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in allProps->includes(returnValueRecipient)returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()) inparentInteraction->size()=1 and let refInteraction : Interaction = refersTo inparentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and (( refLifeline.selector.oclIsKindOf(LiteralString) implies  intLifeline.selector.oclIsKindOf(LiteralString) and   refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and( refLifeline.selector.oclIsKindOf(LiteralInteger) implies  intLifeline.selector.oclIsKindOf(LiteralInteger) and   refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )) implies self.covered->asSet()->includes(intLifeline)))<p>From package UML::Interactions.</p>
@682#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#visibility#Interface#feature->forAll(visibility = VisibilityKind::public)
@683#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#interrupting_edges#InterruptibleActivityRegion#interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
@684#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#InterruptibleActivityRegion#An InterruptibleActivityRegion is an ActivityGroup that supports the termination of tokens flowing in the portions of an activity within it.interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)<p>From package UML::Activities.</p>
@685#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_outgoing_edge#JoinNode#outgoing->size() = 1
@686#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#incoming_object_flow#JoinNode#if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif
@687#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#JoinNode#A JoinNode is a ControlNode that synchronizes multiple flows.outgoing->size() = 1if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))else outgoing->forAll(oclIsKindOf(ControlFlow))endif<p>From package UML::Activities.</p>
@688#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#selector_specified#Lifeline# self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
@689#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#interaction_uses_share_lifeline#Lifeline#let intUses : Set(InteractionUse) = interaction.interactionUse  in intUses->forAll( iuse : InteractionUse | let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()->union(iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()               ) inlet peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()->union(usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()               )->excluding(iuse) inpeerUses->forAll( peerUse : InteractionUse | peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and  ( self.selector.oclIsKindOf(LiteralString) implies  l.selector.oclIsKindOf(LiteralString) and   self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )  and ( self.selector.oclIsKindOf(LiteralInteger) implies  l.selector.oclIsKindOf(LiteralInteger) and   self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value ))  implies usingInteraction.lifeline->exists(represents = self.represents and ( self.selector.oclIsKindOf(LiteralString) implies  l.selector.oclIsKindOf(LiteralString) and   self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )and ( self.selector.oclIsKindOf(LiteralInteger) implies  l.selector.oclIsKindOf(LiteralInteger) and   self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value ))                                                )                    ))
@690#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_classifier#Lifeline#represents.namespace->closure(namespace)->includes(interaction._'context')
@691#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#selector_int_or_string#Lifeline#self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
@692#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Lifeline#A Lifeline represents an individual participant in the Interaction. While parts and structural features may have multiplicity greater than 1, Lifelines represent only one interacting entity. self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())let intUses : Set(InteractionUse) = interaction.interactionUse  in intUses->forAll( iuse : InteractionUse | let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()->union(iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()               ) inlet peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()->union(usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()               )->excluding(iuse) inpeerUses->forAll( peerUse : InteractionUse | peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and  ( self.selector.oclIsKindOf(LiteralString) implies  l.selector.oclIsKindOf(LiteralString) and   self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )  and ( self.selector.oclIsKindOf(LiteralInteger) implies  l.selector.oclIsKindOf(LiteralInteger) and   self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value ))  implies usingInteraction.lifeline->exists(represents = self.represents and ( self.selector.oclIsKindOf(LiteralString) implies  l.selector.oclIsKindOf(LiteralString) and   self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )and ( self.selector.oclIsKindOf(LiteralInteger) implies  l.selector.oclIsKindOf(LiteralInteger) and   self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value ))                                                )                    ))represents.namespace->closure(namespace)->includes(interaction._'context')self.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)<p>From package UML::Interactions.</p>
@693#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_pins#LinkAction#inputValue->asBag()=endData.allPins()
@694#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_association#LinkAction#endData.end = self.association().memberEnd->asBag()
@695#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_static#LinkAction#endData->forAll(not end.isStatic)
@696#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LinkAction#LinkAction is an abstract class for all Actions that identify the links to be acted on using LinkEndData.inputValue->asBag()=endData.allPins()endData.end = self.association().memberEnd->asBag()endData->forAll(not end.isStatic)<p>From package UML::Actions.</p>
@697#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LinkAction#result = (endData->asSequence()->first().end.association)
@698#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LinkEndCreationData#result = (self.LinkEndData::allPins()->including(insertAt))
@699#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#insertAt_pin#LinkEndCreationData#if  not end.isOrderedthen insertAt = nullelsenot isReplaceAll=false impliesinsertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))endif
@700#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_type#LinkEndData#value<>null implies value.type.conformsTo(end.type)
@701#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#LinkEndData#value<>null implies value.is(1,1)
@702#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#end_object_input_pin#LinkEndData#value->excludesAll(qualifier.value)
@703#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#property_is_association_end#LinkEndData#end.association <> null
@704#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#qualifiers#LinkEndData#end.qualifier->includesAll(qualifier.qualifier)
@705#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LinkEndData#result = (value->asBag()->union(qualifier.value))
@706#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LinkEndDestructionData#result = (self.LinkEndData::allPins()->including(destroyAt))
@707#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#destroyAt_pin#LinkEndDestructionData#if  not end.isOrdered or end.isUnique or isDestroyDuplicatesthen destroyAt = nullelsedestroyAt <> null and destroyAt->forAll(type=UnlimitedNatural and is(1,1))endif
@708#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralBoolean#result = (value)
@709#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.<p>From package UML::Values.</p>
@710#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralBoolean#result = (true)
@711#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.<p>From package UML::Values.</p>
@712#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralInteger#result = (value)
@713#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralInteger#The query integerValue() gives the value.<p>From package UML::Values.</p>
@714#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralInteger#result = (true)
@715#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.<p>From package UML::Values.</p>
@716#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralNull#result = (true)
@717#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.<p>From package UML::Values.</p>
@718#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralNull#result = (true)
@719#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralNull#The query isNull() returns true.<p>From package UML::Values.</p>
@720#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralReal#result = (true)
@721#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralReal#The query isComputable() is redefined to be true.<p>From package UML::Values.</p>
@722#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralReal#result = (value)
@723#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralReal#The query realValue() gives the value.<p>From package UML::Values.</p>
@724#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralString#result = (true)
@725#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.<p>From package UML::Values.</p>
@726#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralString#result = (value)
@727#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralString#The query stringValue() gives the value.<p>From package UML::Values.</p>
@728#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralUnlimitedNatural#result = (true)
@729#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.<p>From package UML::Values.</p>
@730#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LiteralUnlimitedNatural#result = (value)
@731#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.<p>From package UML::Values.</p>
@732#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LoopNode#result = (self->asSet())
@733#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#LoopNode#result = (self.StructuredActivityNode::sourceNodes()->union(loopVariable))
@734#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#result_no_incoming#LoopNode#result.incoming->isEmpty()
@735#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input_edges#LoopNode#loopVariableInput.outgoing->isEmpty()
@736#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#executable_nodes#LoopNode#setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
@737#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body_output_pins#LoopNode#bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
@738#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#setup_test_and_body#LoopNode#setupPart->intersection(test)->isEmpty() andsetupPart->intersection(bodyPart)->isEmpty() andtest->intersection(bodyPart)->isEmpty()
@739#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#matching_output_pins#LoopNode#bodyOutput->size()=loopVariable->size() andSequence{1..loopVariable->size()}->forAll(i |bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) andbodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered andbodyOutput->at(i).isUnique = loopVariable->at(i).isUnique andloopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))
@740#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#matching_loop_variables#LoopNode#loopVariableInput->size()=loopVariable->size() andloopVariableInput.type=loopVariable.type andloopVariableInput.isUnique=loopVariable.isUnique andloopVariableInput.lower=loopVariable.lower andloopVariableInput.upper=loopVariable.upper
@741#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#matching_result_pins#LoopNode#result->size()=loopVariable->size() andresult.type=loopVariable.type andresult.isUnique=loopVariable.isUnique andresult.lower=loopVariable.lower andresult.upper=loopVariable.upper
@742#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#loop_variable_outgoing#LoopNode#allOwnedNodes()->includesAll(loopVariable.outgoing.target)
@743#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#LoopNode#A LoopNode is a StructuredActivityNode that represents an iterative loop with setup, test, and body sections.result.incoming->isEmpty()loopVariableInput.outgoing->isEmpty()setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)setupPart->intersection(test)->isEmpty() andsetupPart->intersection(bodyPart)->isEmpty() andtest->intersection(bodyPart)->isEmpty()bodyOutput->size()=loopVariable->size() andSequence{1..loopVariable->size()}->forAll(i |bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) andbodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered andbodyOutput->at(i).isUnique = loopVariable->at(i).isUnique andloopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))loopVariableInput->size()=loopVariable->size() andloopVariableInput.type=loopVariable.type andloopVariableInput.isUnique=loopVariable.isUnique andloopVariableInput.lower=loopVariable.lower andloopVariableInput.upper=loopVariable.upperresult->size()=loopVariable->size() andresult.type=loopVariable.type andresult.isUnique=loopVariable.isUnique andresult.lower=loopVariable.lower andresult.upper=loopVariable.upperallOwnedNodes()->includesAll(loopVariable.outgoing.target)<p>From package UML::Actions.</p>
@744#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_outgoing_edge#MergeNode#outgoing->size()=1
@745#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#edges#MergeNode#let allEdges : Set(ActivityEdge) = incoming->union(outgoing) inallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))
@746#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#MergeNode#A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.outgoing->size()=1let allEdges : Set(ActivityEdge) = incoming->union(outgoing) inallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))<p>From package UML::Activities.</p>
@747#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Message#result = (true)
@748#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Message#The query isDistinguishableFrom() specifies that any two Messages may coexist in the same Namespace, regardless of their names.<p>From package UML::Interactions.</p>
@749#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#sending_receiving_message_event#Message#receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)implieslet f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered inf = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  impliesf.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )
@750#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#cannot_cross_boundaries#Message#sendEvent->notEmpty() and receiveEvent->notEmpty() implieslet sendEnclosingFrag : Set(InteractionFragment) = sendEvent->asOrderedSet()->first().enclosingFragment()in let receiveEnclosingFrag : Set(InteractionFragment) = receiveEvent->asOrderedSet()->first().enclosingFragment()in  sendEnclosingFrag = receiveEnclosingFrag
@751#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#signature_is_signal#Message#(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
@752#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#signature_refer_to#Message#signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
@753#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#signature_is_operation_request#Message#(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies  let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter-> select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )in requestParms->size() = self.argument->size() andself.argument->forAll( o: ValueSpecification | not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies let p : Parameter = requestParms->at(self.argument->indexOf(o)) ino.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
@754#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#signature_is_operation_reply#Message#(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies  let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)in replyParms->size() = self.argument->size() andself.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) ine.operand->notEmpty()  implies let p : Parameter = replyParms->at(self.argument->indexOf(o)) ine.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
@755#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Message#A Message defines a particular communication between Lifelines of an Interaction.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)implieslet f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered inf = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  impliesf.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )sendEvent->notEmpty() and receiveEvent->notEmpty() implieslet sendEnclosingFrag : Set(InteractionFragment) = sendEvent->asOrderedSet()->first().enclosingFragment()in let receiveEnclosingFrag : Set(InteractionFragment) = receiveEvent->asOrderedSet()->first().enclosingFragment()in  sendEnclosingFrag = receiveEnclosingFrag(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies  let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter-> select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )in requestParms->size() = self.argument->size() andself.argument->forAll( o: ValueSpecification | not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies let p : Parameter = requestParms->at(self.argument->indexOf(o)) ino.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies  let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)in replyParms->size() = self.argument->size() andself.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) ine.operand->notEmpty()  implies let p : Parameter = replyParms->at(self.argument->indexOf(o)) ine.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))<p>From package UML::Interactions.</p>
@756#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Message#result = (messageKind)
@757#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MessageEnd#result = (if self->select(oclIsKindOf(Gate))->notEmpty() then -- it is a Gatelet endGate : Gate =   self->select(oclIsKindOf(Gate)).oclAsType(Gate)->asOrderedSet()->first()  in  if endGate.isOutsideCF()   then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())  else if endGate.isInsideCF()     then endGate.combinedFragment.oclAsType(InteractionFragment)->asSet()    else if endGate.isFormal()       then endGate.interaction.oclAsType(InteractionFragment)->asSet()      else if endGate.isActual()         then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)->asSet())        else null        endif      endif    endif  endifelse -- it is a MessageOccurrenceSpecificationlet endMOS : MessageOccurrenceSpecification  =   self->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first()   in  if endMOS.enclosingInteraction->notEmpty()   then endMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()  else endMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet()  endifendif)
@758#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MessageEnd#result = (message.receiveEvent->asSet()->includes(self))
@759#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MessageEnd#result = (message.sendEvent->asSet()->includes(self))
@760#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MessageEnd#result = (message->asSet().messageEnd->asSet()->excluding(self))
@761#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#upper_ge_lower#MultiplicityElement#upperBound() >= lowerBound()
@762#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#lower_ge_0#MultiplicityElement#lowerBound() >= 0
@763#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#lower_is_integer#MultiplicityElement#lowerValue <> null implies lowerValue.integerValue() <> null
@764#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#upper_is_unlimitedNatural#MultiplicityElement#upperValue <> null implies upperValue.unlimitedValue() <> null
@765#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#MultiplicityElement#A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A MultiplicityElement embeds this information to specify the allowable cardinalities for an instantiation of the Element.upperBound() >= lowerBound()lowerBound() >= 0lowerValue <> null implies lowerValue.integerValue() <> nullupperValue <> null implies upperValue.unlimitedValue() <> null<p>From package UML::CommonStructure.</p>
@766#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = ((other.lowerBound() <= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() <= other.upperBound())))
@767#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = ((self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound()))
@768#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.<p>From package UML::CommonStructure.</p>
@769#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = (lowerbound = self.lowerBound() and upperbound = self.upperBound())
@770#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = (upperBound() > 1)
@771#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.<p>From package UML::CommonStructure.</p>
@772#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = (lowerBound())
@773#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = (if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif)
@774#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the integerValue of lowerValue, if this is given, and 1 otherwise.<p>From package UML::CommonStructure.</p>
@775#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = (upperBound())
@776#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#MultiplicityElement#result = (if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif)
@777#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.<p>From package UML::CommonStructure.</p>
@778#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#visibility_needs_ownership#NamedElement#(namespace = null and owner <> null) implies visibility = null
@779#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_qualified_name#NamedElement#(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
@780#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_no_qualified_name#NamedElement#name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
@781#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#NamedElement#A NamedElement is an Element in a model that may have a name. The name may be given directly and/or via the use of a StringExpression.(namespace = null and owner <> null) implies visibility = null(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null<p>From package UML::CommonStructure.</p>
@782#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#NamedElement#result = (if owner.oclIsKindOf(TemplateParameter) and  owner.oclAsType(TemplateParameter).signature.template.oclIsKindOf(Namespace) then    let enclosingNamespace : Namespace =      owner.oclAsType(TemplateParameter).signature.template.oclAsType(Namespace) in        enclosingNamespace.allNamespaces()->prepend(enclosingNamespace)else  if namespace->isEmpty()    then OrderedSet{}  else    namespace.allNamespaces()->prepend(namespace)  endifendif)
@783#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of Namespaces in which the NamedElement is nested, working outwards.<p>From package UML::CommonStructure.</p>
@784#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#NamedElement#result = (if namespace.oclIsKindOf(Package)then  let owningPackage : Package = namespace.oclAsType(Package) in    owningPackage->union(owningPackage.allOwningPackages())else  nullendif)
@785#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#NamedElement#The query allOwningPackages() returns the set of all the enclosing Namespaces of this NamedElement, working outwards, that are Packages, up to but not including the first such Namespace that is not a Package.<p>From package UML::CommonStructure.</p>
@786#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#NamedElement#result = (Dependency.allInstances()->select(d | d.client->includes(self)))
@787#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#NamedElement#result = ((self.oclIsKindOf(n.oclType()) or n.oclIsKindOf(self.oclType())) implies    ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty())
@788#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have types neither of which is a kind of the other or (b) they have different names.<p>From package UML::CommonStructure.</p>
@789#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#NamedElement#result = (if self.name <> null and self.allNamespaces()->select( ns | ns.name=null )->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))else   nullendif)
@790#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#NamedElement#result = ('::')
@791#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualifiedName.<p>From package UML::CommonStructure.</p>
@792#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#members_distinguishable#Namespace#membersAreDistinguishable()
@793#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#cannot_import_self#Namespace#packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
@794#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#cannot_import_ownedMembers#Namespace#elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
@795#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Namespace#A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name.membersAreDistinguishable()packageImport.importedPackage.oclAsType(Namespace)->excludes(self)elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)<p>From package UML::CommonStructure.</p>
@796#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Namespace#result = (imps->reject(imp1  | imps->exists(imp2 | not imp1.isDistinguishableFrom(imp2, self))))
@797#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this Namespace.<p>From package UML::CommonStructure.</p>
@798#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Namespace#result = (if self.ownedMember ->includes(element)then Set{element.name}else let elementImports : Set(ElementImport) = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then     elementImports->collect(el | el.getName())->asSet()  else      self.packageImport->select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))->asSet()  endifendif)
@799#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Namespace#The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace, taking importing into account. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases.<p>From package UML::CommonStructure.</p>
@800#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Namespace#result = (self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | imp.isDistinguishableFrom(mem, self))))
@801#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the Namespace. This excludes hidden ones, i.e., those which have names that conflict with names of ownedMembers, and it also excludes PackageableElements that would have the indistinguishable names when imported.<p>From package UML::CommonStructure.</p>
@802#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Namespace#result = (self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet()))
@803#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Namespace#result = (member->forAll( memb |   member->excluding(memb)->forAll(other |       memb.isDistinguishableFrom(other, self))))
@804#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the Namespace's members are distinguishable within it.<p>From package UML::CommonStructure.</p>
@805#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#internal_structure#Node#part->forAll(oclIsKindOf(Node))
@806#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input_and_output_parameter#ObjectFlow#selection<>null impliesselection.inputParameters()->size()=1 andselection.inputParameters()->forAll(not isUnique and is(0,*)) andselection.outputParameters()->size()=1
@807#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_executable_nodes#ObjectFlow#not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
@808#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#transformation_behavior#ObjectFlow#transformation<>null impliestransformation.inputParameters()->size()=1 andtransformation.outputParameters()->size()=1
@809#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#selection_behavior#ObjectFlow#selection<>null implies source.oclIsKindOf(ObjectNode)
@810#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#is_multicast_or_is_multireceive#ObjectFlow#not (isMulticast and isMultireceive)
@811#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ObjectFlow#An ObjectFlow is an ActivityEdge that is traversed by object tokens that may hold values. Object flows also support multicast/receive, token selection from object nodes, and transformation of tokens.selection<>null impliesselection.inputParameters()->size()=1 andselection.inputParameters()->forAll(not isUnique and is(0,*)) andselection.outputParameters()->size()=1not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))transformation<>null impliestransformation.inputParameters()->size()=1 andtransformation.outputParameters()->size()=1selection<>null implies source.oclIsKindOf(ObjectNode)not (isMulticast and isMultireceive)<p>From package UML::Activities.</p>
@812#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input_output_parameter#ObjectNode#selection<>null impliesselection.inputParameters()->size()=1 andselection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) andselection.outputParameters()->size()=1 andselection.inputParameters()->forAll(p | self.type.conformsTo(p.type))
@813#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#selection_behavior#ObjectNode#(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
@814#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#object_flow_edges#ObjectNode#(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))
@815#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ObjectNode#An ObjectNode is an abstract ActivityNode that may hold tokens within the object flow in an Activity. ObjectNodes also support token selection, limitation on the number of tokens held, specification of the state required for tokens being held, and carrying control values.selection<>null impliesselection.inputParameters()->size()=1 andselection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) andselection.outputParameters()->size()=1 andselection.inputParameters()->forAll(p | self.type.conformsTo(p.type))(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))<p>From package UML::Activities.</p>
@816#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#language_body_size#OpaqueAction#language->notEmpty() implies (_'body'->size() = language->size())
@817#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OpaqueAction#An OpaqueAction is an Action whose functionality is not specified within UML.language->notEmpty() implies (_'body'->size() = language->size())<p>From package UML::Actions.</p>
@818#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#language_body_size#OpaqueExpression#language->notEmpty() implies (_'body'->size() = language->size())
@819#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_return_result_parameter#OpaqueExpression#behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
@820#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#only_return_result_parameters#OpaqueExpression#behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()
@821#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OpaqueExpression#An OpaqueExpression is a ValueSpecification that specifies the computation of a collection of values either in terms of a UML Behavior or based on a textual statement in a language other than UMLlanguage->notEmpty() implies (_'body'->size() = language->size())behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()<p>From package UML::Values.</p>
@822#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#OpaqueExpression#result = (false)
@823#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an Integer.<p>From package UML::Values.</p>
@824#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#OpaqueExpression#result = (false)
@825#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.<p>From package UML::Values.</p>
@826#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#OpaqueExpression#result = (false)
@827#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.<p>From package UML::Values.</p>
@828#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#OpaqueExpression#result = (if behavior = null thennullelsebehavior.ownedParameter->first()endif)
@829#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#OpaqueExpression#result = (0)
@830#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.<p>From package UML::Values.</p>
@831#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (redefiningElement.oclIsKindOf(Operation) andlet op : Operation = redefiningElement.oclAsType(Operation) inself.ownedParameter->size() = op.ownedParameter->size() andSequence{1..self.ownedParameter->size()}->forAll(i |    let redefiningParam : Parameter = op.ownedParameter->at(i),               redefinedParam : Parameter = self.ownedParameter->at(i) in                 (redefiningParam.isUnique = redefinedParam.isUnique) and                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and                 (redefiningParam.direction = redefinedParam.direction) and                 (redefiningParam.type.conformsTo(redefinedParam.type) or                     redefinedParam.type.conformsTo(redefiningParam.type)) and                 (redefiningParam.direction = ParameterDirectionKind::inout implies                         (redefinedParam.compatibleWith(redefiningParam) and                         redefiningParam.compatibleWith(redefinedParam))) and                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies                         redefinedParam.compatibleWith(redefiningParam)) and                 ((redefiningParam.direction = ParameterDirectionKind::out or                      redefiningParam.direction = ParameterDirectionKind::return) implies                         redefiningParam.compatibleWith(redefinedParam))))
@832#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Operation#The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation ifit has the same number of owned parameters, and for each parameter the following holds:- Direction, ordering and uniqueness are the same.- The corresponding types are covariant, contravariant or invariant.- The multiplicities are compatible, depending on the parameter direction.<p>From package UML::Classification.</p>
@833#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#at_most_one_return#Operation#self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
@834#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#only_body_for_query#Operation#bodyCondition <> null implies isQuery
@835#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Operation#An Operation is a BehavioralFeature of a Classifier that specifies the name, type, parameters, and constraints for invoking an associated Behavior. An Operation may invoke both the execution of method behaviors as well as other behavioral responses. Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1bodyCondition <> null implies isQuery<p>From package UML::Classification.</p>
@836#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (if returnResult()->notEmpty() then returnResult()-> exists(isOrdered) else false endif)
@837#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (if returnResult()->notEmpty() then returnResult()->exists(isUnique) else true endif)
@838#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (if returnResult()->notEmpty() then returnResult()->any(true).lower else null endif)
@839#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (ownedParameter->select (direction = ParameterDirectionKind::return))
@840#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Operation#The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set<p>From package UML::Classification.</p>
@841#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (if returnResult()->notEmpty() then returnResult()->any(true).type else null endif)
@842#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Operation#result = (if returnResult()->notEmpty() then returnResult()->any(true).upper else null endif)
@843#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#match_default_signature#OperationTemplateParameter#default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in     defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix |         let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))
@844#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OperationTemplateParameter#An OperationTemplateParameter exposes an Operation as a formal parameter for a template.default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in     defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix |         let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))<p>From package UML::Classification.</p>
@845#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#incoming_edges_structured_only#OutputPin#incoming->notEmpty() impliesaction<>null andaction.oclIsKindOf(StructuredActivityNode) andaction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)
@846#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#OutputPin#An OutputPin is a Pin that holds output values produced by an Action.incoming->notEmpty() impliesaction<>null andaction.oclIsKindOf(StructuredActivityNode) andaction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)<p>From package UML::Actions.</p>
@847#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (false)
@848#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.<p>From package UML::Packages.</p>
@849#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#elements_public_or_private#Package#packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)
@850#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (let ownedPackages : Bag(Package) = ownedMember->select(oclIsKindOf(Package))->collect(oclAsType(Package)) in ownedStereotype->union(ownedPackages.allApplicableStereotypes())->flatten()->asSet())
@851#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Package#The query allApplicableStereotypes() returns all the directly or indirectly owned stereotypes, including stereotypes contained in sub-profiles.<p>From package UML::Packages.</p>
@852#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (if self.oclIsKindOf(Profile) then self.oclAsType(Profile)elseself.namespace.oclAsType(Package).containingProfile()endif)
@853#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Package#The query containingProfile() returns the closest profile directly or indirectly containing this package (or this package itself, if it is a profile).<p>From package UML::Packages.</p>
@854#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (ownedMember->includes(el) or(elementImport->select(ei|ei.importedElement = VisibilityKind::public)->collect(importedElement.oclAsType(NamedElement))->includes(el)) or(packageImport->select(visibility = VisibilityKind::public)->collect(importedPackage.member->includes(el))->notEmpty()))
@855#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.<p>From package UML::Packages.</p>
@856#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (packagedElement->select(oclIsKindOf(Package))->collect(oclAsType(Package))->asSet())
@857#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (packagedElement->select(oclIsKindOf(Stereotype))->collect(oclAsType(Stereotype))->asSet())
@858#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (packagedElement->select(oclIsKindOf(Type))->collect(oclAsType(Type))->asSet())
@859#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Package#result = (member->select( m | m.oclIsKindOf(PackageableElement) and self.makesVisible(m))->collect(oclAsType(PackageableElement))->asSet())
@860#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.<p>From package UML::Packages.</p>
@861#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#public_or_private#PackageImport#visibility = VisibilityKind::public or visibility = VisibilityKind::private
@862#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#namespace_needs_visibility#PackageableElement#visibility = null implies namespace = null
@863#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#in_and_out#Parameter#(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))and(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))
@864#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_exception#Parameter#isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)
@865#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#connector_end#Parameter#end->notEmpty() implies collaboration->notEmpty()
@866#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#reentrant_behaviors#Parameter#(isStream and behavior <> null) implies not behavior.isReentrant
@867#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#stream_and_exception#Parameter#not (isException and isStream)
@868#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#object_effect#Parameter#(type.oclIsKindOf(DataType)) implies (effect = null)
@869#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Parameter#A Parameter is a specification of an argument used to pass information into or out of an invocation of a BehavioralFeature.  Parameters can be treated as ConnectableElements within Collaborations.(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))and(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)end->notEmpty() implies collaboration->notEmpty()(isStream and behavior <> null) implies not behavior.isReentrantnot (isException and isStream)(type.oclIsKindOf(DataType)) implies (effect = null)<p>From package UML::Classification.</p>
@870#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Parameter#result = (if self.type = String then defaultValue.stringValue() else null endif)
@871#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_parameterized_entity#ParameterSet#parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
@872#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input#ParameterSet#((parameter->exists(direction = ParameterDirectionKind::_'in')) implies     behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))    and((parameter->exists(direction = ParameterDirectionKind::out)) implies     behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))  
@873#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#two_parameter_sets#ParameterSet#parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
@874#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ParameterSet#A ParameterSet designates alternative sets of inputs or outputs that a Behavior may use.parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)((parameter->exists(direction = ParameterDirectionKind::_'in')) implies     behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))    and((parameter->exists(direction = ParameterDirectionKind::out)) implies     behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))  parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))<p>From package UML::Classification.</p>
@875#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ParameterableElement#result = (self.oclIsKindOf(p.oclType()))
@876#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ParameterableElement#The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints.<p>From package UML::CommonStructure.</p>
@877#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ParameterableElement#result = (templateParameter->notEmpty())
@878#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter.<p>From package UML::CommonStructure.</p>
@879#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#control_pins#Pin#isControl implies isControlType
@880#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_unique#Pin#not isUnique
@881#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#port_aggregation#Port#aggregation = AggregationKind::composite
@882#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#default_value#Port#type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
@883#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#encapsulated_owner#Port#owner = encapsulatedClassifier
@884#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Port#A Port is a property of an EncapsulatedClassifier that specifies a distinct interaction point between that EncapsulatedClassifier and its environment or between the (behavior of the) EncapsulatedClassifier and its internal parts. Ports are connected to Properties of the EncapsulatedClassifier by Connectors through which requests can be made to invoke BehavioralFeatures. A Port may specify the services an EncapsulatedClassifier provides (offers) to its environment as well as the services that an EncapsulatedClassifier expects (requires) of its environment.  A Port may have an associated ProtocolStateMachine.aggregation = AggregationKind::compositetype.oclIsKindOf(Interface) implies defaultValue->isEmpty()owner = encapsulatedClassifier<p>From package UML::StructuredClassifiers.</p>
@885#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Port#result = (if type.oclIsKindOf(Interface) then type.oclAsType(Interface)->asSet() else type.oclAsType(Classifier).allRealizedInterfaces() endif)
@886#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Port#result = ( type.oclAsType(Classifier).allUsedInterfaces() )
@887#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Port#result = (if isConjugated then basicRequired() else basicProvided() endif)
@888#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Port#result = (if isConjugated then basicProvided() else basicRequired() endif)
@889#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#metaclass_reference_not_specialized#Profile#metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
@890#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#references_same_metamodel#Profile#metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
@891#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Profile#A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()<p>From package UML::Packages.</p>
@892#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypedElement) impliesself.type.conformsTo(p.oclAsType(TypedElement).type)))
@893#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Property#The query isCompatibleWith() determines if this Property is compatible with the specified ParameterableElement. This Property is compatible with ParameterableElement p if the kind of this Property is thesame as or a subtype of the kind of p. Further, if p is a TypedElement, then the type of this Property must be conformant with the type of p.<p>From package UML::Classification.</p>
@894#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (redefiningElement.oclIsKindOf(Property) and   let prop : Property = redefiningElement.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isComposite implies prop.isComposite)))
@895#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining Property is consistent with a redefined Property if the type of the redefining Property conforms to the type of the redefined Property, and the multiplicity of the redefining Property (if specified) is contained in the multiplicity of the redefined Property.<p>From package UML::Classification.</p>
@896#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#subsetting_context_conforms#Property#subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
@897#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#derived_union_is_read_only#Property#isDerivedUnion implies isReadOnly
@898#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_composite#Property#isComposite and association <> null implies opposite.upperBound() <= 1
@899#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#redefined_property_inherited#Property#(redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
@900#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#subsetting_rules#Property#subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
@901#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#binding_to_attribute#Property#(self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))
@902#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#derived_union_is_derived#Property#isDerivedUnion implies isDerived
@903#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deployment_target#Property#deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
@904#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#subsetted_property_names#Property#subsettedProperty->forAll(sp | sp.name <> name)
@905#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_opposite_end#Property#(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
@906#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#qualified_is_association_end#Property#qualifier->notEmpty() implies association->notEmpty()
@907#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Property#A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))isDerivedUnion implies isReadOnlyisComposite and association <> null implies opposite.upperBound() <= 1(redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))(self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))isDerivedUnion implies isDeriveddeployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))subsettedProperty->forAll(sp | sp.name <> name)(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.typequalifier->notEmpty() implies association->notEmpty()<p>From package UML::Classification.</p>
@908#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (not classifier->isEmpty())
@909#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some Classifier.<p>From package UML::Classification.</p>
@910#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (aggregation = AggregationKind::composite)
@911#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (not classifier->isEmpty() or association.navigableOwnedEnd->includes(self))
@912#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.<p>From package UML::Classification.</p>
@913#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (if association <> null and association.memberEnd->size() = 2then    association.memberEnd->any(e | e <> self)else    nullendif)
@914#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Property#result = (if association <> nullthen association.memberEnd->excluding(self)->collect(type)->asSet()else   if classifier<>null  then classifier->asSet()  else Set{}   endifendif)
@915#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a Property. It consists, in the case of an attribute, of the corresponding Classifier, and in the case of an association end, all of the Classifiers at the other ends.<p>From package UML::Classification.</p>
@916#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#classifier_context#ProtocolStateMachine#_'context' <> null and specification = null
@917#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deep_or_shallow_history#ProtocolStateMachine#region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
@918#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#entry_exit_do#ProtocolStateMachine#region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
@919#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#protocol_transitions#ProtocolStateMachine#region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
@920#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ProtocolStateMachine#A ProtocolStateMachine is always defined in the context of a Classifier. It specifies which BehavioralFeatures of the Classifier can be called in which State and under which conditions, thus specifying the allowed invocation sequences on the Classifier's BehavioralFeatures. A ProtocolStateMachine specifies the possible and permitted Transitions on the instances of its context Classifier, together with the BehavioralFeatures that carry the Transitions. In this manner, an instance lifecycle can be specified for a Classifier, by defining the order in which the BehavioralFeatures can be activated and the States through which an instance progresses during its existence._'context' <> null and specification = nullregion->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))<p>From package UML::StateMachines.</p>
@921#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#refers_to_operation#ProtocolTransition#if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then     containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())else true endif
@922#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#associated_actions#ProtocolTransition#effect = null
@923#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#belongs_to_psm#ProtocolTransition#container.belongsToPSM()
@924#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ProtocolTransition#A ProtocolTransition specifies a legal Transition for an Operation. Transitions of ProtocolStateMachines have the following information: a pre-condition (guard), a Trigger, and a post-condition. Every ProtocolTransition is associated with at most one BehavioralFeature belonging to the context Classifier of the ProtocolStateMachine.if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then     containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())else true endifeffect = nullcontainer.belongsToPSM()<p>From package UML::StateMachines.</p>
@925#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ProtocolTransition#result = (trigger->collect(event)->select(oclIsKindOf(CallEvent))->collect(oclAsType(CallEvent).operation)->asSet())
@926#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#transitions_outgoing#Pseudostate#(kind = PseudostateKind::fork) implies-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions -- such that these targets belong to different regions of that orthogonal state outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in((contState <> null) and (contState.region->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))
@927#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#choice_vertex#Pseudostate#(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
@928#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#outgoing_from_initial#Pseudostate#(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
@929#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#join_vertex#Pseudostate#(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
@930#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#junction_vertex#Pseudostate#(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
@931#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#history_vertices#Pseudostate#((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
@932#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#initial_vertex#Pseudostate#(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
@933#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#fork_vertex#Pseudostate#(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
@934#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#transitions_incoming#Pseudostate#(kind = PseudostateKind::join) implies-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions -- such that these source vertices belong to different regions of that orthogonal state incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in((contState <> null) and (contState.region->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))
@935#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Pseudostate#A Pseudostate is an abstraction that encompasses different types of transient Vertices in the StateMachine graph. A StateMachine instance never comes to rest in a Pseudostate, instead, it will exit and enter the Pseudostate within a single run-to-completion step.(kind = PseudostateKind::fork) implies-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions -- such that these targets belong to different regions of that orthogonal state outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in((contState <> null) and (contState.region->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)(kind = PseudostateKind::join) implies-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions -- such that these source vertices belong to different regions of that orthogonal state incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in((contState <> null) and (contState.region->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))<p>From package UML::StateMachines.</p>
@936#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_qualifier#QualifierValue#value.is(1,1)
@937#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_qualifier#QualifierValue#value.type.conformsTo(qualifier.type)
@938#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#qualifier_attribute#QualifierValue#linkEndData.end.qualifier->includes(qualifier)
@939#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_is_classifier#ReadExtentAction#result.type = classifier
@940#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_result#ReadExtentAction#result.is(0,*)
@941#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_type#ReadIsClassifiedObjectAction#object.type = null
@942#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_output#ReadIsClassifiedObjectAction#result.is(1,1)
@943#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#boolean_result#ReadIsClassifiedObjectAction#result.type = Boolean
@944#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_input#ReadIsClassifiedObjectAction#object.is(1,1)
@945#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_and_ordering#ReadLinkAction#self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
@946#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#compatible_multiplicity#ReadLinkAction#self.openEnd()->first().compatibleWith(result)
@947#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#visibility#ReadLinkAction#let openEnd : Property = self.openEnd()->first() in  openEnd.visibility = VisibilityKind::public or   endData->exists(oed |     oed.end<>openEnd and     (_'context' = oed.end.type or       (openEnd.visibility = VisibilityKind::protected and         _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))
@948#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_open_end#ReadLinkAction#self.openEnd()->size() = 1
@949#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#navigable_open_end#ReadLinkAction#self.openEnd()->first().isNavigable()
@950#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ReadLinkAction#A ReadLinkAction is a LinkAction that navigates across an Association to retrieve the objects on one end.self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)self.openEnd()->first().compatibleWith(result)let openEnd : Property = self.openEnd()->first() in  openEnd.visibility = VisibilityKind::public or   endData->exists(oed |     oed.end<>openEnd and     (_'context' = oed.end.type or       (openEnd.visibility = VisibilityKind::protected and         _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))self.openEnd()->size() = 1self.openEnd()->first().isNavigable()<p>From package UML::Actions.</p>
@951#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ReadLinkAction#result = (endData->select(value=null).end->asOrderedSet())
@952#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#property#ReadLinkObjectEndAction#end.association <> null
@953#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_object#ReadLinkObjectEndAction#object.is(1,1)
@954#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#ends_of_association#ReadLinkObjectEndAction#end.association.memberEnd->forAll(e | not e.isStatic)
@955#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_result#ReadLinkObjectEndAction#result.type = end.type
@956#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_result#ReadLinkObjectEndAction#result.is(1,1)
@957#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_object#ReadLinkObjectEndAction#object.type = end.association
@958#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#association_of_association#ReadLinkObjectEndAction#end.association.oclIsKindOf(AssociationClass)
@959#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_object#ReadLinkObjectEndQualifierAction#object.is(1,1)
@960#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_object#ReadLinkObjectEndQualifierAction#object.type = qualifier.associationEnd.association
@961#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_qualifier#ReadLinkObjectEndQualifierAction#qualifier.is(1,1)
@962#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#ends_of_association#ReadLinkObjectEndQualifierAction#qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
@963#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_result#ReadLinkObjectEndQualifierAction#result.is(1,1)
@964#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_type#ReadLinkObjectEndQualifierAction#result.type = qualifier.type
@965#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#association_of_association#ReadLinkObjectEndQualifierAction#qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
@966#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#qualifier_attribute#ReadLinkObjectEndQualifierAction#qualifier.associationEnd <> null
@967#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#contained#ReadSelfAction#_'context' <> null
@968#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ReadSelfAction#result.is(1,1)
@969#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_static#ReadSelfAction#let behavior: Behavior = self.containingBehavior() inbehavior.specification<>null implies not behavior.specification.isStatic
@970#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type#ReadSelfAction#result.type = _'context'
@971#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ReadSelfAction#A ReadSelfAction is an Action that retrieves the context object of the Behavior execution within which the ReadSelfAction execution is taking place._'context' <> nullresult.is(1,1)let behavior: Behavior = self.containingBehavior() inbehavior.specification<>null implies not behavior.specification.isStaticresult.type = _'context'<p>From package UML::Actions.</p>
@972#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ReadStructuralFeatureAction#structuralFeature.compatibleWith(result)
@973#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_and_ordering#ReadStructuralFeatureAction#result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered
@974#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_and_ordering#ReadVariableAction#result.type =variable.type and result.isOrdered = variable.isOrdered
@975#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#compatible_multiplicity#ReadVariableAction#variable.compatibleWith(result)
@976#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_name_as_signal#Reception#name = signal.name
@977#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#same_structure_as_signal#Reception#signal.ownedAttribute->size() = ownedParameter->size() andSequence{1..signal.ownedAttribute->size()}->forAll( i |     ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and     ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound())
@978#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Reception#A Reception is a declaration stating that a Classifier is prepared to react to the receipt of a Signal.name = signal.namesignal.ownedAttribute->size() = ownedParameter->size() andSequence{1..signal.ownedAttribute->size()}->forAll( i |     ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and     ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound())<p>From package UML::SimpleClassifiers.</p>
@979#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input_pin#ReclassifyObjectAction#object.type = null
@980#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#classifier_not_abstract#ReclassifyObjectAction#not newClassifier->exists(isAbstract)
@981#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ReclassifyObjectAction#object.is(1,1)
@982#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#redefinition_consistent#RedefinableElement#redefinedElement->forAll(re | re.isConsistentWith(self))
@983#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#non_leaf_redefinition#RedefinableElement#redefinedElement->forAll(re | not re.isLeaf)
@984#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#redefinition_context_valid#RedefinableElement#redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
@985#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#RedefinableElement#result = (false)
@986#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.<p>From package UML::Classification.</p>
@987#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#RedefinableElement#result = (redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext)))
@988#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.<p>From package UML::Classification.</p>
@989#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#RedefinableTemplateSignature#result = (redefiningElement.oclIsKindOf(RedefinableTemplateSignature))
@990#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#RedefinableTemplateSignature#The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, as redefinition only adds new formal parameters.<p>From package UML::Classification.</p>
@991#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#redefines_parents#RedefinableTemplateSignature#classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))
@992#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#RedefinableTemplateSignature#A RedefinableTemplateSignature supports the addition of formal template parameters in a specialization of a template classifier.classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))<p>From package UML::Classification.</p>
@993#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#RedefinableTemplateSignature#result = (if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter->asSet() endif)
@994#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#reducer_inputs_output#ReduceAction#let inputs: OrderedSet(Parameter) = reducer.inputParameters() inlet outputs: OrderedSet(Parameter) = reducer.outputParameters() ininputs->size()=2 and outputs->size()=1 andinputs.type->forAll(t | outputs.type->forAll(conformsTo(t)) and -- Note that the following only checks the case when the collection is via multiple tokens.collection.upperBound()>1 implies collection.type.conformsTo(t))
@995#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#output_types_are_compatible#ReduceAction#reducer.outputParameters().type->forAll(conformsTo(result.type))
@996#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ReduceAction#A ReduceAction is an Action that reduces a collection to a single value by repeatedly combining the elements of the collection using a reducer Behavior.let inputs: OrderedSet(Parameter) = reducer.inputParameters() inlet outputs: OrderedSet(Parameter) = reducer.outputParameters() ininputs->size()=2 and outputs->size()=1 andinputs.type->forAll(t | outputs.type->forAll(conformsTo(t)) and -- Note that the following only checks the case when the collection is via multiple tokens.collection.upperBound()>1 implies collection.type.conformsTo(t))reducer.outputParameters().type->forAll(conformsTo(result.type))<p>From package UML::Actions.</p>
@997#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Region#result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)
@998#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Region#The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices and Transitions conform to one of the following: (1) they are equal to corresponding elements of the redefined Region or, (2) they consistently redefine a State or Transition of the redefined region, or (3) they add new States or Transitions.<p>From package UML::StateMachines.</p>
@999#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Region#result = (if redefinedElement.oclIsKindOf(Region) then  let redefinedRegion : Region = redefinedElement.oclAsType(Region) in    if stateMachine->isEmpty() then    -- the Region is owned by a State      (state.redefinedState->notEmpty() and state.redefinedState.region->includes(redefinedRegion))    else -- the region is owned by a StateMachine      (stateMachine.extendedStateMachine->notEmpty() and        stateMachine.extendedStateMachine->exists(sm : StateMachine |          sm.region->includes(redefinedRegion)))    endifelse  falseendif)
@1000#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Region#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a Region are properly related to the redefinition contexts of the specified Region to allow this element to redefine the other. The containing StateMachine or State of a redefining Region must Redefine the containing StateMachine or State of the redefined Region.<p>From package UML::StateMachines.</p>
@1001#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#deep_history_vertex#Region#self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1
@1002#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#shallow_history_vertex#Region#subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1
@1003#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#owned#Region#(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
@1004#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#initial_vertex#Region#self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1
@1005#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Region#A Region is a top-level part of a StateMachine or a composite State, that serves as a container for the Vertices and Transitions of the StateMachine. A StateMachine or composite State may contain multiple Regions representing behaviors that may occur in parallel.self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1<p>From package UML::StateMachines.</p>
@1006#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Region#result = (if  stateMachine <> null then  stateMachine.oclIsKindOf(ProtocolStateMachine)else   state <> null  implies  state.container.belongsToPSM()endif )
@1007#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Region#The operation belongsToPSM () checks if the Region belongs to a ProtocolStateMachine.<p>From package UML::StateMachines.</p>
@1008#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Region#result = (if stateMachine = null then  state.containingStateMachine()else  stateMachineendif)
@1009#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Region#The operation containingStateMachine() returns the StateMachine in which this Region is defined.<p>From package UML::StateMachines.</p>
@1010#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Region#result = (let sm : StateMachine = containingStateMachine() inif sm._'context' = null or sm.general->notEmpty() then  smelse  sm._'context'endif)
@1011#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#removeAt_and_value#RemoveStructuralFeatureValueAction#if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then  value = null and  removeAt <> null and  removeAt.type = UnlimitedNatural and  removeAt.is(1,1)else  removeAt = null and value <> nullendif
@1012#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#removeAt_and_value#RemoveVariableValueAction#if  variable.isOrdered and not variable.isUnique and not isRemoveDuplicates then   value = null and  removeAt <> null and  removeAt.type = UnlimitedNatural and  removeAt.is(1,1)else  removeAt = null and value <> nullendif
@1013#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#pins_match_parameter#ReplyAction#let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() inreplyValue->size()=parameter->size() andSequence{1..replyValue->size()}->forAll(i |replyValue->at(i).type.conformsTo(parameter->at(i).type) andreplyValue->at(i).isOrdered=parameter->at(i).isOrdered andreplyValue->at(i).compatibleWith(parameter->at(i)))
@1014#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#event_on_reply_to_call_trigger#ReplyAction#replyToCall.event.oclIsKindOf(CallEvent)
@1015#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ReplyAction#A ReplyAction is an Action that accepts a set of reply values and a value containing return information produced by a previous AcceptCallAction. The ReplyAction returns the values to the caller of the previous call, completing execution of the call.let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() inreplyValue->size()=parameter->size() andSequence{1..replyValue->size()}->forAll(i |replyValue->at(i).type.conformsTo(parameter->at(i).type) andreplyValue->at(i).isOrdered=parameter->at(i).isOrdered andreplyValue->at(i).compatibleWith(parameter->at(i)))replyToCall.event.oclIsKindOf(CallEvent)<p>From package UML::Actions.</p>
@1016#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_target_pin#SendObjectAction#onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
@1017#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#SendObjectAction#A SendObjectAction is an InvocationAction that transmits an input object to the target object, which is handled as a request message by the target object. The requestor continues execution immediately after the object is sent out and cannot receive reply values.onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)<p>From package UML::Actions.</p>
@1018#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_ordering_multiplicity#SendSignalAction#let attribute: OrderedSet(Property) = signal.allAttributes() inSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(attribute->at(i).type) and argument->at(i).isOrdered = attribute->at(i).isOrdered andargument->at(i).compatibleWith(attribute->at(i)))
@1019#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#number_order#SendSignalAction#argument->size()=signal.allAttributes()->size()
@1020#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_target_pin#SendSignalAction#not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
@1021#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#SendSignalAction#A SendSignalAction is an InvocationAction that creates a Signal instance and transmits it to the target object. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instance is sent out and cannot receive reply values.let attribute: OrderedSet(Property) = signal.allAttributes() inSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(attribute->at(i).type) and argument->at(i).isOrdered = attribute->at(i).isOrdered andargument->at(i).compatibleWith(attribute->at(i)))argument->size()=signal.allAttributes()->size()not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)<p>From package UML::Actions.</p>
@1022#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#StartClassifierBehaviorAction#object.is(1,1)
@1023#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_has_classifier#StartClassifierBehaviorAction#object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
@1024#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StartClassifierBehaviorAction#A StartClassifierBehaviorAction is an Action that starts the classifierBehavior of the input object.object.is(1,1)object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)<p>From package UML::Actions.</p>
@1025#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StartObjectBehaviorAction#result = (self.behavior().outputParameters())
@1026#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StartObjectBehaviorAction#result = (self.behavior().inputParameters())
@1027#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_object#StartObjectBehaviorAction#object.is(1,1)
@1028#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_object#StartObjectBehaviorAction#self.behavior()<>null
@1029#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_onport#StartObjectBehaviorAction#onPort->isEmpty()
@1030#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StartObjectBehaviorAction#A StartObjectBehaviorAction is an InvocationAction that starts the execution either of a directly instantiated Behavior or of the classifierBehavior of an object. Argument values may be supplied for the input Parameters of the Behavior. If the Behavior is invoked synchronously, then output values may be obtained for output Parameters.object.is(1,1)self.behavior()<>nullonPort->isEmpty()<p>From package UML::Actions.</p>
@1031#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StartObjectBehaviorAction#result = (if object.type.oclIsKindOf(Behavior) then  object.type.oclAsType(Behavior)else if object.type.oclIsKindOf(BehavioredClassifier) then  object.type.oclAsType(BehavioredClassifier).classifierBehaviorelse  nullendifendif)
@1032#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (container.containingStateMachine())
@1033#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#State#The query containingStateMachine() returns the StateMachine that contains the State either directly or transitively.<p>From package UML::StateMachines.</p>
@1034#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)
@1035#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#State#The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be redefined (extended) to become a composite State (by adding one or more Regions) and a composite State can be redefined (extended) by adding Regions and by adding Vertices, States, and Transitions to inherited Regions. All States may add or replace entry, exit, and 'doActivity' Behaviors.<p>From package UML::StateMachines.</p>
@1036#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (if redefinedElement.oclIsKindOf(State) then  let redefinedState : State = redefinedElement.oclAsType(State) in    container.redefinedElement.oclAsType(Region)->exists(r:Region |      r.subvertex->includes(redefinedState))else  falseendif)
@1037#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#State#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a State are properly related to the redefinition contexts of the specified State to allow this element to redefine the other. This means that the containing Region of a redefining State must redefine the containing Region of the redefined State.<p>From package UML::StateMachines.</p>
@1038#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#entry_or_exit#State#connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
@1039#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#submachine_states#State#isSubmachineState implies connection->notEmpty( )
@1040#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#composite_states#State#connectionPoint->notEmpty() implies isComposite
@1041#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#destinations_or_sources_of_transitions#State#self.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
@1042#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#submachine_or_regions#State#isComposite implies not isSubmachineState
@1043#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#State#A State models a situation during which some (usually implicit) invariant condition holds.connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)isSubmachineState implies connection->notEmpty( )connectionPoint->notEmpty() implies isCompositeself.isSubmachineState implies (self.connection->forAll (cp |  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))isComposite implies not isSubmachineState<p>From package UML::StateMachines.</p>
@1044#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (region->notEmpty())
@1045#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (region->size () > 1)
@1046#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = ((region->isEmpty()) and not isSubmachineState())
@1047#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (submachine <> null)
@1048#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#State#result = (let sm : StateMachine = containingStateMachine() inif sm._'context' = null or sm.general->notEmpty() then  smelse  sm._'context'endif)
@1049#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StateMachine#result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)
@1050#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StateMachine#The query isConsistentWith() specifies that a redefining StateMachine is consistent with a redefined StateMachine provided that the redefining StateMachine is an extension of the redefined StateMachine : Regions are inherited and Regions can be added, inherited Regions can be redefined. In case of multiple redefining StateMachine, extension implies that the redefining StateMachine gets orthogonal Regions for each of the redefined StateMachine.<p>From package UML::StateMachines.</p>
@1051#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StateMachine#result = (if redefinedElement.oclIsKindOf(StateMachine) then  let redefinedStateMachine : StateMachine = redefinedElement.oclAsType(StateMachine) in    self._'context'().oclAsType(BehavioredClassifier).redefinedClassifier->      includes(redefinedStateMachine._'context'())else  falseendif)
@1052#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StateMachine#The query isRedefinitionContextValid() specifies whether the redefinition context of a StateMachine is properly related to the redefinition contexts of the specified StateMachine to allow this element to redefine the other. The context Classifier of a redefining StateMachine must redefine the context Classifier of the redefined StateMachine.<p>From package UML::StateMachines.</p>
@1053#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#connection_points#StateMachine#connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
@1054#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#classifier_context#StateMachine#_'context' <> null implies not _'context'.oclIsKindOf(Interface)
@1055#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#method#StateMachine#specification <> null implies connectionPoint->isEmpty()
@1056#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#context_classifier#StateMachine#specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))
@1057#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StateMachine#StateMachines can be used to express event-driven behaviors of parts of a system. Behavior is modeled as a traversal of a graph of Vertices interconnected by one or more joined Transition arcs that are triggered by the dispatching of successive Event occurrences. During this traversal, the StateMachine may execute a sequence of Behaviors associated with various elements of the StateMachine.connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)_'context' <> null implies not _'context'.oclIsKindOf(Interface)specification <> null implies connectionPoint->isEmpty()specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))<p>From package UML::StateMachines.</p>
@1058#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StateMachine#result = (if ancestor(s1, s2) then     s2.containerelseif ancestor(s2, s1) then    s1.container else     LCA(s1.container.state, s2.container.state)endifendif)
@1059#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StateMachine#result = (if v2.oclIsTypeOf(State) and ancestor(v1, v2) thenv2.oclAsType(State)else if v1.oclIsTypeOf(State) and ancestor(v2, v1) thenv1.oclAsType(State)else if (v1.container.state->isEmpty() or v2.container.state->isEmpty()) then null.oclAsType(State)else LCAState(v1.container.state, v2.container.state)endif endif endif)
@1060#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StateMachine#result = (if (s2 = s1) then true else if s1.container.stateMachine->notEmpty() then     trueelse     if s2.container.stateMachine->notEmpty() then         false    else        ancestor(s1, s2.container.state)     endif endifendif  )
@1061#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#binaryAssociationsOnly#Stereotype#ownedAttribute.association->forAll(memberEnd->size()=2)
@1062#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#generalize#Stereotype#allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
@1063#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#associationEndOwnership#Stereotype#ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
@1064#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Stereotype#A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.ownedAttribute.association->forAll(memberEnd->size()=2)allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)<p>From package UML::Packages.</p>
@1065#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Stereotype#result = (self.namespace.oclAsType(Package).containingProfile())
@1066#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Stereotype#result = (self.containingProfile())
@1067#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StringExpression#result = (if subExpression->notEmpty()then subExpression->iterate(se; stringValue: String = '' | stringValue.concat(se.stringValue()))else operand->iterate(op; stringValue: String = '' | stringValue.concat(op.stringValue()))endif)
@1068#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StringExpression#The query stringValue() returns the String resulting from concatenating, in order, all the component String values of all the operands or subExpressions that are part of the StringExpression.<p>From package UML::Values.</p>
@1069#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#operands#StringExpression#operand->forAll (oclIsKindOf (LiteralString))
@1070#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#subexpressions#StringExpression#if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
@1071#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StringExpression#A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters.operand->forAll (oclIsKindOf (LiteralString))if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif<p>From package UML::Values.</p>
@1072#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#StructuralFeatureAction#object.is(1,1)
@1073#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#object_type#StructuralFeatureAction#object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) orobject.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)
@1074#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#visibility#StructuralFeatureAction#structuralFeature.visibility = VisibilityKind::public or_'context'.allFeatures()->includes(structuralFeature) orstructuralFeature.visibility=VisibilityKind::protected and_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))
@1075#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#not_static#StructuralFeatureAction#not structuralFeature.isStatic
@1076#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_featuring_classifier#StructuralFeatureAction#structuralFeature.featuringClassifier->size() = 1
@1077#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StructuralFeatureAction#StructuralFeatureAction is an abstract class for all Actions that operate on StructuralFeatures.object.is(1,1)object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) orobject.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)structuralFeature.visibility = VisibilityKind::public or_'context'.allFeatures()->includes(structuralFeature) orstructuralFeature.visibility=VisibilityKind::protected and_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))not structuralFeature.isStaticstructuralFeature.featuringClassifier->size() = 1<p>From package UML::Actions.</p>
@1078#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredActivityNode#result = (node->select(oclIsKindOf(Action)).oclAsType(Action).allActions()->including(self)->asSet())
@1079#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredActivityNode#result = (self.Action::allOwnedNodes()->union(node)->union(node->select(oclIsKindOf(Action)).oclAsType(Action).allOwnedNodes())->asSet())
@1080#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredActivityNode#result = (self.Action::containingActivity())
@1081#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#output_pin_edges#StructuredActivityNode#output.outgoing.target->excludesAll(allOwnedNodes()-input)
@1082#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#edges#StructuredActivityNode#edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
@1083#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#input_pin_edges#StructuredActivityNode#input.incoming.source->excludesAll(allOwnedNodes()-output)
@1084#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#StructuredActivityNode#A StructuredActivityNode is an Action that is also an ActivityGroup and whose behavior is specified by the ActivityNodes and ActivityEdges it so contains. Unlike other kinds of ActivityGroup, a StructuredActivityNode owns the ActivityNodes and ActivityEdges it contains, and so a node or edge can only be directly contained in one StructuredActivityNode, though StructuredActivityNodes may be nested.output.outgoing.target->excludesAll(allOwnedNodes()-input)edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()input.incoming.source->excludesAll(allOwnedNodes()-output)<p>From package UML::Actions.</p>
@1085#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredActivityNode#result = (node->union(input.oclAsType(ActivityNode)->asSet())->  union(node->select(oclIsKindOf(Action)).oclAsType(Action).output)->asSet())
@1086#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredActivityNode#result = (node->union(output.oclAsType(ActivityNode)->asSet())->  union(node->select(oclIsKindOf(Action)).oclAsType(Action).input)->asSet())
@1087#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredClassifier#result = (allFeatures()->select(oclIsKindOf(ConnectableElement))->collect(oclAsType(ConnectableElement))->asSet())
@1088#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#StructuredClassifier#result = (ownedAttribute->select(isComposite))
@1089#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#parameter_substitution_formal#TemplateBinding#parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
@1090#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#one_parameter_substitution#TemplateBinding#signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
@1091#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TemplateBinding#A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template.parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)<p>From package UML::CommonStructure.</p>
@1092#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#must_be_compatible#TemplateParameter#default <> null implies default.isCompatibleWith(parameteredElement)
@1093#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#must_be_compatible#TemplateParameterSubstitution#actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))
@1094#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#own_elements#TemplateSignature#template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
@1095#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#unique_parameters#TemplateSignature#parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
@1096#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TemplateSignature#A Template Signature bundles the set of formal TemplateParameters for a template.template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)<p>From package UML::CommonStructure.</p>
@1097#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#TemplateableElement#result = (ownedTemplateSignature <> null)
@1098#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this TemplateableElement is actually a template.<p>From package UML::CommonStructure.</p>
@1099#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#TemplateableElement#result = (self.allOwnedElements()->select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)->asSet())
@1100#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of ParameterableElements that may be used as the parameteredElements for a TemplateParameter of this TemplateableElement. By default, this set includes all the ownedElements. Subclasses may override this operation if they choose to restrict the set of ParameterableElements.<p>From package UML::CommonStructure.</p>
@1101#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#TestIdentityAction#first.is(1,1) and second.is(1,1)
@1102#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_type#TestIdentityAction#first.type= null and second.type = null
@1103#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#result_is_boolean#TestIdentityAction#result.type=Boolean
@1104#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#has_one_constrainedElement#TimeConstraint#constrainedElement->size() = 1
@1105#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TimeConstraint#A TimeConstraint is a Constraint that refers to a TimeInterval.constrainedElement->size() = 1<p>From package UML::Values.</p>
@1106#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#when_non_negative#TimeEvent#when.integerValue() >= 0
@1107#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TimeEvent#A TimeEvent is an Event that occurs at a specific point in time.when.integerValue() >= 0<p>From package UML::CommonBehavior.</p>
@1108#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_expr_requires_observation#TimeExpression#expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
@1109#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#TimeExpression#A TimeExpression is a ValueSpecification that represents a time value.expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))<p>From package UML::Values.</p>
@1110#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Transition#result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)
@1111#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Transition#The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transition: A redefining Transition redefines all properties of the corresponding redefined Transition except the source State and the Trigger.<p>From package UML::StateMachines.</p>
@1112#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#state_is_external#Transition#(kind = TransitionKind::external) impliesnot (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)
@1113#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#join_segment_guards#Transition#(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
@1114#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#state_is_internal#Transition#(kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)
@1115#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#outgoing_pseudostates#Transition#source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
@1116#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#join_segment_state#Transition#(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))
@1117#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#fork_segment_state#Transition#(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))
@1118#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#state_is_local#Transition#(kind = TransitionKind::local) implies((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))
@1119#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#initial_transition#Transition#(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) impliestrigger->isEmpty()
@1120#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#fork_segment_guards#Transition#(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())
@1121#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Transition#A Transition represents an arc between exactly one source Vertex and exactly one Target vertex (the source and targets may be the same Vertex). It may form part of a compound transition, which takes the StateMachine from one steady State configuration to another, representing the full response of the StateMachine to an occurrence of an Event that triggered it.(kind = TransitionKind::external) impliesnot (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())(kind = TransitionKind::internal) implies(source.oclIsKindOf (State) and source = target)source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))(kind = TransitionKind::local) implies((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) impliestrigger->isEmpty()(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())<p>From package UML::StateMachines.</p>
@1122#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Transition#result = (container.containingStateMachine())
@1123#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Transition#The query containingStateMachine() returns the StateMachine that contains the Transition either directly or transitively.<p>From package UML::StateMachines.</p>
@1124#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Transition#result = (let sm : StateMachine = containingStateMachine() inif sm._'context' = null or sm.general->notEmpty() then  smelse  sm._'context'endif)
@1125#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#trigger_with_ports#Trigger#port->notEmpty() implies event.oclIsKindOf(MessageEvent)
@1126#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Trigger#A Trigger specifies a specific point  at which an Event occurrence may trigger an effect in a Behavior. A Trigger may be qualified by the Port on which the Event occurred.port->notEmpty() implies event.oclIsKindOf(MessageEvent)<p>From package UML::CommonBehavior.</p>
@1127#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Type#result = (false)
@1128#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Type#The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations.<p>From package UML::CommonStructure.</p>
@1129#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#structural_feature#UnmarshallAction#unmarshallType.allAttributes()->size() >= 1
@1130#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#number_of_result#UnmarshallAction#unmarshallType.allAttributes()->size() = result->size()
@1131#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_ordering_and_multiplicity#UnmarshallAction#let attribute:OrderedSet(Property) = unmarshallType.allAttributes() inSequence{1..result->size()}->forAll(i | attribute->at(i).type.conformsTo(result->at(i).type) andattribute->at(i).isOrdered=result->at(i).isOrdered andattribute->at(i).compatibleWith(result->at(i)))
@1132#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_object#UnmarshallAction#object.is(1,1)
@1133#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#object_type#UnmarshallAction#object.type.conformsTo(unmarshallType)
@1134#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#UnmarshallAction#An UnmarshallAction is an Action that retrieves the values of the StructuralFeatures of an object and places them on OutputPins. unmarshallType.allAttributes()->size() >= 1unmarshallType.allAttributes()->size() = result->size()let attribute:OrderedSet(Property) = unmarshallType.allAttributes() inSequence{1..result->size()}->forAll(i | attribute->at(i).type.conformsTo(result->at(i).type) andattribute->at(i).isOrdered=result->at(i).isOrdered andattribute->at(i).compatibleWith(result->at(i)))object.is(1,1)object.type.conformsTo(unmarshallType)<p>From package UML::Actions.</p>
@1135#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#binary_associations#UseCase#Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
@1136#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_association_to_use_case#UseCase#Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
@1137#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#cannot_include_self#UseCase#not allIncludedUseCases()->includes(self)
@1138#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#must_have_name#UseCase#name -> notEmpty ()
@1139#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#UseCase#A UseCase specifies a set of actions performed by its subjects, which yields an observable result that is of value for one or more Actors or other stakeholders of each subject.Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))not allIncludedUseCases()->includes(self)name -> notEmpty ()<p>From package UML::UseCases.</p>
@1140#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#UseCase#result = (self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet())
@1141#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#UseCase#The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase.<p>From package UML::UseCases.</p>
@1142#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#no_incoming_edges#ValuePin#incoming->isEmpty()
@1143#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#compatible_type#ValuePin#value.type.conformsTo(type)
@1144#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValuePin#A ValuePin is an InputPin that provides a value by evaluating a ValueSpecification.incoming->isEmpty()value.type.conformsTo(type)<p>From package UML::Actions.</p>
@1145#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypedElement) implies self.type.conformsTo(p.oclAsType(TypedElement).type)))
@1146#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query isCompatibleWith() determines if this ValueSpecification is compatible with the specified ParameterableElement. This ValueSpecification is compatible with ParameterableElement p if the kind of this ValueSpecification is the same as or a subtype of the kind of p. Further, if p is a TypedElement, then the type of this ValueSpecification must be conformant with the type of p.<p>From package UML::Values.</p>
@1147#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (null)
@1148#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.<p>From package UML::Values.</p>
@1149#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (null)
@1150#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.<p>From package UML::Values.</p>
@1151#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (false)
@1152#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications.<p>From package UML::Values.</p>
@1153#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (false)
@1154#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.<p>From package UML::Values.</p>
@1155#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (null)
@1156#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query realValue() gives a single Real value when one can be computed.<p>From package UML::Values.</p>
@1157#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (null)
@1158#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.<p>From package UML::Values.</p>
@1159#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#ValueSpecification#result = (null)
@1160#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.<p>From package UML::Values.</p>
@1161#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#ValueSpecificationAction#result.is(1,1)
@1162#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#compatible_type#ValueSpecificationAction#value.type.conformsTo(result.type)
@1163#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Variable#result = (if scope<>null then scope.allOwnedNodes()->includes(a)else a.containingActivity()=activityScopeendif)
@1164#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#scope_of_variable#VariableAction#variable.isAccessibleBy(self)
@1165#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Vertex#result = (if container <> nullthen-- the container is a region   container.containingStateMachine()else    if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then      self.oclAsType(Pseudostate).stateMachine   else       if (self.oclIsKindOf(ConnectionPointReference)) then          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible      else           null      endif   endifendif)
@1166#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#documentation#Vertex#The operation containingStateMachine() returns the StateMachine in which this Vertex is defined.<p>From package UML::StateMachines.</p>
@1167#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Vertex#result = (Transition.allInstances()->select(target=self))
@1168#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Vertex#result = (if (container = r) thentrueelseif (r.state->isEmpty()) thenfalseelsecontainer.state.isContainedInRegion(r)endifendif)
@1169#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Vertex#result = (if not s.isComposite() or container->isEmpty() thenfalseelseif container.state = s then trueelsecontainer.state.isContainedInState(s)endifendif)
@1170#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#body#Vertex#result = (Transition.allInstances()->select(source=self))
@1171#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#allow_access#WriteLinkAction#endData.end->exists(end |  end.type=_'context' or  end.visibility=VisibilityKind::public or   end.visibility=VisibilityKind::protected and  endData.end->exists(other |     other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))
@1172#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_result#WriteStructuralFeatureAction#result <> null implies result.is(1,1)
@1173#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_value#WriteStructuralFeatureAction#value <> null implies value.type.conformsTo(structuralFeature.type)
@1174#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity_of_value#WriteStructuralFeatureAction#value<>null implies value.is(1,1)
@1175#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#type_of_result#WriteStructuralFeatureAction#result <> null implies result.type = object.type
@1176#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#value_type#WriteVariableAction#value <> null implies value.type.conformsTo(variable.type)
@1177#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.uml25\model/UML.ecore#multiplicity#WriteVariableAction#value<>null implies value.is(1,1)
@1232#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#okInvariant#Tester#true
@1233#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#extraInvariant#Tester#true
@1234#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#badTypeInvariant#Tester#null
@1235#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#pre#Tester#true
@1236#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#body#Tester#1
@1237#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#post#Tester#true
@1238#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#pre#Tester#1
@1239#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#body#Tester#'1'
@1240#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#post#Tester#1
@1241#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#derivation#Tester#true
@1242#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#derived#Tester#true
@1243#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#derivation#Tester#1
@1244#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\pivot\tests\models/Bug418551.ecore#initial#Tester#1
@1246#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug323741.ecore#body#AType#BType.allInstances()->select(references->includes(self))->asSequence()->first()
@1247#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug323741.ecore#derivation#AType#BType.allInstances()->select(references->includes(self))->asSequence()->first()
@1248#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lower->notEmpty() then lower else 1 endif
@1249#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upper->notEmpty() then upper else 1 endif
@1250#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@1251#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@1252#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@1253#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#body#Operation#self.ownedParameter->size() = 1
@1254#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.result = templateParameter->notEmpty()
@1255#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.result = allOwnedElements->select(oclIsKindOf(ParameterableElement))
@1256#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this templateable element is actually a template.result = ownedTemplateSignature->notEmpty()
@1257#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#Type#The query isTemplate() returns whether this templateable element is actually a template.result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())
@1258#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@1259#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@1260#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@1261#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@1262#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@1263#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Bug9.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@1280#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#mustHaveName#Named#not name.oclIsUndefined()
@1281#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#mustHaveName$message#Named#'this is a \'message\'\n'
@1282#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#body#Named#true
@1283#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#pre_Post2#Named#Tuple {message : String = 'this is a \'precondition\'\n',status : Boolean = true}.status
@1284#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#pre_Pre2#Named#true
@1285#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#post#Named#true
@1286#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/ConstraintMessages.ecore#post_Post2#Named#true
@1293#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/Keys.ecore#derivation#Keyed#Direction::_'in'
@1296#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/States.ecore#HasInitialState#Statemachine#states->exists(s | s.initial)
@1297#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext.tests\src\org\eclipse\ocl\examples\test\xtext\models/States.ecore#NameIsLeadingUpperCase#State#let firstLetter : String = invalid.substring(1, 1) in firstLetter.toUpperCase() = firstLetter
@1298#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.examples.xtext2lpg\model/XBNF.ecore#derivation#RuleCall#if referredRule <> null then referredRule.name else '' endif
@1299#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Lookup.ecore#body#LookupEnvironment#LookupEnvironment{namedElements = namedElements->includingAll(elements) --, TODO-- parentEnv = parentEnv}
@1300#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Lookup.ecore#body#LookupEnvironment#LookupEnvironment {namedElements = namedElements->including(element) --, TODO-- parentEnv = parentEnv}
@1301#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Lookup.ecore#body#LookupEnvironment#throw new <%java.lang.UnsupportedOperationException%>("Enviroment::hasFinalResult() has been created for CG purposes. Don't call this method");
@1302#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Lookup.ecore#body#LookupEnvironment#throw new <%java.lang.UnsupportedOperationException%>("Enviroment::getEvaluator() has been created for CG purposes. Don't call this method");
@1303#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#BooleanLiteralExp#self.type = Boolean
@1304#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CallExp#type <> OclInvalid
@1305#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Class#ownedInvariants->isUnique(p | p?.name)
@1306#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionItem#type = ownedItem.type
@1307#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Bag implies type.oclIsKindOf(BagType)
@1308#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionLiteralExp#kind <> CollectionKind::Collection
@1309#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::OrderedSet implies type.oclIsKindOf(OrderedSetType)
@1310#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Sequence implies type.oclIsKindOf(SequenceType)
@1311#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Set implies type.oclIsKindOf(SetType)
@1312#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#CollectionLiteralPart#type <> OclInvalid
@1313#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Constraint#true 
@1314#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Element#self->closure(oclContents()->selectByKind(Element))
@1315#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.
@1316#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Element#null
@1317#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#EnumLiteralExp#self.type = referredLiteral?.owningEnumeration
@1318#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Feature#type <> OclInvalid
@1319#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IfExp#self.ownedCondition.type = Boolean
@1320#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IfExp#type <> OclInvalid
@1321#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IntegerLiteralExp#self.type = Integer
@1322#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IterateExp#ownedBody.type.conformsTo(ownedResult?.type)
@1323#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IterateExp#self.ownedResult?.ownedInit->size() = 1
@1324#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IterateExp#isSafe implies ownedIterators?->forAll(isRequired)
@1325#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IterateExp#isSafe implies not ownedSource?.type.oclAsType(CollectionType).isNullFree
@1326#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IterateExp#type = ownedResult?.type
@1327#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IterateExp#(not isSafe and ownedIterators?->exists(isRequired)) implies ownedSource?.type.oclAsType(CollectionType).isNullFree
@1328#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'any' implies ownedBody.type = 'Boolean'
@1329#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'any' implies ownedIterators->size() = 1
@1330#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'any' implies type = ownedSource?.type?.oclAsType(CollectionType).elementType
@1331#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#true
@1332#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'closure' impliestype.oclAsType(CollectionType).elementType= ownedSource?.type.oclAsType(CollectionType).elementType
@1333#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'closure' implies ownedIterators->size() = 1
@1334#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'closure' impliesownedSource?.type.oclAsType(CollectionType).elementType =if ownedBody.type.oclIsKindOf(CollectionType)then ownedBody.type.oclAsType(CollectionType).elementTypeelse ownedBody.typeendif
@1335#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'closure' impliesif ownedSource?.type?.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(OrderedSetType) thentype.oclIsKindOf(OrderedSetType)elsetype.oclIsKindOf(SetType)endif
@1336#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'collect' impliestype.oclAsType(CollectionType).elementType = ownedBody.type.flattenedType()
@1337#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'collect' impliesif ownedSource?.type.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(OrderedSetType) thentype.oclIsKindOf(SequenceType)elsetype.oclIsKindOf(BagType)endif
@1338#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#self.ownedIterators->forAll(p | ownedSource?.type.oclAsType(CollectionType).elementType.conformsTo(p?.type))
@1339#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#isSafe implies ownedIterators?->forAll(isRequired)
@1340#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#isSafe implies not ownedSource?.type.oclAsType(CollectionType).isNullFree
@1341#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'sortedBy' impliestype.oclAsType(CollectionType).elementType =ownedBody.type.oclAsType(CollectionType).elementType
@1342#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#name = 'sortedBy' impliesif ownedSource?.type.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(BagType) thentype.oclIsKindOf(SequenceType)elsetype.oclIsKindOf(OrderedSetType)endif
@1343#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#true
@1344#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#IteratorExp#(not isSafe and ownedIterators?->exists(isRequired)) implies ownedSource?.type.oclAsType(CollectionType).isNullFree
@1345#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#LetExp#type = ownedIn.type
@1346#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#LetExp#type <> OclInvalid
@1347#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#LoopExp#self.ownedIterators->forAll(p | p?.ownedInit->isEmpty())
@1348#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#LoopExp#ownedSource?.type.oclIsKindOf(CollectionType)
@1349#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#MessageExp#ownedCalledOperation->size() + ownedSentSignal->size() = 1
@1350#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#MessageExp#not ownedTarget.type.oclIsKindOf(CollectionType)
@1351#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Operation#bodyExpression <> null and bodyExpression.oclAsType(ExpressionInOCL).ownedBody <> null implies CompatibleBody(bodyExpression)
@1352#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Operation#true
@1353#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Operation#ownedPostconditions->isUnique(p | p?.name)
@1354#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Operation#ownedPreconditions->isUnique(p | p?.name)
@1355#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#OperationCallExp#ownedArguments->size() = referredOperation?.ownedParameters->size()
@1356#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#OperationCallExp#let operation : Operation = self.referredOperation inlet parameters : OrderedSet(Parameter) = operation?.ownedParameters inlet selfType : Type = operation?.owningClass inSequence{1..ownedArguments->size()}->forAll (i | let argument : OCLExpression = ownedArguments->at(i) inlet parameter : Parameter = parameters->at(i) inlet parameterType : Type = parameter?.type inlet requiredType : Type = if parameter?.isTypeof then Class else parameterType.specializeIn(self, selfType) endif inargument?.type.conformsTo(requiredType))
@1357#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#OperationCallExp#(ownedSource <> null) and isSafe implies not ownedSource?.isRequired
@1358#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Property#--Type.allInstances()->exists(c| c.ownedAttribute->includes(p))let container : ocl::OclElement = oclContainer() in container.oclIsKindOf(Class) and container.oclAsType(Class).ownedProperties->includes(self)
@1359#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Property#ownedExpression <> null and ownedExpression.oclAsType(ExpressionInOCL).ownedBody <> null implies CompatibleBody(ownedExpression)
@1360#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#PropertyCallExp#referredProperty?.owningClass 
@1361#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#PropertyCallExp#referredProperty?.type.oclAsType(Class) 
@1362#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#PropertyCallExp#type = getSpecializedReferredPropertyType()
@1363#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#PropertyCallExp#not referredProperty?.isStatic implies ownedSource?.type.conformsTo(getSpecializedReferredPropertyOwningType())
@1364#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#PropertyCallExp#(ownedSource <> null) and isSafe implies not ownedSource?.isRequired
@1365#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#PropertyCallExp#(ownedSource <> null) and not isSafe implies ownedSource?.isRequired
@1366#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#SelfType#selfType
@1367#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#ShadowExp#type <> OclInvalid
@1368#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#ShadowPart#type <> OclInvalid
@1369#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#StateExp#type <> OclInvalid
@1370#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Type#self
@1371#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Type#self
@1372#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#TypedElement#bodySpecification.type?.conformsTo(self.type)
@1373#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.
@1374#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.
@1375#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications.
@1376#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.
@1377#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.
@1378#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.
@1379#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#Variable#ownedInit <> null implies ownedInit?.type?.conformsTo(type)
@1380#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#VariableDeclaration#type <> OclInvalid
@1381#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.pivot\model/Pivot.ecore#body#VariableExp#type <> OclInvalid
@1382#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.xtext.essentialocl\model/EssentialOCLCS.ecore#documentation#AbstractNameExpCS#The sourceTypeValue propates the known value of a source expression when the type is itself a type. This is used during analysis of for instance allInstances() and oclType().
@1383#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.xtext.markup\model/Markup.ecore#get#FigureElement#return internalGetId();
@1384#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.xtext.markup\model/Markup.ecore#get#FigureElement#return internalGetActualWidth();
@1385#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.ocl.xtext.markup\model/Markup.ecore#get#FigureElement#return internalGetActualHeight();
@1386#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.qvtd.cs2as.compiler.tests\src\org\eclipse\qvtd\cs2as\compiler\tests\models\example1/EnvExample1.ecore#body#LookupEnvironment#LookupEnvironment{namedElements = namedElements->includingAll(elements),parentEnv = parentEnv}
@1387#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.qvtd.cs2as.compiler.tests\src\org\eclipse\qvtd\cs2as\compiler\tests\models\example1/EnvExample1.ecore#body#LookupEnvironment#LookupEnvironment{namedElements = namedElements->including(element),parentEnv = parentEnv}
@1388#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.qvtd.cs2as.compiler.tests\src\org\eclipse\qvtd\cs2as\compiler\tests\models\example1/EnvExample1.ecore#body#Env4CG#throw new <%java.lang.UnsupportedOperationException%>("LookupEnvironment::hasFinalResult() has been created for CG purposes. Don't call this method");
@1389#E:/FinalProject Repos/repos\adilinam\QVTdCaseStudy\org.eclipse.qvtd.cs2as.compiler.tests\src\org\eclipse\qvtd\cs2as\compiler\tests\models\example1/EnvExample1.ecore#body#Env4CG#throw new <%java.lang.UnsupportedOperationException%>("LookupEnvironment::getEvaluator() has been created for CG purposes. Don't call this method");
@2780#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelRel#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (ModelRel) metatype;
@2781#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelRel#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (Model) supertype;
@2782#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelRel#return (MID) this.eContainer();
@2783#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementReference#ExtendibleElement object = this.getObject();return (object == null) ? null : object.getUri();
@2784#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementReference#return (this.getContainedObject() == null) ?this.getReferencedObject() :this.getContainedObject();
@2785#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementReference#return this.getObject().getMIDContainer();
@2786#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementReference#return this.getObject().isTypesLevel();
@2787#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementReference#return this.getObject().isInstancesLevel();
@2788#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementReference#return this.getObject().isWorkflowsLevel();
@2789#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementEndpointReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (ExtendibleElementEndpoint) object;
@2790#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementEndpointReference#ExtendibleElementReference supertypeRef = super.getSupertypeRef();return (supertypeRef == null) ? null : (ExtendibleElementEndpointReference) supertypeRef;
@2791#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementEndpointReference#ExtendibleElementEndpoint object = this.getObject();return (object == null) ? null : object.getTargetUri();
@2792#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelEndpointReference#ExtendibleElementEndpoint object = super.getObject();return (object == null) ? null : (ModelEndpoint) object;
@2793#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelEndpointReference#ExtendibleElementEndpointReference supertypeRef = super.getSupertypeRef();return (supertypeRef == null) ? null : (ModelEndpointReference) supertypeRef;
@2794#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (ModelElement) object;
@2795#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementReference#ExtendibleElementReference supertypeRef = super.getSupertypeRef();return (supertypeRef == null) ? null : (ModelElementReference) supertypeRef;
@2796#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Mapping#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (Mapping) metatype;
@2797#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Mapping#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (Mapping) supertype;
@2798#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Mapping#return (MID) this.eContainer().eContainer();
@2799#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementEndpoint#ExtendibleElementEndpoint metatype = super.getMetatype();return (metatype == null) ? null : (ModelElementEndpoint) metatype;
@2800#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementEndpoint#ExtendibleElementEndpoint supertype = super.getSupertype();return (supertype == null) ? null : (ModelElementEndpoint) supertype;
@2801#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementEndpoint#return (MID) this.eContainer().eContainer().eContainer();
@2802#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementEndpoint#ExtendibleElement target = super.getTarget();return (target == null) ? null : (ModelElement) target;
@2803#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#MappingReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (Mapping) object;
@2804#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#MappingReference#ExtendibleElementReference supertypeRef = super.getSupertypeRef();return (supertypeRef == null) ? null : (MappingReference) supertypeRef;
@2805#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#BinaryMappingReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (BinaryMapping) object;
@2806#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementEndpointReference#ExtendibleElementEndpoint object = super.getObject();return (object == null) ? null : (ModelElementEndpoint) object;
@2807#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElementEndpointReference#ExtendibleElementEndpointReference supertypeRef = super.getSupertypeRef();return (supertypeRef == null) ? null : (ModelElementEndpointReference) supertypeRef;
@2808#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Editor#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (Editor) metatype;
@2809#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Editor#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (Editor) supertype;
@2810#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Editor#return (MID) this.eContainer();
@2811#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Operator#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (Operator) metatype;
@2812#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Operator#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (Operator) supertype;
@2813#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Operator#return (MID) this.eContainer();
@2814#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#WorkflowOperator#MMINTException.mustBeType(this);try {return (MID) FileUtils.readModelFileInState(this.getMidUri());}catch (Exception e) {return null;}
@2815#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#WorkflowOperator#MMINTException.mustBeInstance(this);try {return (MID) FileUtils.readModelFile(this.getMidUri(), true);}catch (Exception e) {return null;}
@2816#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#GenericEndpoint#ExtendibleElementEndpoint supertype = super.getSupertype();return (supertype == null) ? null : (GenericEndpoint) supertype;
@2817#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#GenericEndpoint#GenericElement target = MIDTypeRegistry.getType(getMetatargetUri());return target;
@2818#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#GenericEndpoint#setMetatargetUri(newTarget.getUri());
@2819#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#GenericEndpoint#ExtendibleElementEndpoint metatype = super.getMetatype();return (metatype == null) ? null : (GenericEndpoint) metatype;
@2820#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#MID#return this.getLevel() == MIDLevel.TYPES;
@2821#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#MID#return this.getLevel() == MIDLevel.INSTANCES;
@2822#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#MID#return this.getLevel() == MIDLevel.WORKFLOWS;
@2823#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#MID#EList<ModelRel> modelRels = new BasicEList<>();for (Model model : this.getModels()) {if (model instanceof ModelRel) {modelRels.add((ModelRel) model);}}return modelRels;
@2824#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElement#return MIDTypeRegistry.getType(getMetatypeUri());
@2825#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElement#return this.getLevel() == midLevel;
@2826#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementEndpoint#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (ExtendibleElementEndpoint) metatype;
@2827#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementEndpoint#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (ExtendibleElementEndpoint) supertype;
@2828#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ExtendibleElementEndpoint#ExtendibleElement target = this.getTarget();return (target == null) ? null : target.getUri();
@2829#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Model#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (Model) metatype;
@2830#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Model#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (Model) supertype;
@2831#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#Model#return (MID) this.eContainer();
@2832#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElement#ExtendibleElement metatype = super.getMetatype();return (metatype == null) ? null : (ModelElement) metatype;
@2833#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElement#ExtendibleElement supertype = super.getSupertype();return (supertype == null) ? null : (ModelElement) supertype;
@2834#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelElement#return (MID) this.eContainer().eContainer();
@2835#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelEndpoint#ExtendibleElementEndpoint metatype = super.getMetatype();return (metatype == null) ? null : (ModelEndpoint) metatype;
@2836#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelEndpoint#ExtendibleElementEndpoint supertype = super.getSupertype();return (supertype == null) ? null : (ModelEndpoint) supertype;
@2837#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelEndpoint#return (MID) this.eContainer().eContainer();
@2838#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core\edu.toronto.cs.se.mmint\model/mid.ecore#body#ModelEndpoint#ExtendibleElement target = super.getTarget();return (target == null) ? null : (Model) target;
@2839#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\Kleisli\edu.toronto.cs.se.modelepedia.kleisli\model/kleisli.ecore#derivation#KleisliModelEndpoint#extendedTarget.uri
@2840#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\Kleisli\edu.toronto.cs.se.modelepedia.kleisli\model/kleisli.ecore#derivation#KleisliModelEndpointReference#object.oclAsType(kleisli::KleisliModelEndpoint).extendedTargetUri
@2841#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\MAVO\edu.toronto.cs.se.mmint.mavo\model/mavomid.ecore#body#MAVOModelEndpoint#ExtendibleElement target = super.getTarget();return (target == null) ? null : (MAVOModel) target;
@2842#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\MAVO\edu.toronto.cs.se.mmint.mavo\model/mavomid.ecore#body#MAVOModelElementReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (MAVOModelElement) object;
@2843#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\MAVO\edu.toronto.cs.se.mmint.mavo\model/mavomid.ecore#body#MAVOModelEndpointReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (MAVOModelEndpoint) object;
@2844#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\MAVO\edu.toronto.cs.se.mmint.mavo\model/mavomid.ecore#body#MAVOMappingReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (MAVOMapping) object;
@2845#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Core-Extensions\MAVO\edu.toronto.cs.se.mmint.mavo\model/mavomid.ecore#body#BinaryMAVOMappingReference#ExtendibleElement object = super.getObject();return (object == null) ? null : (BinaryMAVOMapping) object;
@2846#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\ClassDiagram\edu.toronto.cs.se.modelepedia.classdiagram\model/classdiagram.ecore#derivation#Dependency#if depender.oclIsUndefined() or dependee.oclIsUndefined() then '' else depender.name.concat(' 2 ').concat(dependee.name) endif
@2847#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\ClassDiagram\edu.toronto.cs.se.modelepedia.classdiagram_mavo\model/classdiagram_mavo.ecore#derivation#Dependency#if depender.oclIsUndefined() or dependee.oclIsUndefined() then '' else depender.name.concat(' 2 ').concat(dependee.name) endif
@2848#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#onlyDependums#IStar#dependums->forAll(linksAsSrc->isEmpty() and linksAsTgt->isEmpty())
@2849#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#noDependums#Actor#intentions->forAll(dependerLinks->isEmpty() and dependeeLinks->isEmpty())
@2850#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#derivation#IntentionLink#if src.oclIsUndefined() or tgt.oclIsUndefined() then '' else src.name.concat(' 2 ').concat(tgt.name) endif
@2851#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#srcTask#MeansEnd#src.oclIsTypeOf(Task)
@2852#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#tgtGoal#MeansEnd#tgt.oclIsTypeOf(Goal)
@2853#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#tgtTask#Decomposition#tgt.oclIsTypeOf(Task)
@2854#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#tgtSoftgoal#Contribution#tgt.oclIsTypeOf(SoftGoal)
@2855#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#derivation#DependerLink#if depender.oclIsUndefined() or dependum.oclIsUndefined() then '' else depender.name.concat(' 2 ').concat(dependum.name) endif
@2856#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\IStar\edu.toronto.cs.se.modelepedia.istar\model/istar.ecore#derivation#DependeeLink#if dependum.oclIsUndefined() or dependee.oclIsUndefined() then '' else dependum.name.concat(' 2 ').concat(dependee.name) endif
@2866#E:/FinalProject Repos/repos\adisandro\MMINT\plugins\Types\PetriNet\edu.toronto.cs.se.modelepedia.petrinet\model/petrinet.ecore#nodeTypes#Arc#src.oclIsKindOf(Place) and tgt.oclIsKindOf(Transition) or src.oclIsKindOf(Transition) and tgt.oclIsKindOf(Place)
@2867#E:/FinalProject Repos/repos\adolfosbh\cs2as\oclDependencyAnalysis\model/CS2ASAnalysis.ecore#body#ShadowPartAction#return super.toString();
@2868#E:/FinalProject Repos/repos\adolfosbh\cs2as\oclDependencyAnalysis\model/graph.ecore#body#Node#return toString().hashCode();
@2869#E:/FinalProject Repos/repos\adolfosbh\cs2as\oclDependencyAnalysis\model/graph.ecore#body#Node#return toString().equals(object.toString());
@2870#E:/FinalProject Repos/repos\adolfosbh\cs2as\oclDependencyAnalysis\model/graph.ecore#body#Edge#return toString().hashCode();
@2871#E:/FinalProject Repos/repos\adolfosbh\cs2as\oclDependencyAnalysis\model/graph.ecore#body#Edge#return toString().equals(object.toString());
@2888#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#EntityNameIsUnique#Entity#Entity.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
@2889#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#FeatureInEntityIsUnique#Entity#features -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
@2890#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#NoSelfInheritance#Entity#self.superType <> self
@2891#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#AttributeTypeIsValid#Attribute#self.type <> AttributeType::None xor self.enumeration <> null
@2892#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#RelationshipMultiplicityIsValid#Relationship#self.lowerBound >= 0 and (self.upperBound >= lowerBound or self.upperBound = -1)
@2893#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#OppositeRelationshipsReferenceEachOther#Relationship#self.opposite -> forAll(o | o.opposite = self)
@2894#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#OppositeRelationshipTypeIsValid#Relationship#self.opposite <> null implies self.target = Entity.allInstances() -> select(e | e.features -> select(f | f.oclIsKindOf(Relationship)) -> includes(self.opposite)) -> asOrderedSet() -> first()
@2895#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#EnumerationNameIsUnique#Enumeration#Enumeration.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
@2896#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#LiteralInEnumerationIsUnique#Enumeration#literals -> forAll(e1, e2 | e1 <> e2 implies e1.name <> e2.name)
@2897#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#FirstLetterInFormTitleIsUpperCase#Form#self.title.at(1).matches('[A-Z]')
@2898#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#ExactlyOneWelcomePageExists#Form#Form.allInstances() -> select(f | f.welcomeForm = true) -> size() = 1
@2899#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#PageElementsReferToFormEntityFeatures#Form#self.entity.features -> union(self.entity -> closure(superType).features) -> includesAll(self.pages.pageElements -> selectByKind(AttributePageElement).attribute.oclAsType(Feature) -> union(self.pages.pageElements -> selectByKind(RelationshipPageElement).relationship.oclAsType(Feature)))
@2900#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#AttributeOfConditionIsValid#Form#(self.pages.pageElements -> selectByKind(AttributePageElement).attribute)-> includesAll(self.pages.condition -> selectByKind(CompositeCondition) -> closure(v:CompositeCondition | v.composedConditions -> selectByKind(CompositeCondition)) -> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(AttributeValueCondition).attribute -> union(self.pages.condition -> selectByKind(AttributeValueCondition).attribute) -> union(self.pages.condition -> selectByKind(CompositeCondition).composedConditions -> selectByKind(AttributeValueCondition).attribute)-> union(self.pages.pageElements.condition -> selectByKind(CompositeCondition) -> closure(v:CompositeCondition | v.composedConditions -> selectByKind(CompositeCondition)) -> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(AttributeValueCondition).attribute -> union(self.pages.pageElements.condition -> selectByKind(AttributeValueCondition).attribute) -> union(self.pages.pageElements.condition -> selectByKind(CompositeCondition).composedConditions -> selectByKind(AttributeValueCondition).attribute)))
@2901#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#FirstLetterInPageTitleIsUpperCase#Page#self.title.at(1).matches('[A-Z]')
@2902#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#ElementIDIsUnique#PageElement#PageElement.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
@2903#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#SelectionFieldAttributeTypeIsValid#SelectionField#self.attribute.type = AttributeType::Boolean or self.attribute.enumeration <> null
@2904#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#TableColumnRefersToTargetEntityFeature#Table#self.editingForm.entity.features -> union(self.editingForm.entity -> closure(superType).features) -> includesAll(self.columns.attribute)
@2905#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#ConditionIDIsUnique#Condition#Condition.allInstances() -> select(n | n.conditionID = self.conditionID) ->excluding(self) ->isEmpty()
@2906#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#ComposedConditionTypesAreEqual#CompositeCondition#self.composedConditions -> forAll(c | c.type = self.type)
@2907#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#EditingFormIsNotWelcomeForm#RelationshipPageElement#self.editingForm.welcomeForm = false
@2908#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#EditingFormRefersToRelationshipTarget#RelationshipPageElement#self.relationship.target = self.editingForm.entity
@2909#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#DateIsValid#DateSelectionField#self.attribute.type = AttributeType::Date
@2910#E:/FinalProject Repos/repos\Advanced-Model-Engineering-SS16\xtext-ocl-extensions\at.ac.tuwien.big.forms\model/forms.ecore#TimeIsValid#TimeSelectionField#self.attribute.type = AttributeType::Time
@2934#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#numberOfOutgoingFromSplitPlusTheDifferencesBetweenNumberOfMergesAndSplitsEqualsNumberOfIngoingToMerge#Workflow#let numberOfSplits : Integer = self.nodes->select(t| t.oclIsKindOf(Split))->size(),numberOfMerges : Integer = self.nodes->select(t| t.oclIsKindOf(Merge))->size(),numberOfOutgoingSplits : Integer = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks->size())->sum(),numberOfIngoingMerge : Integer = self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.previousTasks->size())->sum() innumberOfIngoingMerge = numberOfOutgoingSplits + numberOfMerges - numberOfSplits
@2935#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#numberOfOutgoingFromSwitchAndIfElsePlusTheDifferencesBetweenNumberOfWaitForOneAndIfElseMinusSwitchesEqualsNumberOfIngoingToWaitForOne#Workflow#let numberOfIfElse : Integer = self.nodes->select(t| t.oclIsKindOf(IfElse))->size(),numberOfSwitch : Integer = self.nodes->select(t| t.oclIsKindOf(Switch))->size(),numberOfWaitForOne : Integer = self.nodes->select(t| t.oclIsKindOf(WaitForOne))->size(), numberOfOutgoingSwitch : Integer = self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks->size())->sum(),numberOfOutgoingIfElse : Integer = self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(s: IfElse | s.tasks->size())->sum(),numberOfIngoingWaitForOne : Integer = self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(s: WaitForOne | s.previousTasks->size())->sum() innumberOfIngoingWaitForOne = numberOfOutgoingSwitch + numberOfOutgoingIfElse + numberOfWaitForOne - numberOfIfElse - numberOfSwitch
@2936#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#startExistsOnce#Workflow#self.nodes->select(n| n.oclIsKindOf(Task))->select(t: Task | t.start = true)->size() = 1
@2937#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#endExistsOnce#Workflow#self.nodes->select(n| n.oclIsKindOf(Task))->select(t: Task | t.end = true)->size() = 1
@2938#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#onlyOneTransitionAllowedToReferenceSameTask#Workflow#let allRefs : Bag = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks)->union(self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.task))->union(self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks))->union(self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(i: IfElse | i.tasks))->union(self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(w: WaitForOne | w.task))->union(self.nodes->select(t| t.oclIsKindOf(Simple))->collect(s: Simple | s.task)),uniqueRef : Set = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks)->asSet()->union(self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.task)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(i: IfElse | i.tasks)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(w: WaitForOne | w.task)->asSet())->union(self.nodes->select(t| t.oclIsKindOf(Simple))->collect(s: Simple | s.task)->asSet())in uniqueRef->size() = allRefs->size()
@2939#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#uniqeNamesForTasks#Workflow#self.nodes->select(t | t.oclIsKindOf(Task))->forAll(p1, p2 | p1 <> p2 implies p1.name <> p2.name)
@2940#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#nameMustBePresent#Node#self.name.oclIsUndefined() = false 
@2941#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesForEnd#Task#if self.end = true then self.transition->size() = 0else trueendif
@2942#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noMoreThanOneOutReferenceForTasks#Task#self.transition->size() < 2
@2943#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#splitMustHaveOneIncomingTask#Split#self.previousTasks->size() = 1
@2944#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesToStart#Split#self.tasks->select(t | t.start = true)->size() = 0
@2945#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#mergeMustHaveMoreThanOneIncomingTask#Merge#self.previousTasks->size() > 1
@2946#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesToStart#Merge#self.task->select(t | t.start = true)->size() = 0
@2947#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#simpleMustHaveOneIncomingTask#Simple#self.previousTasks->size() = 1
@2948#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesToStart#Simple#self.task->select(t | t.start = true)->size() = 0
@2949#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#ifElseMustHaveOneIncomingTask#IfElse#self.previousTasks->size() = 1
@2950#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesToStart#IfElse#self.tasks->select(t | t.start = true)->size() = 0
@2951#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#switchMustHaveOneIncomingTask#Switch#self.previousTasks->size() = 1
@2952#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesToStart#Switch#self.tasks->select(t | t.start = true)->size() = 0
@2953#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#waitForOneMustHaveTwoIncomingTasks#WaitForOne#self.previousTasks->size() > 1
@2954#E:/FinalProject Repos/repos\ajgustafsson\mde\engine\model/engine.ecore#noOutReferencesToStart#WaitForOne#self.task->select(t | t.start = true)->size() = 0
@2955#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#nameEmpty#DataBaseElement#not (self.name->isEmpty())
@2956#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#illegalName#DataBaseElement#Sequence{1 .. self.name.size()}->collect(i | self.name.substring(i, i))->excludes(' ')
@2957#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#tableNameUnique#Schema#self.tables->isUnique(name.toUpperCase())
@2958#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#noIdName#Table#not (self.columns->exists(name.toUpperCase() = 'id'.toUpperCase()))
@2959#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#columnNameUnique#Table#self.columns->isUnique(name.toUpperCase())
@2960#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#cycleForeignKey#Table#not(self.foreignKeys->notEmpty() and self.foreignKeys->exists(reference.name = self.name))
@2961#E:/FinalProject Repos/repos\alberto-salido\DataBaseEditor\metamodel/dataBase.ecore#sameTypeAtLink#ForeignKey#self.column.type = self.reference.primaryKey.type
@2976#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#NumberOfStartNode#SimpleBPMN#self.StartNodes->select(m : SimpleBPMN | m.oclIsTypeOf(Start))->size() < 2
@2977#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#NumberOfEndNode#SimpleBPMN#self.EndNodes->select(m : SimpleBPMN | m.oclIsTypeOf(End))->size() < 2
@2978#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#NoLoopsFromNormalFlow#NormalF#self.from <> self.to
@2979#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#ConditionalINnorvoid#ConditionalIN#self.cond.size() > 0
@2980#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#ConditionalINOUTnorvoid#ConditionalINOUT#self.cond.size() > 0
@2981#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#IntervalPositive#Interval#self.name.size() >= 0
@2982#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#PDescriptionNOTvoid#Descripcion#self.name.size() > 0
@2983#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#ParticipantETSKNOTvoid#ParticipantETSK#self.name.size() > 0
@2984#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#DatainETSKNOTvoid#datainETSK#self.name.size() > 0
@2985#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#dataoutETSKNOTvoid#dataoutETSK#self.name.size() > 0
@2986#E:/FinalProject Repos/repos\aliriorivera\BPMNGraphicEditor\Third\model/Third.ecore#DateETSKNOTvoid#DateETSK#self.name.size() > 0
@2987#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#Role#self.roleContextEnabling.oclAsType(TemporalContext).timeexpression.absolute->flatten()->asSet() -> select (i:AbsoluteTE| u.getCurrentTime().isContained(i.oclAsType(TimeInterval))= true) -> any (true) 
@2988#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#Role#if self.juniors -> notEmpty() then             self.juniors-> asSet() -> union (self.juniors-> asSet()-> collect (r:Role| r.getAlljuniors()-> asSet())->asSet())                         else                self.juniors             endif 
@2989#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RBACUtility#        self.currentT 
@2990#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RBACUtility#self.currentDay
@2991#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RBACUtility#duration
@2992#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#AbsoluteTE#self.duration -> notEmpty()
@2993#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#ActivationDuration#self.timeUnit = d.timeUnit      and self.value> d.value
@2994#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#TimePoint#self.day = t.day and       self.month = t.month and      self.year = t.year and      self.hour = t.hour and      self.minute = t.minute and      self.second = t.second
@2995#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#TimePoint#      if self.year < t.year then true       else             if self.year = t.year then              if  self.month < t.month then             true             else              if  self.month = t.month then                             if self.day < t.day then                 true              else              if self.day = t.day then               if self.hour < t.hour then                 true              else              if self.hour < t.hour then              true              else              if self.hour = t.hour then              if self.minute < t.minute then              true              else              if self.second < t.second then              true              else              false              endif              endif              else              false              endif              endif              endif              else              false              endif              endif              else              false              endif             endif             else             false             endif      endif
@2996#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#TimePoint#      if self.year > t.year then true       else             if self.year = t.year then              if  self.month > t.month then             true             else              if  self.month = t.month then                             if self.day > t.day then                 true              else              if self.day = t.day then               if self.hour > t.hour then                 true              else              if self.hour > t.hour then              true              else              if self.hour = t.hour then              if self.minute > t.minute then              true              else              if self.second > t.second then              true              else              false              endif              endif              else              false              endif              endif              endif              else              false              endif              endif              else              false              endif             endif             else             false             endif      endif
@2997#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#TimePoint#    self.equalTo(t.end) or (self.isBefore (t.end) and (self.isAfter(t.start) or self.equalTo(t.start)))      
@2998#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#ComposedRelativeTE#let hour :ecore::EInt = u.getCurrentTime().hour in if self.overlay -> notEmpty() and  self.overlay ->flatten() ->exists(a|a.oclIsTypeOf(HourOfDay) or          a.oclAsType(RelativeTimeInterval).start.oclIsTypeOf(HourOfDay)) thenself.overlay -> exists (h: ComposedRelativeTE|h.oclIsTypeOf(RelativeTimeInterval) = true          and h.oclAsType(RelativeTimeInterval).start.oclIsTypeOf(HourOfDay) = true         and h.oclAsType(RelativeTimeInterval).end.oclIsTypeOf(HourOfDay) = true and          h.oclAsType(RelativeTimeInterval).start.oclAsType(HourOfDay).hour <= hour   and         (h.oclAsType(RelativeTimeInterval).end.oclAsType(HourOfDay).hour > hour or         (h.oclAsType(RelativeTimeInterval).end.oclAsType(HourOfDay).hour = hour and u.getCurrentTime().minute = 0 )         ))      else      true      endif         
@2999#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#ComposedRelativeTE#let  day:RelativeTimePoint =  u.getDayOfWeek() in if self.overlay -> notEmpty()  and  self.overlay ->flatten() ->exists(a|a.oclIsTypeOf(DayOfWeek) or          a.oclAsType(RelativeTimeInterval).start.oclIsTypeOf(DayOfWeek)) then /* relative time interval */ self.overlay -> exists (t: ComposedRelativeTE|t.oclIsTypeOf(RelativeTimeInterval) = true and  day.isContained(t.oclAsType(RelativeTimeInterval))  = true and                 t.checkHours(u)= true)  or                  /* relative time point */                 self.overlay -> exists (t:ComposedRelativeTE|t.oclIsTypeOf(DayOfWeek) = true and                  day.equalTo (t.oclAsType(DayOfWeek)) = true and            t.checkHours(u)= true)      else      true      endif         
@3000#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#ComposedRelativeTE#let  day:RelativeTimePoint =  u.getDayOfWeek() in if self.overlay -> notEmpty()  and  self.overlay ->flatten() ->exists(a|a.oclIsTypeOf(DayOfWeek) or          a.oclAsType(RelativeTimeInterval).start.oclIsTypeOf(DayOfWeek)) then          /* relative time interval */         self.overlay -> exists (t: ComposedRelativeTE|t.oclIsTypeOf(RelativeTimeInterval) = true and  day.isContained(t.oclAsType(RelativeTimeInterval))  = true and day.rank = t.oclAsType(RelativeTimeInterval).start.oclAsType(DayOfWeek).rank and                 t.checkHours(u)= true)          or         /* relative time point */                 self.overlay -> exists (t:ComposedRelativeTE|t.oclIsTypeOf(DayOfWeek) = true and                  day.equalTo (t.oclAsType(DayOfWeek)) = true and day.rank = t.oclAsType(DayOfWeek).rank and            t.checkHours(u)= true)      else      true      endif         
@3001#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#ComposedRelativeTE# let month :ecore::EInt = u.getCurrentTime().month in  (self.oclIsTypeOf(MonthOfYear) = true    and self.oclAsType(MonthOfYear).month  = month and    self.checkHours(u)= true and self.checkDays(u)= true)     or    (self.oclIsTypeOf(RelativeTimeInterval) = true          and self.oclAsType(RelativeTimeInterval).start.oclIsTypeOf(MonthOfYear) = true         and self.oclAsType(RelativeTimeInterval).end.oclIsTypeOf(MonthOfYear) = true and          self.oclAsType(RelativeTimeInterval).start.oclAsType(MonthOfYear).month <= month   and         self.oclAsType(RelativeTimeInterval).end.oclAsType(MonthOfYear).month >= month and         self.checkHours(u)= true and self.checkDays(u)= true)
@3002#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RelativeTimePoint#      if self.oclIsTypeOf(DayOfWeek)  then            /*self.isBefore (t.end) and (self.isAfter(t.start) or self.equalTo(t.start)) */           self.equalTo(t.start) or ( t.start.isBefore (self) and (t.end.isAfter(self) or self.equalTo(t.end)))                   else          false      endif
@3003#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RelativeTimePoint#if self.oclIsTypeOf(DayOfWeek) then              self.oclAsType(DayOfWeek).day = t.oclAsType(DayOfWeek).day             else             true             endif
@3004#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RelativeTimePoint#if self.oclIsTypeOf(DayOfWeek) then            let Days: OrderedSet(DayType) =OrderedSet{DayType::Monday, DayType::Tuesday,           DayType::Wednesday, DayType::Thursday, DayType::Friday, DayType::Saturday, DayType::Sunday}         in   Days-> indexOf (self.oclAsType(DayOfWeek).day) > Days-> indexOf (t.oclAsType(DayOfWeek).day)      else          false      endif
@3005#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#RelativeTimePoint#if self.oclIsTypeOf(DayOfWeek) then             let Days: OrderedSet(DayType) =OrderedSet{DayType::Monday, DayType::Tuesday, DayType::Wednesday, DayType::Thursday, DayType::Friday, DayType::Saturday, DayType::Sunday} in   Days-> indexOf (self.oclAsType(DayOfWeek).day) < Days-> indexOf (t.oclAsType(DayOfWeek).day)      else          false      endif
@3006#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#Location# /* (self.label= 'zone1' and l.label = 'A') or  (self.label= 'zoneL1' and l.label = 'A') or  (self.label= 'zone3' and l.label = 'C'); */   if self.label= 'insideDarfurZone1' then       l.label = 'pJ'   else      if self.label= 'outsideDarfurZone1' then         l.label = 'pK'      else       let  a: String = self.locationID.substring(self.locationID.size(),self.locationID.size()),                     n: Integer = a.toInteger() in                     (n.mod(2)= 0)                 endif             endif
@3007#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-CTX-model\GemRBACCTX\model/gemRBAC.ecore#body#Location#      /*Location.allInstances()->select(l|l.label = 'zone3')->any(true);*/            if self.locationID = 'LLAgencyAdmin' then        Location.allInstances()->select(l|l.label = 'outsideDarfurZone1')->any(true)        else        if self.locationID = 'LLMisionAdmin' then        Location.allInstances()->select(l|l.label = 'insideDarfurZone1')->any(true)      else         self      endif      endif
@3027#E:/FinalProject Repos/repos\AmeniBF\GemRBAC-model\GemRBAC-Ecore\model/GemRBAC.ecore#body#Role#if self.juniors -> notEmpty() then             self.juniors-> asSet() -> union (self.juniors-> asSet()-> collect (r:Role| r.getAlljuniors()-> asSet())->asSet())                         else                self.juniors             endif 
@3028#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantCodeCityLength#City#(self.code.size() = 5 and self.code.toInteger() > 0 and self.code.toInteger() <99999)
@3029#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantRegExpCode#City#self.code.matches('^[0-9]+')
@3030#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantCityLength#City#(self.city.size() <= 35 and self.city.size() > 0)
@3031#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantRegExpAge#Classification#self.age.matches('^[0-9]+')
@3032#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantCodeCountryLength#Country#self.isoCode.size() = 3
@3033#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantRegExpCountry#Country#self.isoCode.matches('^[A-Z]+')
@3034#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantCountryLength#Country#(self.isoCode.size() <= 55 and self.isoCode.size() >= 3)
@3035#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantStatusLength#Status#self.status.size() = 1
@3036#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantRegExpStatus#Status#self.status.matches('^[1-9]+')
@3037#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantDescriptionStatusLength#Status#self.status.size() <= 255
@3038#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantAddressLength#Theater#(self.address.size() <= 55 and self.address.size() >= 5)
@3039#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantTheterLength#Theater#(self.theater.size() <= 55 and self.theater.size() >= 5)
@3040#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantFullNameDirectorLength#Director#(self.fullName.size() >= 3 and self.fullName.size() <= 55)
@3041#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantGenresListLength#Film#self.genres->isEmpty() = false
@3042#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantDirectorsListLength#Film#self.directors->isEmpty() = false
@3043#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantTitleLength#Film#(self.title.size() >= 3 and self.title.size() <= 150)
@3044#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantSynopsisLength#Film#(self.synopsis.size() >= 10 and self.synopsis.size() <= 255)
@3045#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantDuration#Film#(self.duration > 60000)
@3046#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantLanguagesListLength#AudioFormat#self.languages->size() = 2
@3047#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantDescriptionAudioFormatLength#AudioFormat#self.description.size() <= 255
@3048#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantCodeLanguageLength#Language#self.isoCode.size() = 3
@3049#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantRegExpIsoCodeLanguage#Language#self.isoCode.matches('^[A-Z0]+')
@3050#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantLanguageNameLength#Language#(self.languageName.size() >= 3 and self.languageName.size() <= 55)
@3051#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantVideoFormatLength#VideoFormat#(self.videoFormat.size() >= 3 and self.videoFormat.size() <= 20)
@3052#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantDescriptionVideoFormat#VideoFormat#self.description.size() <= 255
@3053#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantGenre#Genre#(self.genre.size() >= 3 and self.genre.size() <= 25)
@3054#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\Laboratorios\Laboratorio_2\Lab2_ProfArq\model/Lab2_ProfArq.ecore#InvariantDesciptionGenre#Genre#self.description.size() < 255
@3055#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantCodeCityLength#City#(self.code.size() = 5 and self.code.toInteger() > 0 and self.code.toInteger() <99999)
@3056#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantRegExpCode#City#self.code.matches('^[0-9]+')
@3057#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantCityLength#City#(self.city.size() <= 35 and self.city.size() > 0)
@3058#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantRegExpAge#Classification#self.age.matches('^[0-9]+')
@3059#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantCodeCountryLength#Country#self.isoCode.size() = 3
@3060#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantRegExpCountry#Country#self.isoCode.matches('^[A-Z]+')
@3061#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantCountryLength#Country#(self.isoCode.size() <= 55 and self.isoCode.size() >= 3)
@3062#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantStatusLength#Status#self.status.size() = 1
@3063#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantRegExpStatus#Status#self.status.matches('^[1-9]+')
@3064#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantDescriptionStatusLength#Status#self.status.size() <= 255
@3065#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantAddressLength#Theater#(self.address.size() <= 55 and self.address.size() >= 5)
@3066#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantTheterLength#Theater#(self.theater.size() <= 55 and self.theater.size() >= 5)
@3067#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InariantRoomsSize#Theater#self.rooms->isEmpty() = false
@3068#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantFullNameDirectorLength#Director#(self.fullName.size() >= 3 and self.fullName.size() <= 55)
@3069#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantGenresListLength#Film#self.genres->isEmpty() = false
@3070#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantDirectorsListLength#Film#self.directors->isEmpty() = false
@3071#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantTitleLength#Film#(self.title.size() >= 3 and self.title.size() <= 150)
@3072#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantSynopsisLength#Film#(self.synopsis.size() >= 10 and self.synopsis.size() <= 255)
@3073#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantDuration#Film#(self.duration > 60000)
@3074#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvarianFilmNotNull#Billboard#self.film <> null
@3075#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvarianStatusNotNull#Billboard#self.status <> null
@3076#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvarianAudioFormatNotNull#Billboard#self.audioFormat <> null
@3077#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvarianVideoFormatNotNull#Billboard#self.videoFormat <> null
@3078#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantLanguagesListLength#AudioFormat#self.languages->size() = 2
@3079#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantDescriptionAudioFormatLength#AudioFormat#self.description.size() <= 255
@3080#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantCodeLanguageLength#Language#self.isoCode.size() = 3
@3081#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantRegExpIsoCodeLanguage#Language#self.isoCode.matches('^[A-Z0]+')
@3082#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantLanguageNameLength#Language#(self.languageName.size() >= 3 and self.languageName.size() <= 55)
@3083#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantVideoFormatLength#VideoFormat#(self.videoFormat.size() >= 3 and self.videoFormat.size() <= 20)
@3084#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantDescriptionVideoFormat#VideoFormat#self.description.size() <= 255
@3085#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantGenre#Genre#(self.genre.size() >= 3 and self.genre.size() <= 25)
@3086#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantDesciptionGenre#Genre#self.description.size() < 255
@3087#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullRoom#Show#self.room <> null
@3088#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullBillboard#Show#self.posterBoard <> null
@3089#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantSeastNotEmpty#Room#self.seats->isEmpty() = false
@3090#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidNumber#Room#self.number.matches('^[1-9]+')
@3091#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantSizeNumber#Room#(self.number.size() > 0 and self.number.size() < 3)
@3092#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantSizeName#Room#(self.name.size() > 5 and self.name.size() < 25)
@3093#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidNumber#Seat#self.number.matches('^[1-9]+')
@3094#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNumberSize#Seat#(self.number.size() > 0 and self.number.size() < 4)
@3095#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidRow#Seat#self.row.matches('^[A-Z]+')
@3096#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantRowSize#Seat#(self.row.size() > 0 and self.row.size() < 3)
@3097#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidFullName#Actor#(self.fullName <> null and self.fullName.size() >= 5 and self.fullName.size() <=150)
@3098#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullVideoFormat#Rate#self.videoType <> null
@3099#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullLocalityType#Rate#self.localityType <> null
@3100#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidPrice#Rate#self.price > 0
@3101#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidPoints#Rate#self.points > 0
@3102#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullCard#Member#self.card <> null
@3103#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullGender#Member#self.gender <> null
@3104#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidLastNames#Member#(self.lastNames <> null and self.lastNames.size() >= 3 and self.lastNames.size()<= 25)
@3105#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidEMail#Member#self.email.matches('^[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}\\@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+')
@3106#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidNumber#Member#(self.idNumber.size() > 5 and self.idNumber.size() < 20)
@3107#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidFullName#Member#(self.fullName <> null and self.fullName.size() >= 3 and self.fullName.size() <=25)
@3108#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidPassword#Member#(self.password <> null and self.password.size() >= 5 and self.password.size() <=45 and self.password.matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{5,}$+'))
@3109#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidPoints#Card#self.points >= 0
@3110#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidIdNumber#Card#self.idNum > 0
@3111#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantValidIdNumber#Reserve#self.idNum > 0
@3112#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotEmptyChairs#Reserve#self.chairs->isEmpty() = false
@3113#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotNullPresentation#Reserve#self.presentation <> null
@3114#E:/FinalProject Repos/repos\anderssongs5\Profundizacion_Arquitectura_Software\RTFs\RTF_1\MDA_OCL\Cinema_ProfArq\model/Cinema_ProfArq.ecore#InvariantNotEmptyPrices#Reserve#self.prices->isEmpty() = false
@3115#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#ValueSpecification#Set{}
@3116#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#ValueSpecification#Set{}
@3117#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#ValueSpecification#Set{}
@3118#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#ValueSpecification#Set{}
@3119#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#ValueSpecification#false
@3120#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#ValueSpecification#false
@3121#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#visibility_needs_ownership#NamedElement#namespace->isEmpty() implies visibility->isEmpty()
@3122#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#NamedElement#if namespace->isEmpty() then Sequence{}else namespace.allNamespaces()->prepend(namespace)endif
@3123#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#NamedElement#'::'
@3124#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#NamedElement#name
@3125#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#not_own_self#Element#not allOwnedElements()->includes(self)
@3126#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#has_owner#Element#mustBeOwned() implies owner->notEmpty()
@3127#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#Element#ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@3128#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#Element#true
@3129#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#visibility_public_or_private#ElementImport#visibility = VisibilityKind::public or visibility = VisibilityKind::private
@3130#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#imported_element_is_public#ElementImport#importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
@3131#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#public_or_private#PackageImport#visibility = VisibilityKind::public or visibility = VisibilityKind::private
@3132#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#elements_public_or_private#Package#ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)
@3133#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#non_static#Feature#static = false
@3134#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#non_leaf#Feature#redefinedElement->forAll(r | r.leaf = false)
@3135#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#Classifier#member->select(m | m->oclIsKindOf(Feature))
@3136#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#no_derivation#Property#derived = false and derivedUnion = false
@3137#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#multiplicity_of_composite#Property#composite implies (upperBound()->isEmpty() or upperBound() <= 1)
@3138#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derived_union_is_read_only#Property#derivedUnion implies readOnly
@3139#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Property#aggregation = AggregationKind::composite
@3140#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Property#if owningAssociation->isEmpty() and association.memberEnd->size() = 2 thenif (association.memberEnd->excluding(self)->first().owningAssociation->isEmpty()) then association.memberEnd->excluding(self)->first()else Set{}endifelse Set{}endif
@3141#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#owns_member_ends#Association#memberEnd->symmetricDifference(ownedEnd)->isEmpty()
@3142#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#no_deriviation#Association#derived = false
@3143#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#binary_associations#Association#memberEnd->exists(e | e.aggregation <> AggregationKind::none) implies memberEnd->size() = 2
@3144#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#association_ends#Association#if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)else trueendif
@3145#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#binary_associations_only#Association#memberEnd->size() = 2
@3146#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Association#memberEnd.type
@3147#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#upperBoundGreaterZero#MultiplicityElement#upperBound()->notEmpty() implies upperBound() > 0
@3148#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#lowerBoundGreaterOrEqualsZero#MultiplicityElement#lowerBound()->notEmpty() implies lowerBound() >= 0
@3149#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#upperBoundGreaterOrEqualsLowerBound#MultiplicityElement#(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
@3150#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivedLowerBoundEqualsLower#MultiplicityElement#lower = lowerBound()
@3151#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivedUppoerboundEqualsUpper#MultiplicityElement#upper = upperBound()
@3152#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#boundTypes#MultiplicityElement#upperValue->notEmpty() and upperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and lowerValue->notEmpty() and lowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)
@3153#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#MultiplicityElement#if (lowerValue->isEmpty()) then 1else lowerValue->asOrderedSet()->first().integerValue()endif
@3154#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#MultiplicityElement#if (upperValue->isEmpty()) then 1else upperValue->asOrderedSet()->first().integerValue()endif
@3155#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#at_most_one_return#Operation#ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1
@3156#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#Operation#ownedParameter->select( par | par.direction = ParameterDirectionKind::return)
@3157#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Operation#if (returnResult()->notEmpty()) thenreturnResult()->asSequence()->first().orderedelsefalseendif
@3158#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Operation#if (returnResult()->notEmpty()) thenreturnResult()->asSequence()->first().uniqueelsetrueendif
@3159#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Operation#if (returnResult()->notEmpty()) thenreturnResult()->asSequence()->first().lowerelseSet{}endif
@3160#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Operation#if (returnResult()->notEmpty()) thenreturnResult()->asSequence()->first().upperelseSet{}endif
@3161#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#derivation#Operation#if (returnResult()->notEmpty()) thenreturnResult()->asSequence()->first().typeelseSet{}endif
@3162#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#possible_classifiers#InstanceSpecification#classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))
@3163#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#defining_feature#InstanceSpecification#slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))
@3164#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#structural_feature#InstanceSpecification#classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
@3165#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralBoolean#value
@3166#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralBoolean#true
@3167#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralInteger#value
@3168#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralInteger#true
@3169#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralNull#true
@3170#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralNull#true
@3171#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralString#true
@3172#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralString#value
@3173#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralUnlimitedNatural#true
@3174#E:/FinalProject Repos/repos\andrejfreitas\moliz\org.modelexecution.xmof.diff.test\model\cd/classes.ecore#body#LiteralUnlimitedNatural#value
@3235#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#classifierNameUnique#WebGenModel#classifiers->isUnique(name)
@3236#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#pageNameUnique#WebGenModel#pages->isUnique(name)
@3237#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#menuNameUnique#WebGenModel#menus->isUnique(name)
@3238#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#userKeyFromUser#Authentication#not user.oclIsUndefined() and not userKey.oclIsUndefined() impliesuser.features->includes(userKey)
@3239#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#userKeyRequiredAttribute#Authentication#not userKey.oclIsUndefined() impliesif userKey.oclIsTypeOf(EncapsulatedAttribute) thenuserKey.oclAsType(EncapsulatedAttribute).cardinality = Cardinality::RequiredelseuserKey.oclAsType(EntityAttribute).cardinality = Cardinality::Requiredendif
@3240#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#captchaRequiresKeys#LocalAuthenticationSystem#useCaptcha implies not authenticates.captchaSiteKey.oclIsUndefined() and not authenticates.captchaSecretKey.oclIsUndefined()
@3241#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#nameNeedsAtLeastOneCharacter#NamedElement#not name.oclIsUndefined() implies name.size() > 0
@3242#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#keysFromLocalFeatures#EntityOrView#allFeatures->includesAll(keys)
@3243#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EntityOrView#if self.oclIsTypeOf(Entity) thenself.oclAsType(Entity).entityFeatureselseself.oclAsType(View).viewFeaturesendif
@3244#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EntityOrView#if self.oclIsTypeOf(Entity) thenself.oclAsType(Entity).entityFeatures->union(self.oclAsType(Entity).associationEnds->select(e | e.bidirectional))->asOrderedSet()elseself.oclAsType(View).viewFeaturesendif
@3245#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EntityOrView#features->select(f | f.oclIsKindOf(Attribute)).oclAsType(Attribute)->asOrderedSet()
@3246#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EntityOrView#features->select(f | f.oclIsKindOf(Association)).oclAsType(Association)->asOrderedSet()
@3247#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EntityOrView#allFeatures->select(f | f.oclIsKindOf(Association)).oclAsType(Association)->asOrderedSet()
@3248#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#Association#if self.oclIsKindOf(EntityAssociation) thenself.oclAsType(EntityAssociation).partOfelse if self.oclIsTypeOf(EncapsulatedAssociation) thenself.oclAsType(EncapsulatedAssociation).sourceEntityelseself.oclAsType(ViewAssociation).partOfendif endif
@3249#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#Association#if self.oclIsKindOf(EntityAssociation) thenself.oclAsType(EntityAssociation).targetEntityelse if self.oclIsTypeOf(EncapsulatedAssociation) thenself.oclAsType(EncapsulatedAssociation).targetEntityelse-- TODO get other endself.oclAsType(ViewAssociation).partOfendif endif
@3250#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#ModelLabelAssociation#not association.oclIsUndefined() impliespartOf.labelFor.features->includes(association)
@3251#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#featureNameUniqueWithinEntity#Entity#entityFeatures->isUnique(f | f.name)
@3252#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#primaryKeyRequired#EntityAttribute#primaryKey implies cardinality <> Cardinality::Optional
@3253#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#oneToManyAssociationsMustBeBidirectional#AssociationWithoutContainment#cardinality = Cardinality::Optional and targetCardinality = Cardinality::Required implies bidirectional
@3254#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAttribute#if not self.alias.oclIsUndefined() thenif self.alias <> '' thenself.aliaselse'empty alias'endifelse if attribute.oclIsUndefined() then''else if attribute.oclIsKindOf(EntityAttribute) thenattribute.oclAsType(EntityAttribute).nameelseattribute.oclAsType(EncapsulatedAttribute).nameendifendif endif
@3255#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAttribute#if attribute.oclIsUndefined() thenCardinality::Optionalelse if attribute.oclIsKindOf(EntityAttribute) thenattribute.oclAsType(EntityAttribute).cardinalityelseattribute.oclAsType(EncapsulatedAttribute).cardinalityendifendif
@3256#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAssociation#if not alias.oclIsUndefined() thenif alias <> '' thenaliaselse'empty alias'endifelse if association.oclIsUndefined() then''elseif association.oclIsTypeOf(EncapsulatedAssociation) thenassociation.oclAsType(EncapsulatedAssociation).nameelseif isSourceAssociation thenif self.association.oclIsKindOf(EntityAssociation) thenself.association.oclAsType(EntityAssociation).nameelseassociation.oclAsType(ViewAssociation).nameendifelseif self.association.oclIsKindOf(EntityAssociation) thenself.association.oclAsType(EntityAssociation).targetFeatureNameelseassociation.oclAsType(ViewAssociation).opposite.nameendifendifendifendif endif
@3257#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAssociation#not association.oclIsUndefined() impliespartOf.encapsulates->collect(eov | eov.features)->includes(association)
@3258#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAssociation#if association.oclIsUndefined() thenCardinality::Optionalelseif association.oclIsTypeOf(EncapsulatedAssociation) thenassociation.oclAsType(EncapsulatedAssociation).cardinalityelse if association.oclIsTypeOf(ViewAssociation) thenif isSourceAssociation thenassociation.oclAsType(ViewAssociation).cardinalityelseassociation.oclAsType(ViewAssociation).opposite.cardinalityendifelseif isSourceAssociation thenassociation.oclAsType(EntityAssociation).cardinalityelse if association.oclIsTypeOf(AssociationWithContainment) thenCardinality::Requiredelseassociation.oclAsType(AssociationWithoutContainment).targetCardinality endif endifendif endifendif
@3259#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAssociation#if association.oclIsUndefined() thennullelseif association.oclIsTypeOf(EncapsulatedAssociation) thenassociation.oclAsType(EncapsulatedAssociation).sourceEntityelseif isSourceAssociation thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EntityAssociation).targetEntity endifendifendif
@3260#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#EncapsulatedAssociation#if association.oclIsUndefined() thennullelseif association.oclIsTypeOf(EncapsulatedAssociation) thenassociation.oclAsType(EncapsulatedAssociation).targetEntityelseif isSourceAssociation thenassociation.oclAsType(EntityAssociation).targetEntity elseassociation.oclAsType(EntityAssociation).partOfendifendifendif
@3261#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#contentUnitNameUniqueWithinPage#Page#units->isUnique(name)
@3262#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#onlyStaticEntries#StaticMenu#entries->select(e | e.oclIsKindOf(MenuFeature))->isEmpty()
@3263#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#entriesMustBeFromSource#DynamicMenu#true
@3264#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#onlyIncludeFeaturesOnce#DynamicMenu#true
@3265#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#mustSelectSingleton#DynamicMenu#not selection.oclIsUndefined() implies selection.limit = 1
@3266#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#titleFromEntityOrView#DynamicMenu#not title.oclIsUndefined() and not entityOrView.oclIsUndefined() impliesentityOrView.features->includes(title)
@3267#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#canOnlyTitleWithSingletons#DynamicMenu#not title.oclIsUndefined() impliesif title.oclIsKindOf(EntityFeature) thentitle.oclAsType(EntityFeature).cardinality <> Cardinality::Manyelse if title.oclIsKindOf(EncapsulatedAttribute) thentitle.oclAsType(EncapsulatedAttribute).cardinality <> Cardinality::Manyelse if title.oclIsKindOf(EncapsulatedAssociation) thentitle.oclAsType(EncapsulatedAssociation).cardinality <> Cardinality::Manyelsefalseendif endif endif
@3268#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#featuresMustBeFromContentType#DynamicUnit#let entities : OrderedSet(EntityOrView)= if self.oclIsKindOf(SingletonUnit) thenOrderedSet{self.oclAsType(SingletonUnit).contentType}else if self.oclIsKindOf(CollectionUnit) thenself.oclAsType(CollectionUnit).contentTypeelseself.entitiesendif endifin let eovFeatures : Collection(Feature)= entities->collect(eov | eov.allFeatures)in displayFields->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)->select(f | if f.oclIsTypeOf(UnitElement) thennot f.oclAsType(UnitElement).attribute.oclIsUndefined()elsenot f.oclAsType(UnitAssociation).association.oclIsUndefined()endif)->forAll(f | if f.oclIsTypeOf(UnitElement) theneovFeatures->includes(f.oclAsType(UnitElement).attribute)elseeovFeatures->includes(f.oclAsType(UnitAssociation).association)endif)
@3269#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#atMostOneSelectAction#UnitFeature#actions->select(a | a.oclIsKindOf(SelectAction))->size() < 2
@3270#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#noDeleteActions#UnitFeature#actions->select(a | a.oclIsKindOf(DeleteAction))->isEmpty()
@3271#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#UnitElement#if attribute.oclIsUndefined() then''else if attribute.oclIsKindOf(EncapsulatedAttribute) thenattribute.oclAsType(EncapsulatedAttribute).nameelseattribute.oclAsType(EntityAttribute).nameendif endif
@3272#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#selectionValidChoice#UnitAssociation#not selection.oclIsUndefined() impliestargetEntity->collect(eov | eov.servedBy)->collect(s | s.selections)->includes(selection)
@3273#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#UnitAssociation#not association.oclIsUndefined() implieslet entities : OrderedSet(EntityOrView)= if displayedOn.oclIsKindOf(SingletonUnit) thenOrderedSet{displayedOn.oclAsType(SingletonUnit).contentType}else if displayedOn.oclIsKindOf(CollectionUnit) thendisplayedOn.oclAsType(CollectionUnit).contentTypeelsedisplayedOn.entitiesendif endifin entities->collect(e | e.associations)->includes(association)
@3274#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#UnitAssociation#if association.oclIsUndefined() thennullelseif isSourceAssociation thenif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EncapsulatedAssociation).sourceEntityendifelseif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).targetEntityelseassociation.oclAsType(EncapsulatedAssociation).targetEntityendifendifendif
@3275#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#UnitAssociation#if association.oclIsUndefined() thennullelseif isSourceAssociation thenif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).targetEntityelseassociation.oclAsType(EncapsulatedAssociation).targetEntityendifelseif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EncapsulatedAssociation).sourceEntityendifendifendif
@3276#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#AssociationReference#if association.oclIsUndefined() then''else if association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).nameelse if association.oclIsTypeOf(EncapsulatedAssociation) thenassociation.oclAsType(EncapsulatedAssociation).nameelseassociation.oclAsType(ViewAssociation).name endif endif endif
@3277#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#canOnlyTitleWithSingletons#DataUnit#not title.oclIsUndefined() implies if title.oclIsKindOf(EntityAttribute) thentitle.oclAsType(EntityAttribute).cardinality <> Cardinality::Manyelse if title.oclIsKindOf(EncapsulatedAttribute) thentitle.oclAsType(EncapsulatedAttribute).cardinality <> Cardinality::Manyelsetrueendif endif
@3278#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#selectionValidChoice#DataUnit#not defaultSelection.oclIsUndefined() impliesentities->collect(eov | eov.servedBy)->collect(s | s.selections)->includes(defaultSelection)
@3279#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#selectionMustBeSingleton#DetailsUnit#not defaultSelection.oclIsUndefined() impliesdefaultSelection.limit = 1
@3280#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#selectionMustNotBeSingleton#IndexUnit#not defaultSelection.oclIsUndefined() impliesdefaultSelection.limit <> 1
@3281#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#FeaturePathAttribute#if attribute.oclIsUndefined() then''else if attribute.oclIsKindOf(EntityAttribute) thenattribute.oclAsType(EntityAttribute).nameelseattribute.oclAsType(EncapsulatedAttribute).nameendif endif
@3282#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#FeaturePathAssociation#not association.oclIsUndefined() implieslet unit : DynamicUnit= self.eContainer().oclAsType(DynamicUnit)in let entities : OrderedSet(EntityOrView)= if unit.oclIsKindOf(SingletonUnit) thenOrderedSet{unit.oclAsType(SingletonUnit).contentType}else if unit.oclIsKindOf(CollectionUnit) thenunit.oclAsType(CollectionUnit).contentTypeelseunit.entitiesendif endifin entities->collect(eov | eov.associations)->includes(association)
@3283#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#FeaturePathAssociation#if association.oclIsUndefined() thennullelseif isSourceAssociation thenif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EncapsulatedAssociation).sourceEntityendifelseif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).targetEntityelseassociation.oclAsType(EncapsulatedAssociation).targetEntityendifendifendif
@3284#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#FeaturePathAssociation#if association.oclIsUndefined() thennullelseif isSourceAssociation thenif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).targetEntityelseassociation.oclAsType(EncapsulatedAssociation).targetEntityendifelseif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EncapsulatedAssociation).sourceEntityendifendifendif
@3285#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#ChildPathAttribute#if attribute.oclIsUndefined() then''else if attribute.oclIsKindOf(EntityAttribute) thenattribute.oclAsType(EntityAttribute).nameelseattribute.oclAsType(EncapsulatedAttribute).nameendif endif
@3286#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#ChildPathAssociation#not association.oclIsUndefined() impliesif partOf.oclIsTypeOf(UnitAssociation) thenpartOf.oclAsType(UnitAssociation).targetEntity.associations->includes(association)else if partOf.oclIsTypeOf(FeaturePathAssociation) thenpartOf.oclAsType(FeaturePathAssociation).targetEntity.associations->includes(association)elsepartOf.oclAsType(ChildPathAssociation).targetEntity.associations->includes(association)endif endif
@3287#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#ChildPathAssociation#if association.oclIsUndefined() thennullelseif isSourceAssociation thenif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EncapsulatedAssociation).sourceEntityendifelseif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).targetEntityelseassociation.oclAsType(EncapsulatedAssociation).targetEntityendifendifendif
@3288#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#ChildPathAssociation#if association.oclIsUndefined() thennullelseif isSourceAssociation thenif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).targetEntityelseassociation.oclAsType(EncapsulatedAssociation).targetEntityendifelseif association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).partOfelseassociation.oclAsType(EncapsulatedAssociation).sourceEntityendifendifendif
@3289#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#atMostOneDeleteAction#InlineActionContainer#actions->select(a | a.oclIsKindOf(DeleteAction))->size() < 2
@3290#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#canOnlyDeleteSingletons#DeleteAction#if usedBy.oclIsKindOf(UnitElement) thenlet attribute : Attribute= usedBy.oclAsType(UnitElement).attributein if attribute.oclIsKindOf(EntityAttribute) thenattribute.oclAsType(EntityAttribute).cardinality <> Cardinality::Manyelseattribute.oclAsType(EncapsulatedAttribute).cardinality <> Cardinality::Manyendifelse if usedBy.oclIsKindOf(UnitAssociation) thenlet association : Association= usedBy.oclAsType(UnitAssociation).associationin if association.oclIsKindOf(EntityAssociation) thenassociation.oclAsType(EntityAssociation).cardinality <> Cardinality::Manyelse if association.oclIsKindOf(EncapsulatedAssociation) thenassociation.oclAsType(EncapsulatedAssociation).cardinality <> Cardinality::Manyelsefalse -- association.oclAsType(ViewAssociation)endif endifelseusedBy.oclIsKindOf(CollectionUnit)endif endif
@3291#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#FeatureReference#if feature.oclIsUndefined() then''elseif feature.oclIsKindOf(EntityFeature) thenfeature.oclAsType(EntityFeature).nameelse if feature.oclIsKindOf(EncapsulatedAttribute) thenfeature.oclAsType(EncapsulatedAttribute).nameelse if feature.oclIsKindOf(EncapsulatedAssociation) thenfeature.oclAsType(EncapsulatedAssociation).nameelsefeature.oclAsType(ViewAssociation).nameendif endif endifendif
@3292#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#RouteParameterReference#if parameter.oclIsUndefined() then''else if parameter.oclIsKindOf(EntityAttribute) thenparameter.oclAsType(EntityAttribute).nameelseparameter.oclAsType(EncapsulatedAttribute).nameendif endif
@3293#E:/FinalProject Repos/repos\andymcr\webgen\uk.ac.man.cs.mdsd.webgen.model\model/website.ecore#derivation#ParameterReference#if parameter.oclIsUndefined() then''elseparameter.nameendif
@3294#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#relationNameUnique#Schema#if (self.ScontainsRelations -> size() > 0) thenself.ScontainsRelations -> forAll(r1,r2 | r1 <> r2 implies r1.name <> r2.name)elsetrueendif
@3295#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#unCompleteLink#LinkFK#if(((self.target.oclIsUndefined())or not(self.source -> size() > 0)))thenfalseelsetrueendif
@3296#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#invalidTargetRelation#LinkFK#if(self.target.oclIsUndefined())thenfalseelseif (self.target.containsAttributes -> size()>0)thenif (self.target.containsAttributes -> exists(isPK <> null))thentrueelseif (self.target.containsAttributes -> exists(isUN = true))thentrueelsefalseendifendifelsefalseendifendif
@3297#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#almostOneAttribute#Relation#self.containsAttributes -> size() >= 1
@3298#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#relationHasPK#Relation#not self.hasPK -> isEmpty()
@3299#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#attributeNameUnique#Relation#if (self.containsAttributes -> size() > 0) thenself.containsAttributes -> forAll(a1,a2 | a1 <> a2 implies a1.name <> a2.name)elsetrueendif
@3300#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#relationNameDefined#Relation#not self.name.oclIsUndefined()
@3301#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#attributeNameDefined#Attribute#not self.name.oclIsUndefined()
@3302#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#pkWellFormed#Attribute#if (self.isPK.oclIsUndefined())thentrueelseif (self.isNN and self.isUN)thentrueelsefalseendifendif
@3303#E:/FinalProject Repos/repos\AngelMorenoMDE\kybdele_relational\es.kybele.kybdele.models.relational.model\model/gmf_relational_model.ecore#undefinedType#Attribute#self.type <>  EGenericType::UNDEFINED
@3304#E:/FinalProject Repos/repos\antoniogarmendia\Hawk-EMFSplitter_Integration\org.miso.mondo.wt.cs\patterns/StateMachine.ecore#oneInitial#StateMachine#self.states->one(e : StateVertex | e.oclIsKindOf(InitialState))
@3305#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#defaultRowAxisProviderExistsInCollection#TableConfiguration#rowAxisProviders->includes(defaultRowAxisProvider)
@3306#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#defaultColumnAxisProviderExistsInCollection#TableConfiguration#columnAxisProviders->includes(defaultColumnAxisProvider)
@3307#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#documentation#AbstractAxisProvider#Abstract Element for the AxisProvider. This one only provides a method getAxis().
@3308#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#oneObjectLabelConfigurationTypes#AbstractHeaderAxisConfiguration#ownedLabelConfigurations->collect(ilc : nattable::nattablelabelprovider::ILabelProviderConfiguration | ilc.oclAsType(nattable::nattablelabelprovider::ObjectLabelProviderConfiguration))->size() <= 1
@3309#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#oneFeatureLabelConfigurationTypes#AbstractHeaderAxisConfiguration#ownedLabelConfigurations->collect(ilc : nattable::nattablelabelprovider::ILabelProviderConfiguration | ilc.oclAsType(nattable::nattablelabelprovider::FeatureLabelProviderConfiguration))->size() <= 1
@3310#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#axisManagersIdUnique#TableHeaderAxisConfiguration#axisManagers->forAll(am1 : AxisManagerRepresentation, am2 : AxisManagerRepresentation | am1.axisManagerId <> am2.axisManagerId)
@3311#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#currentRowAxisInHistory#Table#rowAxisProvidersHistory->includes(currentRowAxisProvider)
@3312#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#currentColumnAxisInHistory#Table#columnAxisProvidersHistory->includes(currentColumnAxisProvider)
@3313#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.sysml\model/l2.ecore#documentation#Create#self.base_Usage->notEmpty() implies (self.base_Usage.client->forAll(oclIsKindOf(Classifier)) and self.base_Usage.supplier->forAll(oclIsKindOf(Classifier)))
@3314#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.sysml\model/l2.ecore#documentation#Implement#self.base_Component.clientDependency.supplier->select(oclIsKindOf(Classifier)).oclAsType(Classifier).extension_Specificaiton->notEmpty()
@3315#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.sysml\model/l2.ecore#documentation#ImplementationClass#self.base_Class.extension_Realization->isEmpty()
@3316#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.sysml\model/l2.ecore#documentation#Realization#self.base_Classifier.extension_ImplementationClass->isEmpty()
@3317#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.sysml\model/l2.ecore#documentation#Specification#self.base_Classifier.extension_Type->isEmpty()
@3318#E:/FinalProject Repos/repos\ApexSoft\Papyrus-1.0-M5-DevSourceSet\org.eclipse.papyrus.sysml\model/l2.ecore#documentation#Type#self.base_Class.extension_Specification->isEmpty()
@3558#E:/FinalProject Repos/repos\AresEkb\sql\org.emftext.language.sql\model/sql.ecore#derivation#TableDefinition#if schemaQualifiedName.oclIsUndefined() then '' else schemaQualifiedName.name endif
@3559#E:/FinalProject Repos/repos\AresEkb\sql\org.emftext.language.sql\model/sql.ecore#columnsMustBeCompatible#ReferentialTableConstraint#columns->size() = referencedColumns->size()
@3560#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#derivation#Aspect#let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
@3561#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#uniqueTypes#StructuralView#self.types->isUnique(name)
@3562#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#uniqueTypes$message#StructuralView#'There may be only one type of the same type'
@3563#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#noTwoClassesWithSameName#StructuralView#self.classes->isUnique(name)
@3564#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#noTwoClassesWithSameName$message#StructuralView#'Name of a class has to be unique'
@3565#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#notSelfSuperType#Class#not self.superTypes->includes(self)
@3566#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#notSelfSuperType$message#Class#'A class may not be it\'s own supertype'
@3567#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#uniqueName#AssociationEnd#self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
@3568#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#uniqueName$message#AssociationEnd#'AssociationEnds of a class must be unique'
@3569#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validName#NamedElement#if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
@3570#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validName$message#NamedElement#'Name of RAM elements may not be empty'
@3571#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#aspectCannotMapSelf#Instantiation#not (self.externalAspect = self.Aspect)
@3572#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#aspectCannotMapSelf$message#Instantiation#'Aspect may not depend on itself'
@3573#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#mandatoryAspectParametersMapped#Instantiation#if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(sourceModelElement = element)) else true endif
@3574#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#mandatoryAspectParametersMapped$message#Instantiation#'Partial elements from lower-level aspects have to be mapped'
@3575#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validSourceModelElement#Mapping#self.sourceModelElement.oclIsTypeOf(Class) or self.sourceModelElement.oclIsTypeOf(Operation)
@3576#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validSourceModelElement$message#Mapping#'The source model element may only be of type Class or Operation'
@3577#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#sameTypesMapped#Mapping#self.maps->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.sourceModelElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.sourceModelElement.oclType()) endif)
@3578#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#sameTypesMapped$message#Mapping#'Mapping must be between same types of elements'
@3579#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validMapping#Mapping#let clazz : Class = if sourceModelElement.oclIsTypeOf(Operation) then sourceModelElement.oclAsType(Operation).Classifier else sourceModelElement endif in self.Instantiation.externalAspect.structuralView.classes->includes(clazz) and self.maps->forAll(element : MappableElement | let clazz : Class = if element.oclIsTypeOf(Operation) then element.oclAsType(Operation).Classifier else element endif in if clazz.oclIsKindOf(PrimitiveType) then self.Instantiation.Aspect.structuralView.types->includes(clazz) else self.Instantiation.Aspect.structuralView.classes->includes(clazz) endif)
@3580#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validMapping$message#Mapping#'Source must be from depending aspect and targets must be from current aspect'
@3581#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#messageViewDefined#Operation#if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.StructuralView.Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specification = self) else true endif
@3582#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#messageViewDefined$message#Operation#'MessageView missing for public operation'
@3583#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#notVoid#Parameter#not self.type.oclIsTypeOf(RVoid)
@3584#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#notVoid$message#Parameter#'The type of the parameter may not be void'
@3585#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RVoid#'void'
@3586#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RBoolean#'boolean'
@3587#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RBoolean#'java.lang.Boolean'
@3588#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RInt#'int'
@3589#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RInt#'java.lang.Integer'
@3590#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RChar#'char'
@3591#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RChar#'java.lang.Character'
@3592#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RString#'String'
@3593#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RString#'java.lang.String'
@3594#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RAny#'*'
@3595#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#specificationDefined#MessageView#if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif
@3596#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#specificationDefined$message#MessageView#'A MessageView for a non-partial operation must have a specification'
@3597#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#isAffectedBy#MessageViewReference#self.affectedBy->size() > 0
@3598#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#isAffectedBy$message#MessageViewReference#'The MessageViewReference must at least have one affectedBy'
@3599#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#notAffectedBySelf#AspectMessageView#not self.affectedBy->includes(self)
@3600#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#notAffectedBySelf$message#AspectMessageView#'Message View may not be affected by itself'
@3601#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#noNameForMetaClass#Lifeline#if metaClass then self.name = '' else true endif
@3602#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#noNameForMetaClass$message#Lifeline#'A Lifeline representing a MetaClass may not have a name'
@3603#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validOperationCall#Message#if self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).metaClass then self.signature.static else true endif
@3604#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validOperationCall$message#Message#'Non-static calls may not be performed on meta-classes'
@3605#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#assignToAllowed#Message#if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
@3606#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#assignToAllowed$message#Message#'assignTo may not be specified for operations whose return type is void'
@3607#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#argumentsSpecified#Message#self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(parameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = parameter))
@3608#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#argumentsSpecified$message#Message#'All arguments of the operation must be specified'
@3609#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validSignature#Message#self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents.operations->includes(self.signature)
@3610#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validSignature$message#Message#'Message signature must be an operation of the classifier that is represented by the lifeline of the receive event'
@3611#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validSelfMessage#Message#if self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) then self.interaction.fragments->indexOf(self.sendEvent) < self.interaction.fragments->indexOf(self.receiveEvent) else true endif
@3612#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validSelfMessage$message#Message#'receiveEvent of a self message may not come before the sendEvent'
@3613#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#returnsSpecified#Message#if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
@3614#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#returnsSpecified$message#Message#'Reply message must have returns specified if return type is not void'
@3615#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validReturns#Message#if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
@3616#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validReturns$message#Message#'Returns may only be specified if message sort is reply message'
@3617#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#noCrossingMessages#Message#let indexDifference : Integer = self.interaction.fragments->indexOf(self.receiveEvent) - self.interaction.fragments->indexOf(self.sendEvent) in indexDifference = 1 or indexDifference = - 1
@3618#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#noCrossingMessages$message#Message#'Messages may not cross each other, MessageEnds of one message must come one after the other'
@3619#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validAssignTo#Message#if self.assignTo <> null then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
@3620#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validAssignTo$message#Message#'Return type of signature operation must match the type of assignTo'
@3621#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#boundariesNotCrossed#Message#let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
@3622#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#boundariesNotCrossed$message#Message#'Messages may not cross boundaries of CombinedFragments or their operands'
@3623#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#createMessageIsFirst#MessageOccurrenceSpecification#if self.message.messageSort = MessageSort::createMessage then self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) >= self.container.fragments->indexOf(self) else true endif) else true endif
@3624#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#createMessageIsFirst$message#MessageOccurrenceSpecification#'The create message occurrence may not come after any other occurrence on this lifeline'
@3625#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#destructionIsLast#DestructionOccurrenceSpecification#self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) <= self.container.fragments->indexOf(self) else true endif)
@3626#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#destructionIsLast$message#DestructionOccurrenceSpecification#'The destruction occurrence may not come before any other occurrence on this lifeline'
@3627#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validCoveredMultiplicity#InteractionFragment#if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
@3628#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validCoveredMultiplicity$message#InteractionFragment#'InteractionFragment may only have one Lifeline it covers (except CombinedFragment)'
@3629#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validOperands#CombinedFragment#if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
@3630#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validOperands$message#CombinedFragment#'opt and loop fragments may only have one operand'
@3631#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validValueType#StructuralFeatureValue#if self.value <> null then let type : Type = if self.value.oclIsTypeOf(Attribute) then self.value.oclAsType(Attribute).type else if self.value.oclIsTypeOf(Reference) then self.value.oclAsType(Reference).type else self.value.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass endif endif in type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType()) else true endif
@3632#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validValueType$message#StructuralFeatureValue#'Type of value must match the type of the parameter'
@3633#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validParameterValue#ParameterValueMapping#if self.value.oclIsKindOf(LiteralSpecification) then false else true endif
@3634#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validParameterValue$message#ParameterValueMapping#'Type of value must match the type of the parameter'
@3635#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validValueType#ParameterValue#self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
@3636#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validValueType$message#ParameterValue#'Type of value must match the type of the parameter'
@3637#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#body#RCollection#let partial : String = if type.oclIsTypeOf(Class) and type.oclAsType(Class).partial or type.oclIsTypeOf(Operation) and type.oclAsType(Operation).partial then '|' else '' endif in let name : String = self.oclType().name.substring(2, self.oclType().name.size()) in if type.name.oclIsUndefined() then name else name + '<' + partial + type.name + '>' endif
@3638#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validUpperBound#Property#self.upperBound > 0 or self.upperBound = - 1
@3639#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validUpperBound$message#Property#'The upperbound must be greater than zero or -1 representing *'
@3640#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validLowerBound#Property#self.lowerBound >= 0
@3641#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validLowerBound$message#Property#'The lowerbound must be greater than or equal to zero'
@3642#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validMultiplicity#Property#self.lowerBound <= self.upperBound or self.upperBound = - 1
@3643#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/RAM.ecore#validMultiplicity$message#Property#'The lowerBound must be less than or equal to the upperBound'
@3644#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@3645#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = true
@3646#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = false
@3647#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = member->select( m | self.makesVisible(m))
@3648#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.self.member->includes(el)result = (ownedMember->includes(el)) or(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
@3649#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif
@3650#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.result = if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif
@3651#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif
@3652#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.result = '::'
@3653#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#NamedElement#The query allOwningPackages() returns all the directly or indirectly owning packages.result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())
@3654#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Namespace#The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
@3655#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Namespace#The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.result = if self.ownedMember ->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then elementImports->collect(el | el.getName())  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))  endifendif
@3656#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.result = self.member->forAll( memb |self.member->excluding(memb)->forAll(other |memb.isDistinguishableFrom(other, self)))
@3657#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |mem.imp.isDistinguishableFrom(mem, self)))
@3658#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
@3659#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = if self.alias->notEmpty() then  self.aliaselse  self.importedElement.nameendif
@3660#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for ValueSpecification, the type must be conformant with the type of the specified parameterable element.result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)
@3661#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@3662#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@3663#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@3664#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@3665#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@3666#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@3667#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@3668#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query isTemplate() returns whether this templateable element is actually a template.result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())
@3669#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The general classifiers are the classifiers referenced by the generalization relationships.result = self.parents()
@3670#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@3671#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@3672#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = generalization.general
@3673#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@3674#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true
@3675#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (self=other) or (self.allParents()->includes(other))
@3676#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The inherit operation is overridden to exclude redefined properties.The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.result = inhs
@3677#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@3678#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@3679#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.redefinee.isRedefinitionContextValid(self)result = false
@3680#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))
@3681#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.result = allOwnedElements->select(oclIsKindOf(ParameterableElement))
@3682#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this templateable element is actually a template.result = ownedTemplateSignature->notEmpty()
@3683#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ParameterableElement#The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. Subclasses should override this operation to specify different compatibility constraints.result = p->oclIsKindOf(self.oclType)
@3684#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.result = templateParameter->notEmpty()
@3685#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.self.isIntegral()true
@3686#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an integer.result = false
@3687#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.self.isIntegral()result = false
@3688#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.self.isIntegral()result = false
@3689#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The derived lower attribute must equal the lowerBound.result = lowerBound()
@3690#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The derived upper attribute must equal the upperBound.result = upperBound()
@3691#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@3692#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@3693#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@3694#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif
@3695#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif
@3696#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#MultiplicityElement#The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))
@3697#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ConnectableElement#result = ConnectorEnd.allInstances()->select(e | e.role=self)
@3698#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(Property) and   let prop : Property = redefinee.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isDerived implies prop.isDerived) and  (self.isComposite implies prop.isComposite))
@3699#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Property#The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for properties, the type must be conformant with the type of the specified parameterable element.result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)
@3700#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some classifier.result = Classifier.allInstances->exists(c | c.attribute->includes(p))
@3701#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Property#If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2  then    let otherEnd = (association.memberEnd - self)->any() in      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif    else Set {}    endif
@3702#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.result = if association->notEmpty()then association.endType-typeelse if classifier->notEmpty() then Set{classifier} else Set{} endifendif
@3703#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)
@3704#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter. redefinee.isRedefinitionContextValid(self)result = (redefinee.oclIsKindOf(Operation) andlet op: Operation = redefinee.oclAsType(Operation) inself.ownedParameter.size() = op.ownedParameter.size() andforAll(i | op.ownedParameter[i].type.conformsTo(self.ownedParameter[i].type)))
@3705#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.result = if returnResult()->notEmpty() then returnResult()->any().isOrdered else false endif
@3706#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.result = if returnResult()->notEmpty() then returnResult()->any().isUnique else true endif
@3707#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.result = if returnResult()->notEmpty() then returnResult()->any().lower else Set{} endif
@3708#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.result = if returnResult()->notEmpty() then returnResult()->any().upper else Set{} endif
@3709#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.result = if returnResult()->notEmpty() then returnResult()->any().type else Set{} endif
@3710#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Operation#The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty setresult = ownedParameter->select (par | par.direction = #return)
@3711#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#BehavioralFeature#The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.result = if n.oclIsKindOf(BehavioralFeature)then  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()  then Set{}->including(self)->including(n)->isUnique(bf | bf.ownedParameter->collect(type))  else true  endifelse trueendif
@3712#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ProtocolStateMachine#A protocol state machine must only have a classifier context, not a behavioral feature context.(not context->isEmpty( )) and specification->isEmpty()
@3713#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#StateMachine#The query isConsistentWith() specifies that a redefining state machine is consistent with a redefined state machine provided that the redefining state machine is an extension of the redefined state machine: Regions are inherited and regions can be added, inherited regions can be redefined. In case of multiple redefining state machines, extension implies that the redefining state machine gets orthogonal regions for each of the redefined state machines.result = true
@3714#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#StateMachine#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a statemachine are properly related to the redefinition contexts of the specified statemachine to allow this element to redefine the other. The containing classifier of a redefining statemachine must redefine the containing classifier of the redefined statemachine.result = true
@3715#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Region#The query isConsistentWith() specifies that a redefining region is consistent with a redefined region provided that the redefining region is an extension of the redefined region, i.e. it adds vertices and transitions and it redefines states and transitions of the redefined region.result = true
@3716#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Region#The redefinition context of a region is the nearest containing statemachineresult = let sm = containingStateMachine() inif sm.context->isEmpty() or sm.general->notEmpty() thensmelsesm.contextendif
@3717#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Region#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a region are properly related to the redefinition contexts of the specified region to allow this element to redefine the other. The containing statemachine/state of a redefining region must redefine the containing statemachine/state of the redefined region.result = true
@3718#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Region#The operation containingStateMachine() returns the sate machine in which this Region is definedresult = if stateMachine->isEmpty() thenstate.containingStateMachine()elsestateMachineendif
@3719#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Region#The operation belongsToPSM () checks if the region belongs to a protocol state machineresult = if not stateMachine->isEmpty() thenoclIsTypeOf(ProtocolStateMachine)else if not state->isEmpty() thenstate.container.belongsToPSM ()else false
@3720#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Vertex#The operation containingStateMachine() returns the state machine in which this Vertex is definedresult = if not container->isEmpty()then-- the container is a regioncontainer.containingStateMachine()else if (oclIsKindOf(Pseudostate)) then-- entry or exit point?if (kind = #entryPoint) or (kind = #exitPoint) thenstateMachineelse if (oclIsKindOf(ConnectionPointReference)) thenstate.containingStateMachine() -- no other valid cases possibleendif
@3721#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Vertex#result = Transition.allInstances()->select(t | t.source=self)
@3722#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Vertex#result = Transition.allInstances()->select(t | t.target=self)
@3723#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Transition#The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transition: A redefining transition redefines all properties of the corresponding redefined transition, except the source state and the trigger.result = (redefinee.oclIsKindOf(Transition) and  let trans: Transition = redefinee.oclAsType(Transition) in    (source() = trans.source() and trigger() = tran.trigger())redefinee.isRedefinitionContextValid(self)
@3724#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Transition#The redefinition context of a transition is the nearest containing statemachine.result = let sm = containingStateMachine() inif sm.context->isEmpty() or sm.general->notEmpty() thensmelsesm.contextendif
@3725#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Transition#The query containingStateMachine() returns the state machine that contains the transition either directly or transitively.result = container.containingStateMachine()
@3726#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#The query isConsistentWith() specifies that a redefining state is consistent with a redefined state provided that the redefining state is an extension of the redefined state: A simple state can be redefined (extended) to become a composite state (by adding a region) and a composite state can be redefined (extended) by adding regions and by adding vertices, states, and transitions to inherited regions. All states may add or replace entry, exit, and 'doActivity' actions.result = true
@3727#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#The query containingStateMachine() returns the state machine that contains the state either directly or transitively.result = container.containingStateMachine()
@3728#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#A simple state is a state without any regions.result = region.isEmpty()
@3729#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#A composite state is a state with at least one region.result = region.notEmpty()
@3730#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#An orthogonal state is a composite state with at least 2 regionsresult = (region->size () > 1)
@3731#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#Only submachine states can have a reference statemachine.result = submachine.notEmpty()
@3732#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#The redefinition context of a state is the nearest containing statemachine.result = let sm = containingStateMachine() inif sm.context->isEmpty() or sm.general->notEmpty() thensmelsesm.contextendif
@3733#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#State#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a state are properly related to the redefinition contexts of the specified state to allow this element to redefine the other. The containing region of a redefining state must redefine the containing region of the redefined state.result = true
@3734#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Extension#The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).result = memberEnd->reject(ownedEnd)
@3735#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Extension#The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).result = metaclassEnd().type
@3736#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Extension#The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.result = (ownedEnd->lowerBound() = 1)
@3737#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#ExtensionEnd#The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the defaultlower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.result = lowerBound = if lowerValue->isEmpty() then 0 else lowerValue->IntegerValue() endif
@3738#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#UseCase#The query allIncludedUseCases() returns the transitive closure of all use cases (directly or indirectly) included by this use case.result = self.include->union(self.include->collect(in | in.allIncludedUseCases()))
@3739#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#RedefinableTemplateSignature#The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, since redefinition only adds new formal parameters.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(RedefineableTemplateSignature)
@3740#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#StringExpression#The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.result = if subExpression->notEmpty()then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))
@3741#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.result = true
@3742#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralInteger#The query integerValue() gives the value.result = value
@3743#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.result = true
@3744#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralString#The query stringValue() gives the value.result = value
@3745#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.result = true
@3746#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.result = value
@3747#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.result = true
@3748#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralNull#The query isNull() returns true.result = true
@3749#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.result = true
@3750#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.result = value
@3751#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Variable#The isAccessibleBy() operation is not defined in standard UML. Implementations should define it to specify which actions can access a variable.result = true
@3752#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Component#result = let usingInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),usedInterfaces : Set(Interface) = UsedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),usedByPorts : Set(Interface) = ports.provided in ((usingInterfaces->union(usedInterfaces)->union(realizingClassifierInterfaces))->union(usedByPorts))->asSet()
@3753#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#Component#result = let implementedInterfaces : Set(Interface) = self.implementation->collect(impl|impl.contract),realizedInterfaces : Set(Interface) = RealizedInterfaces(self),realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))),ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,providedByPorts : Set(Interface) = ports.provided in ((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->union(providedByPorts))->asSet()
@3754#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#LinkAction#The association operates on LinkAction. It returns the association of the action.result = self.endData->asSequence().first().end.association
@3755#E:/FinalProject Repos/repos\arnobl\kompren\explen\fr.inria.diverse.kompren.explen.xp\src\resources\examples/UML.ecore#documentation#AssociationClass#The operation allConnections results in the set of all AssociationEnds of the Association.result = memberEnd->union ( self.parents ()->collect (p | p.allConnections () )
@3756#E:/FinalProject Repos/repos\arnobl\kompren\kompren-core\fr.inria.diverse.kompren.compiler\src\main\resources\examples\unusedVar/kermeta.ecore#documentation#ClassDefinition#The definition of a class definition :) <pre>class A{   attribute s : String}  </pre> is a class definition; in :<pre>main() : A is do end</pre>A is a <b>Class</b> : it corresponds to the <b>use</b> of the class definition of A
@3758#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.cd.model\ur1.diverse.cd.model/cd.ecore#ClassNameBeginsUpperCase#CDClass#Tuple {message : String = 'The name of class "' + name + '" must begin uppercase.',status : Boolean = let firstLetter: String = (name).substring(1,1)in firstLetter.toUpperCase() = firstLetter}.status
@3759#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.cd.model\ur1.diverse.cd.model/cd.ecore#UnambiguousAttributeNames#CDClass#Tuple {message : String = 'The names of all attributes of a class must be unambiguous.',status : Boolean = true}.status
@3760#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.cd.model\ur1.diverse.cd.model/cd.ecore#AttributeNameBeginsLowerCase#CDAttribute#Tuple {message : String = 'The name of class "' + name + '" must begin lowercase.',status : Boolean = let firstLetter: String = (name).substring(1,1)in firstLetter.toLowerCase() = firstLetter}.status
@3761#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.cd.model\ur1.diverse.cd.model/cd.ecore#ConstantNameBeginsUpperCase#CDConstant#Tuple {message : String = 'The name of constant "' + name + '" must be all uppercase.',status : Boolean = name.toUpperCase() = name}.status
@3762#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.xmontiarc.model\ur1.diverse.xmontiarc.model/xmontiarc.ecore#AtomicOrComposed#ComponentType#Tuple {message : String = 'Component type \'' + name + '\' cannot have connectors and behavior',status : Boolean =             behavior.equalsIgnoreCase('') or self.connectors->isEmpty()}.status
@3763#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.xmontiarc.model\ur1.diverse.xmontiarc.model/xmontiarc.ecore#NameIsLowerCase#Port#Tuple {message : String = 'Port \'' + name + '\' must be lowercase',status : Boolean =             let firstLetter : String = (name).substring(0,1)                in firstLetter.toLowerCase() = firstLetter}.status
@3764#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.xmontiarc.model\ur1.diverse.xmontiarc.model/xmontiarc.ecore#DifferentSourceAndTarget#Connector#Tuple {message : String = 'Connectors cannot have the same source and target.',status : Boolean =             source <> target}.status
@3765#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.xmontiarc.model\ur1.diverse.xmontiarc.model/xmontiarc.ecore#MatchingPortTypes#Connector#Tuple {message : String = 'The data types of source and target ports must match.',status : Boolean =             source <> target}.status
@3766#E:/FinalProject Repos/repos\awortmann\xmontiarc\ur1.diverse.xmontiarc.model\ur1.diverse.xmontiarc.model/xmontiarc.ecore#NameIsLowerCase#Subcomponent#Tuple {message : String = '\'' + name + '\' must be lowercase',status : Boolean =             let firstLetter : String = (name).substring(0,1)                 in firstLetter.toLowerCase() = firstLetter}.status
@3767#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#valueLength#Kennitala#value.size() = 10
@3768#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#monthValid#Kennitala#Set{1 .. 12}->includes(self.month)
@3769#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#dayValid#Kennitala#let daysInMonth : Integer = if Set{1, 3, 5, 7, 8, 10, 12}->includes(self.month) then 31 else 30 endif in day <= daysInMonth - if month = 2 then if year.mod(4) = 0 and ((year.mod(100) <> 0 or year.mod(400) = 0)) then 1 else 2 endif else 0 endif
@3770#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#oldValid#Kennitala#Set{8, 9, 0}->includes(self.old)
@3771#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#vartalaValid#Kennitala#let samleif : Integer = (self.value.substring(1, 1)?.toInteger() * 3 + self.value.substring(2, 2)?.toInteger() * 2 + self.value.substring(3, 3)?.toInteger() * 7 + self.value.substring(4, 4)?.toInteger() * 6 + self.value.substring(5, 5)?.toInteger() * 5 + self.value.substring(6, 6)?.toInteger() * 4 + self.value.substring(7, 7)?.toInteger() * 3 + self.value.substring(8, 8)?.toInteger() * 2).mod(11) in 11 - if (samleif = 0) then 11 else samleif endif = self.vartala
@3772#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#derivation#Kennitala#(if old = 8 or old = 9 then '1' + old?.toString() else '20' endif + self.value.substring(5, 6))?.toInteger()
@3773#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#derivation#Kennitala#self.value.substring(3, 4)?.toInteger()
@3774#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#derivation#Kennitala#self.value.substring(1, 2)?.toInteger()
@3775#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#derivation#Kennitala#self.value.substring(10, 10)?.toInteger()
@3776#E:/FinalProject Repos/repos\bjorsig\Kennitala\OCLinEcoreKennitala\model/Kennitala.ecore#derivation#Kennitala#self.value.substring(9, 9)?.toInteger()
@3777#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#lowerConstr#Class#self.properties-> forAll (p: Property | p.multiplicityLowerBound = 0 or p.multiplicityLowerBound = 1)
@3778#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#upperConstr#Class#self.properties-> forAll (p: Property | p.multiplicityUpperBound = 1)
@3779#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#idConstr#Class#if self.isId->notEmpty() then self.isId.multiplicityLowerBound = 1 and self.isId.multiplicityUpperBound = 1 else true endif
@3780#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#idMandatorySuperclass#Class#if self.superclass->isEmpty() then self.properties -> includes(self.isId) else self.isId->isEmpty() endif
@3781#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#correctType#Class# self.properties -> forAll (p: Property | p.type.oclIsTypeOf(DataType) or p.type.oclIsTypeOf(Enumeration))
@3782#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#noSelfSubclass#Class#self.subclass->excludes(self)
@3783#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#noSelfSuperclass#Class#self.superclass->excludes(self)
@3784#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#superNotSubclass#Class#self.superclass <> self.subclass
@3785#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#derivation#Class#Class.allInstances() -> select(superclass = self)
@3786#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#derivation#Class#Association.allInstances() -> select(begin.type = self)
@3787#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#derivation#Class#Association.allInstances() -> select(end.type = self)
@3788#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#uniqueLiteral#Enumeration#self.literals->isUnique(name)
@3789#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#lowerConstrBegin#Association#self.begin.multiplicityLowerBound >= 0
@3790#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#upperConstrBegin#Association#self.begin.multiplicityUpperBound = -1 or (self.begin.multiplicityLowerBound <= self.begin.multiplicityUpperBound and self.begin.multiplicityUpperBound > 0)
@3791#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#lowerConstrEnd#Association#self.end.multiplicityLowerBound >= 0
@3792#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#upperConstrEnd#Association#self.end.multiplicityUpperBound = -1 or (self.end.multiplicityLowerBound <= self.end.multiplicityUpperBound and self.end.multiplicityUpperBound > 0)
@3793#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#correctTypeBegin#Association#self.begin.type.oclIsTypeOf(Class)
@3794#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#correctTypeEnd#Association#self.end.type.oclIsTypeOf(Class)
@3795#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#uniqueClassNames#DomainModel#self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@3796#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#uniquedataTypeNames#DomainModel#self.dataTypes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@3797#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#uniqueEnumerationNames#DomainModel#Enumeration.allInstances()->isUnique(name)
@3798#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#uniqueAssociationNames#DomainModel#Association.allInstances()->isUnique(name)
@3799#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#uniqueConditions#ViewModel#Condition.allInstances()->isUnique(conditionID)
@3800#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#isPropertyMemberOfClass#ViewPropertyElement#(self -> closure(o: ViewElement | o.oclContainer()) -> select(oclIsTypeOf(ClassOperationView))).oclAsType(ClassOperationView) -> forAll((instance->closure(superclass)).properties->includes(self.propertyRef))
@3801#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#correctType#TextViewElement#self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)
@3802#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#isDateThing#DateTimePickerViewElement#self.propertyRef.type.oclIsTypeOf(DataType) and (self.propertyRef.type.name = 'Date' or self.propertyRef.type.name = 'Time' or self.propertyRef.type.name = 'DateTime')
@3803#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#correctType#SelectionViewElement#self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)
@3804#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#derivation#SelectionViewElement#if self.propertyRef.type.oclIsTypeOf(Enumeration) then self.propertyRef.type.oclAsType(Enumeration).literals->asSet() else null endif
@3805#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#isPropertyMemberOfClass#Column#(self -> closure(oclContainer()) -> select(oclIsTypeOf(TableViewElement))).oclAsType(TableViewElement) -> forAll((classRef->closure(superclass)).properties->includes(self.propertyRef))
@3806#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#diffConditions#CompositeCondition#self.cond1 <> self.cond2
@3807#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab1\model/views.ecore#sameResult#CompositeCondition#(self.cond1.result = self.result and self.cond2.result = self.result)
@3808#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#UniqueIdIsContainedOrInherited#Class# self.properties -> includes(self.id)  or self.superClass.properties -> closure(superClass.properties) -> includes(self.id)
@3809#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#ClassPropertyTypeIsValid#Class#self.properties -> forAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))
@3810#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#ClassPropertyBoundsAreValid#Class#self.properties -> forAll(p | p.upperBound = 1 and (p.lowerBound = 0 xor p.lowerBound = 1))
@3811#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#IdBoundsAreValid#Class# self.id.upperBound = 1 and self.id.lowerBound = 1
@3812#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#NoCyclicInheritance#Class#self.superClass -> closure(superClass) -> excludes(self)
@3813#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#AssociationPropertyBoundsAreValid#Association# self.associationEnds -> forAll(p | p.lowerBound >= 0 and (p.upperBound <> 0 or p.upperBound >= p.lowerBound or p.upperBound = -1))
@3814#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#OneStartViewExistsWithinAViewGroup#ViewGroup#self.views -> select(v | v.startView = true) -> size() = 1
@3815#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#OneWelcomeGroupExists#ViewGroup#ViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1
@3816#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#TargetViewOfClassIndexViewLinksIsValid#ClassIndexView#self.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()
@3817#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#PropertyElementsReferToValidClassProperties#ClassOperationView#self.class.properties -> union(self.class -> closure(superClass).properties) -> includesAll(self.elementGroups.viewElements -> selectByKind(PropertyElement).property)
@3818#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#AssociationElementsReferToValidClass#ClassOperationView#self.elementGroups.viewElements -> selectByKind(AssociationElement) -> forAll(a | a.association.associationEnds -> excluding(a.association.navigableEnd).type -> includesAll(self.class -> union(self.class -> closure(superClass))))
@3819#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#PropertyElementOfComparisonConditionsIsValid#ClassOperationView#self.elementGroups.viewElements -> includesAll(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(CompositeCondition) -> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(ComparisonCondition).property -> union(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(ComparisonCondition).property) -> union(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(CompositeCondition).composedConditions -> selectByKind(ComparisonCondition).property)-> asSet())
@3820#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#ElementIdIsUnique#ViewElement#ViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()
@3821#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#TargetViewOfAssociationElementLinksIsValid#AssociationElement#self.link.targetView.class  -> includes(self.association.navigableEnd.type) or self.link -> isEmpty()
@3822#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#TableColumnRefersToTargetViewClassProperty#Table#self.association.navigableEnd.type -> selectByType(Class).properties ->union(self.association.navigableEnd.type -> selectByType(Class) -> closure(superClass).properties) -> includesAll(self.columns.property)
@3823#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#PropertyTypeOfTextIsValid#Text#self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
@3824#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#PropertyTypeOfDateTimePickerIsValid#DateTimePicker#self.property.type.oclIsTypeOf(DataType) and(self.property.type.name = 'Date' or  self.property.type.name = 'Time' or self.property.type.name = 'DateTime')
@3825#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#PropertyTypeOfSelectionIsValid#Selection#self.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)
@3826#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#ConditionIdIsUnique#VisibilityCondition#VisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()
@3827#E:/FinalProject Repos/repos\blackandcold\ModelEng2015\Lab2\src\at.ac.tuwien.big.views\model/views.ecore#ComposedConditionTypesAreEqual#CompositeCondition#self.composedConditions -> forAll(c | c.type = self.type)
@3868#E:/FinalProject Repos/repos\caev03\MPA2017-TallerPetriNet\model/petrinet.ecore#correctDelayDefinition#Transition#maxDelay > minDelay
@3869#E:/FinalProject Repos/repos\cfasantos\ECC/phoneBookCyclic.ecore#invIsAMobilePhoneDisjointFixedPhone#CellPhone#not(self.oclIsTypeOf(FixedPhone))
@3870#E:/FinalProject Repos/repos\cfasantos\ECC/phoneBookCyclic.ecore#invIsAPhoneComplete#Phone#self.oclIsTypeOf(CellPhone) or self.oclIsTypeOf(FixedPhone)
@3871#E:/FinalProject Repos/repos\cfasantos\ECC\Models/Modelo1.ecore#PessoaCompleta#Pessoa#oclIsTypeOf(Brasileiro) or oclIsTypeOf(Aluno)
@3872#E:/FinalProject Repos/repos\cfasantos\ECC\Models/Modelo1.ecore#BrasileiroDisjunto#Brasileiro#not (oclIsTypeOf(Aluno))
@3876#E:/FinalProject Repos/repos\cfasantos\ECC\Models/phone.ecore#invIsAMobilePhoneDisjointFixedPhone#MobilePhone#not(self.oclIsTypeOf(FixedPhone))
@3877#E:/FinalProject Repos/repos\cfasantos\ECC\Models/phone.ecore#invIsAPhoneComplete#Phone#self.oclIsTypeOf(MobilePhone) or self.oclIsTypeOf(FixedPhone)
@3880#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#singleStateMachine#StateMachine#StateMachine.allInstances()->size() = 1
@3881#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#noContainerForStatemachine#StateMachine#self.container.oclIsUndefined()
@3882#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#activeStateHierarchyConsistency#StateMachine#if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif
@3883#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#containerForAllStates#State#not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()
@3884#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#initialStateInComposite#CompositeState#self.states->includes(self.initialState.referencedState)
@3885#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#uniqueCompositeName#CompositeState#self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))
@3886#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#body#CompositeState#self.states->select(s : State | s.isActive)->size() = 1 and self.states->select(s : State | s.oclIsTypeOf(CompositeState))->forAll(s : State | if s.isActive then s.oclAsType(CompositeState).activeSubTree() else s.oclAsType(CompositeState).unactiveSubTree() endif)
@3887#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#body#CompositeState#self.states->forAll(s : State | not s.isActive) and self.states->select(s : State | s.oclIsTypeOf(CompositeState))->forAll(s : State | s.oclAsType(CompositeState).unactiveSubTree())
@3888#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#transInitialState#Transition#not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)
@3889#E:/FinalProject Repos/repos\cfollet\projet_idm\metaModels/StateMachine.ecore#uniqueEventName#Event#Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)
@3900#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#UsuarioSano#Usuario#self.conPatologias = false
@3901#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#UsuarioAdulto#Usuario#self.edad >= 18 and self.edad <= 60
@3902#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#UsuarioEnEstatura#Usuario#self.estatura >= 142 and self.estatura<=191
@3903#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#UsuarioEnPeso#Usuario#(self.peso >= self.calcularPT() * 0.90) and                          (self.peso <= self.calcularPT() * 1.10)
@3904#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Usuario#(self.estatura - 150) * 0.75 + 50
@3905#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Usuario#if (self.genero = Genero::FEMENINO) then(10 * self.peso) + (6.25 * self.estatura) - (5 * self.edad) - 161else(10 * self.peso) + (6.25 * self.estatura) - (5 * self.edad) + 5endif
@3906#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Usuario#self.calcularGEB() * 0.10
@3907#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Usuario#if (self.actFisica = ActividadFisica::LIGERA) thenself.calcularGEB() * 0.12else if (self.actFisica = ActividadFisica::MODERADA) thenself.calcularGEB() * 0.27else if (self.actFisica = ActividadFisica::INTENSA) thenself.calcularGEB() * 0.54else0endif endif endif
@3908#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Usuario#self.calcularGEB() + self.calcularETA() + self.calcularGAF()
@3909#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#LeyDeLaCantidad#Menu#(self.calcularEnergia() >= self.usuario.calcularGET() * 0.90) and (self.calcularEnergia() <= self.usuario.calcularGET() * 1.10)
@3910#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#LeyDeLaCalidad#Menu#self.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::FRUTAS) andself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::VERDURAS) andself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::CEREALES) andself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::PROTEINAS)
@3911#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#LeyDeLaArmonia#Menu#let energiaCarbs = self.calcularCarbohidratos() * 4 in(energiaCarbs >= self.calcularEnergia()*0.50) and (energiaCarbs <= self.calcularEnergia()*0.70) andlet energiaProts = self.calcularProteinas() * 4 in(energiaProts >= self.calcularEnergia()*0.10) and (energiaProts <= self.calcularEnergia()*0.20) andlet energiaLips = self.calcularLipidos() * 9 in(energiaLips >= self.calcularEnergia()*0.25) and (energiaLips <= self.calcularEnergia()*0.35)
@3912#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#LeyDeLaAdequacion#Menu#self.preparaciones.ingredientes->intersection(self.usuario.intolerables)->isEmpty() and  self.preparaciones.ingredientes->intersection(self.usuario.favoritos)->notEmpty()  and  self.calcularPrecio() <= self.usuario.presupuesto
@3913#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Menu#preparaciones.calcularEnergia()->sum()
@3914#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Menu#preparaciones.calcularCarbohidratos()->sum()
@3915#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Menu#preparaciones.calcularProteinas()->sum()
@3916#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Menu#preparaciones.calcularLipidos()->sum()
@3917#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Menu#preparaciones.calcularPrecio()->sum()
@3918#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Preparacion#ingredientes.energia->sum()
@3919#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Preparacion#ingredientes.carbohidratos->sum()
@3920#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Preparacion#ingredientes.proteinas->sum()
@3921#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Preparacion#ingredientes.lipidos->sum()
@3922#E:/FinalProject Repos/repos\chavezbosquez\leyes-alimentacion-ocl\NutrioEMF\model/Nutrio.ecore#body#Preparacion#ingredientes.precio->sum()
@3923#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#TwoPorts#Connector#self.port->size() = 2
@3924#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#TwoDifferentPorts#Connector#self.port->forAll(p1, p2 | p1<>p2 implies (p1.outComponent->size() + p2.outComponent->size() = 1 and p1.inComponent->size() + p2.inComponent->size() = 1))
@3925#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#ExactlyOneConnector#PortInstance#self.connect->size() = 1
@3926#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#ExactlyOneComponent#PortInstance#self.outComponent->size() + self.inComponent->size() = 1
@3927#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#UniqueComponentTypeNames#Architecture#self.component.name -> asSet() -> size() = self.component.name -> size()
@3928#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#UniqueConnectorNames#Architecture#self.connectors.name -> asSet() -> size() = self.connectors.name -> size()
@3929#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#UniquePortNames#Architecture#self.ports.name -> asSet() -> size() = self.ports.name -> size()
@3930#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#UniqueComponentInstanceNames#Architecture#self.instances.name -> asSet() -> size() = self.instances.name -> size()
@3931#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.component_diagram\model/component_diagram.ecore#UniquePortTypeNames#Architecture#self.port_type.name -> asSet() -> size() = self.port_type.name -> size()
@3932#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.ctmc\model/CTMC.ecore#initalStateRequired#CTMC#self.initialState -> size() >0
@3933#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.ctmc\model/CTMC.ecore#OutgoingDontAddUpToOne#State#Tuple {message : String = 'Probability of all outgoing transitions must be 1.0.',status : Boolean =             self.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001}.status
@3934#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.ctmc\model/CTMC.ecore#NonDeterministic#State#Tuple {message : String = 'There must not be any nondeterminism. Please union transitions to the same target.',status : Boolean = self.outgoing.to->asSet()->size() = self.outgoing->size()}.status
@3935#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.ctmc\model/CTMC.ecore#NoDuplicateLabels#State#Tuple {message : String = 'Labels must be unique per state.',status : Boolean = self.labels.name->asSet()->size() = self.labels->size()}.status
@3936#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.ctmc\model/CTMC.ecore#ExitRateGreaterZero#State#Tuple {message : String = 'Exit rate must be greater than 0.',status : Boolean =     exitRate > 0.0 or self.outgoing->size() = 0}.status
@3937#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.ctmc\model/CTMC.ecore#ProbBetween0and1#Transition#Tuple {message : String = 'Probability must be between 0 and 1.',status : Boolean =             prob >= 0.0 and prob <= 1.0}.status
@3938#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.dtmc\model/DTMC.ecore#initalStateRequired#DTMC#self.initialState -> size() >0
@3939#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.dtmc\model/DTMC.ecore#OutgoingDontAddUpToOne#State#Tuple {message : String = 'Probability of all outgoing transitions must be 1.0.',status : Boolean = self.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001}.status
@3940#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.dtmc\model/DTMC.ecore#NonDeterministic#State#Tuple {message : String = 'There must not be any nondeterminism. Please union transitions to the same target.',status : Boolean = self.outgoing.to->asSet()->size() = self.outgoing->size()}.status
@3941#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.dtmc\model/DTMC.ecore#NoDuplicateLabels#State#Tuple {message : String = 'Labels must be unique per state.',status : Boolean = self.labels.name->asSet()->size() = self.labels->size()}.status
@3942#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.dtmc\model/DTMC.ecore#ProbBetween0and1#Transition#Tuple {message : String = 'Probability must be between 0 and 1.',status : Boolean =  prob >= 0.0 and prob <= 1.0}.status
@3943#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoStandaloneUndevelopedEvent#Hazard#self.inputGate->size() + self.outputGate->size() + self.inEvent->size() > 0
@3944#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoHazardAsInput#Gate#self.inputEvents->forAll(e : Event | (e.oclIsTypeOf(BasicEvent) or e.oclIsTypeOf(IntermediateEvent)) and not e.oclIsTypeOf(Hazard))
@3945#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoBasicEventAsOutput#Gate#self.outputEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)) and not e.oclIsTypeOf(BasicEvent))
@3946#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#AtLeastTwoInputs#Gate#self.inputGates->size() + self.inputEvents->size() >= 2
@3947#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#ExactlyOneOutput#Gate#self.outputGate->size() + self.outputEvent->size() = 1
@3948#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoAutoReferencesAllowedInInputGates#Gate#if self.inputGates->size() > 0 then self.inputGates->select(g : Gate | g.id = self.id)->size() = 0 else true endif
@3949#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoAutoReferencesAllowedInOutputGate#Gate#if self.outputGate <> null then self.outputGate.id <> self.id else true endif
@3950#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#EventHasAName#Event#self.name->size() > 0
@3951#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#OnlyIntermediateOrBasicEventAsInput#IntermediateEvent#self.inEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(BasicEvent)))
@3952#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoStandaloneIntermediateEvent#IntermediateEvent#self.inputGate->size() + self.outputGate->size() + self.inEvent->size() + self.outEvent->size()> 0
@3953#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#OnlyIntermediateOrHazardtAsOutput#IntermediateEvent#self.outEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)))
@3954#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoStandaloneBasicEvent#BasicEvent#self.inputGate->size() + self.outputGate->size() + self.outEvent->size()> 0
@3955#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.fault_tree\model/FaultTree.ecore#NoStandaloneUndevelopedEvent#UndevelopedEvent#self.inputGate->size() + self.outputGate->size() > 0
@3956#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.lqn\model/LQN.ecore#PH1PH2EntryTypeDefinedWithPhases#EntryType#if self.type = TypeType::PH1PH2 then self.entryPhaseActivities->size() > 0 else true endif
@3957#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.lqn\model/LQN.ecore#GraphEntryTypeDefinedWithGraph#EntryType#if self.type = TypeType::GRAPH then self.entryActivityGraph->size() > 0 else true endif
@3958#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.sequence_diagram\model/Sequence_diagram.ecore#onlyOneInteraction#Package#self.packagedElement -> select(element : uml::PackageableElement| element.oclIsKindOf(uml::Interaction)) -> size() < 2
@3959#E:/FinalProject Repos/repos\CoWolf\CoWolf\de.uni_stuttgart.iste.cowolf.model.sequence_diagram\model/Sequence_diagram.ecore#documentation#Message#The query isDistinguishableFrom() specifies that any two Messages may coexist in the same Namespace, regardless of their names.result = (true)<p>From package UML::Interactions.</p>
@3960#E:/FinalProject Repos/repos\cproinger\ame_ss2016\ContextAwareModeling\contextawaremodeling\model/ManagerModel.ecore#IfProbableThenSum1#State#transitions -> select(t | not t.probability.oclIsUndefined()) -> size() = 0or transitions -> select(t | not t.probability.oclIsUndefined()) -> collect(probability) -> sum() = 1.0
@3961#E:/FinalProject Repos/repos\cproinger\ame_ss2016\ContextAwareModeling\contextawaremodeling\model/ManagerModel.ecore#EitherRateOrProbability#Transition#rate.oclIsUndefined() xor probability.oclIsUndefined()
@3962#E:/FinalProject Repos/repos\cproinger\ame_ss2016\ContextAwareModeling\contextawaremodeling\model/ManagerModel.ecore#derivation#Transition#if(rate <> null) then '{rate: ' + rate.toString() + '}' else if(probability <> null) then '{prob: ' + probability.toString() + '}' else '' endifendif
@3963#E:/FinalProject Repos/repos\cproinger\ame_ss2016\ContextAwareModeling\contextawaremodeling\model/ManagerModel.ecore#derivation#Transition#if(guard <> null) then self.name + ' [' + self.guard + ']\n' + rateOrProbelse self.name + '\n' + rateOrProbendif
@3964#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#DuplicateTransition#Manager#ManagerTransition.allInstances()->forAll(t1 : ManagerTransition, t2 : ManagerTransition | t1 <> t2 implies t1.target <> t2.target or t1.source <> t2.source)
@3965#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagerStateNameUnique#Manager#ManagerState.allInstances()->forAll(m1 : ManagerState, m2 : ManagerState | m1 <> m2 implies m1.name <> m2.name)
@3966#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagedElementNameUnique#Manager#ManagedElement.allInstances()->forAll(m1 : ManagedElement, m2 : ManagedElement | m1 <> m2 implies m1.name <> m2.name)
@3967#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#InitialStateNoFinalState#Manager#finalState->forAll(s : ManagerState | s <> initialState)
@3968#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#FinalStatesNoOutgoingTransitions#Manager#finalState->forAll(s : ManagerState | s.outgoingTransition->size() = 0)
@3969#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagerTransitionNameUnique#Manager#ManagerTransition.allInstances()->forAll(m1 : ManagerTransition, m2 : ManagerTransition | m1 <> m2 implies m1.name <> m2.name)
@3970#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#finalStateMustHaveIncomingTransition#Manager#finalState->forAll(s : ManagerState | s.incomingTransition->size() > 0)
@3971#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#InitialStateMustBeStart#Manager#initialState.isStart and not initialState.isEnd
@3972#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagerParameterNameUnique#Manager#ManagerParameter.allInstances()->forAll(m1 : ManagerParameter, m2 : ManagerParameter | m1 <> m2 implies m1.name <> m2.name)
@3973#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#FinalStateMustBeEnd#Manager#finalState->forAll(s : ManagerState | s.isEnd and not s.isStart)
@3974#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#EndStateNofinalState#ManagerState#if isEnd then owningManager.finalState->includes(self) else true endif
@3975#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#UndefinedTransitions#ManagerState#if not owningManager.initialState.oclAsSet()->includes(self) and not owningManager.finalState->includes(self) then outgoingTransition->size() > 0 and incomingTransition->size() > 0 else true endif
@3976#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#InitialStateNoFinalState#ManagerState#not (isStart and isEnd)
@3977#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#StartStateNoInitialState#ManagerState#if isStart then owningManager.initialState.oclAsSet()->includes(self) else true endif
@3978#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#OutgoingTransitionsProbabilitySumMustBe1#ManagerState#if not owningManager.finalState->includes(self) then outgoingTransition->collect(transProb)->iterate(p : Real ; res : Real = 0 | res + p) = 1.0 else true endif
@3979#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagerStateNameUndefined#ManagerState#not name.oclIsUndefined()
@3980#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#TransProbMax1#ManagerTransition#transProb <= 1.0 and not transProb.oclIsUndefined()
@3981#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagerTransitionUndefinedName#ManagerTransition#not name.oclIsUndefined()
@3982#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagerParameterUndefinedName#ManagerParameter#not name.oclIsUndefined()
@3983#E:/FinalProject Repos/repos\cproinger\context-manager\mngr\model/mngr.ecore#ManagedElementUndefinedName#ManagedElement#not name.oclIsUndefined()
@4004#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#FirstLetterOFClassNameIsUpperCase#Class#self.name.at(1).matches('[A-Z]')
@4005#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#NoSelfInheritance#Class#self.superType <> self.name
@4006#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#ClassNameIsUnique#Class#Class.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()
@4007#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#PropertyIdIsMandetoryOneToOne#Class#self.id.multiplicityLowerBound = 1 and self.id.multiplicityUpperBound = 1
@4008#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#MultiplicityOfAssociatioEndPropertyIsValid#AssociationEnd#self.multiplicityLowerBound >= 0           and (self.multiplicityUpperBound >= multiplicityLowerBound or self.multiplicityUpperBound = -1)
@4009#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#OneWelcomeViewGroupIsValid#ViewGroup#ViewGroup.allInstances() -> select(w | w.welcomeViewGroup = true) -> size() = 1
@4010#E:/FinalProject Repos/repos\cproinger\mdse_ws2015\DVML12\model/DVML.ecore#ComposedConditionTypesAreSame#CompositeCondition#self.compositeConditions -> forAll(c | c.type = self.type)
@4051#E:/FinalProject Repos/repos\csurgotamas\Evilstore\hu.bme.mit.inf.evilstore.MetaEvilStore\model/evilsystem.ecore#UniqueAttributeName#Entity#self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
@4052#E:/FinalProject Repos/repos\csurgotamas\Evilstore\hu.bme.mit.inf.evilstore.MetaEvilStore\model/evilsystem.ecore#UniqueFunctionName#Entity#self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
@4053#E:/FinalProject Repos/repos\csurgotamas\Evilstore\hu.bme.mit.inf.evilstore.MetaEvilStore\model/evilsystem.ecore#NotEmptyName#NamedObject#self.name <> ''
@4054#E:/FinalProject Repos/repos\csurgotamas\Evilstore\hu.bme.mit.inf.evilstore.MetaEvilStore\model/evilsystem.ecore#UniqueParameterName#Function#self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1 <> p2 implies p1.name <> p2.name)
@4055#E:/FinalProject Repos/repos\csurgotamas\Evilstore\hu.bme.mit.inf.evilstore.MetaEvilStore\model/evilsystem.ecore#UniqueFunctionName#Service#self.functions->forAll(f1 : Function, f2 : Function | f1 <> f2 implies f1.name <> f2.name)
@4056#E:/FinalProject Repos/repos\csurgotamas\Evilstore\hu.bme.mit.inf.evilstore.MetaEvilStore\model/evilsystem.ecore#UniquePackageElementName#PackageElement#PackageElement.allInstances()->forAll(p1 : PackageElement, p2 : PackageElement | p1 <> p2 implies p1.name <> p2.name)
@4057#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP1#NUOPCModel__ImplementsSetServices#self.parent.initialize.implementsInitP1=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP1.name)->notEmpty()
@4058#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP1$message#NUOPCModel__ImplementsSetServices#'A call is required in the Set Services method to ESMF_GridCompSetEntryPoint in order to register the initialize phase 1 method.'
@4059#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP2#NUOPCModel__ImplementsSetServices#self.parent.initialize.implementsInitP2=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP2.name)->notEmpty()
@4060#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP2$message#NUOPCModel__ImplementsSetServices#'A call is required in the Set Services method to ESMF_GridCompSetEntryPoint in order to register the initialize phase 2 method.'
@4061#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__ImplementsInitP1#self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
@4062#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__ImplementsInitP1#self.parent.parent.implementsSetServices <> null and self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='1')->notEmpty()
@4063#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__ImplementsInitP1#self.registeredInSetServices or self.advertisesAtLeastOneField
@4064#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__ImplementsInitP2#self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
@4065#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__ImplementsInitP2#self.parent.parent.implementsSetServices <> null and self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='2')->notEmpty()
@4066#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__ImplementsInitP2#self.registeredInSetServices or self.realizesAtLeastOneField
@4067#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__AdvertisesImportField#self.addsToState = self.parent.importParam
@4068#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__AdvertisesExportField#self.addsToState = self.parent.exportParam
@4069#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__RealizesImportField#self.realizedInState = self.parent.importParam
@4070#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCModel__RealizesExportField#self.realizedInState = self.parent.exportParam
@4071#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriver__ModelImports__ModelImport#let models : Set(NUOPCModel) = self.parent.parent.parent.nuopcModel->select(m|m.name=self.name)inif models <> null and models->notEmpty() thenmodels->asSequence()->first()else null endif
@4072#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriver__ImplementsSetModelCount#self.parent.genericImports.importsLabelSetModelCount <> null and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelCount).userRoutine->asSequence()->first()
@4073#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriver__ImplementsSetModelServices#self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelServices).userRoutine->asSequence()->first()
@4074#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriverAtmOcn__ImplementsSetModelCount#self.parent.genericImports.importsLabelSetModelCount <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelCount).userRoutine->asSequence()->first()
@4075#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriverAtmOcn__ImplementsSetModelServices#self.parent.genericImports.importsLabelSetModelServices <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelServices).userRoutine->asSequence()->first()
@4076#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriverAtmOcn__ImplementsSetModelPetLists#self.parent.genericImports.importsLabelSetModelPetLists <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 and self.name = self.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelSetModelPetLists).userRoutine->asSequence()->first()
@4077#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCDriverAtmOcn__ModelImports__ModelImport#let models : Set(NUOPCModel) = self.parent.parent.parent.nuopcModel->select(m|m.name=self.name)inif models <> null and models->notEmpty() thenmodels->asSequence()->first()else null endif
@4078#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP1#NUOPCMediator__ImplementsSetServices#self.parent.initialize.implementsInitP1=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP1.name)->notEmpty()
@4079#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP1$message#NUOPCMediator__ImplementsSetServices#'A call is required in the Set Services method to ESMF_GridCompSetEntryPoint in order to register the initialize phase 1 method.'
@4080#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP2#NUOPCMediator__ImplementsSetServices#self.parent.initialize.implementsInitP2=null or self.callsSetEntryPoint->select(c|c.userRoutine=self.parent.initialize.implementsInitP2.name)->notEmpty()
@4081#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#registersInitP2$message#NUOPCMediator__ImplementsSetServices#'A call is required in the Set Services method to ESMF_GridCompSetEntryPoint in order to register the initialize phase 2 method.'
@4082#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ImplementsInitP1#self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
@4083#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ImplementsInitP1#self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='1')->notEmpty()
@4084#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ImplementsInitP1#self.registeredInSetServices or self.advertisesAtLeastOneField
@4085#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ImplementsInitP2#self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
@4086#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ImplementsInitP2#self.parent.parent.implementsSetServices.callsSetEntryPoint->select(c|c.userRoutine=self.name and c.phase='2')->notEmpty()
@4087#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ImplementsInitP2#self.registeredInSetServices or self.realizesAtLeastOneField
@4088#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__AdvertisesImportField#self.addsToState = self.parent.importParam
@4089#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__AdvertisesExportField#self.addsToState = self.parent.exportParam
@4090#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__RealizesImportField#self.realizedInState = self.parent.importParam
@4091#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__RealizesExportField#self.realizedInState = self.parent.exportParam
@4092#E:/FinalProject Repos/repos\cupid-ide\cupid\org.earthsystemmodeling.cupid\archive\model/nuopc.ecore#derivation#NUOPCMediator__ModelAdvance#self.parent <> null and self.parent.implementsSetServices <> null and self.parent.implementsSetServices.attachesMethod->size() > 0 andself.parent.genericImports <> null and self.parent.genericImports.importsLabelModelAdvance <> null andself.parent.implementsSetServices.attachesMethod->select(m|m.name=self.parent.genericImports.importsLabelModelAdvance).userRoutine->includes(self.name)
@4093#E:/FinalProject Repos/repos\d3sreq\foam-tool\org.foam.models\models/ucm.ecore#derivation#Scenario#''
@4094#E:/FinalProject Repos/repos\d3sreq\foam-tool\org.foam.models\models/ucm.ecore#derivation#Step#''
@4096#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/robot.ecore#conflictmovement#Sequence#self.Operations->forAll(op1, op2 | Operations->indexOf(op1)+1 = Operations->indexOf(op2) and op1.oclIsKindOf(Movement) and op2.oclIsKindOf(Movement) implies op1.oclAsType(Movement).duration <> 0.0)
@4097#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/robot.ecore#positif#Movement#self.duration >= 0
@4098#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Element#An element may not directly or indirectly own itself.not self.allOwnedElements()->includes(self)
@4099#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Element#Elements that must be owned must have an owner.self.mustBeOwned() implies owner->notEmpty()
@4100#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@4101#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = true
@4102#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = false
@4103#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Package#If an element that is owned by a package has visibility, it is public or private.self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)
@4104#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = member->select( m | self.makesVisible(m))
@4105#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.self.member->includes(el)result = (ownedMember->includes(el)) or(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
@4106#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#If there is no name, or one of the containing namespaces has no name, there is no qualified name.(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())  implies self.qualifiedName->isEmpty()
@4107#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
@4108#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#If a NamedElement is not owned by a Namespace, it does not have a visibility.namespace->isEmpty() implies visibility->isEmpty()
@4109#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif
@4110#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.result = if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif
@4111#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif
@4112#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.result = '::'
@4113#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#NamedElement#The query allOwningPackages() returns all the directly or indirectly owning packages.result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())
@4114#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Namespace#All the members of a Namespace are distinguishable within it.membersAreDistinguishable()
@4115#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Namespace#The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
@4116#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Namespace#The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.result = if self.ownedMember ->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then elementImports->collect(el | el.getName())  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))  endifendif
@4117#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.result = self.member->forAll( memb |self.member->excluding(memb)->forAll(other |memb.isDistinguishableFrom(other, self)))
@4118#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |mem.imp.isDistinguishableFrom(mem, self)))
@4119#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
@4120#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ElementImport#An importedElement has either public visibility or no visibility at all.self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public
@4121#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = if self.alias->notEmpty() then  self.aliaselse  self.importedElement.nameendif
@4122#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Constraint#The value specification for a constraint must evaluate to a Boolean value.self.specification().booleanValue().isOclKindOf(Boolean)
@4123#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for ValueSpecification, the type must be conformant with the type of the specified parameterable element.result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)
@4124#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@4125#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@4126#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@4127#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@4128#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@4129#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@4130#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@4131#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Association#An association specializing another association has the same number of ends as the other association.self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())
@4132#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Association#Only binary associations can be aggregations.self.memberEnd->exists(aggregation <> Aggregation::none) implies self.memberEnd->size() = 2
@4133#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Association#Association ends of associations with more than two ends must be owned by the association.if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)
@4134#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query isTemplate() returns whether this templateable element is actually a template.result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())
@4135#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@4136#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@4137#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#A classifier may only specialize classifiers of a valid type.self.parents()->forAll(c | self.maySpecializeType(c))
@4138#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The general classifiers are the classifiers referenced by the generalization relationships.result = self.parents()
@4139#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@4140#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@4141#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = generalization.general
@4142#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@4143#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true
@4144#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (self=other) or (self.allParents()->includes(other))
@4145#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The inherit operation is overridden to exclude redefined properties.The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.result = inhs
@4146#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@4147#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@4148#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.redefinee.isRedefinitionContextValid(self)result = false
@4149#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))
@4150#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.result = allOwnedElements->select(oclIsKindOf(ParameterableElement))
@4151#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this templateable element is actually a template.result = ownedTemplateSignature->notEmpty()
@4152#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#TemplateBinding#A binding contains at most one parameter substitution for each formal template parameter of the target template signature.template.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
@4153#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#TemplateParameter#The default must be compatible with the formal template parameter.default->notEmpty() implies default->isCompatibleWith(parameteredElement)
@4154#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ParameterableElement#The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. Subclasses should override this operation to specify different compatibility constraints.result = p->oclIsKindOf(self.oclType)
@4155#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.result = templateParameter->notEmpty()
@4156#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#GeneralizationSet#Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.generalization->collect(g | g.general)->asSet()->size() <= 1
@4157#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#If the language attribute is not empty, then the size of the body and language arrays must be the same.language->notEmpty() implies (body->size() = language->size())
@4158#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#The behavior may only have return result parameters.self.behavior.notEmpty() implies  self.behavior.ownedParameters->select(p | p.direction<>#return)->isEmpty()
@4159#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#The behavior must have exactly one return result parameter.self.behavior.notEmpty() implies  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1
@4160#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.self.isIntegral()true
@4161#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an integer.result = false
@4162#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.self.isIntegral()result = false
@4163#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.self.isIntegral()result = false
@4164#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Parameter#A parameter may only be associated with a connector end within the context of a collaboration.self.end.notEmpty() implies self.collaboration.notEmpty()
@4165#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#A multiplicity must define at least one valid cardinality that is greater than zero.upperBound()->notEmpty() implies upperBound() > 0
@4166#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The lower bound must be a non-negative integer literal.lowerBound()->notEmpty() implies lowerBound() >= 0
@4167#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The upper bound must be greater than or equal to the lower bound.(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
@4168#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The derived lower attribute must equal the lowerBound.result = lowerBound()
@4169#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The derived upper attribute must equal the upperBound.result = upperBound()
@4170#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@4171#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@4172#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@4173#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif
@4174#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif
@4175#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#MultiplicityElement#The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))
@4176#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(Property) and   let prop : Property = redefinee.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isDerived implies prop.isDerived) and  (self.isComposite implies prop.isComposite))
@4177#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for properties, the type must be conformant with the type of the specified parameterable element.result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)
@4178#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#A multiplicity of a composite aggregation must not have an upper bound greater than 1.A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)
@4179#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.self.subsettedProperty->notEmpty() implies  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |    self.subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
@4180#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#A redefined property must be inherited from a more general classifier containing the redefining property.if (redefinedProperty->notEmpty()) then  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))
@4181#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.self.subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound()<=sp.upperBound() ))
@4182#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#Only a navigable property can be marked as readOnly.isReadOnly implies isNavigable()
@4183#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#A binding of a property template parameter representing an attribute must be to an attribute.(isAttribute(self) and (templateParameterSubstitution->notEmpty())  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))
@4184#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some classifier.result = Classifier.allInstances->exists(c | c.attribute->includes(p))
@4185#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2  then    let otherEnd = (association.memberEnd - self)->any() in      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif    else Set {}    endif
@4186#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.result = if association->notEmpty()then association.endType-typeelse if classifier->notEmpty() then Set{classifier} else Set{} endifendif
@4187#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)
@4188#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter. redefinee.isRedefinitionContextValid(self)result = (redefinee.oclIsKindOf(Operation) andlet op: Operation = redefinee.oclAsType(Operation) inself.ownedParameter.size() = op.ownedParameter.size() andforAll(i | op.ownedParameter[i].type.conformsTo(self.ownedParameter[i].type)))
@4189#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'self.ownedParameter->select(par | par.direction = #return)->size() <= 1
@4190#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#A bodyCondition can only be specified for a query operation.bodyCondition->notEmpty() implies isQuery
@4191#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.result = if returnResult()->notEmpty() then returnResult()->any().isOrdered else false endif
@4192#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.result = if returnResult()->notEmpty() then returnResult()->any().isUnique else true endif
@4193#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.result = if returnResult()->notEmpty() then returnResult()->any().lower else Set{} endif
@4194#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.result = if returnResult()->notEmpty() then returnResult()->any().upper else Set{} endif
@4195#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.result = if returnResult()->notEmpty() then returnResult()->any().type else Set{} endif
@4196#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Operation#The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty setresult = ownedParameter->select (par | par.direction = #return)
@4197#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#BehavioralFeature#The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.result = if n.oclIsKindOf(BehavioralFeature)then  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()  then Set{}->including(self)->including(n)->isUnique(bf | bf.ownedParameter->collect(type))  else true  endifelse trueendif
@4198#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Class#A passive class may not own receptions.not self.isActive implies self.ownedReception.isEmpty()
@4199#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#BehavioredClassifier#If a behavior is classifier behavior, it does not have a specification.self.classifierBehavior.notEmpty() implies self.specification.isEmpty()
@4200#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ProtocolStateMachine#A protocol state machine must only have a classifier context, not a behavioral feature context.(not context->isEmpty( )) and specification->isEmpty()
@4201#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ProtocolStateMachine#The states of a protocol state machine cannot have entry, exit, or do activity actions.region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.entry->isEmpty() and v.exit->isEmpty() and v.doActivity->isEmpty())))
@4202#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StateMachine#The query isConsistentWith() specifies that a redefining state machine is consistent with a redefined state machine provided that the redefining state machine is an extension of the redefined state machine: Regions are inherited and regions can be added, inherited regions can be redefined. In case of multiple redefining state machines, extension implies that the redefining state machine gets orthogonal regions for each of the redefined state machines.result = true
@4203#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StateMachine#The classifier context of a state machine cannot be an interface.context->notEmpty() implies not context.oclIsKindOf(Interface)
@4204#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StateMachine#The context classifier of the method state machine of a behavioral feature must be the classifier that owns the behavioral feature.specification->notEmpty() implies (context->notEmpty() and specification->featuringClassifier->exists (c | c = context))
@4205#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StateMachine#A state machine as the method for a behavioral feature cannot have entry/exit connection points.specification->notEmpty() implies connectionPoint->isEmpty()
@4206#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StateMachine#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a statemachine are properly related to the redefinition contexts of the specified statemachine to allow this element to redefine the other. The containing classifier of a redefining statemachine must redefine the containing classifier of the redefined statemachine.result = true
@4207#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#The query isConsistentWith() specifies that a redefining region is consistent with a redefined region provided that the redefining region is an extension of the redefined region, i.e. it adds vertices and transitions and it redefines states and transitions of the redefined region.result = true
@4208#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#A region can have at most one initial vertexself.subvertex->select (v | v.oclIsKindOf(Pseudostate))->select(p : Pseudostate | p.kind = #initial)->size() <= 1
@4209#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#A region can have at most one deep history vertexself.subvertex->select (v | v.oclIsKindOf(Pseudostate))->select(p : Pseudostate | p.kind = #deepHistory)->size() <= 1
@4210#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#A region can have at most one shallow history vertexself.subvertex->select(v | v.oclIsKindOf(Pseudostate))->select(p : Pseudostate | p.kind = #shallowHistory)->size() <= 1
@4211#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa.(stateMachine->notEmpty() implies state->isEmpty()) and (state->notEmpty() implies stateMachine->isEmpty())
@4212#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#The redefinition context of a region is the nearest containing statemachineresult = let sm = containingStateMachine() inif sm.context->isEmpty() or sm.general->notEmpty() thensmelsesm.contextendif
@4213#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a region are properly related to the redefinition contexts of the specified region to allow this element to redefine the other. The containing statemachine/state of a redefining region must redefine the containing statemachine/state of the redefined region.result = true
@4214#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#The operation containingStateMachine() returns the sate machine in which this Region is definedresult = if stateMachine->isEmpty() thenstate.containingStateMachine()elsestateMachineendif
@4215#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Region#The operation belongsToPSM () checks if the region belongs to a protocol state machineresult = if not stateMachine->isEmpty() thenoclIsTypeOf(ProtocolStateMachine)else if not state->isEmpty() thenstate.container.belongsToPSM ()else false
@4216#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Vertex#The operation containingStateMachine() returns the state machine in which this Vertex is definedresult = if not container->isEmpty()then-- the container is a regioncontainer.containingStateMachine()else if (oclIsKindOf(Pseudostate)) then-- entry or exit point?if (kind = #entryPoint) or (kind = #exitPoint) thenstateMachineelse if (oclIsKindOf(ConnectionPointReference)) thenstate.containingStateMachine() -- no other valid cases possibleendif
@4217#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Transition#The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transition: A redefining transition redefines all properties of the corresponding redefined transition, except the source state and the trigger.result = (redefinee.oclIsKindOf(Transition) and  let trans: Transition = redefinee.oclAsType(Transition) in    (source() = trans.source() and trigger() = tran.trigger())redefinee.isRedefinitionContextValid(self)
@4218#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Transition#A fork segment must not have guards or triggers.(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (guard->isEmpty() and trigger->isEmpty())
@4219#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Transition#A join segment must not have guards or triggers.(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (guard->isEmpty() and trigger->isEmpty())
@4220#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Transition#Transitions outgoing pseudostates may not have a trigger.source.oclIsKindOf(Pseudostate) and((source.kind <> #junction) and (source.kind <> #join) and (source.kind <> #initial)) implies trigger->isEmpty()
@4221#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Transition#The redefinition context of a transition is the nearest containing statemachine.result = let sm = containingStateMachine() inif sm.context->isEmpty() or sm.general->notEmpty() thensmelsesm.contextendif
@4222#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Transition#The query containingStateMachine() returns the state machine that contains the transition either directly or transitively.result = container.containingStateMachine()
@4223#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#The query isConsistentWith() specifies that a redefining state is consistent with a redefined state provided that the redefining state is an extension of the redefined state: A simple state can be redefined (extended) to become a composite state (by adding a region) and a composite state can be redefined (extended) by adding regions and by adding vertices, states, and transitions to inherited regions. All states may add or replace entry, exit, and 'doActivity' actions.result = true
@4224#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#The query containingStateMachine() returns the state machine that contains the state either directly or transitively.result = container.containingStateMachine()
@4225#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#Only composite states can have entry or exit pseudostates defined.connectionPoint->notEmpty() implies isComoposite
@4226#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#A simple state is a state without any regions.result = region.isEmpty()
@4227#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#A composite state is a state with at least one region.result = region.notEmpty()
@4228#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#An orthogonal state is a composite state with at least 2 regionsresult = (region->size () > 1)
@4229#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#Only submachine states can have a reference statemachine.result = submachine.notEmpty()
@4230#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#The redefinition context of a state is the nearest containing statemachine.result = let sm = containingStateMachine() inif sm.context->isEmpty() or sm.general->notEmpty() thensmelsesm.contextendif
@4231#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#State#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a state are properly related to the redefinition contexts of the specified state to allow this element to redefine the other. The containing region of a redefining state must redefine the containing region of the redefined state.result = true
@4232#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ConnectionPointReference#The entry Pseudostates must be Pseudostates with kind entryPoint.entry->notEmpty() implies entry->forAll(e | e.kind = #entryPoint)
@4233#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ConnectionPointReference#The exit Pseudostates must be Pseudostates with kind exitPoint.exit->notEmpty() implies exit->forAll(e | e.kind = #exitPoint)
@4234#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Pseudostate#The outgoing transition from and initial vertex may have a behavior, but not a trigger or a guard.(self.kind = #initial) implies (self.outgoing.guard->isEmpty()  and self.outgoing.trigger->isEmpty())
@4235#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Extension#The non-owned end of an Extension is typed by a Class.metaclassEnd()->notEmpty() and metaclass()->oclIsKindOf(Class)
@4236#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Extension#An Extension is binary, i.e., it has only two memberEnds.memberEnd->size() = 2
@4237#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Extension#The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).result = memberEnd->reject(ownedEnd)
@4238#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Extension#The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).result = metaclassEnd().type
@4239#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Extension#The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.result = (ownedEnd->lowerBound() = 1)
@4240#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ExtensionEnd#The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the defaultlower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.result = lowerBound = if lowerValue->isEmpty() then 0 else lowerValue->IntegerValue() endif
@4241#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ExtensionEnd#The multiplicity of ExtensionEnd is 0..1 or 1.(self->lowerBound() = 0 or self->lowerBound() = 1) and self->upperBound() = 1
@4242#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Profile#An element imported as a metaclassReference is not specialized or generalized in a Profile.self.metaclassReference.importedElement->  select(c | c.oclIsKindOf(Classifier) and    (c.generalization.namespace = self or      (c.specialization.namespace = self) )->isEmpty()
@4243#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Profile#All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.self.metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages())->  union(self.metaclassReference.importedElement.allOwningPackages() )->notEmpty()
@4244#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#UseCase#A UseCase must have a name.self.name -> notEmpty ()
@4245#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#UseCase#A use case cannot include use cases that directly or indirectly include it.not self.allIncludedUseCases()->includes(self)
@4246#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#UseCase#The query allIncludedUseCases() returns the transitive closure of all use cases (directly or indirectly) included by this use case.result = self.include->union(self.include->collect(in | in.allIncludedUseCases()))
@4247#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ExtensionPoint#An ExtensionPoint must have a name.self.name->notEmpty ()
@4248#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#RedefinableTemplateSignature#The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, since redefinition only adds new formal parameters.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(RedefineableTemplateSignature)
@4249#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#RedefinableTemplateSignature#The inherited parameters are the parameters of the extended template signature.if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter endif
@4250#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ClassifierTemplateParameter#If "allowSubstitutable" is true, then there must be a constrainingClassifier.allowSubstitutable implies constrainingClassifier->notEmpty()
@4251#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StringExpression#The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.result = if subExpression->notEmpty()then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))
@4252#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StringExpression#If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having todefine a collating sequence between operands and subexpressions).if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()
@4253#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#InstanceSpecification#The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))
@4254#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#InstanceSpecification#One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
@4255#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.result = true
@4256#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralInteger#The query integerValue() gives the value.result = value
@4257#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.result = true
@4258#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralString#The query stringValue() gives the value.result = value
@4259#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.result = true
@4260#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.result = value
@4261#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.result = true
@4262#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralNull#The query isNull() returns true.result = true
@4263#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.result = true
@4264#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.result = value
@4265#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FunctionBehavior#A function behavior has at least one output parameter.self.ownedParameters->  select(p | p.direction=#out or p.direction=#inout or p.direction=#return)->size() >= 1
@4266#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FunctionBehavior#The types of parameters are all data types, which may not nest anything but other datatypes.def: hasAllDataTypeAttributes(d : DataType) : Boolean =  d.ownedAttribute->forAll(a |    a.type.oclIsTypeOf(DataType) and      hasAllDataTypeAttributes(a.type))self.ownedParameters->forAll(p | p.type.notEmpty() and  p.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p))
@4267#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Variable#The isAccessibleBy() operation is not defined in standard UML. Implementations should define it to specify which actions can access a variable.result = true
@4268#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Lifeline#The selector for a Lifeline must only be specified if the referenced Part is multivalued.(self.selector->isEmpty() implies not self.represents.isMultivalued()) or(not self.selector->isEmpty() implies self.represents.isMultivalued())
@4269#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Lifeline#The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.if (represents->notEmpty()) then(if selector->notEmpty() then represents.isMultivalued() else not represents.isMultivalued())
@4270#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Actor#An actor can only have associations to use cases, components and classes. Furthermore these associations must be binary.self.ownedAttribute->forAll ( a |(a.association->notEmpty()) implies((a.association.memberEnd.size() = 2) and(a.opposite.class.oclIsKindOf(UseCase) or(a.opposite.class.oclIsKindOf(Class) and not a.opposite.class.oclIsKindOf(Behavior))))
@4271#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Actor#An actor must have a name.name->notEmpty()
@4272#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Component#result = let usedInterfaces = UsedInterfaces(self) and  let realizingClassifierUsedInterfaces = UsedInterfaces(self.realizingClassifier) and  let typesOfUsedPorts = self.ownedPort.required in    ((usedInterfaces->union(realizingClassifierUsedInterfaces))->      union(typesOfUsedPorts))->asSet()
@4273#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#Component#result = let implementedInterfaces = self.implementation->collect(impl|impl.contract) and  let realizedInterfaces = RealizedInterfaces(self) and  let realizingClassifierInterfaces = RealizedInterfaces(self.realizingClassifier) and  let typesOfRequiredPorts = self.ownedPort.provided in    (((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->      union(typesOfRequiredPorts))->asSet()
@4274#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#DestroyObjectAction#The input pin has no type.self.target.type->size() = 0
@4275#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#TestIdentityAction#The input pins have no type.self.first.type->size() = 0and self.second.type->size() = 0
@4276#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadSelfAction#The action must be contained in an behavior that has a host classifier.self.context->size() = 1
@4277#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#StructuralFeatureAction#A structural feature has exactly one featuringClassifier.self.structuralFeature.featuringClassifier->size() = 1
@4278#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#AddStructuralFeatureValueAction#Actions adding a value to ordered structural features must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.let insertAtPins : Collection = self.insertAt inif self.structuralFeature.isOrdered = #falsethen insertAtPins->size() = 0else let insertAtPin : InputPin= insertAt->asSequence()->first() ininsertAtPins->size() = 1and insertAtPin.type = UnlimitedNaturaland insertAtPin.multiplicity.is(1,1))endif
@4279#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LinkAction#The association ends of the link end data must all be from the same association and include all and only the association ends of that association.self.endData->collect(end) = self.association()->collect(connection))
@4280#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LinkAction#The input pins of the action are the same as the pins of the link end data and insertion pins.self.input->asSet() =let ledpins : Set = self.endData->collect(value) inif self.oclIsKindOf(LinkEndCreationData)then ledpins->union(self.endData.oclAsType(LinkEndCreationData).insertAt)else ledpins
@4281#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LinkAction#The association operates on LinkAction. It returns the association of the action.result = self.endData->asSequence().first().end.association
@4282#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LinkEndData#The property must be an association end.self.end.association->size() = 1
@4283#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkAction#Exactly one link-end data specification (the 'open' end) must not have an end object input pin.self.endData->select(ed | ed.value->size() = 0)->size() = 1
@4284#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkAction#The type and ordering of the result output pin are same as the type and ordering of the open association end.let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end inself.result.type = openend.typeand self.result.ordering = openend.ordering
@4285#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkAction#The multiplicity of the open association end must be compatible with the multiplicity of the result output pin.let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end inopenend.multiplicity.compatibleWith(self.result.multiplicity)
@4286#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkAction#The open end must be navigable.let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end inopenend.isNavigable()
@4287#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkAction#Visibility of the open end must allow access to the object performing the action.let host : Classifier = self.context inlet openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end inopenend.visibility = #publicor self.endData->exists(oed | not oed.end = openendand (host = oed.end.participantor (openend.visibility = #protectedand host.allSupertypes->includes(oed.end.participant))))
@4288#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#LinkEndCreationData#Link end creation data for ordered association ends must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.let insertAtPins : Collection = self.insertAt inif self.end.ordering = #unorderedthen insertAtPins->size() = 0else let insertAtPin : InputPin = insertAts->asSequence()->first() ininsertAtPins->size() = 1and insertAtPin.type = UnlimitedNaturaland insertAtPin.multiplicity.is(1,1))endif
@4289#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#CreateLinkAction#The association cannot be an abstract classifier.self.association().isAbstract = #false
@4290#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#DurationConstraint#The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0.if (constrainedElement->size() =2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)
@4291#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#DurationObservation#The multiplicity of firstEvent must be 2 if the multiplicity of event is 2. Otherwise the multiplicity of firstEvent is 0.if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)
@4292#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FinalState#A final state cannot have any outgoing transitions.self.outgoing->size() = 0
@4293#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FinalState#A final state cannot have regions.self.region->size() = 0
@4294#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FinalState#A final state cannot reference a submachine.self.submachine->isEmpty()
@4295#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FinalState#A final state has no entry behavior.self.entry->isEmpty()
@4296#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FinalState#A final state has no exit behavior.self.exit->isEmpty()
@4297#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#FinalState#A final state has no state (doActivity) behavior.self.doActivity->isEmpty()
@4298#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#AddVariableValueAction#Actions adding values to ordered variables must have a single input pin for the insertion point with type UnlimtedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.let insertAtPins : Collection = self.insertAt inif self.variable.ordering = #unorderedthen insertAtPins->size() = 0else let insertAtPin : InputPin = insertAt->asSequence()->first() ininsertAtPins->size() = 1and insertAtPin.type = UnlimitedNaturaland insertAtPin.multiplicity.is(1,1))endif
@4299#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#InformationItem#An informationItem has no feature, no generalization, and no associations.self.generalization->isEmpty() and self.feature->isEmpty()
@4300#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReclassifyObjectAction#The input pin has no type.self.argument.type->size() = 0
@4301#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadIsClassifiedObjectAction#The input pin has no type.self.object.type->isEmpty()
@4302#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkObjectEndAction#The property must be an association end.self.end.association.notEmpty()
@4303#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ReadLinkObjectEndQualifierAction#The qualifier attribute must be a qualifier attribute of an association end.self.qualifier.associationEnd->size() = 1
@4304#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#CreateLinkObjectAction#The association must be an association class.self.association().oclIsKindOf(Class)
@4305#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#CreateLinkObjectAction#The type of the result pin must be the same as the association of the action.self.result.type = self.association()
@4306#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#JoinNode#A join node has one outgoing edge.self.outgoing->size() = 1
@4307#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#JoinNode#If a join node has an incoming object flow, it must have an outgoing object flow, otherwise, it must have an outgoing control flow.(self.incoming.select(e | e.isTypeOf(ObjectFlow)->notEmpty() implies  self.outgoing.isTypeOf(ObjectFlow)) and    (self.incoming.select(e | e.isTypeOf(ObjectFlow)->empty() implies      self.outgoing.isTypeOf(ControlFlow))
@4308#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ProtocolTransition#A protocol transition always belongs to a protocol state machine.container.belongsToPSM()
@4309#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#ProtocolTransition#A protocol transition never has associated actions.effect->isEmpty()
@4310#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#AssociationClass#An AssociationClass cannot be defined between itself and something else.self.endType->excludes(self) and self.endType>collect(et|et.allparents()->excludes(self))
@4311#E:/FinalProject Repos/repos\damenac\puzzle\examples\demo-ICSR\puzzle.empirical.hierarchicalDomains\metamodels/UML.ecore#documentation#AssociationClass#The operation allConnections results in the set of all AssociationEnds of the Association.result = memberEnd->union ( self.parents ()->collect (p | p.allConnections () )
@4312#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Element#An element may not directly or indirectly own itself.not self.allOwnedElements()->includes(self)
@4313#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Element#Elements that must be owned must have an owner.self.mustBeOwned() implies owner->notEmpty()
@4314#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@4315#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.true
@4316#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Namespace#All the members of a Namespace are distinguishable within it.membersAreDistinguishable()
@4317#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Namespace#The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. Those semantics are specified by overriding the getNamesOfMember operation. The specification here simply returns a set containing a single name, or the empty set if no name.if member->includes(element) then  Set{}->including(element.name)else  Set{}endif
@4318#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespaces members are distinguishable within it.self.member->forAll( memb | self.member->excluding(memb)->forAll(other | memb.isDistinguishableFrom(other, self)))
@4319#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#NamedElement#If there is no name, or one of the containing namespaces has no name, there is no qualified name.(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty()) implies self.qualifiedName->isEmpty()
@4320#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies self.qualifiedName = self.allNamespaces()->iterate(ns: Namespace; result: String = self.name | ns.name.concat(self.separator()).concat(result))
@4321#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.if self.namespace->isEmpty() then   Sequence{}else  self.namespace.allNamespaces()->prepend(self.namespace)endif
@4322#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType) then  ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else  trueendif
@4323#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.'.'
@4324#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty() then  self.allNamespaces()->iterate(ns: Namespace; result: String = self.name | ns.name.concat(self.separator()).concat(result))else   '' endif
@4325#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@4326#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@4327#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#A classifier may only specialize classifiers of a valid type.self.parents()->forAll(c | self.maySpecializeType(c))
@4328#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@4329#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@4330#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = general
@4331#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@4332#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@4333#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes (n)) then (n.visibility <> #private) else true
@4334#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.result = inhs
@4335#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@4336#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aadl2.ecore#documentation#Prototype#self.constrainingCategory.oclIsUndefined() implies self.constrainingClassifier = self.constrainingCategory
@4339#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#ModelElement#String pack = getPackage();if (eContainer()!=null && (pack ==null || pack.equals("")))pack = ((ModelElement)eContainer()).getQualifiedName();if (pack ==null || pack.equals(""))return getName();return pack+"."+getName();
@4340#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#ModelElement#List<Method> methods = new ArrayList<Method>();for (ModelElement e: getChildren())if (e instanceof Method)methods.add((Method)e);return methods;
@4341#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#ModelElement#List<Field> fields = new ArrayList< Field >();for (ModelElement e: getChildren())if (e instanceof Field)fields.add((Field)e);return fields;
@4342#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#Visitor#visitBefore(type);for(ModelElement e: type.getChildren())e.accept(this);visitAfter(type);
@4343#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#Visitor#visitBefore(field);for(ModelElement e: field.getChildren())e.accept(this);visitAfter(field);
@4344#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#Visitor#visitBefore(method);for(ModelElement e: method.getChildren())e.accept(this);visitAfter(method);
@4345#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/AjModel.ecore#body#Visitor#visitBefore(project);for(ModelElement e: project.getChildren())e.accept(this);visitAfter(project);
@4346#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/architecture.ecore#documentation#IDisplayProvider#Allows access to a {@link Display}.@param id  The {@link HttpSession#getId()}.@return The {@link Display} belonging to the {@link HttpSession} with the given id.
@4347#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/architecture.ecore#documentation#IDisplayProvider#Maps a given {@link Display} to a given {@link HttpSession#getId()}.@param string The {@link HttpSession#getId()}.@param disp The {@link Display}.
@4348#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aspectj.ecore#body#Aspect#org.emftext.language.java.types.TypeReference superClassReference = this.getExtends();if (superClassReference == null) {superClassReference = this.getDefaultExtends();}if (superClassReference == null) {return null;}org.emftext.language.java.types.Type result = superClassReference.getTarget();if (result instanceof org.emftext.language.java.classifiers.Class) {return ( org.emftext.language.java.classifiers.Class) result;}return null;
@4349#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aspectj.ecore#body#AspectJCompilationUnit#if (name == null) {return null;}for( org.emftext.language.java.classifiers.ConcreteClassifier candidate : getClassifiers()) {if(name.equals(candidate.getName())) {return candidate;}}return null;
@4350#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/aspectj.ecore#body#AspectJCompilationUnit#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> defaultImportList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();java.lang.String packageName = getNamespacesAsString();//locally defined in this containerdefaultImportList.addAll(getClassifiers());defaultImportList.addAll(getConcreteClassifierProxies(packageName, "*"));return defaultImportList;
@4351#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#HwPin#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)pinNumber.clone();
@4352#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#HwPin#pinNumber.setRadix(newPinNumber.getRadix());pinNumber.setNoOfDigits(newPinNumber.getNoOfDigits());setPinNumber(newPinNumber.getValue());
@4353#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FormulaExpression#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4354#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FormulaExpression#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4355#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Identifiable#if (wrappedExtensions == null) {wrappedExtensions = new WrappedExtensionsMap();}return wrappedExtensions;
@4356#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EmphasisText#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4357#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EmphasisText#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4358#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FootnoteText#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4359#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FootnoteText#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4360#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IndexEntry#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4361#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IndexEntry#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4362#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForLongName#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4363#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForLongName#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4364#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForParagraph#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4365#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForParagraph#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4366#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForVerbatim#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4367#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForVerbatim#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4368#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForUnitNames#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4369#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForUnitNames#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4370#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForOverviewParagraph#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4371#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MixedContentForOverviewParagraph#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4372#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Tgroup#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)cols.clone();
@4373#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Tgroup#cols.setRadix(newCols.getRadix());cols.setNoOfDigits(newCols.getNoOfDigits());setCols(newCols.getValue());
@4374#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharAbsTol#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getAbs());
@4375#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharAbsTol#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getAbs());
@4376#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharAbsTol#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getAbs());
@4377#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharAbsTol#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getTol());
@4378#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharAbsTol#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getTol());
@4379#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharAbsTol#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getTol());
@4380#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMin());
@4381#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMin());
@4382#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMin());
@4383#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getTyp());
@4384#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getTyp());
@4385#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getTyp());
@4386#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMax());
@4387#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMax());
@4388#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PrmCharMinTypMax#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMax());
@4389#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IntegerContainer#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)value.clone();
@4390#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IntegerContainer#value.setRadix(newValue.getRadix());value.setNoOfDigits(newValue.getNoOfDigits());setValue(newValue.getValue());
@4391#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultidimensionalTime#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)cseCodeFactor.clone();
@4392#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultidimensionalTime#cseCodeFactor.setRadix(newCseCodeFactor.getRadix());cseCodeFactor.setNoOfDigits(newCseCodeFactor.getNoOfDigits());setCseCodeFactor(newCseCodeFactor.getValue());
@4393#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ARObject#Object eContainer = eContainer();if (eContainer != null && expectedContainerClass != null && expectedContainerClass.isAssignableFrom(eContainer.getClass())) {return (T) eContainer;}return null;
@4394#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#return (<%org.artop.aal.common.datatypes.UnlimitedIntegerDatatype%>)mask.clone();
@4395#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#mask.setRadix(newMask.getRadix());mask.setNoOfDigits(newMask.getNoOfDigits());setMask(newMask.getValue());
@4396#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#return (<%org.artop.aal.common.datatypes.UnlimitedIntegerDatatype%>)max.clone();
@4397#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#max.setRadix(newMax.getRadix());max.setNoOfDigits(newMax.getNoOfDigits());setMax(newMax.getValue());
@4398#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#return (<%org.artop.aal.common.datatypes.UnlimitedIntegerDatatype%>)min.clone();
@4399#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#min.setRadix(newMin.getRadix());min.setNoOfDigits(newMin.getNoOfDigits());setMin(newMin.getValue());
@4400#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)offset.clone();
@4401#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#offset.setRadix(newOffset.getRadix());offset.setNoOfDigits(newOffset.getNoOfDigits());setOffset(newOffset.getValue());
@4402#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)period.clone();
@4403#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#period.setRadix(newPeriod.getRadix());period.setNoOfDigits(newPeriod.getNoOfDigits());setPeriod(newPeriod.getValue());
@4404#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#return (<%org.artop.aal.common.datatypes.UnlimitedIntegerDatatype%>)x.clone();
@4405#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataFilter#x.setRadix(newX.getRadix());x.setNoOfDigits(newX.getNoOfDigits());setX(newX.getValue());
@4406#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwBitRepresentation#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)bitPosition.clone();
@4407#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwBitRepresentation#bitPosition.setRadix(newBitPosition.getRadix());bitPosition.setNoOfDigits(newBitPosition.getNoOfDigits());setBitPosition(newBitPosition.getValue());
@4408#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwBitRepresentation#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)numberOfBits.clone();
@4409#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwBitRepresentation#numberOfBits.setRadix(newNumberOfBits.getRadix());numberOfBits.setNoOfDigits(newNumberOfBits.getNoOfDigits());setNumberOfBits(newNumberOfBits.getValue());
@4410#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwTextProps#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)swFillCharacter.clone();
@4411#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwTextProps#swFillCharacter.setRadix(newSwFillCharacter.getRadix());swFillCharacter.setNoOfDigits(newSwFillCharacter.getNoOfDigits());setSwFillCharacter(newSwFillCharacter.getValue());
@4412#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwDataDefPropsContent#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getSwIntendedResolution());
@4413#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwDataDefPropsContent#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getSwIntendedResolution());
@4414#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwDataDefPropsContent#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getSwIntendedResolution());
@4415#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#McDataInstance#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)arraySize.clone();
@4416#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#McDataInstance#arraySize.setRadix(newArraySize.getRadix());arraySize.setNoOfDigits(newArraySize.getNoOfDigits());setArraySize(newArraySize.getValue());
@4417#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ModeDeclaration#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)value.clone();
@4418#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ModeDeclaration#value.setRadix(newValue.getRadix());value.setNoOfDigits(newValue.getNoOfDigits());setValue(newValue.getValue());
@4419#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ModeDeclarationGroup#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)onTransitionValue.clone();
@4420#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ModeDeclarationGroup#onTransitionValue.setRadix(newOnTransitionValue.getRadix());onTransitionValue.setNoOfDigits(newOnTransitionValue.getNoOfDigits());setOnTransitionValue(newOnTransitionValue.getValue());
@4421#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BaseTypeAbsSize#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)baseTypeSize.clone();
@4422#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BaseTypeAbsSize#baseTypeSize.setRadix(newBaseTypeSize.getRadix());baseTypeSize.setNoOfDigits(newBaseTypeSize.getNoOfDigits());setBaseTypeSize(newBaseTypeSize.getValue());
@4423#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BaseTypeDirectDefinition#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)memAlignment.clone();
@4424#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BaseTypeDirectDefinition#memAlignment.setRadix(newMemAlignment.getRadix());memAlignment.setNoOfDigits(newMemAlignment.getNoOfDigits());setMemAlignment(newMemAlignment.getValue());
@4425#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BaseTypeMaxSize#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxBaseTypeSize.clone();
@4426#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BaseTypeMaxSize#maxBaseTypeSize.setRadix(newMaxBaseTypeSize.getRadix());maxBaseTypeSize.setNoOfDigits(newMaxBaseTypeSize.getNoOfDigits());setMaxBaseTypeSize(newMaxBaseTypeSize.getValue());
@4427#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataConstrRule#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)constrLevel.clone();
@4428#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DataConstrRule#constrLevel.setRadix(newConstrLevel.getRadix());constrLevel.setNoOfDigits(newConstrLevel.getNoOfDigits());setConstrLevel(newConstrLevel.getValue());
@4429#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#InternalConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMaxGradient());
@4430#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#InternalConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMaxGradient());
@4431#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#InternalConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMaxGradient());
@4432#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#InternalConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMaxDiff());
@4433#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#InternalConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMaxDiff());
@4434#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#InternalConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMaxDiff());
@4435#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMaxGradient());
@4436#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMaxGradient());
@4437#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMaxGradient());
@4438#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMaxDiff());
@4439#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMaxDiff());
@4440#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysConstrs#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMaxDiff());
@4441#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Implementation#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)vendorId.clone();
@4442#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Implementation#vendorId.setRadix(newVendorId.getRadix());vendorId.setNoOfDigits(newVendorId.getNoOfDigits());setVendorId(newVendorId.getValue());
@4443#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CryptoServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)maximumKeyLength.clone();
@4444#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CryptoServiceNeeds#maximumKeyLength.setRadix(newMaximumKeyLength.getRadix());maximumKeyLength.setNoOfDigits(newMaximumKeyLength.getNoOfDigits());setMaximumKeyLength(newMaximumKeyLength.getValue());
@4445#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)counterDecrementStepSize.clone();
@4446#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#counterDecrementStepSize.setRadix(newCounterDecrementStepSize.getRadix());counterDecrementStepSize.setNoOfDigits(newCounterDecrementStepSize.getNoOfDigits());setCounterDecrementStepSize(newCounterDecrementStepSize.getValue());
@4447#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)counterFailedThreshold.clone();
@4448#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#counterFailedThreshold.setRadix(newCounterFailedThreshold.getRadix());counterFailedThreshold.setNoOfDigits(newCounterFailedThreshold.getNoOfDigits());setCounterFailedThreshold(newCounterFailedThreshold.getValue());
@4449#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)counterIncrementStepSize.clone();
@4450#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#counterIncrementStepSize.setRadix(newCounterIncrementStepSize.getRadix());counterIncrementStepSize.setNoOfDigits(newCounterIncrementStepSize.getNoOfDigits());setCounterIncrementStepSize(newCounterIncrementStepSize.getValue());
@4451#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)counterJumpDownValue.clone();
@4452#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#counterJumpDownValue.setRadix(newCounterJumpDownValue.getRadix());counterJumpDownValue.setNoOfDigits(newCounterJumpDownValue.getNoOfDigits());setCounterJumpDownValue(newCounterJumpDownValue.getValue());
@4453#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)counterJumpUpValue.clone();
@4454#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#counterJumpUpValue.setRadix(newCounterJumpUpValue.getRadix());counterJumpUpValue.setNoOfDigits(newCounterJumpUpValue.getNoOfDigits());setCounterJumpUpValue(newCounterJumpUpValue.getValue());
@4455#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)counterPassedThreshold.clone();
@4456#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagEventDebounceCounterBased#counterPassedThreshold.setRadix(newCounterPassedThreshold.getRadix());counterPassedThreshold.setNoOfDigits(newCounterPassedThreshold.getNoOfDigits());setCounterPassedThreshold(newCounterPassedThreshold.getValue());
@4457#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticCapabilityElement#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)securityAccessLevel.clone();
@4458#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticCapabilityElement#securityAccessLevel.setRadix(newSecurityAccessLevel.getRadix());securityAccessLevel.setNoOfDigits(newSecurityAccessLevel.getNoOfDigits());setSecurityAccessLevel(newSecurityAccessLevel.getValue());
@4459#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticEventNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)dtcNumber.clone();
@4460#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticEventNeeds#dtcNumber.setRadix(newDtcNumber.getRadix());dtcNumber.setNoOfDigits(newDtcNumber.getNoOfDigits());setDtcNumber(newDtcNumber.getValue());
@4461#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticIoControlNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)didNumber.clone();
@4462#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticIoControlNeeds#didNumber.setRadix(newDidNumber.getRadix());didNumber.setNoOfDigits(newDidNumber.getNoOfDigits());setDidNumber(newDidNumber.getValue());
@4463#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticRoutineNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)ridNumber.clone();
@4464#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticRoutineNeeds#ridNumber.setRadix(newRidNumber.getRadix());ridNumber.setNoOfDigits(newRidNumber.getNoOfDigits());setRidNumber(newRidNumber.getValue());
@4465#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticValueNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)dataLength.clone();
@4466#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticValueNeeds#dataLength.setRadix(newDataLength.getRadix());dataLength.setNoOfDigits(newDataLength.getNoOfDigits());setDataLength(newDataLength.getValue());
@4467#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticValueNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)didNumber.clone();
@4468#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DiagnosticValueNeeds#didNumber.setRadix(newDidNumber.getRadix());didNumber.setNoOfDigits(newDidNumber.getNoOfDigits());setDidNumber(newDidNumber.getValue());
@4469#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdControlServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)testId.clone();
@4470#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdControlServiceNeeds#testId.setRadix(newTestId.getRadix());testId.setNoOfDigits(newTestId.getNoOfDigits());setTestId(newTestId.getValue());
@4471#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdInfoServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)dataLength.clone();
@4472#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdInfoServiceNeeds#dataLength.setRadix(newDataLength.getRadix());dataLength.setNoOfDigits(newDataLength.getNoOfDigits());setDataLength(newDataLength.getValue());
@4473#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdInfoServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)infoType.clone();
@4474#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdInfoServiceNeeds#infoType.setRadix(newInfoType.getRadix());infoType.setNoOfDigits(newInfoType.getNoOfDigits());setInfoType(newInfoType.getValue());
@4475#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdMonitorServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)onBoardMonitorId.clone();
@4476#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdMonitorServiceNeeds#onBoardMonitorId.setRadix(newOnBoardMonitorId.getRadix());onBoardMonitorId.setNoOfDigits(newOnBoardMonitorId.getNoOfDigits());setOnBoardMonitorId(newOnBoardMonitorId.getValue());
@4477#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdMonitorServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)testId.clone();
@4478#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdMonitorServiceNeeds#testId.setRadix(newTestId.getRadix());testId.setNoOfDigits(newTestId.getNoOfDigits());setTestId(newTestId.getValue());
@4479#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdMonitorServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)unitAndScalingId.clone();
@4480#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdMonitorServiceNeeds#unitAndScalingId.setRadix(newUnitAndScalingId.getRadix());unitAndScalingId.setNoOfDigits(newUnitAndScalingId.getNoOfDigits());setUnitAndScalingId(newUnitAndScalingId.getValue());
@4481#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdPidServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)dataLength.clone();
@4482#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdPidServiceNeeds#dataLength.setRadix(newDataLength.getRadix());dataLength.setNoOfDigits(newDataLength.getNoOfDigits());setDataLength(newDataLength.getValue());
@4483#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdPidServiceNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)parameterId.clone();
@4484#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ObdPidServiceNeeds#parameterId.setRadix(newParameterId.getRadix());parameterId.setNoOfDigits(newParameterId.getNoOfDigits());setParameterId(newParameterId.getValue());
@4485#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SupervisedEntityNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)toleratedFailedCycles.clone();
@4486#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SupervisedEntityNeeds#toleratedFailedCycles.setRadix(newToleratedFailedCycles.getRadix());toleratedFailedCycles.setNoOfDigits(newToleratedFailedCycles.getNoOfDigits());setToleratedFailedCycles(newToleratedFailedCycles.getValue());
@4487#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NvBlockNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nDataSets.clone();
@4488#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NvBlockNeeds#nDataSets.setRadix(newNDataSets.getRadix());nDataSets.setNoOfDigits(newNDataSets.getNoOfDigits());setNDataSets(newNDataSets.getValue());
@4489#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NvBlockNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nRomBlocks.clone();
@4490#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NvBlockNeeds#nRomBlocks.setRadix(newNRomBlocks.getRadix());nRomBlocks.setNoOfDigits(newNRomBlocks.getNoOfDigits());setNRomBlocks(newNRomBlocks.getValue());
@4491#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NvBlockNeeds#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)writingFrequency.clone();
@4492#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NvBlockNeeds#writingFrequency.setRadix(newWritingFrequency.getRadix());writingFrequency.setNoOfDigits(newWritingFrequency.getNoOfDigits());setWritingFrequency(newWritingFrequency.getValue());
@4493#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MemorySection#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)size.clone();
@4494#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MemorySection#size.setRadix(newSize.getRadix());size.setNoOfDigits(newSize.getNoOfDigits());setSize(newSize.getValue());
@4495#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredStackUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)averageMemoryConsumption.clone();
@4496#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredStackUsage#averageMemoryConsumption.setRadix(newAverageMemoryConsumption.getRadix());averageMemoryConsumption.setNoOfDigits(newAverageMemoryConsumption.getNoOfDigits());setAverageMemoryConsumption(newAverageMemoryConsumption.getValue());
@4497#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredStackUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)maximumMemoryConsumption.clone();
@4498#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredStackUsage#maximumMemoryConsumption.setRadix(newMaximumMemoryConsumption.getRadix());maximumMemoryConsumption.setNoOfDigits(newMaximumMemoryConsumption.getNoOfDigits());setMaximumMemoryConsumption(newMaximumMemoryConsumption.getValue());
@4499#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredStackUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)minimumMemoryConsumption.clone();
@4500#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredStackUsage#minimumMemoryConsumption.setRadix(newMinimumMemoryConsumption.getRadix());minimumMemoryConsumption.setNoOfDigits(newMinimumMemoryConsumption.getNoOfDigits());setMinimumMemoryConsumption(newMinimumMemoryConsumption.getValue());
@4501#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RoughEstimateStackUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)memoryConsumption.clone();
@4502#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RoughEstimateStackUsage#memoryConsumption.setRadix(newMemoryConsumption.getRadix());memoryConsumption.setNoOfDigits(newMemoryConsumption.getNoOfDigits());setMemoryConsumption(newMemoryConsumption.getValue());
@4503#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#WorstCaseStackUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)memoryConsumption.clone();
@4504#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#WorstCaseStackUsage#memoryConsumption.setRadix(newMemoryConsumption.getRadix());memoryConsumption.setNoOfDigits(newMemoryConsumption.getNoOfDigits());setMemoryConsumption(newMemoryConsumption.getValue());
@4505#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredHeapUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)averageMemoryConsumption.clone();
@4506#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredHeapUsage#averageMemoryConsumption.setRadix(newAverageMemoryConsumption.getRadix());averageMemoryConsumption.setNoOfDigits(newAverageMemoryConsumption.getNoOfDigits());setAverageMemoryConsumption(newAverageMemoryConsumption.getValue());
@4507#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredHeapUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)maximumMemoryConsumption.clone();
@4508#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredHeapUsage#maximumMemoryConsumption.setRadix(newMaximumMemoryConsumption.getRadix());maximumMemoryConsumption.setNoOfDigits(newMaximumMemoryConsumption.getNoOfDigits());setMaximumMemoryConsumption(newMaximumMemoryConsumption.getValue());
@4509#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredHeapUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)minimumMemoryConsumption.clone();
@4510#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MeasuredHeapUsage#minimumMemoryConsumption.setRadix(newMinimumMemoryConsumption.getRadix());minimumMemoryConsumption.setNoOfDigits(newMinimumMemoryConsumption.getNoOfDigits());setMinimumMemoryConsumption(newMinimumMemoryConsumption.getValue());
@4511#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RoughEstimateHeapUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)memoryConsumption.clone();
@4512#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RoughEstimateHeapUsage#memoryConsumption.setRadix(newMemoryConsumption.getRadix());memoryConsumption.setNoOfDigits(newMemoryConsumption.getNoOfDigits());setMemoryConsumption(newMemoryConsumption.getValue());
@4513#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#WorstCaseHeapUsage#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)memoryConsumption.clone();
@4514#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#WorstCaseHeapUsage#memoryConsumption.setRadix(newMemoryConsumption.getRadix());memoryConsumption.setNoOfDigits(newMemoryConsumption.getNoOfDigits());setMemoryConsumption(newMemoryConsumption.getValue());
@4515#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BurstPatternEventTriggering#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)minNumberOfOccurrences.clone();
@4516#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BurstPatternEventTriggering#minNumberOfOccurrences.setRadix(newMinNumberOfOccurrences.getRadix());minNumberOfOccurrences.setNoOfDigits(newMinNumberOfOccurrences.getNoOfDigits());setMinNumberOfOccurrences(newMinNumberOfOccurrences.getValue());
@4517#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BurstPatternEventTriggering#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)maxNumberOfOccurrences.clone();
@4518#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BurstPatternEventTriggering#maxNumberOfOccurrences.setRadix(newMaxNumberOfOccurrences.getRadix());maxNumberOfOccurrences.setNoOfDigits(newMaxNumberOfOccurrences.getNoOfDigits());setMaxNumberOfOccurrences(newMaxNumberOfOccurrences.getValue());
@4519#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TDEventCycleStart#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)cycleRepetition.clone();
@4520#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TDEventCycleStart#cycleRepetition.setRadix(newCycleRepetition.getRadix());cycleRepetition.setNoOfDigits(newCycleRepetition.getNoOfDigits());setCycleRepetition(newCycleRepetition.getValue());
@4521#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)counterOffset.clone();
@4522#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#counterOffset.setRadix(newCounterOffset.getRadix());counterOffset.setNoOfDigits(newCounterOffset.getNoOfDigits());setCounterOffset(newCounterOffset.getValue());
@4523#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)crcOffset.clone();
@4524#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#crcOffset.setRadix(newCrcOffset.getRadix());crcOffset.setNoOfDigits(newCrcOffset.getNoOfDigits());setCrcOffset(newCrcOffset.getValue());
@4525#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)dataIdMode.clone();
@4526#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#dataIdMode.setRadix(newDataIdMode.getRadix());dataIdMode.setNoOfDigits(newDataIdMode.getNoOfDigits());setDataIdMode(newDataIdMode.getValue());
@4527#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)dataLength.clone();
@4528#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#dataLength.setRadix(newDataLength.getRadix());dataLength.setNoOfDigits(newDataLength.getNoOfDigits());setDataLength(newDataLength.getValue());
@4529#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)maxDeltaCounterInit.clone();
@4530#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndDescription#maxDeltaCounterInit.setRadix(newMaxDeltaCounterInit.getRadix());maxDeltaCounterInit.setNoOfDigits(newMaxDeltaCounterInit.getNoOfDigits());setMaxDeltaCounterInit(newMaxDeltaCounterInit.getValue());
@4531#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwRecordLayoutGroup#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)swRecordLayoutGroupStep.clone();
@4532#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwRecordLayoutGroup#swRecordLayoutGroupStep.setRadix(newSwRecordLayoutGroupStep.getRadix());swRecordLayoutGroupStep.setNoOfDigits(newSwRecordLayoutGroupStep.getNoOfDigits());setSwRecordLayoutGroupStep(newSwRecordLayoutGroupStep.getValue());
@4533#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwRecordLayoutV#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)swRecordLayoutVFixValue.clone();
@4534#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SwRecordLayoutV#swRecordLayoutVFixValue.setRadix(newSwRecordLayoutVFixValue.getRadix());swRecordLayoutVFixValue.setNoOfDigits(newSwRecordLayoutVFixValue.getNoOfDigits());setSwRecordLayoutVFixValue(newSwRecordLayoutVFixValue.getValue());
@4535#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getLengthExp());
@4536#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getLengthExp());
@4537#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getLengthExp());
@4538#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMassExp());
@4539#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMassExp());
@4540#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMassExp());
@4541#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getTimeExp());
@4542#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getTimeExp());
@4543#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getTimeExp());
@4544#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getCurrentExp());
@4545#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getCurrentExp());
@4546#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getCurrentExp());
@4547#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getTemperatureExp());
@4548#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getTemperatureExp());
@4549#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getTemperatureExp());
@4550#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getMolarAmountExp());
@4551#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getMolarAmountExp());
@4552#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getMolarAmountExp());
@4553#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getLuminousIntensityExp());
@4554#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getLuminousIntensityExp());
@4555#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PhysicalDimension#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getLuminousIntensityExp());
@4556#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CompuConstNumericContent#return org.eclipse.sphinx.platform.util.RadixConverter.parseFloat(getV());
@4557#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CompuConstNumericContent#return org.eclipse.sphinx.platform.util.RadixConverter.parseInt(getV());
@4558#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CompuConstNumericContent#return org.eclipse.sphinx.platform.util.RadixConverter.getRadix(getV());
@4559#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CompuScale#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)mask.clone();
@4560#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CompuScale#mask.setRadix(newMask.getRadix());mask.setNoOfDigits(newMask.getNoOfDigits());setMask(newMask.getValue());
@4561#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ModeSwitchSenderComSpec#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)queueLength.clone();
@4562#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ModeSwitchSenderComSpec#queueLength.setRadix(newQueueLength.getRadix());queueLength.setNoOfDigits(newQueueLength.getNoOfDigits());setQueueLength(newQueueLength.getValue());
@4563#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ServerComSpec#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)queueLength.clone();
@4564#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ServerComSpec#queueLength.setRadix(newQueueLength.getRadix());queueLength.setNoOfDigits(newQueueLength.getNoOfDigits());setQueueLength(newQueueLength.getValue());
@4565#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#QueuedReceiverComSpec#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)queueLength.clone();
@4566#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#QueuedReceiverComSpec#queueLength.setRadix(newQueueLength.getRadix());queueLength.setNoOfDigits(newQueueLength.getNoOfDigits());setQueueLength(newQueueLength.getValue());
@4567#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PerInstanceMemorySize#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)alignment.clone();
@4568#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PerInstanceMemorySize#alignment.setRadix(newAlignment.getRadix());alignment.setNoOfDigits(newAlignment.getNoOfDigits());setAlignment(newAlignment.getValue());
@4569#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ApplicationError#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)errorCode.clone();
@4570#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ApplicationError#errorCode.setRadix(newErrorCode.getRadix());errorCode.setNoOfDigits(newErrorCode.getNoOfDigits());setErrorCode(newErrorCode.getValue());
@4571#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#documentation#NvDataInterface#inv: dataElement->size() + self.modeGroup->size() >0-- id: ARSema0001-- severity: uncritical-- description: A SenderReceiverInterface must contain at least one data element or mode group
@4572#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#documentation#InvalidationPolicy#inv: dataElement->size() + self.modeGroup->size() >0-- id: ARSema0001-- severity: uncritical-- description: A SenderReceiverInterface must contain at least one data element or mode group
@4573#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#documentation#ModeSwitchInterface#inv: dataElement->size() + self.modeGroup->size() >0-- id: ARSema0001-- severity: uncritical-- description: A SenderReceiverInterface must contain at least one data element or mode group
@4574#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#documentation#SenderReceiverInterface#inv: dataElement->size() + self.modeGroup->size() >0-- id: ARSema0001-- severity: uncritical-- description: A SenderReceiverInterface must contain at least one data element or mode group
@4575#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucIndexableValue#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)index.clone();
@4576#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucIndexableValue#index.setRadix(newIndex.getRadix());index.setNoOfDigits(newIndex.getNoOfDigits());setIndex(newIndex.getValue());
@4577#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucQueryExpression#return <%org.eclipse.sphinx.emf.util.EObjectUtil%>.getMixedText(getMixed());
@4578#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucQueryExpression#<%org.eclipse.sphinx.emf.util.EObjectUtil%>.setMixedText(getMixed(), text);
@4579#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucAbstractStringParamDefContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)maxLength.clone();
@4580#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucAbstractStringParamDefContent#maxLength.setRadix(newMaxLength.getRadix());maxLength.setNoOfDigits(newMaxLength.getNoOfDigits());setMaxLength(newMaxLength.getValue());
@4581#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucAbstractStringParamDefContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)minLength.clone();
@4582#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcucAbstractStringParamDefContent#minLength.setRadix(newMinLength.getRadix());minLength.setNoOfDigits(newMinLength.getNoOfDigits());setMinLength(newMinLength.getValue());
@4583#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModeSenderPolicy#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)queueLength.clone();
@4584#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModeSenderPolicy#queueLength.setRadix(newQueueLength.getRadix());queueLength.setNoOfDigits(newQueueLength.getNoOfDigits());setQueueLength(newQueueLength.getValue());
@4585#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModuleDescription#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)moduleId.clone();
@4586#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModuleDescription#moduleId.setRadix(newModuleId.getRadix());moduleId.setNoOfDigits(newModuleId.getNoOfDigits());setModuleId(newModuleId.getValue());
@4587#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModuleDependency#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)targetModuleId.clone();
@4588#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModuleDependency#targetModuleId.setRadix(newTargetModuleId.getRadix());targetModuleId.setNoOfDigits(newTargetModuleId.getNoOfDigits());setTargetModuleId(newTargetModuleId.getValue());
@4589#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModuleEntry#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)serviceId.clone();
@4590#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#BswModuleEntry#serviceId.setRadix(newServiceId.getRadix());serviceId.setNoOfDigits(newServiceId.getNoOfDigits());setServiceId(newServiceId.getValue());
@4591#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#System#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncVectorLength.clone();
@4592#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#System#pncVectorLength.setRadix(newPncVectorLength.getRadix());pncVectorLength.setNoOfDigits(newPncVectorLength.getNoOfDigits());setPncVectorLength(newPncVectorLength.getValue());
@4593#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#System#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncVectorOffset.clone();
@4594#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#System#pncVectorOffset.setRadix(newPncVectorOffset.getRadix());pncVectorOffset.setNoOfDigits(newPncVectorOffset.getNoOfDigits());setPncVectorOffset(newPncVectorOffset.getValue());
@4595#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanFrameTriggering#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)identifier.clone();
@4596#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanFrameTriggering#identifier.setRadix(newIdentifier.getRadix());identifier.setNoOfDigits(newIdentifier.getNoOfDigits());setIdentifier(newIdentifier.getValue());
@4597#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RxIdentifierRange#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)lowerCanId.clone();
@4598#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RxIdentifierRange#lowerCanId.setRadix(newLowerCanId.getRadix());lowerCanId.setNoOfDigits(newLowerCanId.getNoOfDigits());setLowerCanId(newLowerCanId.getValue());
@4599#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RxIdentifierRange#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)upperCanId.clone();
@4600#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RxIdentifierRange#upperCanId.setRadix(newUpperCanId.getRadix());upperCanId.setNoOfDigits(newUpperCanId.getNoOfDigits());setUpperCanId(newUpperCanId.getValue());
@4601#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncWakeupCanId.clone();
@4602#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#pncWakeupCanId.setRadix(newPncWakeupCanId.getRadix());pncWakeupCanId.setNoOfDigits(newPncWakeupCanId.getNoOfDigits());setPncWakeupCanId(newPncWakeupCanId.getValue());
@4603#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncWakeupCanIdMask.clone();
@4604#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#pncWakeupCanIdMask.setRadix(newPncWakeupCanIdMask.getRadix());pncWakeupCanIdMask.setNoOfDigits(newPncWakeupCanIdMask.getNoOfDigits());setPncWakeupCanIdMask(newPncWakeupCanIdMask.getValue());
@4605#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncWakeupDataMask.clone();
@4606#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#pncWakeupDataMask.setRadix(newPncWakeupDataMask.getRadix());pncWakeupDataMask.setNoOfDigits(newPncWakeupDataMask.getNoOfDigits());setPncWakeupDataMask(newPncWakeupDataMask.getValue());
@4607#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncWakeupDlc.clone();
@4608#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanCommunicationConnector#pncWakeupDlc.setRadix(newPncWakeupDlc.getRadix());pncWakeupDlc.setNoOfDigits(newPncWakeupDlc.getNoOfDigits());setPncWakeupDlc(newPncWakeupDlc.getValue());
@4609#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)syncJumpWidth.clone();
@4610#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfiguration#syncJumpWidth.setRadix(newSyncJumpWidth.getRadix());syncJumpWidth.setNoOfDigits(newSyncJumpWidth.getNoOfDigits());setSyncJumpWidth(newSyncJumpWidth.getValue());
@4611#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)timeSeg1.clone();
@4612#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfiguration#timeSeg1.setRadix(newTimeSeg1.getRadix());timeSeg1.setNoOfDigits(newTimeSeg1.getNoOfDigits());setTimeSeg1(newTimeSeg1.getValue());
@4613#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)timeSeg2.clone();
@4614#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfiguration#timeSeg2.setRadix(newTimeSeg2.getRadix());timeSeg2.setNoOfDigits(newTimeSeg2.getNoOfDigits());setTimeSeg2(newTimeSeg2.getValue());
@4615#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfigurationRequirements#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxNumberOfTimeQuantaPerBit.clone();
@4616#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfigurationRequirements#maxNumberOfTimeQuantaPerBit.setRadix(newMaxNumberOfTimeQuantaPerBit.getRadix());maxNumberOfTimeQuantaPerBit.setNoOfDigits(newMaxNumberOfTimeQuantaPerBit.getNoOfDigits());setMaxNumberOfTimeQuantaPerBit(newMaxNumberOfTimeQuantaPerBit.getValue());
@4617#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfigurationRequirements#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)minNumberOfTimeQuantaPerBit.clone();
@4618#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanControllerConfigurationRequirements#minNumberOfTimeQuantaPerBit.setRadix(newMinNumberOfTimeQuantaPerBit.getRadix());minNumberOfTimeQuantaPerBit.setNoOfDigits(newMinNumberOfTimeQuantaPerBit.getNoOfDigits());setMinNumberOfTimeQuantaPerBit(newMinNumberOfTimeQuantaPerBit.getValue());
@4619#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)basicCycleLength.clone();
@4620#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanClusterContent#basicCycleLength.setRadix(newBasicCycleLength.getRadix());basicCycleLength.setNoOfDigits(newBasicCycleLength.getNoOfDigits());setBasicCycleLength(newBasicCycleLength.getValue());
@4621#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)applWatchdogLimit.clone();
@4622#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#applWatchdogLimit.setRadix(newApplWatchdogLimit.getRadix());applWatchdogLimit.setNoOfDigits(newApplWatchdogLimit.getNoOfDigits());setApplWatchdogLimit(newApplWatchdogLimit.getValue());
@4623#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)expectedTxTrigger.clone();
@4624#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#expectedTxTrigger.setRadix(newExpectedTxTrigger.getRadix());expectedTxTrigger.setNoOfDigits(newExpectedTxTrigger.getNoOfDigits());setExpectedTxTrigger(newExpectedTxTrigger.getValue());
@4625#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)initialRefOffset.clone();
@4626#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#initialRefOffset.setRadix(newInitialRefOffset.getRadix());initialRefOffset.setNoOfDigits(newInitialRefOffset.getNoOfDigits());setInitialRefOffset(newInitialRefOffset.getValue());
@4627#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)timeMasterPriority.clone();
@4628#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#timeMasterPriority.setRadix(newTimeMasterPriority.getRadix());timeMasterPriority.setNoOfDigits(newTimeMasterPriority.getNoOfDigits());setTimeMasterPriority(newTimeMasterPriority.getValue());
@4629#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)timeTriggeredCanLevel.clone();
@4630#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#timeTriggeredCanLevel.setRadix(newTimeTriggeredCanLevel.getRadix());timeTriggeredCanLevel.setNoOfDigits(newTimeTriggeredCanLevel.getNoOfDigits());setTimeTriggeredCanLevel(newTimeTriggeredCanLevel.getValue());
@4631#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)txEnableWindowLength.clone();
@4632#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanCommunicationControllerContent#txEnableWindowLength.setRadix(newTxEnableWindowLength.getRadix());txEnableWindowLength.setNoOfDigits(newTxEnableWindowLength.getNoOfDigits());setTxEnableWindowLength(newTxEnableWindowLength.getValue());
@4633#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanAbsolutelyScheduledTiming#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)timeMark.clone();
@4634#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TtcanAbsolutelyScheduledTiming#timeMark.setRadix(newTimeMark.getRadix());timeMark.setNoOfDigits(newTimeMark.getNoOfDigits());setTimeMark(newTimeMark.getValue());
@4635#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LogicAddress#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)address.clone();
@4636#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LogicAddress#address.setRadix(newAddress.getRadix());address.setNoOfDigits(newAddress.getNoOfDigits());setAddress(newAddress.getValue());
@4637#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SocketAddress#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)portAddress.clone();
@4638#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SocketAddress#portAddress.setRadix(newPortAddress.getRadix());portAddress.setNoOfDigits(newPortAddress.getNoOfDigits());setPortAddress(newPortAddress.getValue());
@4639#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SocketConnectionIpduIdentifier#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)headerId.clone();
@4640#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SocketConnectionIpduIdentifier#headerId.setRadix(newHeaderId.getRadix());headerId.setNoOfDigits(newHeaderId.getNoOfDigits());setHeaderId(newHeaderId.getValue());
@4641#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EthernetCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maximumReceiveBufferLength.clone();
@4642#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EthernetCommunicationControllerContent#maximumReceiveBufferLength.setRadix(newMaximumReceiveBufferLength.getRadix());maximumReceiveBufferLength.setNoOfDigits(newMaximumReceiveBufferLength.getNoOfDigits());setMaximumReceiveBufferLength(newMaximumReceiveBufferLength.getValue());
@4643#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EthernetCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maximumTransmitBufferLength.clone();
@4644#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EthernetCommunicationControllerContent#maximumTransmitBufferLength.setRadix(newMaximumTransmitBufferLength.getRadix());maximumTransmitBufferLength.setNoOfDigits(newMaximumTransmitBufferLength.getNoOfDigits());setMaximumTransmitBufferLength(newMaximumTransmitBufferLength.getValue());
@4645#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayAbsolutelyScheduledTiming#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)slotID.clone();
@4646#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayAbsolutelyScheduledTiming#slotID.setRadix(newSlotID.getRadix());slotID.setNoOfDigits(newSlotID.getNoOfDigits());setSlotID(newSlotID.getValue());
@4647#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFrameTriggering#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)messageId.clone();
@4648#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFrameTriggering#messageId.setRadix(newMessageId.getRadix());messageId.setNoOfDigits(newMessageId.getNoOfDigits());setMessageId(newMessageId.getValue());
@4649#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)actionPointOffset.clone();
@4650#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#actionPointOffset.setRadix(newActionPointOffset.getRadix());actionPointOffset.setNoOfDigits(newActionPointOffset.getNoOfDigits());setActionPointOffset(newActionPointOffset.getValue());
@4651#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)casRxLowMax.clone();
@4652#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#casRxLowMax.setRadix(newCasRxLowMax.getRadix());casRxLowMax.setNoOfDigits(newCasRxLowMax.getNoOfDigits());setCasRxLowMax(newCasRxLowMax.getValue());
@4653#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)coldStartAttempts.clone();
@4654#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#coldStartAttempts.setRadix(newColdStartAttempts.getRadix());coldStartAttempts.setNoOfDigits(newColdStartAttempts.getNoOfDigits());setColdStartAttempts(newColdStartAttempts.getValue());
@4655#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)cycleCountMax.clone();
@4656#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#cycleCountMax.setRadix(newCycleCountMax.getRadix());cycleCountMax.setNoOfDigits(newCycleCountMax.getNoOfDigits());setCycleCountMax(newCycleCountMax.getValue());
@4657#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)dynamicSlotIdlePhase.clone();
@4658#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#dynamicSlotIdlePhase.setRadix(newDynamicSlotIdlePhase.getRadix());dynamicSlotIdlePhase.setNoOfDigits(newDynamicSlotIdlePhase.getNoOfDigits());setDynamicSlotIdlePhase(newDynamicSlotIdlePhase.getValue());
@4659#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)ignoreAfterTx.clone();
@4660#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#ignoreAfterTx.setRadix(newIgnoreAfterTx.getRadix());ignoreAfterTx.setNoOfDigits(newIgnoreAfterTx.getNoOfDigits());setIgnoreAfterTx(newIgnoreAfterTx.getValue());
@4661#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)listenNoise.clone();
@4662#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#listenNoise.setRadix(newListenNoise.getRadix());listenNoise.setNoOfDigits(newListenNoise.getNoOfDigits());setListenNoise(newListenNoise.getValue());
@4663#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)macroPerCycle.clone();
@4664#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#macroPerCycle.setRadix(newMacroPerCycle.getRadix());macroPerCycle.setNoOfDigits(newMacroPerCycle.getNoOfDigits());setMacroPerCycle(newMacroPerCycle.getValue());
@4665#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxWithoutClockCorrectionFatal.clone();
@4666#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#maxWithoutClockCorrectionFatal.setRadix(newMaxWithoutClockCorrectionFatal.getRadix());maxWithoutClockCorrectionFatal.setNoOfDigits(newMaxWithoutClockCorrectionFatal.getNoOfDigits());setMaxWithoutClockCorrectionFatal(newMaxWithoutClockCorrectionFatal.getValue());
@4667#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxWithoutClockCorrectionPassive.clone();
@4668#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#maxWithoutClockCorrectionPassive.setRadix(newMaxWithoutClockCorrectionPassive.getRadix());maxWithoutClockCorrectionPassive.setNoOfDigits(newMaxWithoutClockCorrectionPassive.getNoOfDigits());setMaxWithoutClockCorrectionPassive(newMaxWithoutClockCorrectionPassive.getValue());
@4669#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)minislotActionPointOffset.clone();
@4670#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#minislotActionPointOffset.setRadix(newMinislotActionPointOffset.getRadix());minislotActionPointOffset.setNoOfDigits(newMinislotActionPointOffset.getNoOfDigits());setMinislotActionPointOffset(newMinislotActionPointOffset.getValue());
@4671#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)minislotDuration.clone();
@4672#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#minislotDuration.setRadix(newMinislotDuration.getRadix());minislotDuration.setNoOfDigits(newMinislotDuration.getNoOfDigits());setMinislotDuration(newMinislotDuration.getValue());
@4673#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)networkIdleTime.clone();
@4674#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#networkIdleTime.setRadix(newNetworkIdleTime.getRadix());networkIdleTime.setNoOfDigits(newNetworkIdleTime.getNoOfDigits());setNetworkIdleTime(newNetworkIdleTime.getValue());
@4675#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)networkManagementVectorLength.clone();
@4676#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#networkManagementVectorLength.setRadix(newNetworkManagementVectorLength.getRadix());networkManagementVectorLength.setNoOfDigits(newNetworkManagementVectorLength.getNoOfDigits());setNetworkManagementVectorLength(newNetworkManagementVectorLength.getValue());
@4677#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)numberOfMinislots.clone();
@4678#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#numberOfMinislots.setRadix(newNumberOfMinislots.getRadix());numberOfMinislots.setNoOfDigits(newNumberOfMinislots.getNoOfDigits());setNumberOfMinislots(newNumberOfMinislots.getValue());
@4679#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)numberOfStaticSlots.clone();
@4680#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#numberOfStaticSlots.setRadix(newNumberOfStaticSlots.getRadix());numberOfStaticSlots.setNoOfDigits(newNumberOfStaticSlots.getNoOfDigits());setNumberOfStaticSlots(newNumberOfStaticSlots.getValue());
@4681#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)offsetCorrectionStart.clone();
@4682#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#offsetCorrectionStart.setRadix(newOffsetCorrectionStart.getRadix());offsetCorrectionStart.setNoOfDigits(newOffsetCorrectionStart.getNoOfDigits());setOffsetCorrectionStart(newOffsetCorrectionStart.getValue());
@4683#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)payloadLengthStatic.clone();
@4684#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#payloadLengthStatic.setRadix(newPayloadLengthStatic.getRadix());payloadLengthStatic.setNoOfDigits(newPayloadLengthStatic.getNoOfDigits());setPayloadLengthStatic(newPayloadLengthStatic.getValue());
@4685#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)safetyMargin.clone();
@4686#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#safetyMargin.setRadix(newSafetyMargin.getRadix());safetyMargin.setNoOfDigits(newSafetyMargin.getNoOfDigits());setSafetyMargin(newSafetyMargin.getValue());
@4687#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)staticSlotDuration.clone();
@4688#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#staticSlotDuration.setRadix(newStaticSlotDuration.getRadix());staticSlotDuration.setNoOfDigits(newStaticSlotDuration.getNoOfDigits());setStaticSlotDuration(newStaticSlotDuration.getValue());
@4689#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)symbolWindow.clone();
@4690#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#symbolWindow.setRadix(newSymbolWindow.getRadix());symbolWindow.setNoOfDigits(newSymbolWindow.getNoOfDigits());setSymbolWindow(newSymbolWindow.getValue());
@4691#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)symbolWindowActionPointOffset.clone();
@4692#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#symbolWindowActionPointOffset.setRadix(newSymbolWindowActionPointOffset.getRadix());symbolWindowActionPointOffset.setNoOfDigits(newSymbolWindowActionPointOffset.getNoOfDigits());setSymbolWindowActionPointOffset(newSymbolWindowActionPointOffset.getValue());
@4693#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)syncFrameIdCountMax.clone();
@4694#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#syncFrameIdCountMax.setRadix(newSyncFrameIdCountMax.getRadix());syncFrameIdCountMax.setNoOfDigits(newSyncFrameIdCountMax.getNoOfDigits());setSyncFrameIdCountMax(newSyncFrameIdCountMax.getValue());
@4695#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)transmissionStartSequenceDuration.clone();
@4696#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#transmissionStartSequenceDuration.setRadix(newTransmissionStartSequenceDuration.getRadix());transmissionStartSequenceDuration.setNoOfDigits(newTransmissionStartSequenceDuration.getNoOfDigits());setTransmissionStartSequenceDuration(newTransmissionStartSequenceDuration.getValue());
@4697#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)wakeupRxIdle.clone();
@4698#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#wakeupRxIdle.setRadix(newWakeupRxIdle.getRadix());wakeupRxIdle.setNoOfDigits(newWakeupRxIdle.getNoOfDigits());setWakeupRxIdle(newWakeupRxIdle.getValue());
@4699#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)wakeupRxLow.clone();
@4700#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#wakeupRxLow.setRadix(newWakeupRxLow.getRadix());wakeupRxLow.setNoOfDigits(newWakeupRxLow.getNoOfDigits());setWakeupRxLow(newWakeupRxLow.getValue());
@4701#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)wakeupRxWindow.clone();
@4702#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#wakeupRxWindow.setRadix(newWakeupRxWindow.getRadix());wakeupRxWindow.setNoOfDigits(newWakeupRxWindow.getNoOfDigits());setWakeupRxWindow(newWakeupRxWindow.getValue());
@4703#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)wakeupTxActive.clone();
@4704#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#wakeupTxActive.setRadix(newWakeupTxActive.getRadix());wakeupTxActive.setNoOfDigits(newWakeupTxActive.getNoOfDigits());setWakeupTxActive(newWakeupTxActive.getValue());
@4705#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)wakeupTxIdle.clone();
@4706#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayClusterContent#wakeupTxIdle.setRadix(newWakeupTxIdle.getRadix());wakeupTxIdle.setNoOfDigits(newWakeupTxIdle.getNoOfDigits());setWakeupTxIdle(newWakeupTxIdle.getValue());
@4707#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)acceptedStartupRange.clone();
@4708#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#acceptedStartupRange.setRadix(newAcceptedStartupRange.getRadix());acceptedStartupRange.setNoOfDigits(newAcceptedStartupRange.getNoOfDigits());setAcceptedStartupRange(newAcceptedStartupRange.getValue());
@4709#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)allowPassiveToActive.clone();
@4710#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#allowPassiveToActive.setRadix(newAllowPassiveToActive.getRadix());allowPassiveToActive.setNoOfDigits(newAllowPassiveToActive.getNoOfDigits());setAllowPassiveToActive(newAllowPassiveToActive.getValue());
@4711#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)clusterDriftDamping.clone();
@4712#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#clusterDriftDamping.setRadix(newClusterDriftDamping.getRadix());clusterDriftDamping.setNoOfDigits(newClusterDriftDamping.getNoOfDigits());setClusterDriftDamping(newClusterDriftDamping.getValue());
@4713#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)decodingCorrection.clone();
@4714#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#decodingCorrection.setRadix(newDecodingCorrection.getRadix());decodingCorrection.setNoOfDigits(newDecodingCorrection.getNoOfDigits());setDecodingCorrection(newDecodingCorrection.getValue());
@4715#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)delayCompensationA.clone();
@4716#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#delayCompensationA.setRadix(newDelayCompensationA.getRadix());delayCompensationA.setNoOfDigits(newDelayCompensationA.getNoOfDigits());setDelayCompensationA(newDelayCompensationA.getValue());
@4717#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)delayCompensationB.clone();
@4718#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#delayCompensationB.setRadix(newDelayCompensationB.getRadix());delayCompensationB.setNoOfDigits(newDelayCompensationB.getNoOfDigits());setDelayCompensationB(newDelayCompensationB.getValue());
@4719#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)externOffsetCorrection.clone();
@4720#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#externOffsetCorrection.setRadix(newExternOffsetCorrection.getRadix());externOffsetCorrection.setNoOfDigits(newExternOffsetCorrection.getNoOfDigits());setExternOffsetCorrection(newExternOffsetCorrection.getValue());
@4721#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)externRateCorrection.clone();
@4722#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#externRateCorrection.setRadix(newExternRateCorrection.getRadix());externRateCorrection.setNoOfDigits(newExternRateCorrection.getNoOfDigits());setExternRateCorrection(newExternRateCorrection.getValue());
@4723#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)keySlotID.clone();
@4724#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#keySlotID.setRadix(newKeySlotID.getRadix());keySlotID.setNoOfDigits(newKeySlotID.getNoOfDigits());setKeySlotID(newKeySlotID.getValue());
@4725#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)latestTX.clone();
@4726#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#latestTX.setRadix(newLatestTX.getRadix());latestTX.setNoOfDigits(newLatestTX.getNoOfDigits());setLatestTX(newLatestTX.getValue());
@4727#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)listenTimeout.clone();
@4728#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#listenTimeout.setRadix(newListenTimeout.getRadix());listenTimeout.setNoOfDigits(newListenTimeout.getNoOfDigits());setListenTimeout(newListenTimeout.getValue());
@4729#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)macroInitialOffsetA.clone();
@4730#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#macroInitialOffsetA.setRadix(newMacroInitialOffsetA.getRadix());macroInitialOffsetA.setNoOfDigits(newMacroInitialOffsetA.getNoOfDigits());setMacroInitialOffsetA(newMacroInitialOffsetA.getValue());
@4731#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)macroInitialOffsetB.clone();
@4732#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#macroInitialOffsetB.setRadix(newMacroInitialOffsetB.getRadix());macroInitialOffsetB.setNoOfDigits(newMacroInitialOffsetB.getNoOfDigits());setMacroInitialOffsetB(newMacroInitialOffsetB.getValue());
@4733#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maximumDynamicPayloadLength.clone();
@4734#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#maximumDynamicPayloadLength.setRadix(newMaximumDynamicPayloadLength.getRadix());maximumDynamicPayloadLength.setNoOfDigits(newMaximumDynamicPayloadLength.getNoOfDigits());setMaximumDynamicPayloadLength(newMaximumDynamicPayloadLength.getValue());
@4735#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)microInitialOffsetA.clone();
@4736#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#microInitialOffsetA.setRadix(newMicroInitialOffsetA.getRadix());microInitialOffsetA.setNoOfDigits(newMicroInitialOffsetA.getNoOfDigits());setMicroInitialOffsetA(newMicroInitialOffsetA.getValue());
@4737#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)microInitialOffsetB.clone();
@4738#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#microInitialOffsetB.setRadix(newMicroInitialOffsetB.getRadix());microInitialOffsetB.setNoOfDigits(newMicroInitialOffsetB.getNoOfDigits());setMicroInitialOffsetB(newMicroInitialOffsetB.getValue());
@4739#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)microPerCycle.clone();
@4740#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#microPerCycle.setRadix(newMicroPerCycle.getRadix());microPerCycle.setNoOfDigits(newMicroPerCycle.getNoOfDigits());setMicroPerCycle(newMicroPerCycle.getValue());
@4741#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)offsetCorrectionOut.clone();
@4742#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#offsetCorrectionOut.setRadix(newOffsetCorrectionOut.getRadix());offsetCorrectionOut.setNoOfDigits(newOffsetCorrectionOut.getNoOfDigits());setOffsetCorrectionOut(newOffsetCorrectionOut.getValue());
@4743#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)rateCorrectionOut.clone();
@4744#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#rateCorrectionOut.setRadix(newRateCorrectionOut.getRadix());rateCorrectionOut.setNoOfDigits(newRateCorrectionOut.getNoOfDigits());setRateCorrectionOut(newRateCorrectionOut.getValue());
@4745#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)samplesPerMicrotick.clone();
@4746#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#samplesPerMicrotick.setRadix(newSamplesPerMicrotick.getRadix());samplesPerMicrotick.setNoOfDigits(newSamplesPerMicrotick.getNoOfDigits());setSamplesPerMicrotick(newSamplesPerMicrotick.getValue());
@4747#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)secondKeySlotId.clone();
@4748#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#secondKeySlotId.setRadix(newSecondKeySlotId.getRadix());secondKeySlotId.setNoOfDigits(newSecondKeySlotId.getNoOfDigits());setSecondKeySlotId(newSecondKeySlotId.getValue());
@4749#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)wakeUpPattern.clone();
@4750#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayCommunicationControllerContent#wakeUpPattern.setRadix(newWakeUpPattern.getRadix());wakeUpPattern.setNoOfDigits(newWakeUpPattern.getNoOfDigits());setWakeUpPattern(newWakeUpPattern.getValue());
@4751#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)baseCycle.clone();
@4752#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#baseCycle.setRadix(newBaseCycle.getRadix());baseCycle.setNoOfDigits(newBaseCycle.getNoOfDigits());setBaseCycle(newBaseCycle.getValue());
@4753#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)cycleRepetition.clone();
@4754#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#cycleRepetition.setRadix(newCycleRepetition.getRadix());cycleRepetition.setNoOfDigits(newCycleRepetition.getNoOfDigits());setCycleRepetition(newCycleRepetition.getValue());
@4755#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)fifoDepth.clone();
@4756#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#fifoDepth.setRadix(newFifoDepth.getRadix());fifoDepth.setNoOfDigits(newFifoDepth.getNoOfDigits());setFifoDepth(newFifoDepth.getValue());
@4757#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)msgIdMask.clone();
@4758#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#msgIdMask.setRadix(newMsgIdMask.getRadix());msgIdMask.setNoOfDigits(newMsgIdMask.getNoOfDigits());setMsgIdMask(newMsgIdMask.getValue());
@4759#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)msgIdMatch.clone();
@4760#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoConfiguration#msgIdMatch.setRadix(newMsgIdMatch.getRadix());msgIdMatch.setNoOfDigits(newMsgIdMatch.getNoOfDigits());setMsgIdMatch(newMsgIdMatch.getValue());
@4761#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoRange#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)rangeMax.clone();
@4762#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoRange#rangeMax.setRadix(newRangeMax.getRadix());rangeMax.setNoOfDigits(newRangeMax.getNoOfDigits());setRangeMax(newRangeMax.getValue());
@4763#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoRange#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)rangeMin.clone();
@4764#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayFifoRange#rangeMin.setRadix(newRangeMin.getRadix());rangeMin.setNoOfDigits(newRangeMin.getNoOfDigits());setRangeMin(newRangeMin.getValue());
@4765#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ScheduleTableEntry#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)positionInTable.clone();
@4766#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ScheduleTableEntry#positionInTable.setRadix(newPositionInTable.getRadix());positionInTable.setNoOfDigits(newPositionInTable.getNoOfDigits());setPositionInTable(newPositionInTable.getValue());
@4767#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinFrameTriggering#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)identifier.clone();
@4768#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinFrameTriggering#identifier.setRadix(newIdentifier.getRadix());identifier.setNoOfDigits(newIdentifier.getNoOfDigits());setIdentifier(newIdentifier.getValue());
@4769#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinErrorResponse#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)responseErrorPosition.clone();
@4770#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinErrorResponse#responseErrorPosition.setRadix(newResponseErrorPosition.getRadix());responseErrorPosition.setNoOfDigits(newResponseErrorPosition.getNoOfDigits());setResponseErrorPosition(newResponseErrorPosition.getValue());
@4771#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#AssignFrameIdRange#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)startIndex.clone();
@4772#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#AssignFrameIdRange#startIndex.setRadix(newStartIndex.getRadix());startIndex.setNoOfDigits(newStartIndex.getNoOfDigits());setStartIndex(newStartIndex.getValue());
@4773#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FramePid#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)index.clone();
@4774#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FramePid#index.setRadix(newIndex.getRadix());index.setNoOfDigits(newIndex.getNoOfDigits());setIndex(newIndex.getValue());
@4775#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FramePid#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pid.clone();
@4776#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FramePid#pid.setRadix(newPid.getRadix());pid.setNoOfDigits(newPid.getNoOfDigits());setPid(newPid.getValue());
@4777#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#AssignNad#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)newNad.clone();
@4778#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#AssignNad#newNad.setRadix(newNewNad.getRadix());newNad.setNoOfDigits(newNewNad.getNoOfDigits());setNewNad(newNewNad.getValue());
@4779#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)byte_.clone();
@4780#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#byte_.setRadix(newByte.getRadix());byte_.setNoOfDigits(newByte.getNoOfDigits());setByte(newByte.getValue());
@4781#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)id.clone();
@4782#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#id.setRadix(newId.getRadix());id.setNoOfDigits(newId.getNoOfDigits());setId(newId.getValue());
@4783#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)invert.clone();
@4784#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#invert.setRadix(newInvert.getRadix());invert.setNoOfDigits(newInvert.getNoOfDigits());setInvert(newInvert.getValue());
@4785#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)mask.clone();
@4786#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#mask.setRadix(newMask.getRadix());mask.setNoOfDigits(newMask.getNoOfDigits());setMask(newMask.getValue());
@4787#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)newNad.clone();
@4788#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ConditionalChangeNad#newNad.setRadix(newNewNad.getRadix());newNad.setNoOfDigits(newNewNad.getNoOfDigits());setNewNad(newNewNad.getValue());
@4789#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinCommunicationConnector#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)initialNad.clone();
@4790#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinCommunicationConnector#initialNad.setRadix(newInitialNad.getRadix());initialNad.setNoOfDigits(newInitialNad.getNoOfDigits());setInitialNad(newInitialNad.getValue());
@4791#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinOrderedConfigurableFrame#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)index.clone();
@4792#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinOrderedConfigurableFrame#index.setRadix(newIndex.getRadix());index.setNoOfDigits(newIndex.getNoOfDigits());setIndex(newIndex.getValue());
@4793#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinConfigurableFrame#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)messageId.clone();
@4794#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinConfigurableFrame#messageId.setRadix(newMessageId.getRadix());messageId.setNoOfDigits(newMessageId.getNoOfDigits());setMessageId(newMessageId.getValue());
@4795#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)configuredNad.clone();
@4796#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#configuredNad.setRadix(newConfiguredNad.getRadix());configuredNad.setNoOfDigits(newConfiguredNad.getNoOfDigits());setConfiguredNad(newConfiguredNad.getValue());
@4797#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)functionId.clone();
@4798#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#functionId.setRadix(newFunctionId.getRadix());functionId.setNoOfDigits(newFunctionId.getNoOfDigits());setFunctionId(newFunctionId.getValue());
@4799#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)supplierId.clone();
@4800#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#supplierId.setRadix(newSupplierId.getRadix());supplierId.setNoOfDigits(newSupplierId.getNoOfDigits());setSupplierId(newSupplierId.getValue());
@4801#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)variantId.clone();
@4802#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinSlaveContent#variantId.setRadix(newVariantId.getRadix());variantId.setNoOfDigits(newVariantId.getNoOfDigits());setVariantId(newVariantId.getValue());
@4803#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DefaultValueElement#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)elementByteValue.clone();
@4804#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DefaultValueElement#elementByteValue.setRadix(newElementByteValue.getRadix());elementByteValue.setNoOfDigits(newElementByteValue.getNoOfDigits());setElementByteValue(newElementByteValue.getValue());
@4805#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DefaultValueElement#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)elementPosition.clone();
@4806#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DefaultValueElement#elementPosition.setRadix(newElementPosition.getRadix());elementPosition.setNoOfDigits(newElementPosition.getNoOfDigits());setElementPosition(newElementPosition.getValue());
@4807#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IPduMapping#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pdurTpChunkSize.clone();
@4808#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IPduMapping#pdurTpChunkSize.setRadix(newPdurTpChunkSize.getRadix());pdurTpChunkSize.setNoOfDigits(newPdurTpChunkSize.getNoOfDigits());setPdurTpChunkSize(newPdurTpChunkSize.getValue());
@4809#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Pdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)length.clone();
@4810#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Pdu#length.setRadix(newLength.getRadix());length.setNoOfDigits(newLength.getNoOfDigits());setLength(newLength.getValue());
@4811#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SegmentPosition#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)segmentLength.clone();
@4812#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SegmentPosition#segmentLength.setRadix(newSegmentLength.getRadix());segmentLength.setNoOfDigits(newSegmentLength.getNoOfDigits());setSegmentLength(newSegmentLength.getValue());
@4813#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SegmentPosition#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)segmentPosition.clone();
@4814#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SegmentPosition#segmentPosition.setRadix(newSegmentPosition.getRadix());segmentPosition.setNoOfDigits(newSegmentPosition.getNoOfDigits());setSegmentPosition(newSegmentPosition.getValue());
@4815#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DynamicPartAlternative#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)selectorFieldCode.clone();
@4816#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#DynamicPartAlternative#selectorFieldCode.setRadix(newSelectorFieldCode.getRadix());selectorFieldCode.setNoOfDigits(newSelectorFieldCode.getNoOfDigits());setSelectorFieldCode(newSelectorFieldCode.getValue());
@4817#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignalIPdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)unusedBitPattern.clone();
@4818#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignalIPdu#unusedBitPattern.setRadix(newUnusedBitPattern.getRadix());unusedBitPattern.setNoOfDigits(newUnusedBitPattern.getNoOfDigits());setUnusedBitPattern(newUnusedBitPattern.getValue());
@4819#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignalToIPduMapping#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)startPosition.clone();
@4820#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignalToIPduMapping#startPosition.setRadix(newStartPosition.getRadix());startPosition.setNoOfDigits(newStartPosition.getNoOfDigits());setStartPosition(newStartPosition.getValue());
@4821#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignalToIPduMapping#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)updateIndicationBitPosition.clone();
@4822#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignalToIPduMapping#updateIndicationBitPosition.setRadix(newUpdateIndicationBitPosition.getRadix());updateIndicationBitPosition.setNoOfDigits(newUpdateIndicationBitPosition.getNoOfDigits());setUpdateIndicationBitPosition(newUpdateIndicationBitPosition.getValue());
@4823#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignal#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)length.clone();
@4824#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#ISignal#length.setRadix(newLength.getRadix());length.setNoOfDigits(newLength.getNoOfDigits());setLength(newLength.getValue());
@4825#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduReplication#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)pduReplicationVoting.clone();
@4826#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduReplication#pduReplicationVoting.setRadix(newPduReplicationVoting.getRadix());pduReplicationVoting.setNoOfDigits(newPduReplicationVoting.getNoOfDigits());setPduReplicationVoting(newPduReplicationVoting.getValue());
@4827#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduCounter#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)pduCounterSize.clone();
@4828#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduCounter#pduCounterSize.setRadix(newPduCounterSize.getRadix());pduCounterSize.setNoOfDigits(newPduCounterSize.getNoOfDigits());setPduCounterSize(newPduCounterSize.getValue());
@4829#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduCounter#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)pduCounterStartPosition.clone();
@4830#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduCounter#pduCounterStartPosition.setRadix(newPduCounterStartPosition.getRadix());pduCounterStartPosition.setNoOfDigits(newPduCounterStartPosition.getNoOfDigits());setPduCounterStartPosition(newPduCounterStartPosition.getValue());
@4831#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduCounter#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)pduCounterThreshold.clone();
@4832#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#SignalIPduCounter#pduCounterThreshold.setRadix(newPduCounterThreshold.getRadix());pduCounterThreshold.setNoOfDigits(newPduCounterThreshold.getNoOfDigits());setPduCounterThreshold(newPduCounterThreshold.getValue());
@4833#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultiplexedIPdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)selectorFieldLength.clone();
@4834#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultiplexedIPdu#selectorFieldLength.setRadix(newSelectorFieldLength.getRadix());selectorFieldLength.setNoOfDigits(newSelectorFieldLength.getNoOfDigits());setSelectorFieldLength(newSelectorFieldLength.getValue());
@4835#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultiplexedIPdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)selectorFieldStartPosition.clone();
@4836#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultiplexedIPdu#selectorFieldStartPosition.setRadix(newSelectorFieldStartPosition.getRadix());selectorFieldStartPosition.setNoOfDigits(newSelectorFieldStartPosition.getNoOfDigits());setSelectorFieldStartPosition(newSelectorFieldStartPosition.getValue());
@4837#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultiplexedIPdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)unusedBitPattern.clone();
@4838#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#MultiplexedIPdu#unusedBitPattern.setRadix(newUnusedBitPattern.getRadix());unusedBitPattern.setNoOfDigits(newUnusedBitPattern.getNoOfDigits());setUnusedBitPattern(newUnusedBitPattern.getValue());
@4839#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmPdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)unusedBitPattern.clone();
@4840#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmPdu#unusedBitPattern.setRadix(newUnusedBitPattern.getRadix());unusedBitPattern.setNoOfDigits(newUnusedBitPattern.getNoOfDigits());setUnusedBitPattern(newUnusedBitPattern.getValue());
@4841#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PduToFrameMapping#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)startPosition.clone();
@4842#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PduToFrameMapping#startPosition.setRadix(newStartPosition.getRadix());startPosition.setNoOfDigits(newStartPosition.getNoOfDigits());setStartPosition(newStartPosition.getValue());
@4843#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PduToFrameMapping#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)updateIndicationBitPosition.clone();
@4844#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PduToFrameMapping#updateIndicationBitPosition.setRadix(newUpdateIndicationBitPosition.getRadix());updateIndicationBitPosition.setNoOfDigits(newUpdateIndicationBitPosition.getNoOfDigits());setUpdateIndicationBitPosition(newUpdateIndicationBitPosition.getValue());
@4845#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Frame#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)frameLength.clone();
@4846#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#Frame#frameLength.setRadix(newFrameLength.getRadix());frameLength.setNoOfDigits(newFrameLength.getNoOfDigits());setFrameLength(newFrameLength.getValue());
@4847#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EventControlledTiming#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)numberOfRepetitions.clone();
@4848#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EventControlledTiming#numberOfRepetitions.setRadix(newNumberOfRepetitions.getRadix());numberOfRepetitions.setNoOfDigits(newNumberOfRepetitions.getNoOfDigits());setNumberOfRepetitions(newNumberOfRepetitions.getValue());
@4849#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RelativeTolerance#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)relative.clone();
@4850#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#RelativeTolerance#relative.setRadix(newRelative.getRadix());relative.setNoOfDigits(newRelative.getNoOfDigits());setRelative(newRelative.getValue());
@4851#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CommunicationClusterContent#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)speed.clone();
@4852#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CommunicationClusterContent#speed.setRadix(newSpeed.getRadix());speed.setNoOfDigits(newSpeed.getNoOfDigits());setSpeed(newSpeed.getValue());
@4853#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CycleCounter#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)cycleCounter.clone();
@4854#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CycleCounter#cycleCounter.setRadix(newCycleCounter.getRadix());cycleCounter.setNoOfDigits(newCycleCounter.getNoOfDigits());setCycleCounter(newCycleCounter.getValue());
@4855#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CycleRepetition#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)baseCycle.clone();
@4856#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CycleRepetition#baseCycle.setRadix(newBaseCycle.getRadix());baseCycle.setNoOfDigits(newBaseCycle.getNoOfDigits());setBaseCycle(newBaseCycle.getValue());
@4857#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcuInstance#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)diagnosticAddress.clone();
@4858#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EcuInstance#diagnosticAddress.setRadix(newDiagnosticAddress.getRadix());diagnosticAddress.setNoOfDigits(newDiagnosticAddress.getNoOfDigits());setDiagnosticAddress(newDiagnosticAddress.getValue());
@4859#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IndexedArrayElement#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)index.clone();
@4860#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#IndexedArrayElement#index.setRadix(newIndex.getRadix());index.setNoOfDigits(newIndex.getNoOfDigits());setIndex(newIndex.getValue());
@4861#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpAddress#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)tpAddressExtensionValue.clone();
@4862#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpAddress#tpAddressExtensionValue.setRadix(newTpAddressExtensionValue.getRadix());tpAddressExtensionValue.setNoOfDigits(newTpAddressExtensionValue.getNoOfDigits());setTpAddressExtensionValue(newTpAddressExtensionValue.getValue());
@4863#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpAddress#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)tpAddress.clone();
@4864#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpAddress#tpAddress.setRadix(newTpAddress.getRadix());tpAddress.setNoOfDigits(newTpAddress.getNoOfDigits());setTpAddress(newTpAddress.getValue());
@4865#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpChannel#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)channelId.clone();
@4866#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpChannel#channelId.setRadix(newChannelId.getRadix());channelId.setNoOfDigits(newChannelId.getNoOfDigits());setChannelId(newChannelId.getValue());
@4867#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpConnection#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxBlockSize.clone();
@4868#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpConnection#maxBlockSize.setRadix(newMaxBlockSize.getRadix());maxBlockSize.setNoOfDigits(newMaxBlockSize.getNoOfDigits());setMaxBlockSize(newMaxBlockSize.getValue());
@4869#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpNode#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxFcWait.clone();
@4870#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanTpNode#maxFcWait.setRadix(newMaxFcWait.getRadix());maxFcWait.setNoOfDigits(newMaxFcWait.getNoOfDigits());setMaxFcWait(newMaxFcWait.getValue());
@4871#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxAr.clone();
@4872#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#maxAr.setRadix(newMaxAr.getRadix());maxAr.setNoOfDigits(newMaxAr.getNoOfDigits());setMaxAr(newMaxAr.getValue());
@4873#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxAs.clone();
@4874#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#maxAs.setRadix(newMaxAs.getRadix());maxAs.setNoOfDigits(newMaxAs.getNoOfDigits());setMaxAs(newMaxAs.getValue());
@4875#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxBs.clone();
@4876#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#maxBs.setRadix(newMaxBs.getRadix());maxBs.setNoOfDigits(newMaxBs.getNoOfDigits());setMaxBs(newMaxBs.getValue());
@4877#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxBufferRequest.clone();
@4878#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#maxBufferRequest.setRadix(newMaxBufferRequest.getRadix());maxBufferRequest.setNoOfDigits(newMaxBufferRequest.getNoOfDigits());setMaxBufferRequest(newMaxBufferRequest.getValue());
@4879#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxFrIf.clone();
@4880#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#maxFrIf.setRadix(newMaxFrIf.getRadix());maxFrIf.setNoOfDigits(newMaxFrIf.getNoOfDigits());setMaxFrIf(newMaxFrIf.getValue());
@4881#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxRetries.clone();
@4882#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayArTpChannel#maxRetries.setRadix(newMaxRetries.getRadix());maxRetries.setNoOfDigits(newMaxRetries.getNoOfDigits());setMaxRetries(newMaxRetries.getValue());
@4883#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxAr.clone();
@4884#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxAr.setRadix(newMaxAr.getRadix());maxAr.setNoOfDigits(newMaxAr.getNoOfDigits());setMaxAr(newMaxAr.getValue());
@4885#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxAs.clone();
@4886#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxAs.setRadix(newMaxAs.getRadix());maxAs.setNoOfDigits(newMaxAs.getNoOfDigits());setMaxAs(newMaxAs.getValue());
@4887#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxBufferSize.clone();
@4888#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxBufferSize.setRadix(newMaxBufferSize.getRadix());maxBufferSize.setNoOfDigits(newMaxBufferSize.getNoOfDigits());setMaxBufferSize(newMaxBufferSize.getValue());
@4889#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxFcWait.clone();
@4890#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxFcWait.setRadix(newMaxFcWait.getRadix());maxFcWait.setNoOfDigits(newMaxFcWait.getNoOfDigits());setMaxFcWait(newMaxFcWait.getValue());
@4891#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxFrIf.clone();
@4892#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxFrIf.setRadix(newMaxFrIf.getRadix());maxFrIf.setNoOfDigits(newMaxFrIf.getNoOfDigits());setMaxFrIf(newMaxFrIf.getValue());
@4893#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxNumberOfNpduPerCycle.clone();
@4894#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxNumberOfNpduPerCycle.setRadix(newMaxNumberOfNpduPerCycle.getRadix());maxNumberOfNpduPerCycle.setNoOfDigits(newMaxNumberOfNpduPerCycle.getNoOfDigits());setMaxNumberOfNpduPerCycle(newMaxNumberOfNpduPerCycle.getValue());
@4895#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxRetries.clone();
@4896#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#maxRetries.setRadix(newMaxRetries.getRadix());maxRetries.setNoOfDigits(newMaxRetries.getNoOfDigits());setMaxRetries(newMaxRetries.getValue());
@4897#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)separationCycleExponent.clone();
@4898#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayTpConnectionControl#separationCycleExponent.setRadix(newSeparationCycleExponent.getRadix());separationCycleExponent.setNoOfDigits(newSeparationCycleExponent.getNoOfDigits());setSeparationCycleExponent(newSeparationCycleExponent.getValue());
@4899#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinTpNode#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)maxNumberOfRespPendingFrames.clone();
@4900#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#LinTpNode#maxNumberOfRespPendingFrames.setRadix(newMaxNumberOfRespPendingFrames.getRadix());maxNumberOfRespPendingFrames.setNoOfDigits(newMaxNumberOfRespPendingFrames.getNoOfDigits());setMaxNumberOfRespPendingFrames(newMaxNumberOfRespPendingFrames.getValue());
@4901#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TpAddress#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)tpAddress.clone();
@4902#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#TpAddress#tpAddress.setRadix(newTpAddress.getRadix());tpAddress.setNoOfDigits(newTpAddress.getNoOfDigits());setTpAddress(newTpAddress.getValue());
@4903#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PncMapping#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)pncIdentifier.clone();
@4904#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#PncMapping#pncIdentifier.setRadix(newPncIdentifier.getRadix());pncIdentifier.setNoOfDigits(newPncIdentifier.getNoOfDigits());setPncIdentifier(newPncIdentifier.getValue());
@4905#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmCarWakeUpBitPosition.clone();
@4906#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#nmCarWakeUpBitPosition.setRadix(newNmCarWakeUpBitPosition.getRadix());nmCarWakeUpBitPosition.setNoOfDigits(newNmCarWakeUpBitPosition.getNoOfDigits());setNmCarWakeUpBitPosition(newNmCarWakeUpBitPosition.getValue());
@4907#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmCarWakeUpFilterNodeId.clone();
@4908#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#nmCarWakeUpFilterNodeId.setRadix(newNmCarWakeUpFilterNodeId.getRadix());nmCarWakeUpFilterNodeId.setNoOfDigits(newNmCarWakeUpFilterNodeId.getNoOfDigits());setNmCarWakeUpFilterNodeId(newNmCarWakeUpFilterNodeId.getValue());
@4909#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmCbvPosition.clone();
@4910#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#nmCbvPosition.setRadix(newNmCbvPosition.getRadix());nmCbvPosition.setNoOfDigits(newNmCbvPosition.getNoOfDigits());setNmCbvPosition(newNmCbvPosition.getValue());
@4911#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmImmediateNmTransmissions.clone();
@4912#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#nmImmediateNmTransmissions.setRadix(newNmImmediateNmTransmissions.getRadix());nmImmediateNmTransmissions.setNoOfDigits(newNmImmediateNmTransmissions.getNoOfDigits());setNmImmediateNmTransmissions(newNmImmediateNmTransmissions.getValue());
@4913#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmNidPosition.clone();
@4914#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#nmNidPosition.setRadix(newNmNidPosition.getRadix());nmNidPosition.setNoOfDigits(newNmNidPosition.getNoOfDigits());setNmNidPosition(newNmNidPosition.getValue());
@4915#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmUserDataLength.clone();
@4916#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmCluster#nmUserDataLength.setRadix(newNmUserDataLength.getRadix());nmUserDataLength.setNoOfDigits(newNmUserDataLength.getNoOfDigits());setNmUserDataLength(newNmUserDataLength.getValue());
@4917#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmCluster#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmChannelId.clone();
@4918#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmCluster#nmChannelId.setRadix(newNmChannelId.getRadix());nmChannelId.setNoOfDigits(newNmChannelId.getNoOfDigits());setNmChannelId(newNmChannelId.getValue());
@4919#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#documentation#NmCluster#If this parameter is true, then this network is a synchronizing network for the NM coordination cluster which it belongs to. The network is expected to call Nm_SynchronizationPoint() at regular intervals. 
@4920#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmNode#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmNodeId.clone();
@4921#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmNode#nmNodeId.setRadix(newNmNodeId.getRadix());nmNodeId.setNoOfDigits(newNmNodeId.getNoOfDigits());setNmNodeId(newNmNodeId.getValue());
@4922#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmCoordinator#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)index.clone();
@4923#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#NmCoordinator#index.setRadix(newIndex.getRadix());index.setNoOfDigits(newIndex.getNoOfDigits());setIndex(newIndex.getValue());
@4924#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmRangeConfig#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)lowerCanId.clone();
@4925#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmRangeConfig#lowerCanId.setRadix(newLowerCanId.getRadix());lowerCanId.setNoOfDigits(newLowerCanId.getNoOfDigits());setLowerCanId(newLowerCanId.getValue());
@4926#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmRangeConfig#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)upperCanId.clone();
@4927#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#CanNmRangeConfig#upperCanId.setRadix(newUpperCanId.getRadix());upperCanId.setNoOfDigits(newUpperCanId.getNoOfDigits());setUpperCanId(newUpperCanId.getValue());
@4928#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmCarWakeUpBitPosition.clone();
@4929#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#nmCarWakeUpBitPosition.setRadix(newNmCarWakeUpBitPosition.getRadix());nmCarWakeUpBitPosition.setNoOfDigits(newNmCarWakeUpBitPosition.getNoOfDigits());setNmCarWakeUpBitPosition(newNmCarWakeUpBitPosition.getValue());
@4930#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmCarWakeUpFilterNodeId.clone();
@4931#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#nmCarWakeUpFilterNodeId.setRadix(newNmCarWakeUpFilterNodeId.getRadix());nmCarWakeUpFilterNodeId.setNoOfDigits(newNmCarWakeUpFilterNodeId.getNoOfDigits());setNmCarWakeUpFilterNodeId(newNmCarWakeUpFilterNodeId.getValue());
@4932#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmDataCycle.clone();
@4933#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#nmDataCycle.setRadix(newNmDataCycle.getRadix());nmDataCycle.setNoOfDigits(newNmDataCycle.getNoOfDigits());setNmDataCycle(newNmDataCycle.getValue());
@4934#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmReadySleepCount.clone();
@4935#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#nmReadySleepCount.setRadix(newNmReadySleepCount.getRadix());nmReadySleepCount.setNoOfDigits(newNmReadySleepCount.getNoOfDigits());setNmReadySleepCount(newNmReadySleepCount.getValue());
@4936#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmRepetitionCycle.clone();
@4937#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#nmRepetitionCycle.setRadix(newNmRepetitionCycle.getRadix());nmRepetitionCycle.setNoOfDigits(newNmRepetitionCycle.getNoOfDigits());setNmRepetitionCycle(newNmRepetitionCycle.getValue());
@4938#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmVotingCycle.clone();
@4939#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmCluster#nmVotingCycle.setRadix(newNmVotingCycle.getRadix());nmVotingCycle.setNoOfDigits(newNmVotingCycle.getNoOfDigits());setNmVotingCycle(newNmVotingCycle.getValue());
@4940#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmNode#return (<%org.artop.aal.common.datatypes.PositiveIntegerDatatype%>)nmInstanceId.clone();
@4941#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#FlexrayNmNode#nmInstanceId.setRadix(newNmInstanceId.getRadix());nmInstanceId.setNoOfDigits(newNmInstanceId.getNoOfDigits());setNmInstanceId(newNmInstanceId.getValue());
@4942#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#UdpNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmCbvPosition.clone();
@4943#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#UdpNmCluster#nmCbvPosition.setRadix(newNmCbvPosition.getRadix());nmCbvPosition.setNoOfDigits(newNmCbvPosition.getNoOfDigits());setNmCbvPosition(newNmCbvPosition.getValue());
@4944#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#UdpNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmNidPosition.clone();
@4945#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#UdpNmCluster#nmNidPosition.setRadix(newNmNidPosition.getRadix());nmNidPosition.setNoOfDigits(newNmNidPosition.getNoOfDigits());setNmNidPosition(newNmNidPosition.getValue());
@4946#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#UdpNmCluster#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)nmUserDataLength.clone();
@4947#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#UdpNmCluster#nmUserDataLength.setRadix(newNmUserDataLength.getRadix());nmUserDataLength.setNoOfDigits(newNmUserDataLength.getNoOfDigits());setNmUserDataLength(newNmUserDataLength.getValue());
@4948#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndProtectionISignalIPdu#return (<%org.artop.aal.common.datatypes.IntegerDatatype%>)dataOffset.clone();
@4949#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#EndToEndProtectionISignalIPdu#dataOffset.setRadix(newDataOffset.getRadix());dataOffset.setNoOfDigits(newDataOffset.getNoOfDigits());setDataOffset(newDataOffset.getValue());
@4950#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/autosar40.ecore#body#AUTOSAR#if (wrappedExtensions == null) {wrappedExtensions = new WrappedExtensionsMap();}return wrappedExtensions;
@4951#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/B3Backend.ecore#documentation#BCallFeature#Indicates if this is a call like a.foo(), or a feature LVal like a.foo
@4952#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/BaseCST.ecore#body#EnumerationCS#ocl::Enumeration {name = name,ownedLiteral = ownedLiterals.ast()}
@4953#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/BaseCST.ecore#body#EnumerationLiteralCS#ocl::EnumerationLiteral {name = name}
@4954#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/BaseCST.ecore#TestConstraint#RootCS#true
@4955#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/BaseCST.ecore#TestConstraint#RootPackageCS#true
@4956#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/beaninfo.ecore#documentation#BeanDecorator#This is the list of inherited property names to not use in getAllProperties(). These names are properties that should not be inherited and should not show through. If the inherited property is not on the list then it will show in getAllProperties().<p>This list will be empty if all properties are inherited or if the mergeSuperProperties flag is false.<p>Note: This attribute is not meant to be changed by clients. It is an internal attribute.
@4957#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/beaninfo.ecore#documentation#BeanDecorator#This is the list of inherited method names to not use in eAllOperations(). These names are operations that should not be inherited and should not show through. If the inherited operation is not on the list then it will show in getAllOperations().<p>This list will be empty if all operations are inherited or if the mergeSuperBehaviors flag is false.
@4958#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/beaninfo.ecore#documentation#BeanDecorator#This is the list of inherited event names to not use in getAllEvents(). These names are events that should not be inherited and should not show through. If the inherited event is not on the list then it will show in getAllEvents().<p>This list will be empty if all events are inherited or if the mergeSuperEvents flag is false.
@4986#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/builder.ecore#body#ManagedProject#for ( BuildProcess doc : getProcesses() ) { doc.build(); }
@4987#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/builder.ecore#body#ManagedProject#for ( BuildProcess doc : getProcesses() ) { doc.clean(); }
@4988#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/builder.ecore#body#BuildResource#throw new UnsupportedOperationException ();
@4989#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/builder.ecore#body#BuildResource#return getProcess().getProject().getIProjectInstance ().getFolder ( getPath() );
@4990#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/builder.ecore#body#BuildResource#return getProcess().getProject().getIProjectInstance ().getFile ( getPath() );
@4991#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/builder.ecore#body#BuildResource#return getProcess().getProject().getIProjectInstance ().findMember ( getPath() );
@4992#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/calc.ecore#body#Calculation#for ( org.emftext.language.calc.Variable v:getInputVariables()) {if (v.getName().equals(name)) {return v;}}for ( org.emftext.language.calc.Variable v:getOutputVariables()) {if (v.getName().equals(name)) {return v;}}return null;
@4993#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@4994#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#A classifier may only specialize classifiers of a valid type.self.parents()->forAll(c | self.maySpecializeType(c))
@4995#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (self=other) or (self.allParents()->includes(other))
@4996#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@4997#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The general classifiers are the classifiers referenced by the generalization relationships.result = self.parents()
@4998#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = generalization.general
@4999#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@5000#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@5001#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@5002#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true
@5003#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@5004#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Namespace#All the members of a Namespace are distinguishable within it.membersAreDistinguishable()
@5005#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Namespace#The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
@5006#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Namespace#The query getNamesOfMember() is overridden to take account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.result = if self.ownedMember->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then elementImports->collect(el | el.getName())  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))->collect(pi | pi.importedPackage.getNamesOfMember(element))  endifendif
@5007#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | mem.imp.isDistinguishableFrom(mem, self)))
@5008#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
@5009#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.result = self.member->forAll( memb |self.member->excluding(memb)->forAll(other |memb.isDistinguishableFrom(other, self)))
@5010#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#If there is no name, or one of the containing namespaces has no name, there is no qualified name.(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())  implies self.qualifiedName->isEmpty()
@5011#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
@5012#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#If a NamedElement is not owned by a Namespace, it does not have a visibility.namespace->isEmpty() implies visibility->isEmpty()
@5013#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.result = if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif
@5014#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif
@5015#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.result = '::'
@5016#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif
@5017#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Element#An element may not directly or indirectly own itself.not self.allOwnedElements()->includes(self)
@5018#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Element#Elements that must be owned must have an owner.self.mustBeOwned() implies owner->notEmpty()
@5019#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@5020#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = true
@5021#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if.specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.redefinee.isRedefinitionContextValid(self)result = (redefinee.oclIsKindOf(Property) and     let prop: Property = redefinee.oclAsType(Property) in        type.conformsTo(prop.type) and        (lowerBound()->notEmpty and prop.lowerBound()->notEmpty() implies lowerBound() >= prop.lowerBound())    and        (upperBound()->notEmpty and prop.upperBound()->notEmpty() implies upperBound() <= prop.upperBound())    and        (prop.isDerived implies isDerived))
@5022#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#A multiplicity of a composite aggregation must not have an upper bound greater than 1.isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)
@5023#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.self.subsettedProperty->notEmpty() implies  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |    self.subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
@5024#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#A navigable property can only be redefined or subsetted by a navigable property.(self.subsettedProperty->exists(sp | sp.isNavigable()) implies self.isNavigable())  and (self.redefinedProperty->exists(rp | rp.isNavigable()) implies self.isNavigable())
@5025#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.self.subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound()<=sp.upperBound() ))
@5026#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#Only a navigable property can be marked as readOnly.isReadOnly implies isNavigable()
@5027#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.result = if owningAssociation->notEmpty() and association.memberEnd->size() = 2 then let otherEnd = (association.memberEnd - self)->any() in if otherEnd.owningAssociation->notEmpty then otherEnd else Set{} endifelse Set {}endif
@5028#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.result = if association->notEmpty()then association.endType-type else if classifier->notEmpty then Set{classifier} else Set{} endifendif
@5029#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Property#The query isNavigable indicates whether it is possible to navigate across the property.result = not classifier->isEmpty() orassociation.owningAssociation.navigableOwnedEnd->includes(self)
@5030#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.result = false
@5031#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = self.redefinitionContext->exists(c | redefinable.redefinitionContext->exists(r | c.allParents()->includes(r)))
@5032#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@5033#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = false
@5034#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Package#If an element that is owned by a package has visibility, it is public or private.self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)
@5035#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = member->select( m | self.makesVisible(m))
@5036#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.self.member->includes(el)result = (ownedMember->includes(el)) or   (elementImport->      select(ei|ei.visibility = #public)->         collect(ei|ei.importedElement)->includes(el)) or   (packageImport->      select(pi|pi.visibility = #public)->        collect(pi|           pi.importedPackage.member->includes(el))->notEmpty())
@5037#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#A multiplicity must define at least one valid cardinality that is greater than zero.upperBound()->notEmpty() implies upperBound() > 0
@5038#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The lower bound must be a non-negative integer literal.lowerBound()->notEmpty() implies lowerBound() >= 0
@5039#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The upper bound must be greater than or equal to the lower bound.(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
@5040#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lower->notEmpty() then lower else 1 endif
@5041#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upper->notEmpty() then upper else 1 endif
@5042#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@5043#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@5044#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@5045#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Association#Association ends of associations with more than two ends must be owned by the association.if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)
@5046#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.result = if returnResult->size() = 1 then returnResult->any().lower else Set{} endif
@5047#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.result = if returnResult->size() = 1 then returnResult->any().upper else Set{} endif
@5048#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.redefinee.isRedefinitionContextValid(self)result = (redefinee.oclIsKindOf(Operation) and    let op: Operation = redefinee.oclAsType(Operation) in        self.formalParameter.size() = op.formalParameter.size() and        self.returnResult.size() = op.returnResult.size() and        forAll(i | op.formalParameter[i].type.conformsTo(self.formalParameter[i].type)) and        forAll(i | op.returnResult[i].type.conformsTo(self.returnResult[i].type)))
@5049#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#A bodyCondition can only be specified for a query operation.bodyCondition->notEmpty() implies isQuery
@5050#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'self.ownedParameter->select(par | par.direction = #return)->size() <= 1
@5051#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.result = if returnResult->size() = 1 then returnResult->any().isOrdered else false endif
@5052#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.result = if returnResult->size() = 1 then returnResult->any().isUnique else true endif
@5053#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Operation#If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.result = if returnResult->size() = 1 then returnResult->any().type else Set{} endif
@5054#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#BehavioralFeature#The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.result = if n.oclIsKindOf(BehavioralFeature)then  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()  then Set{}->include(self)->include(n)->isUnique( bf | bf.parameter->collect(type))  else true  endifelse trueendif
@5055#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#Constraint#The value specification for a constraint must evaluate to a boolean value.self.specification().booleanValue().isOclKindOf(Boolean)
@5056#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@5057#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@5058#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@5059#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@5060#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@5061#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@5062#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ElementImport#An importedElement has either public visibility or no visibility at all.self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public
@5063#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/CMOF.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = if self.alias->notEmpty() then   self.aliaselse  self.importedElement.nameendif
@5064#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/compare.ecore#documentation#Comparison#Returns all differences that reference the given EObject (for instance, all ReferenceChanges that reference the given EObject through the "value" EReference). <p>To get differences detected on the given EObject or one of its counterpart in left, right or origin, you should call the following code:<pre>Match match = getMatch(eObject);if (match != null) {    differences = match.getDifferences();}</pre>
@5065#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getThumbRankings()
@5066#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getThumbRankings()
@5067#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getMetaInformations()
@5068#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getMetaInformations()
@5069#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getMetaInformations()
@5070#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getMetaInformations()
@5071#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getMetaInformations()
@5072#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#InformationObject#getMetaInformations()
@5073#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#OCLCondition#DataSet#"self.getCount() > " + x
@5074#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#OCLCondition#DataSet#"((self.getAttachments())->notEmpty()) and (self.getAttachments()->exists(a | a.ident = '" + attachment.getIdent()  + "'))";
@5075#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#DataSet#getInformationObjects()
@5076#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#MetaTag#getMetaTagged()
@5077#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#MetaTag#getMetaTagged()
@5078#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/data.ecore#input#MetaTag#getMetaTagged()
@5159#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#if (node.getModel() != null) { node.getModel().accept(this, context); }for (int i=0; i<node.getContext().size(); i++) { ((diva.Variable)node.getContext().get(i)).accept(this, context); }for (int i=0; i<node.getProperty().size(); i++) { ((diva.Property)node.getProperty().get(i)).accept(this, context); }for (int i=0; i<node.getDimension().size(); i++) { ((diva.Dimension)node.getDimension().get(i)).accept(this, context); }for (int i=0; i<node.getRule().size(); i++) { ((diva.Rule)node.getRule().get(i)).accept(this, context); }for (int i=0; i<node.getConstraint().size(); i++) { ((diva.Constraint)node.getConstraint().get(i)).accept(this, context); }if (node.getSimulation() != null) { node.getSimulation().accept(this, context); }return null;
@5160#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }if (node.getExpression() != null) { node.getExpression().accept(this, context); }return null;
@5161#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5162#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5163#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getLiteral().size(); i++) { ((diva.EnumLiteral)node.getLiteral().get(i)).accept(this, context); }return null;
@5164#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5165#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getTerm().size(); i++) { ((diva.Term)node.getTerm().get(i)).accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5166#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getTerm().size(); i++) { ((diva.Term)node.getTerm().get(i)).accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5167#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }if (node.getTerm() != null) { node.getTerm().accept(this, context); }return null;
@5168#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5169#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5170#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5171#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5172#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#if (node.getModel() != null) { node.getModel().accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getPropertyValue().size(); i++) { ((diva.PropertyValue)node.getPropertyValue().get(i)).accept(this, context); }if (node.getDependency() != null) { node.getDependency().accept(this, context); }if (node.getAvailable() != null) { node.getAvailable().accept(this, context); }if (node.getRequired() != null) { node.getRequired().accept(this, context); }return null;
@5173#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getVariant().size(); i++) { ((diva.Variant)node.getVariant().get(i)).accept(this, context); }for (int i=0; i<node.getConstraints().size(); i++) { ((diva.MultiplicityConstraint)node.getConstraints().get(i)).accept(this, context); }return null;
@5174#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }if (node.getTerm() != null) { node.getTerm().accept(this, context); }return null;
@5175#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#if (node.getTerm() != null) { node.getTerm().accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5176#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#if (node.getTerm() != null) { node.getTerm().accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5177#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }if (node.getContext() != null) { node.getContext().accept(this, context); }for (int i=0; i<node.getPriority().size(); i++) { ((diva.PropertyPriority)node.getPriority().get(i)).accept(this, context); }return null;
@5178#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getLiteral().size(); i++) { ((diva.PropertyLiteral)node.getLiteral().get(i)).accept(this, context); }return null;
@5179#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5180#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5181#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5182#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }if (node.getAvailable() != null) { node.getAvailable().accept(this, context); }return null;
@5183#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getScenario().size(); i++) { ((diva.Scenario)node.getScenario().get(i)).accept(this, context); }return null;
@5184#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getVariable().size(); i++) { ((diva.VariableValue)node.getVariable().get(i)).accept(this, context); }for (int i=0; i<node.getConfiguration().size(); i++) { ((diva.Configuration)node.getConfiguration().get(i)).accept(this, context); }if (node.getOracle() != null) { node.getOracle().accept(this, context); }for (int i=0; i<node.getPriority().size(); i++) { ((diva.Priority)node.getPriority().get(i)).accept(this, context); }return null;
@5185#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getScore().size(); i++) { ((diva.Score)node.getScore().get(i)).accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getVariant().size(); i++) { ((diva.ConfigVariant)node.getVariant().get(i)).accept(this, context); }return null;
@5186#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getScore().size(); i++) { ((diva.Score)node.getScore().get(i)).accept(this, context); }for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5187#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }for (int i=0; i<node.getContext().size(); i++) { ((diva.Context)node.getContext().get(i)).accept(this, context); }return null;
@5188#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5189#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5190#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5191#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getAnnotation().size(); i++) { ((diva.Annotation)node.getAnnotation().get(i)).accept(this, context); }return null;
@5192#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getConfigurations().size(); i++) { ((diva.SuitableConfiguration)node.getConfigurations().get(i)).accept(this, context); }return null;
@5193#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getVariant().size(); i++) { ((diva.ConfigVariant)node.getVariant().get(i)).accept(this, context); }return null;
@5194#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/DiVA_visitor.ecore#body#TopDownVisitor#for (int i=0; i<node.getVariable().size(); i++) { ((diva.VariableValue)node.getVariable().get(i)).accept(this, context); }return null;
@5195#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/doc.ecore#body#IncludePatternRule#return pattern.matcher ( name ).matches () ? RuleResult.ACCEPT : null;
@5196#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/doc.ecore#body#ExcludePatternRule#return pattern.matcher ( name ).matches () ? RuleResult.REJECT : null;
@5197#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/docbuilder.ecore#body#DocumentedProject#for ( Document doc : getDocuments() ) { doc.build(); }
@5198#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/docbuilder.ecore#body#DocumentedProject#for ( Document doc : getDocuments() ) { doc.clean(); }
@5199#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/docbuilder.ecore#body#DocResource#throw new UnsupportedOperationException ();
@5200#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/docbuilder.ecore#body#DocResource#return getDocument().getProject().getIProjectInstance ().getFolder ( getPath() );
@5201#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/docbuilder.ecore#body#DocResource#return getDocument().getProject().getIProjectInstance ().getFile ( getPath() );
@5202#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/docbuilder.ecore#body#DocResource#return getDocument().getProject().getIProjectInstance ().findMember ( getPath() );
@5203#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/ebnfmm.ecore#body#SymbolWithFactor#self.containingChoice != null
@5204#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/EDP.ecore#body#Context#if (key == null || "".equals(key)) //$NON-NLS-1$return false;for (int i = 0; i < getContents().size(); i++) {ContextContent content = (ContextContent) getContents().get(i);if (key.equals(content.getKey()))return true;}if (!local&& eContainer() instanceof org.eclipse.wazaabi.mm.edp.Context)return ((org.eclipse.wazaabi.mm.edp.Context) eContainer()).containsKey(key, false);return false;
@5205#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/EDP.ecore#body#Context#if (key == null || "".equals(key)) //$NON-NLS-1$return null;for (int i = 0; i < getContents().size(); i++) {ContextContent content = (ContextContent) getContents().get(i);if (key.equals(content.getKey()))return content.getValue();}if (eContainer() instanceof org.eclipse.wazaabi.mm.edp.Context)return ((org.eclipse.wazaabi.mm.edp.Context) eContainer()).get(key);return null;
@5206#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/EDP.ecore#body#Context#if (key == null || "".equals(key)) //$NON-NLS-1$return;ContextContent content = null;boolean found = false;for (int i = 0; i < getContents().size(); i++) {content = (ContextContent) getContents().get(i);if (key.equals(content.getKey())) {found = true;break;}}if (found)getContents().remove(content);
@5207#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/EDP.ecore#body#Context#if (key == null || "".equals(key)) //$NON-NLS-1$return;for (int i = 0; i < getContents().size(); i++) {ContextContent content = (ContextContent) getContents().get(i);if (key.equals(content.getKey())) {content.setValue(value);return;}}ContextContent newContent = org.eclipse.wazaabi.mm.edp.EdpFactory.eINSTANCE.createContextContent();newContent.setKey(key);newContent.setValue(value);getContents().add(newContent);
@5208#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/ESMF.ecore#nameNotEmpty#ESMFNamedEntity#self.name->notEmpty() and self.name.size() > 0
@5209#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/ESMF.ecore#commonSrcAndDst#ESMFSimpleCouplerComponent#self.fieldConnection->forAll(srcField.scope = self.srcComponent and dstField.scope = self.dstComponent)
@5210#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/ESMF.ecore#body#ESMFState#
@5217#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/faceletTaglib_2_0.ecore#documentation#FullyQualifiedClass#    The elements that use this type designate the name of a    Java class or interface.  The name is in the form of a    "binary name", as defined in the JLS.  This is the form    of name used in Class.forName().  Tools that need the    canonical name (the name used in source code) will need    to convert this binary name to the canonical name.      
@5218#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/FilterSetup.ecore#body#Identifiable#//return ((Identifiable)eObject).getName();String container="";if(eObject.eContainer().eContainer()==null) // if root is our containercontainer= ((Identifiable)eObject.eContainer()).getName()+"/";return container + ((Identifiable)eObject).getName();//return super.eURIFragmentSegment(eStructuralFeature, eObject);
@5219#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/FilterSetup.ecore#body#Identifiable#if(getName().equals(uriFragmentSegment))return this;for(EObject eObject:eContents()){if(((Identifiable)eObject).getName().equals(uriFragmentSegment))return eObject;}return null;//return super.eObjectForURIFragmentSegment(uriFragmentSegment);
@5220#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#FunctionSet#org.eclipse.emf.common.util.EList< org.emftext.language.functions.Function> functions = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.functions.Function>();for ( org.emftext.language.functions.Element element : getElements()) {if (element instanceof org.emftext.language.functions.Function) {functions.add(( org.emftext.language.functions.Function) element);}}return functions;
@5221#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#FunctionSet#int total = 0;for ( org.emftext.language.functions.Function child : getFunctions()) {if (child.isIgnored()) {continue;}if (child.getTargetVersion() != null && child.getTargetVersion().isIgnored()) {continue;}if (child.getParent() != null) {continue;}total += child.getTotalCosts();}for ( org.emftext.language.functions.FunctionSet subset : getSubsets()) {total += subset.getTotalCosts();}return total;
@5222#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#NamedElement#return getReadableString(getName());
@5223#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#NamedElement#return getReadableString(getDescription());
@5224#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#NamedElement#java.lang.StringBuilder result = new java.lang.StringBuilder();java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("'([^']*)'").matcher(text);int lastStart = 0;while (matcher.find()) {java.lang.String group = matcher.group(1);int start = matcher.start();int end = matcher.end();result.append(text.substring(lastStart, start));result.append(prefix);result.append(group);result.append(suffix);lastStart = end;}result.append(text.substring(lastStart, text.length()));return result.toString();
@5225#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#Function#int total = 0;for ( org.emftext.language.functions.Function child : getChildren()) {if (child.isIgnored()) {continue;}if (child.getTargetVersion() != null && child.getTargetVersion().isIgnored()) {continue;}total += child.getTotalCosts();}return total + getCosts();
@5226#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/functions.ecore#body#Function#org.eclipse.emf.common.util.EList< org.emftext.language.functions.Function> functions = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.functions.Function>();for ( org.emftext.language.functions.Element element : getRelatedTo()) {if (element instanceof org.emftext.language.functions.Function) {functions.add(( org.emftext.language.functions.Function) element);}}return functions;
@5227#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GIdentifiable#return getExtensions();
@5228#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GMixedContentForParagraph#return getMixed();
@5229#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GMixedContentForOverviewParagraph#return getMixed();
@5230#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GMixedContentForOverviewParagraph#return getMixedText();
@5231#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GFormulaExpression#return getMixed();
@5232#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GFormulaExpression#return getMixedText();
@5233#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GParamConfMultiplicity#if(lowerMultiplicity == null){return null;}return lowerMultiplicity.getMixedText();
@5234#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GParamConfMultiplicity#if(lowerMultiplicity == null){PositiveIntegerValueVariationPoint newLowerMultiplicity = autosar40.genericstructure.varianthandling.VarianthandlingFactory.eINSTANCE.createPositiveIntegerValueVariationPoint();newLowerMultiplicity.setMixedText(value);setLowerMultiplicity(newLowerMultiplicity);} else {lowerMultiplicity.setMixedText(value);}
@5235#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GParamConfMultiplicity#if(upperMultiplicity == null){return null;}return upperMultiplicity.getMixedText();
@5236#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GParamConfMultiplicity#if(upperMultiplicity == null){PositiveIntegerValueVariationPoint newUpperMultiplicity = autosar40.genericstructure.varianthandling.VarianthandlingFactory.eINSTANCE.createPositiveIntegerValueVariationPoint();newUpperMultiplicity.setMixedText(value);setUpperMultiplicity(newUpperMultiplicity);} else {upperMultiplicity.setMixedText(value);}
@5237#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GParamConfMultiplicity#if (upperMultiplicityInfinite != null) {return Boolean.TRUE.toString().equals(upperMultiplicityInfinite.getMixedText()); }return false;
@5238#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gautosar.ecore#body#GParamConfMultiplicity#if (upperMultiplicityInfinite == null){ BooleanValueVariationPoint newUpperMultiplicityInfinite = <%autosar40.genericstructure.varianthandling.VarianthandlingFactory%>.eINSTANCE.createBooleanValueVariationPoint();newUpperMultiplicityInfinite.setMixedText(value.toString());setUpperMultiplicityInfinite(newUpperMultiplicityInfinite);} else { upperMultiplicityInfinite.setMixedText(value.toString());}
@5239#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#Person#return getLastName().trim() + ", " + getFirstName().trim();
@5240#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#Patient#<%java.text.DateFormat%> df = DateFormat.getDateInstance(DateFormat.LONG);return df.format(birthdate.getTime());
@5241#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#Patient#return getDeltaAgeYears(new <%java.util.GregorianCalendar%>());
@5242#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#Patient#return getDeltaAgeDays(new <%java.util.GregorianCalendar%>());
@5243#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#Patient#long millisBetween = Math.abs(getBirthdate().getTimeInMillis()- date.getTimeInMillis());return (int) ((millisBetween / (1000 * 60 * 60 * 24)) / 365);
@5244#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#Patient#long millisBetween = Math.abs(getBirthdate().getTimeInMillis()- date.getTimeInMillis());return (int) (millisBetween / (1000 * 60 * 60 * 24));
@5245#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/glucose.ecore#body#ClinicalDecision#if (this.getAdviceText().length() == 0){this.setAdviceText(message);} else {this.setAdviceText(this.getAdviceText() + "\n" + message);}
@5246#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gmfgen.ecore#documentation#GenEditorGenerator#Derived from genModel.genPackage[0].getBasePackage() by default
@5247#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gmfgen.ecore#documentation#GenEditorGenerator#By default, genModel.genPackage[0].getPrefix().toLowerCase(), as in emf/templates/editor/pluign.xmljet
@5248#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gmfgen.ecore#documentation#ResizeConstraints#Same as {@link #getResizeHandleNames()}, for nonResizeHandle attribute
@5249#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gmfgen.ecore#documentation#ParentAssignedViewmap#Child could provide typed alternative to setFigure() method
@5250#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gmfgen.ecore#documentation#GenLiteralExpressionProvider#GenLiteralExpressionProvider#getLanguage() == GenLanguage.LITERAL
@5251#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Requirement#GoalModel model = null;// If it's the root goal, return the goal model.if (it.unitn.disi.zanshin.model.gore.GorePackage.eINSTANCE.getGoal().isInstance(this))model = ((it.unitn.disi.zanshin.model.gore.Goal) this).getGoalModel();// If the model is not found in the root goal, move up the requirement tree looking for the root goal.if ((model == null) && (getParent() != null))model = getParent().findGoalModel();// Returns the found model, or null if no model has been found.return model;
@5252#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Requirement#// Counts the number of children in each state and the number of defineable children.int[] stateCount = new int[it.unitn.disi.zanshin.model.gore.DefinableRequirementState.VALUES.size()];int defChildrenCount = 0;for (it.unitn.disi.zanshin.model.gore.Requirement child : getChildren()) {if (child instanceof DefinableRequirement) {defChildrenCount++;stateCount[((DefinableRequirement) child).getState().getValue()]++;}}// Converts to EList so we can return, adding the total number of definable children to the last position.EList<Integer> stateCountList = new org.eclipse.emf.common.util.BasicEList<>();for (int count : stateCount)stateCountList.add(count);stateCountList.add(defChildrenCount);return stateCountList;
@5253#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Requirement#// Cannot replace a requirement instance with null.if (newRequirement == null) {it.unitn.disi.zanshin.core.CoreUtils.log.error("Cannot replace a requirement instance with null. A proper requirement instance should be provided."); //$NON-NLS-1$throw new IllegalArgumentException();}// Can only replace requirements of the same class.if (! newRequirement.eClass().equals(eClass())) {it.unitn.disi.zanshin.core.CoreUtils.log.error("Cannot replace a requirement instance of class {0} with one of class {1}. Instances should be of the same class.", eClass().getName(), newRequirement.eClass().getName()); //$NON-NLS-1$throw new IllegalArgumentException();}// Changes the parent-child relationship (if there's no parent, we're setting null over null, so no harm). When// elements have many-to-one bilateral associations, only the "one" side is manipulated. This is on purpose, as EMF// generated code will handle the inverse association automatically.Requirement parent = getParent();setParent(null);newRequirement.setParent(parent);it.unitn.disi.zanshin.core.CoreUtils.log.debug("Replacing requirement instances of class {0} ({1} -> {2})", eClass().getName(), this, newRequirement); //$NON-NLS-1$// After a piece of the requirements tree gets replaced by new instances (with possible different states), check if// the ancestors should also have their state reset. For instance, if a failed instance is replaced by a non-failing// one in an AND-refinement, the parent should change from Failed to Started or Undefined. Navigate up the tree.while (parent != null) {// This procedure only makes sense in definable requirements.if (parent instanceof DefinableRequirement) {DefinableRequirement req = (DefinableRequirement) parent;// Counts the number of children in each state and the number of definable children.EList<Integer> stateCount = req.getChildrenStateCount();int defChildrenCount = stateCount.get(stateCount.size() - 1);boolean doReset = false;// Checks the type of the requirement.switch (req.getRefinementType()) {case AND:// For failed AND-refined requirements, if none of its children failed, reset its state.doReset = (req.getState() == it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED) && (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED_VALUE) == 0);break;case OR:// For failed OR-refined requirements, if at least one of its children didn't fail, reset its state.doReset = (req.getState() == it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED) && (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED_VALUE) < defChildrenCount);break;}// Checks if a reset is in order.if (doReset) {// If no children have yet started, set the requirement also as Undefined.if (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.UNDEFINED_VALUE) == defChildrenCount)req.setState(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.UNDEFINED);// Otherwise, if at least one child has started, set it also as Started.else req.setState(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.STARTED);// Log what has just happened.it.unitn.disi.zanshin.core.CoreUtils.log.debug("The status of {0} has been reset to {1}", req.eClass().getName(), req.getState()); //$NON-NLS-1$}}// Next ancestor.parent = parent.getParent();}
@5254#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#DefinableRequirement#it.unitn.disi.zanshin.core.CoreUtils.log.debug("Requirement started: " + eClass().getName() + " (" + this + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$setState(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.STARTED);it.unitn.disi.zanshin.model.gore.Requirement parent = getParent();if ((parent != null) && (parent instanceof DefinableRequirement) && (((DefinableRequirement) parent).getState() == it.unitn.disi.zanshin.model.gore.DefinableRequirementState.UNDEFINED))((DefinableRequirement) parent).start();
@5255#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#DefinableRequirement#it.unitn.disi.zanshin.core.CoreUtils.log.debug("Requirement ended: " + eClass().getName() + " (" + this + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
@5256#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#DefinableRequirement#it.unitn.disi.zanshin.core.CoreUtils.log.debug("Requirement succeeded: " + eClass().getName() + " (" + this + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$setState(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.SUCCEEDED);end();it.unitn.disi.zanshin.model.gore.Requirement parent = getParent();if ((parent != null) && (parent instanceof DefinableRequirement)) {if (parent.getRefinementType() == it.unitn.disi.zanshin.model.gore.RefinementType.OR) ((DefinableRequirement) parent).success();else ((DefinableRequirement)parent).checkState();}
@5257#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#DefinableRequirement#it.unitn.disi.zanshin.core.CoreUtils.log.debug("Requirement failed: " + eClass().getName() + " (" + this + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$setState(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED);end();it.unitn.disi.zanshin.model.gore.Requirement parent = getParent();if ((parent != null) && (parent instanceof DefinableRequirement)) {if (parent.getRefinementType() == it.unitn.disi.zanshin.model.gore.RefinementType.AND) ((DefinableRequirement) parent).fail();else ((DefinableRequirement)parent).checkState();}
@5258#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#DefinableRequirement#// Counts the number of children in each state and the number of definable children.org.eclipse.emf.common.util.EList<Integer> stateCount = getChildrenStateCount();int defChildrenCount = stateCount.get(stateCount.size() - 1);// For AND-refined requirements, checks if all children have SUCCEEDED.if (getRefinementType() == it.unitn.disi.zanshin.model.gore.RefinementType.AND) {if (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.SUCCEEDED_VALUE) == defChildrenCount) success();}// For OR-refined requirements, checks if all children have FAILED.else {if (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED_VALUE) == defChildrenCount) fail();}
@5259#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#PerformativeRequirement#// Only process the cancellation if the requirement has not yet been canceled.if (getState() != it.unitn.disi.zanshin.model.gore.DefinableRequirementState.CANCELED) {it.unitn.disi.zanshin.core.CoreUtils.log.debug("Requirement canceled: " + eClass().getName() + " (" + this + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$setState(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.CANCELED);end();// Propagate the cancellation to the parent, depending if its definable/performative, and/or-refined.it.unitn.disi.zanshin.model.gore.Requirement parent = getParent();if ((parent != null) && (parent instanceof it.unitn.disi.zanshin.model.gore.DefinableRequirement)) {if (parent.getRefinementType() == it.unitn.disi.zanshin.model.gore.RefinementType.OR) ((it.unitn.disi.zanshin.model.gore.DefinableRequirement)parent).checkState();else if (parent instanceof PerformativeRequirement) ((PerformativeRequirement) parent).cancel();else ((it.unitn.disi.zanshin.model.gore.DefinableRequirement)parent).fail();}// Also propagate the cancellation to the children if and-refined and the children are performative.if (getRefinementType() == it.unitn.disi.zanshin.model.gore.RefinementType.AND)for (it.unitn.disi.zanshin.model.gore.Requirement child : getChildren())if (child instanceof PerformativeRequirement) ((PerformativeRequirement) child).cancel();}
@5260#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#PerformativeRequirement#// Counts the number of children in each state and the number of definable children.org.eclipse.emf.common.util.EList<Integer> stateCount = getChildrenStateCount();int defChildrenCount = stateCount.get(stateCount.size() - 1);// For AND-refined requirements, checks if all children have SUCCEEDED.if (getRefinementType() == it.unitn.disi.zanshin.model.gore.RefinementType.AND) {if (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.SUCCEEDED_VALUE) == defChildrenCount) success();}// For OR-refined requirements, checks if all children have FAILED or have been CANCELED.else {if (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.FAILED_VALUE) == defChildrenCount) fail();else if (stateCount.get(it.unitn.disi.zanshin.model.gore.DefinableRequirementState.CANCELED_VALUE) == defChildrenCount) cancel();}
@5261#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#QualityConstraint#// Performs the replacement as a normal requirement first.super.replaceWith(newRequirement);// Then, replace the relationship quality constraints have with softgoals.it.unitn.disi.zanshin.model.gore.Softgoal softgoal = getSoftgoal();setSoftgoal(null);((QualityConstraint) newRequirement).setSoftgoal(softgoal);
@5262#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#GoalModel#if (internalId == null) internalId = System.currentTimeMillis();return internalId;
@5263#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#GoalModel#// Returns a list of relations associated with the given indicator.EList<DifferentialRelation> filteredRelations = new org.eclipse.emf.common.util.BasicEList<>();if (indicator != null)for (DifferentialRelation relation : relations) {AwReq relationIndicator = relation.getIndicator(); if ((relationIndicator != null) && (relationIndicator.eClass().equals(indicator.eClass())))filteredRelations.add(relation);}return filteredRelations;
@5264#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#GoalModel#// Returns a list of relations associated with the given parameter.EList<DifferentialRelation> filteredRelations = new org.eclipse.emf.common.util.BasicEList<>();if (parameter != null)for (DifferentialRelation relation : relations) {Parameter relationParameter = relation.getParameter(); if ((relationParameter != null) && (relationParameter.eClass().equals(parameter.eClass())))filteredRelations.add(relation);}return filteredRelations;
@5265#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#GoalModel#// Returns a list of relations associated with the given indicator and the given parameter.EList<DifferentialRelation> filteredRelations = new org.eclipse.emf.common.util.BasicEList<>();if ((indicator != null) && (parameter != null))for (DifferentialRelation relation : relations) {AwReq relationIndicator = relation.getIndicator();Parameter relationParameter = relation.getParameter();if ((relationIndicator != null) && (relationIndicator.eClass().equals(indicator.eClass())) && (relationParameter != null) && (relationParameter.eClass().equals(parameter.eClass())))filteredRelations.add(relation);}return filteredRelations;
@5266#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#GoalModel#// Filters the relations by indicator and parameter.EList<DifferentialRelation> filteredRelations = filterRelations(indicator, parameter);// Creates a fake parameter for the value comparison.it.unitn.disi.zanshin.model.gore.Parameter param = parameter.createCopy();param.setValue(value);// Looks for a relation in which value is within bounds. Returns the first one found.for (DifferentialRelation relation : filteredRelations) if (param.withinBoundsOf(relation))return relation;// If not found, return null.return null;
@5267#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#String result = null;// Checks the metric of the parameter to know how to compare.try {switch (metric) {// FIXME: implement enumerated parameters.case ENUMERATED:break;// If the parameter is numeric, parses it and add as numbers.case INTEGER:case REAL:java.math.BigDecimal a = new java.math.BigDecimal(this.value);java.math.BigDecimal b = new java.math.BigDecimal(value);return a.add(b).toPlainString();}}// In case there are parsing errors (badly formatted numbers in the model), logs an error and returns null.catch (NumberFormatException e) {it.unitn.disi.zanshin.core.CoreUtils.log.error("Error during string->number conversion, either the parameter value ({0}) or the value to compare ({1}) are not numbers.", e, this.value, value); //$NON-NLS-1$}return result;
@5268#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#String result = null;// Checks the metric of the parameter to know how to compare.try {switch (metric) {// FIXME: implement enumerated parameters.case ENUMERATED:break;// If the parameter is numeric, parses it and multiply as numbers.case INTEGER:case REAL:java.math.BigDecimal a = new java.math.BigDecimal(this.value);java.math.BigDecimal b = new java.math.BigDecimal(value);return a.multiply(b).toPlainString();}}// In case there are parsing errors (badly formatted numbers in the model), logs an error and returns null.catch (NumberFormatException e) {it.unitn.disi.zanshin.core.CoreUtils.log.error("Error during string->number conversion, either the parameter value ({0}) or the value to compare ({1}) are not numbers.", e, this.value, value); //$NON-NLS-1$}return result;
@5269#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#String result = null;// Checks the metric of the parameter to know how to compare.try {switch (metric) {// FIXME: implement enumerated parameters.case ENUMERATED:break;// If the parameter is numeric, parses it and add as numbers.case INTEGER:case REAL:java.math.BigDecimal a = new java.math.BigDecimal(this.value);java.math.BigDecimal b = new java.math.BigDecimal(value);return a.subtract(b).toPlainString();}}// In case there are parsing errors (badly formatted numbers in the model), logs an error and returns null.catch (NumberFormatException e) {it.unitn.disi.zanshin.core.CoreUtils.log.error("Error during string->number conversion, either the parameter value ({0}) or the value to compare ({1}) are not numbers.", e, this.value, value); //$NON-NLS-1$}return result;
@5270#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#String lowerBound = relation.getLowerBound();String upperBound = relation.getUpperBound();// Checks for null comparisons.Boolean lowerCmp = greaterThan(lowerBound);Boolean upperCmp = fewerThan(upperBound);if ((lowerBound != null) && (lowerCmp == null)) return null;if ((upperBound != null) && (upperCmp == null)) return null;// Does the comparisons, but only if needed. When the bounds are null, they mean infinity.return (((lowerBound == null) || lowerCmp) && ((upperBound == null) || upperCmp));
@5271#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#// Creates a fake parameter and increments it by a unit.Parameter param = createCopy();param.increment(relation, unit);// Checks if the fake param, i.e., the param incremented by a unit, is still within boundaries.return param.withinBoundsOf(relation);
@5272#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#org.eclipse.emf.ecore.util.EcoreUtil.Copier copier = new org.eclipse.emf.ecore.util.EcoreUtil.Copier();Parameter copy = (Parameter) copier.copy(this);return copy;
@5273#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/gore.ecore#body#Parameter#// Obtains the operator from the differential relation to check the increment direction.String newValue = null;switch (relation.getOperator()) {case FEWER_THAN:newValue = subtractedFrom(value);break;case GREATER_THAN:newValue = addedTo(value);break;}// Changes the parameter's value to the new value.if (newValue != null)setValue(newValue);
@5274#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/graphdef.ecore#body#Link#let possibleDecorations:OrderedSet(LinkDecoration) = self.decoration->select(d | not d.participation.oclIsUndefined() and(--Is it a Link at the same level?d.participation = participation--Search for a participation that has participation.destination as instanceor d.participation.destination.getClassificationTreeAsType()->includes(participation.destination)))->asOrderedSet()inif (possibleDecorations->size() = 0) thennullelse--There is only one possible decorationif (possibleDecorations->size() = 1) thenpossibleDecorations->first()--There are more possible decorations (connection linking the same clabject twice) --Onlything that can be done here is to also use the participation name if one is existantelselet possibleDecorationsByParticipationName:OrderedSet(LinkDecoration) = possibleDecorations->select(d | d.participation.participationName() = participation.participationName())->asOrderedSet()inif (possibleDecorationsByParticipationName->size() = 1) thenpossibleDecorationsByParticipationName->first()--The last chance is to guess by using the navigabilityelseif (possibleDecorationsByParticipationName->size() > 1) thenlet possibleDecorationsByNavigability : OrderedSet(LinkDecoration) =possibleDecorationsByParticipationName->select(d | d.participation.navigable = participation.navigable)->asOrderedSet()inif (possibleDecorationsByNavigability->size() = 1) thenpossibleDecorationsByNavigability->first()elsenullendifelsenullendifendifendifendif
@5275#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/graphdef.ecore#body#Link#let possibleLabels:OrderedSet(LabelDescriptor) = self.label->select(l | not l.participation.oclIsUndefined() and(--Is it a Link at the same level?l.participation = participation--Search for a participation that has participation.destination as instanceor l.participation.destination.getClassificationTreeAsType()->includes(participation.destination)))->asOrderedSet()inif (possibleLabels->size() = 0) thennullelse--There is only one possible decorationif (possibleLabels->size() = 1) thenpossibleLabels->first()--There are more possible decorations (connection linking the same clabject twice) --Onlything that can be done here is to also use the participation name if one is existantelselet possibleLabelsByParticipationName:OrderedSet(LabelDescriptor) = possibleLabels->select(l | l.participation.participationName() = participation.participationName())->asOrderedSet()inif (possibleLabelsByParticipationName->size() = 1) thenpossibleLabelsByParticipationName->first()--The last chance is to guess by using the navigabilityelsepossibleLabelsByParticipationName->select(d | d.participation.navigable = participation.navigable)->asOrderedSet()->first()endifendifendif
@5276#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/graphdef.ecore#body#GraphicalDSLVisualizer#self.oclAsType(ecore::EObject).eContainer().eContainer().oclAsType(Element)
@5277#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Hadoop.ecore#body#ZNode#if (this instanceof org.apache.hadoop.eclipse.internal.model.ZooKeeperServer)return "/";else {String parentPath = getParent().getPath();return parentPath.endsWith("/") ? parentPath + getNodeName() : parentPath + "/" + getNodeName();}
@5278#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Hadoop.ecore#body#ZNode#if(this instanceof org.apache.hadoop.eclipse.internal.model.ZooKeeperServer)return (org.apache.hadoop.eclipse.internal.model.ZooKeeperServer) this;elsereturn getParent().getServer();
@5279#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/hedl.ecore#body#Type#if (this instanceof org.emftext.language.hedl.JavaType) {org.emftext.language.hedl.JavaType javaType = ( org.emftext.language.hedl.JavaType) this;if (canBePrimitive && javaType.getJavaPrimitiveType() != null) {return javaType.getJavaPrimitiveType().getName();} else {return javaType.getJavaClass().getName();}} else if (this instanceof org.emftext.language.hedl.NamedElement) {org.emftext.language.hedl.NamedElement entity = ( org.emftext.language.hedl.NamedElement) this;return entity.getName();}return null;
@5280#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/hedl.ecore#body#Entity#org.eclipse.emf.common.util.EList< org.emftext.language.hedl.Property> constructorProperties = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.hedl.Property>();for ( org.emftext.language.hedl.Property p : getProperties()) {if ((p.isReadonly() || !p.isNullable() || p.getType() instanceof org.emftext.language.hedl.Enum) &&(!p.isToMultiplicity())) {constructorProperties.add(p);}}return constructorProperties;
@5281#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/hedl.ecore#body#Property#java.lang.String mainType = getType().getJavaClassname(!isToMultiplicity() && !isNullable());if (isToMultiplicity()) {return "List<" + mainType + ">";} else {return mainType;}
@5282#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/hedl.ecore#body#Property#if (!isToMultiplicity() && !(getType() instanceof org.emftext.language.hedl.JavaType)) {return true;} else {return false;}
@5285#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#post_a#StateMachine#Transition.allInstances()->one(x | x.oclIsNew() and x.source.name = src and x.target.name = trg and self.transitions->includes(x))
@5286#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#post_b#StateMachine#StateMachine.allInstances()->forAll(x | x.states@pre = x.states)
@5287#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#post_c#StateMachine#State.allInstances()->forAll(x | x.name@pre = x.name)
@5288#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#post_d#StateMachine#Transition.allInstances@pre()->forAll(x | x.source@pre = x.source and x.target@pre = x.target)
@5289#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#post_e#StateMachine#State.allInstances@pre() = State.allInstances()
@5290#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#post_f#StateMachine#StateMachine.allInstances@pre() = StateMachine.allInstances()
@5291#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/HSM.ecore#inheritance#State#not self->closure(owner)->includes(self)
@5293#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Classifier#//method has to be specified in subclassesthrow new java.lang.UnsupportedOperationException();
@5294#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#ConcreteClassifier#if (this.eIsProxy()) { java.lang.String uriString = (( org.eclipse.emf.ecore.InternalEObject)this).eProxyURI().trimFragment().toString(); java.lang.String fullName = uriString.substring( org.emftext.language.java.JavaUniquePathConstructor.JAVA_CLASSIFIER_PATHMAP.length(),  uriString.length() - ".java".length()) + "$"; return getConcreteClassifierProxies(fullName, "*");}else {java.lang.String suffix = "";org.emftext.language.java.classifiers.ConcreteClassifier containingClass = this;while (containingClass.eContainer() instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {containingClass = ( org.emftext.language.java.classifiers.ConcreteClassifier) containingClass.eContainer();suffix = containingClass.getName() + org.emftext.language.java.JavaUniquePathConstructor.CLASSIFIER_SEPARATOR + suffix;}if (containingClass.eContainer() instanceof org.emftext.language.java.containers.CompilationUnit) {org.emftext.language.java.containers.CompilationUnit compilationUnit = ( org.emftext.language.java.containers.CompilationUnit) containingClass.eContainer();    java.lang.String fullName = compilationUnit.getNamespacesAsString() + suffix +     getName() + org.emftext.language.java.JavaUniquePathConstructor.CLASSIFIER_SEPARATOR;    return getConcreteClassifierProxies(fullName, "*");}}//for classes declared locally inside methods that are not registered in the class pathorg.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();//can not call ClassifierUtil.getAllMembers, because it will try to call this method!for( org.emftext.language.java.members.Member member : getMembers()) {if(member instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {result.add(( org.emftext.language.java.classifiers.ConcreteClassifier) member);}}for( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers()) {for( org.emftext.language.java.members.Member member : superClassifier.getMembers()) {if(member instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {result.add(( org.emftext.language.java.classifiers.ConcreteClassifier) member);}}}return result;
@5295#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#ConcreteClassifier#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> innerClassifierList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();innerClassifierList.addAll(getInnerClassifiers());for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers()) {org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> superInnerList = superClassifier.getInnerClassifiers();for ( org.emftext.language.java.classifiers.ConcreteClassifier superInner : superInnerList) {if (superInner.eIsProxy()) {superInner = ( org.emftext.language.java.classifiers.ConcreteClassifier) org.eclipse.emf.ecore.util.EcoreUtil.resolve(superInner, this);}if (!superInner.isHidden(this)) {innerClassifierList.add(superInner);}}}return innerClassifierList;
@5296#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#ConcreteClassifier#org.eclipse.emf.common.util.EList< org.emftext.language.java.types.ClassifierReference> typeReferenceList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.types.ClassifierReference>();if(this == null) {return typeReferenceList;}if (this instanceof org.emftext.language.java.classifiers.Class) {org.emftext.language.java.classifiers.Class javaClass = ( org.emftext.language.java.classifiers.Class) this;if (javaClass.getExtends() != null) {org.emftext.language.java.types.ClassifierReference classifierReference = javaClass.getExtends().getPureClassifierReference();typeReferenceList.add(classifierReference);org.emftext.language.java.classifiers.ConcreteClassifier target = ( org.emftext.language.java.classifiers.ConcreteClassifier) classifierReference.getTarget();if (!target.equals(getObjectClass())) {typeReferenceList.addAll(target.getSuperTypeReferences());}}for( org.emftext.language.java.types.TypeReference interfaceReference : javaClass.getImplements()) {org.emftext.language.java.types.ClassifierReference classifierReference = interfaceReference.getPureClassifierReference();typeReferenceList.add(classifierReference);typeReferenceList.addAll((( org.emftext.language.java.classifiers.ConcreteClassifier) classifierReference.getTarget()).getSuperTypeReferences());}} else if (this instanceof org.emftext.language.java.classifiers.Interface) {org.emftext.language.java.classifiers.Interface javaInterface = ( org.emftext.language.java.classifiers.Interface) this;for( org.emftext.language.java.types.TypeReference interfaceReference : javaInterface.getExtends()) {org.emftext.language.java.types.ClassifierReference classifierReference = interfaceReference.getPureClassifierReference();typeReferenceList.add(classifierReference);typeReferenceList.addAll((( org.emftext.language.java.classifiers.ConcreteClassifier) classifierReference.getTarget()).getSuperTypeReferences());}}return typeReferenceList;
@5297#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#ConcreteClassifier#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Member> memberList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.members.Member>();org.emftext.language.java.classifiers.ConcreteClassifier concreteClassifier = ( org.emftext.language.java.classifiers.ConcreteClassifier) this;memberList.addAll(concreteClassifier.getMembers());memberList.addAll(concreteClassifier.getDefaultMembers());//because inner classes are found in separate class filesmemberList.addAll(concreteClassifier.getAllInnerClassifiers());for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers()) {for( org.emftext.language.java.members.Member member : superClassifier.getMembers()) {if(member instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable) {org.emftext.language.java.modifiers.AnnotableAndModifiable modifiable = ( org.emftext.language.java.modifiers.AnnotableAndModifiable) member;if(!modifiable.isHidden(context)) {memberList.add(member);}}else {memberList.add(member);}}memberList.addAll(superClassifier.getDefaultMembers());}return memberList;
@5298#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Class#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();//collects all superclasses firstorg.emftext.language.java.classifiers.Class superClass = this;while (superClass != null && !superClass.eIsProxy() && !superClass.equals(getObjectClass())) {superClass = superClass.getSuperClass();if (superClass != null) {result.add(superClass);}}//collect all implemented interfacesfor ( org.emftext.language.java.types.TypeReference typeArg : this.getImplements()) {org.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier) typeArg.getTarget();if (superInterface != null) {result.add(superInterface);if (superInterface instanceof org.emftext.language.java.classifiers.Interface) {result.addAll((( org.emftext.language.java.classifiers.Interface)superInterface).getAllSuperClassifiers());}}}//collect all implemented interfaces of super classessuperClass = this.getSuperClass();if (superClass != null && !superClass.eIsProxy() && !superClass.equals(getObjectClass())) {result.addAll(superClass.getAllSuperClassifiers());}return result;
@5299#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Class#org.emftext.language.java.types.TypeReference superClassReference = this.getExtends();if (superClassReference == null) {superClassReference = this.getDefaultExtends();}if (superClassReference == null) {return null;}org.emftext.language.java.types.Type result = superClassReference.getTarget();if (result instanceof org.emftext.language.java.classifiers.Class) {return ( org.emftext.language.java.classifiers.Class) result;}return null;
@5300#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Class#if (getLibClass("Boolean").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createBoolean();}if (getLibClass("Byte").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createByte();}if (getLibClass("Character").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createChar();}if (getLibClass("Float").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createFloat();}if (getLibClass("Double").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createDouble();}if (getLibClass("Integer").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createInt();}if (getLibClass("Long").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createLong();}if (getLibClass("Short").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createShort();}if (getLibClass("Void").equals(this)) {return org.emftext.language.java.types.TypesFactory.eINSTANCE.createVoid();}return null;
@5301#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Interface#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();for ( org.emftext.language.java.types.TypeReference typeArg : this.getExtends()) {//use ConcreteClassifier instead of Interface because java.lang.Object can also act as implemented interfaceorg.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier) typeArg.getTarget();if (superInterface != null) {result.add(superInterface);if (superInterface instanceof org.emftext.language.java.classifiers.Interface) {result.addAll((( org.emftext.language.java.classifiers.Interface)superInterface).getAllSuperClassifiers());}}}for ( org.emftext.language.java.types.TypeReference typeArg : this.getDefaultExtends()) {//use ConcreteClassifier instead of Interface because java.lang.Object can also act as implemented interfaceorg.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier) typeArg.getTarget();if (superInterface != null) {result.add(superInterface);if (superInterface instanceof org.emftext.language.java.classifiers.Interface) {result.addAll((( org.emftext.language.java.classifiers.Interface)superInterface).getAllSuperClassifiers());}}}return result;
@5302#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Enumeration#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();//enumerations inherit from java.lang.Enumorg.emftext.language.java.classifiers.Class enumClass = getLibClass("Enum");result.add(enumClass);result.addAll(enumClass.getAllSuperClassifiers());//collect all implemented interfacesfor ( org.emftext.language.java.types.TypeReference typeArg : this.getImplements()) {org.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier) typeArg.getTarget();if (superInterface != null) {result.add(superInterface);if (superInterface instanceof org.emftext.language.java.classifiers.Interface) {result.addAll((( org.emftext.language.java.classifiers.Interface)superInterface).getAllSuperClassifiers());}}}return result;
@5303#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Enumeration#for( org.emftext.language.java.members.EnumConstant constant : getConstants()) {if (name.equals(constant.getName())) {return constant;} }return null;
@5304#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Annotation#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();result.add(getAnnotationInterface());return result;
@5305#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnonymousClass#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> superClassifierList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();org.emftext.language.java.classifiers.ConcreteClassifier superClassifier = getSuperClassifier();if (superClassifier != null) {superClassifierList.add(superClassifier);superClassifierList.addAll(superClassifier.getAllSuperClassifiers());}else {superClassifierList.add(getObjectClass());}return superClassifierList;
@5306#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnonymousClass#org.emftext.language.java.instantiations.NewConstructorCall ncCall = null;if (this.eContainer() instanceof org.emftext.language.java.instantiations.NewConstructorCall) {ncCall = ( org.emftext.language.java.instantiations.NewConstructorCall) this.eContainer();org.emftext.language.java.classifiers.ConcreteClassifier superClassifier = ( org.emftext.language.java.classifiers.ConcreteClassifier) ncCall.getTypeReference().getTarget();return superClassifier;}else if (this.eContainer() instanceof org.emftext.language.java.members.EnumConstant) {if (this.eContainer().eContainer() instanceof org.emftext.language.java.classifiers.Enumeration) {return ( org.emftext.language.java.classifiers.Enumeration) this.eContainer().eContainer();}}return null;
@5307#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnonymousClass#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Member> memberList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.members.Member>();memberList.addAll(this.getMembers());memberList.addAll(this.getDefaultMembers());org.emftext.language.java.instantiations.NewConstructorCall ncCall = null;if (this.eContainer() instanceof org.emftext.language.java.instantiations.NewConstructorCall) {ncCall = ( org.emftext.language.java.instantiations.NewConstructorCall) this.eContainer();;}if (ncCall == null) {return memberList;}else {org.emftext.language.java.classifiers.ConcreteClassifier classifier = ( org.emftext.language.java.classifiers.ConcreteClassifier) ncCall.getTypeReference().getTarget();if (classifier != null) {org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Member> superMemberList = classifier.getAllMembers(context);for( org.emftext.language.java.members.Member superMember : superMemberList) {//exclude private membersif(superMember instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable) {if (superMember.eIsProxy()) {superMember = ( org.emftext.language.java.members.Member) org.eclipse.emf.ecore.util.EcoreUtil.resolve(superMember, this);}org.emftext.language.java.modifiers.AnnotableAndModifiable modifiable = ( org.emftext.language.java.modifiers.AnnotableAndModifiable) superMember;if(!modifiable.isHidden(context)) {memberList.add(superMember);}}else {memberList.add(superMember);}}}return memberList;}
@5308#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();for( org.eclipse.emf.ecore.EObject classifier : org.emftext.language.java.JavaClasspath.get(this).getClassifiers(packageName, classifierQuery)) {result.add(( org.emftext.language.java.classifiers.ConcreteClassifier) org.eclipse.emf.ecore.util.EcoreUtil.resolve(classifier, this));}return result;
@5309#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();for( org.eclipse.emf.ecore.EObject classifier : org.emftext.language.java.JavaClasspath.get(this).getClassifiers(packageName, classifierQuery)) {result.add(( org.emftext.language.java.classifiers.ConcreteClassifier)classifier);}return result;
@5310#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject value = this;while (!(value instanceof org.emftext.language.java.annotations.AnnotationInstance) && value != null) {value = value.eContainer();}return ( org.emftext.language.java.annotations.AnnotationInstance) value;
@5311#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject value = this;while (!(value instanceof org.emftext.language.java.classifiers.AnonymousClass) && !(value instanceof org.emftext.language.java.classifiers.ConcreteClassifier) //do not jump over other classifiers && value != null) {value = value.eContainer();}if (!(value instanceof org.emftext.language.java.classifiers.AnonymousClass)) {return null;}return ( org.emftext.language.java.classifiers.AnonymousClass) value;
@5312#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject value = this;while (!(value instanceof org.emftext.language.java.classifiers.ConcreteClassifier) && value != null) {value = value.eContainer();}return ( org.emftext.language.java.classifiers.ConcreteClassifier) value;
@5313#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject value = this;while (!(value instanceof org.emftext.language.java.containers.CompilationUnit) && value != null) {value = value.eContainer();}return ( org.emftext.language.java.containers.CompilationUnit) value;
@5314#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.emftext.language.java.containers.CompilationUnit cu = getContainingCompilationUnit();if (cu == null) {return null;}int idx = cu.getNamespaces().size();if(cu.getName() != null) {char[] fullName = cu.getName().toCharArray();for(int i = 0; i < fullName.length; i++) {if (fullName[i] == '$') {idx--;}}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(new org.eclipse.emf.common.util.BasicEList< java.lang.String>(cu.getNamespaces().subList(0, idx)));
@5315#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.emftext.language.java.containers.CompilationUnit cu = getContainingCompilationUnit();if (cu == null) {return null;}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(cu.getNamespaces());
@5316#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.emftext.language.java.classifiers.ConcreteClassifier classifier = getContainingConcreteClassifier();if(classifier == null) {org.emftext.language.java.containers.CompilationUnit cu = getContainingCompilationUnit();//maybe the outer classifier is in an extra cuif (cu != null && cu.getName() != null && cu.getName().contains("$")) {classifier = ( org.emftext.language.java.classifiers.ConcreteClassifier) org.eclipse.emf.ecore.util.EcoreUtil.resolve(getConcreteClassifierProxy(cu.getNamespacesAsString()), this);if(classifier.eIsProxy())  {classifier = null;}}}return classifier;
@5317#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject container = this.eContainer();while (container != null) {if (type.isInstance(container)) {return container;}container = container.eContainer();}return null;
@5318#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#java.util.Iterator< org.eclipse.emf.ecore.EObject> it = this.eAllContents();while (it.hasNext()) {org.eclipse.emf.ecore.EObject next = it.next();if (type.isInstance(next)) {return next;}}return null;
@5319#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject container = this.eContainer();while (container != null) {if (type.isInstance(container)) {return type.cast(container);}container = container.eContainer();}return null;
@5320#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#java.util.Iterator< org.eclipse.emf.ecore.EObject> it = this.eAllContents();while (it.hasNext()) {org.eclipse.emf.ecore.EObject next = it.next();if (type.isInstance(next)) {return type.cast(next);}}return null;
@5321#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.common.util.EList< org.eclipse.emf.ecore.EObject> children = new org.eclipse.emf.common.util.BasicEList< org.eclipse.emf.ecore.EObject>();java.util.Iterator< org.eclipse.emf.ecore.EObject> it = this.eAllContents();while (it.hasNext()) {org.eclipse.emf.ecore.EObject next = it.next();if (type.isInstance(next)) {children.add(next);}}return children;
@5322#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.common.util.EList<T> children = new org.eclipse.emf.common.util.BasicEList<T>();java.util.Iterator< org.eclipse.emf.ecore.EObject> it = this.eAllContents();while (it.hasNext()) {org.eclipse.emf.ecore.EObject next = it.next();if (type.isInstance(next)) {children.add(type.cast(next));}}return children;
@5323#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.common.util.EList< java.lang.String> comments = new org.eclipse.emf.common.util.BasicEList< java.lang.String>();if (this instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable) {for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier aom : (( org.emftext.language.java.modifiers.AnnotableAndModifiable) this).getAnnotationsAndModifiers()) {comments.addAll(aom.getComments());}}for ( org.emftext.commons.layout.LayoutInformation layoutInformation : getLayoutInformations()) {java.lang.String text = layoutInformation.getHiddenTokenText();if (text.contains("/*") || text.contains("//")) {comments.add(layoutInformation.getHiddenTokenText().trim());}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(comments);
@5324#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject container = this.eContainer();org.eclipse.emf.ecore.EObject statement = this;while (container != null) {if (container instanceof org.emftext.language.java.statements.StatementListContainer) {break;}container = container.eContainer();statement = statement.eContainer();}if (container == null) {throw new java.lang.IllegalArgumentException("Element " + this + " is not contained in a StatementListContainer.");}org.emftext.language.java.statements.StatementListContainer statementListContainer = ( org.emftext.language.java.statements.StatementListContainer) container;org.eclipse.emf.common.util.EList< org.emftext.language.java.statements.Statement> statements = statementListContainer.getStatements();int index = statements.indexOf(statement);statements.add(index, statementToAdd);
@5325#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Commentable#org.eclipse.emf.ecore.EObject container = this.eContainer();org.eclipse.emf.ecore.EObject statement = this;while (container != null) {if (container instanceof org.emftext.language.java.statements.StatementListContainer) {break;}container = container.eContainer();statement = statement.eContainer();}if (container == null) {throw new java.lang.IllegalArgumentException("Element " + this + " is not contained in a StatementListContainer.");}org.emftext.language.java.statements.StatementListContainer statementListContainer = ( org.emftext.language.java.statements.StatementListContainer) container;org.eclipse.emf.common.util.EList< org.emftext.language.java.statements.Statement> statements = statementListContainer.getStatements();int index = statements.indexOf(statement);if (index == statements.size() - 1) {// statement is the last onestatements.add(statementToAdd);} else {statements.add(index + 1, statementToAdd);}
@5326#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#NamespaceAwareElement#java.lang.String containerName = ""; for( java.util.Iterator< java.lang.String> it = getNamespaces().iterator(); it.hasNext(); ) {java.lang.String namespaceFragment = it.next();//does it point at a classifier or a package as container?java.lang.String assumedPackageName    = containerName + namespaceFragment + org.emftext.language.java.JavaUniquePathConstructor.PACKAGE_SEPARATOR;java.lang.String assumedClassifierName = containerName + namespaceFragment + org.emftext.language.java.JavaUniquePathConstructor.CLASSIFIER_SEPARATOR;if (it.hasNext()) {if ( org.emftext.language.java.JavaClasspath.get(this).existsPackage(assumedClassifierName)) {containerName = assumedClassifierName;}else {//assume packagecontainerName = assumedPackageName;}}else {if ( org.emftext.language.java.JavaClasspath.get(this).existsPackage(assumedPackageName)) {//a package is always available as keycontainerName = assumedPackageName;}else {//assume classifier that is not key, but value in the mapcontainerName = assumedClassifierName;}}}return containerName;
@5327#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#NamespaceAwareElement#java.lang.String fullQualifiedName = getNamespacesAsString();if (fullQualifiedName == null || fullQualifiedName.endsWith( org.emftext.language.java.JavaUniquePathConstructor.PACKAGE_SEPARATOR)) {return null;}//cut the trailing separatorfullQualifiedName = fullQualifiedName.substring(0,fullQualifiedName.length() - 1);return ( org.emftext.language.java.classifiers.ConcreteClassifier) org.eclipse.emf.ecore.util.EcoreUtil.resolve(getConcreteClassifierProxy(fullQualifiedName), this);
@5328#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#JavaRoot#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> defaultImportList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();java.lang.String packageName = getNamespacesAsString();defaultImportList.addAll(getConcreteClassifierProxies(packageName, "*"));return defaultImportList;
@5329#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#CompilationUnit#if (name == null) {return null;}for( org.emftext.language.java.classifiers.ConcreteClassifier candidate : getClassifiers()) {if(name.equals(candidate.getName())) {return candidate;}}return null;
@5330#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#CompilationUnit#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> defaultImportList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();java.lang.String packageName = getNamespacesAsString();//locally defined in this containerdefaultImportList.addAll(getClassifiers());defaultImportList.addAll(getConcreteClassifierProxies(packageName, "*"));return defaultImportList;
@5331#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#CompilationUnit#if (getClassifiers().size() != 1) {return null;}if (getClassifiers().get(0) instanceof org.emftext.language.java.classifiers.Class) {return ( org.emftext.language.java.classifiers.Class) getClassifiers().get(0);}return null;
@5332#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#CompilationUnit#if (getClassifiers().size() != 1) {return null;}if (getClassifiers().get(0) instanceof org.emftext.language.java.classifiers.Interface) {return ( org.emftext.language.java.classifiers.Interface) getClassifiers().get(0);}return null;
@5333#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#CompilationUnit#if (getClassifiers().size() != 1) {return null;}if (getClassifiers().get(0) instanceof org.emftext.language.java.classifiers.Annotation) {return ( org.emftext.language.java.classifiers.Annotation) getClassifiers().get(0);}return null;
@5334#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#CompilationUnit#if (getClassifiers().size() != 1) {return null;}if (getClassifiers().get(0) instanceof org.emftext.language.java.classifiers.Enumeration) {return ( org.emftext.language.java.classifiers.Enumeration) getClassifiers().get(0);}return null;
@5335#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Package#java.lang.String packageName = ""; for( java.util.Iterator< java.lang.String> it = getNamespaces().iterator(); it.hasNext(); ) {java.lang.String namespaceFragment = it.next();packageName = packageName + namespaceFragment + org.emftext.language.java.JavaUniquePathConstructor.PACKAGE_SEPARATOR;}return packageName;
@5336#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Package#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> defaultImportList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();java.lang.String packageName = getNamespacesAsString();defaultImportList.addAll(getConcreteClassifierProxies(packageName + getName(), "*"));return defaultImportList;
@5337#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Expression#org.emftext.language.java.classifiers.Class stringClass = getStringClass();org.emftext.language.java.types.Type type = null;if (this instanceof org.emftext.language.java.references.Reference) {org.emftext.language.java.references.Reference reference = ( org.emftext.language.java.references.Reference) this;//navigate down referenceswhile(reference.getNext() != null) {reference = reference.getNext();}type = reference.getReferencedType();}else if (this instanceof org.emftext.language.java.literals.Literal) {type = (( org.emftext.language.java.literals.Literal) this).getType();}else if (this instanceof org.emftext.language.java.expressions.CastExpression) {type = (( org.emftext.language.java.expressions.CastExpression)this).getTypeReference().getTarget();}else if (this instanceof org.emftext.language.java.expressions.AssignmentExpression) {type = (( org.emftext.language.java.expressions.AssignmentExpression) this).getChild().getOneType(alternative);}else if (this instanceof org.emftext.language.java.expressions.ConditionalExpression &&(( org.emftext.language.java.expressions.ConditionalExpression)this).getExpressionIf() != null) {if (alternative) {type = (( org.emftext.language.java.expressions.ConditionalExpression)this).getExpressionElse().getOneType(alternative);}else {type = (( org.emftext.language.java.expressions.ConditionalExpression)this).getExpressionIf().getOneType(alternative);}}else if (this instanceof org.emftext.language.java.expressions.EqualityExpression ||this instanceof org.emftext.language.java.expressions.RelationExpression ||this instanceof org.emftext.language.java.expressions.ConditionalOrExpression ||this instanceof org.emftext.language.java.expressions.ConditionalAndExpression ||this instanceof org.emftext.language.java.expressions.InstanceOfExpression ) {type = getLibClass("Boolean");}else if (this instanceof org.emftext.language.java.expressions.AdditiveExpression ||this instanceof org.emftext.language.java.expressions.MultiplicativeExpression ||this instanceof org.emftext.language.java.expressions.InclusiveOrExpression ||this instanceof org.emftext.language.java.expressions.ExclusiveOrExpression ||this instanceof org.emftext.language.java.expressions.AndExpression ||this instanceof org.emftext.language.java.expressions.ShiftExpression ) {if (this instanceof org.emftext.language.java.expressions.AdditiveExpression) {org.emftext.language.java.expressions.AdditiveExpression additiveExpression = ( org.emftext.language.java.expressions.AdditiveExpression) this;for( org.emftext.language.java.expressions.Expression subExp : additiveExpression.getChildren()) {if (stringClass.equals(subExp.getOneType(alternative))) {//special case: string concatenationreturn stringClass;}}}@SuppressWarnings("unchecked")org.emftext.language.java.expressions.Expression subExp = (( org.eclipse.emf.common.util.EList< org.emftext.language.java.expressions.Expression>) this.eGet(this.eClass().getEStructuralFeature("children"))).get(0);return subExp.getOneType(alternative);}else if (this instanceof org.emftext.language.java.expressions.UnaryExpression) {org.emftext.language.java.expressions.Expression subExp = (( org.emftext.language.java.expressions.UnaryExpression)this).getChild();return subExp.getOneType(alternative);}else for( org.eclipse.emf.common.util.TreeIterator< org.eclipse.emf.ecore.EObject> i = this.eAllContents(); i.hasNext(); ) {org.eclipse.emf.ecore.EObject next = i.next();org.emftext.language.java.types.Type nextType = null;if (next instanceof org.emftext.language.java.expressions.PrimaryExpression) {if (next instanceof org.emftext.language.java.references.Reference) {org.emftext.language.java.references.Reference ref = ( org.emftext.language.java.references.Reference) next;//navigate down referenceswhile(ref.getNext() != null) {ref = ref.getNext();}next = ref;}if (next instanceof org.emftext.language.java.literals.Literal) {nextType = (( org.emftext.language.java.literals.Literal) next).getType();}else if (next instanceof org.emftext.language.java.expressions.CastExpression) {nextType = (( org.emftext.language.java.expressions.CastExpression)next).getTypeReference().getTarget();}else {nextType = (( org.emftext.language.java.references.Reference) next).getReferencedType();}i.prune();}if (nextType != null) {type = nextType;//in the special case that this is an expression with//some string included, everything is converted to stringif (stringClass.equals(type)) {break;}}}//type can be null in cases of unresolved/unresolvable proxiesreturn type;
@5338#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Expression#long size = 0;org.emftext.language.java.arrays.ArrayTypeable arrayType = null;if (this instanceof org.emftext.language.java.expressions.NestedExpression && (( org.emftext.language.java.expressions.NestedExpression)this).getNext() == null) {return (( org.emftext.language.java.expressions.NestedExpression) this).getExpression().getArrayDimension()- (( org.emftext.language.java.expressions.NestedExpression)this).getArraySelectors().size();}if (this instanceof org.emftext.language.java.expressions.ConditionalExpression &&(( org.emftext.language.java.expressions.ConditionalExpression)this).getExpressionIf() != null) {return (( org.emftext.language.java.expressions.ConditionalExpression)this).getExpressionIf().getArrayDimension();}if (this instanceof org.emftext.language.java.expressions.AssignmentExpression) {org.emftext.language.java.expressions.Expression value = (( org.emftext.language.java.expressions.AssignmentExpression) this).getValue();if (value == null) {return 0;}return value.getArrayDimension();}if (this instanceof org.emftext.language.java.expressions.InstanceOfExpression) {return 0;}if (this instanceof org.emftext.language.java.references.Reference) {org.emftext.language.java.references.Reference reference = ( org.emftext.language.java.references.Reference) this;while (reference.getNext() != null) {reference = reference.getNext();}//an array clone? -> dimension defined by cloned arrayif (reference instanceof org.emftext.language.java.references.ElementReference && reference.getPrevious() != null) {org.emftext.language.java.references.ReferenceableElement target = (( org.emftext.language.java.references.ElementReference)reference).getTarget();if (target instanceof org.emftext.language.java.members.Method) {if("clone".equals((( org.emftext.language.java.members.Method)target).getName())) {reference = ( org.emftext.language.java.references.Reference) reference.eContainer();}}}if (reference instanceof org.emftext.language.java.references.ElementReference) {org.emftext.language.java.references.ElementReference elementReference = ( org.emftext.language.java.references.ElementReference) reference;if (elementReference.getTarget() instanceof org.emftext.language.java.arrays.ArrayTypeable) {arrayType = ( org.emftext.language.java.arrays.ArrayTypeable) elementReference.getTarget();}if (elementReference.getTarget() instanceof org.emftext.language.java.variables.AdditionalLocalVariable) {org.emftext.language.java.variables.AdditionalLocalVariable additionalLocalVariable = ( org.emftext.language.java.variables.AdditionalLocalVariable) elementReference.getTarget();arrayType = ( org.emftext.language.java.variables.LocalVariable) additionalLocalVariable.eContainer();size += additionalLocalVariable.getArrayDimensionsAfter().size();size -= arrayType.getArrayDimensionsAfter().size();}if (elementReference.getTarget() instanceof org.emftext.language.java.members.AdditionalField) {org.emftext.language.java.members.AdditionalField additionalField = ( org.emftext.language.java.members.AdditionalField) elementReference.getTarget();arrayType = ( org.emftext.language.java.members.Field) additionalField.eContainer();size += additionalField.getArrayDimensionsAfter().size();size -= arrayType.getArrayDimensionsAfter().size();}}else if (this instanceof org.emftext.language.java.arrays.ArrayTypeable) {size += (( org.emftext.language.java.arrays.ArrayTypeable)this).getArrayDimensionsBefore().size() + (( org.emftext.language.java.arrays.ArrayTypeable)this).getArrayDimensionsAfter().size();if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter) {size++;}}size -= reference.getArraySelectors().size();}else if (this instanceof org.emftext.language.java.arrays.ArrayTypeable) {size += (( org.emftext.language.java.arrays.ArrayTypeable)this).getArrayDimensionsBefore().size() + (( org.emftext.language.java.arrays.ArrayTypeable)this).getArrayDimensionsAfter().size();if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter) {size++;}}if(this instanceof org.emftext.language.java.arrays.ArrayInstantiationBySize) {size += (( org.emftext.language.java.arrays.ArrayInstantiationBySize)this).getSizes().size();}if(arrayType != null) {size += arrayType.getArrayDimension();}return size;
@5339#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#TypeParameter#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();for( org.emftext.language.java.types.TypeReference typeRef : getExtendTypes()) {org.emftext.language.java.types.Type type = typeRef.getTarget();if (type instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {result.add(( org.emftext.language.java.classifiers.ConcreteClassifier)type);}if (type instanceof org.emftext.language.java.classifiers.Classifier) {result.addAll((( org.emftext.language.java.classifiers.Classifier)type).getAllSuperClassifiers());}}return result;
@5340#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#TypeParameter#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Member> memberList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.members.Member>();org.emftext.language.java.util.UniqueEList< org.emftext.language.java.types.Type> possiblyVisibleSuperClassifier = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.types.Type>();for( org.emftext.language.java.types.TypeReference typeReference : (( org.emftext.language.java.generics.TypeParameter)this).getExtendTypes()) {possiblyVisibleSuperClassifier.add(typeReference.getTarget());}for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier : getAllSuperClassifiers()) {for( org.emftext.language.java.members.Member member : superClassifier.getMembers()) {if(member instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable) {org.emftext.language.java.modifiers.AnnotableAndModifiable modifiable = ( org.emftext.language.java.modifiers.AnnotableAndModifiable) member;if(!modifiable.isHidden(context)) {memberList.add(member);}else if (possiblyVisibleSuperClassifier.contains(superClassifier)) {memberList.add(member);}}else {memberList.add(member);}}memberList.addAll(superClassifier.getDefaultMembers());}return memberList;
@5341#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#TypeParameter#org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> resultList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.types.Type>();org.emftext.language.java.generics.TypeParametrizable typeParameterDeclarator = ( org.emftext.language.java.generics.TypeParametrizable) this.eContainer();org.emftext.language.java.references.Reference parentReference = null;org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> prevTypeList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.types.Type>();if (reference != null && reference.getPrevious() instanceof org.emftext.language.java.expressions.NestedExpression) {org.emftext.language.java.expressions.NestedExpression nestedExpression = ( org.emftext.language.java.expressions.NestedExpression) reference.getPrevious();org.emftext.language.java.expressions.Expression expression = null;if (nestedExpression.getExpression() instanceof org.emftext.language.java.references.Reference) {expression = nestedExpression.getExpression();}else if (nestedExpression.getExpression() instanceof org.emftext.language.java.expressions.ConditionalExpression) {expression = (( org.emftext.language.java.expressions.ConditionalExpression)nestedExpression.getExpression()).getExpressionIf();}if (expression instanceof org.emftext.language.java.references.Reference) {org.emftext.language.java.references.Reference expressionReference = ( org.emftext.language.java.references.Reference) expression;//navigate down referenceswhile(expressionReference.getNext() != null) {expressionReference = expressionReference.getNext();}parentReference = expressionReference;org.emftext.language.java.types.Type prevType = nestedExpression.getExpression().getType();if(prevType instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {for( org.eclipse.emf.ecore.EObject aType : (( org.emftext.language.java.util.TemporalCompositeClassifier)prevType).getSuperTypes()) {prevTypeList.add(( org.emftext.language.java.types.Type)aType);}}else {prevTypeList.add(prevType);}}else if (nestedExpression.getExpression() instanceof org.emftext.language.java.expressions.CastExpression) {prevTypeList.add((( org.emftext.language.java.expressions.CastExpression)nestedExpression.getExpression()).getTypeReference().getTarget());}}else if (reference != null && reference.getPrevious() != null) {parentReference = reference.getPrevious();while (parentReference instanceof org.emftext.language.java.references.SelfReference) {if ((( org.emftext.language.java.references.SelfReference)parentReference).getSelf() instanceof org.emftext.language.java.literals.Super) {if (parentReference.eContainer() instanceof org.emftext.language.java.references.Reference) {parentReference = ( org.emftext.language.java.references.Reference) parentReference.eContainer();}else {org.emftext.language.java.classifiers.ConcreteClassifier containingClassifier = reference.getContainingConcreteClassifier();if (containingClassifier != null) {prevTypeList.add(containingClassifier);}parentReference = null;}}else {break;}}if (parentReference != null) {org.emftext.language.java.types.Type prevType = parentReference.getReferencedType();if(prevType instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {for( org.eclipse.emf.ecore.EObject aType : (( org.emftext.language.java.util.TemporalCompositeClassifier)prevType).getSuperTypes()) {prevTypeList.add(( org.emftext.language.java.types.Type)aType);}}else {prevTypeList.add(prevType);}}}else if (reference != null) {//prev type is on of the containing classes which can still bind by inheritanceorg.emftext.language.java.classifiers.ConcreteClassifier containingClassifier = reference.getContainingConcreteClassifier();while (containingClassifier != null) {prevTypeList.add(containingClassifier);org.eclipse.emf.ecore.EObject container = containingClassifier.eContainer();if (container instanceof org.emftext.language.java.commons.Commentable) {containingClassifier = (( org.emftext.language.java.commons.Commentable) container).getContainingConcreteClassifier();} else {containingClassifier = null;}}}for( org.emftext.language.java.types.Type prevType : prevTypeList) {int typeParameterIndex = -1;if (typeParameterDeclarator instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {typeParameterIndex = typeParameterDeclarator.getTypeParameters().indexOf(this);if(reference != null) {org.emftext.language.java.types.ClassifierReference classifierReference = null;if(parentReference instanceof org.emftext.language.java.references.ElementReference) {org.emftext.language.java.references.ReferenceableElement prevReferenced = (( org.emftext.language.java.references.ElementReference) parentReference).getTarget();if(prevReferenced instanceof org.emftext.language.java.types.TypedElement) {org.emftext.language.java.types.TypeReference prevTypeReference = (( org.emftext.language.java.types.TypedElement)prevReferenced).getTypeReference ();if (prevTypeReference != null) {classifierReference = prevTypeReference.getPureClassifierReference(); }}}if(parentReference instanceof org.emftext.language.java.types.TypedElement) {//e.g. New Constructor Callorg.emftext.language.java.types.TypeReference prevParentReference = (( org.emftext.language.java.types.TypedElement)parentReference).getTypeReference ();if (prevParentReference != null) {classifierReference = prevParentReference.getPureClassifierReference(); }}if (prevType instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {//bound through inheritance?int idx = 0;for( org.emftext.language.java.types.ClassifierReference superClassifierReference : (( org.emftext.language.java.classifiers.ConcreteClassifier) prevType).getSuperTypeReferences()) {if (typeParameterIndex < superClassifierReference.getTypeArguments().size())  {//is this an argument for the correct class?if (typeParameterDeclarator.equals(superClassifierReference.getTarget()) ||(( org.emftext.language.java.classifiers.Classifier)superClassifierReference.getTarget()).getAllSuperClassifiers().contains(typeParameterDeclarator)) { org.emftext.language.java.generics.TypeArgument arg = superClassifierReference.getTypeArguments().get(typeParameterIndex);if (arg instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {resultList.add(idx, (( org.emftext.language.java.generics.QualifiedTypeArgument) arg).getTypeReference().getTarget());idx++;}}}}org.eclipse.emf.common.util.EList< org.emftext.language.java.generics.TypeArgument> typeArgumentList;org.emftext.language.java.util.TemporalTypeArgumentHolder ttah = null;for( org.eclipse.emf.common.notify.Adapter adapter : prevType.eAdapters()) {if (adapter instanceof org.emftext.language.java.util.TemporalTypeArgumentHolder) {ttah = ( org.emftext.language.java.util.TemporalTypeArgumentHolder) adapter; prevType.eAdapters().remove(ttah);break;}}if (ttah != null) {typeArgumentList = ttah.getTypeArguments();}else if (classifierReference != null) {typeArgumentList = classifierReference.getTypeArguments();}else {typeArgumentList = org.eclipse.emf.common.util.ECollections.emptyEList();}if (typeParameterIndex < typeArgumentList.size())  {org.emftext.language.java.generics.TypeArgument arg = typeArgumentList.get(typeParameterIndex);if (arg instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {org.emftext.language.java.types.ClassifierReference theTypeRef = (( org.emftext.language.java.generics.QualifiedTypeArgument) arg).getTypeReference().getPureClassifierReference();if (theTypeRef != null) {org.emftext.language.java.types.Type theType = theTypeRef.getBoundTarget(parentReference);if (theType != null) {if (!theTypeRef.getTypeArguments().isEmpty()) {ttah = new org.emftext.language.java.util.TemporalTypeArgumentHolder();ttah.getTypeArguments().addAll(theTypeRef.getTypeArguments());theType.eAdapters().add(ttah);}resultList.add(0, theType);}}}if (arg instanceof org.emftext.language.java.generics.ExtendsTypeArgument) {for( org.emftext.language.java.types.TypeReference extendedType : (( org.emftext.language.java.generics.ExtendsTypeArgument) arg).getExtendTypes()) {resultList.add(0, extendedType.getBoundTarget(parentReference));}}}}else if (prevType instanceof org.emftext.language.java.generics.TypeParameter) {//the prev. type parameter, although unbound, may contain type restrictions through extends resultList.add(prevType);for( org.emftext.language.java.types.TypeReference extendedRef : (( org.emftext.language.java.generics.TypeParameter) prevType).getExtendTypes()) {org.emftext.language.java.classifiers.ConcreteClassifier extended = ( org.emftext.language.java.classifiers.ConcreteClassifier)extendedRef.getTarget();int idx = (( org.emftext.language.java.generics.TypeParametrizable)prevType.eContainer()).getTypeParameters().indexOf(prevType);if (extended.getTypeParameters().size() > idx) {//also add more precise bindings from extensionsresultList.add(extended.getTypeParameters().get(idx));}}}}if(reference != null && reference.eContainer() instanceof org.emftext.language.java.references.ReflectiveClassReference) {if (reference.eContainer().eContainer() instanceof org.emftext.language.java.references.Reference) {//the ".class" instantiation implicitly binds the T parameter of java.lang.Class to the class itselfresultList.add(0, (( org.emftext.language.java.references.Reference)reference.eContainer().eContainer()).getReferencedType());}}}}if (typeParameterDeclarator instanceof org.emftext.language.java.members.Method) {if (reference instanceof org.emftext.language.java.references.MethodCall) {org.emftext.language.java.members.Method method = ( org.emftext.language.java.members.Method) typeParameterDeclarator;org.emftext.language.java.references.MethodCall methodCall = ( org.emftext.language.java.references.MethodCall) reference;if(method.getTypeParameters().size() == methodCall.getCallTypeArguments().size()) {org.emftext.language.java.generics.TypeArgument typeArgument = methodCall.getCallTypeArguments().get(method.getTypeParameters().indexOf(this));if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {resultList.add(0, (( org.emftext.language.java.generics.QualifiedTypeArgument)typeArgument).getTypeReference().getBoundTarget(parentReference)); } }//class type parameterint idx = method.getParameters().indexOf(typeReference.eContainer());//method type parameterif (idx == -1) {for( org.emftext.language.java.parameters.Parameter parameter : method.getParameters()) {for ( org.emftext.language.java.generics.TypeArgument typeArgument : parameter.getTypeArguments()) {if(typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {if((( org.emftext.language.java.generics.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {idx = method.getParameters().indexOf(parameter);}}}org.emftext.language.java.types.ClassifierReference paramTypeReference = parameter.getTypeReference().getPureClassifierReference();if (paramTypeReference != null) {for ( org.emftext.language.java.generics.TypeArgument typeArgument : paramTypeReference.getTypeArguments()) {if(typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {if(this.equals((( org.emftext.language.java.generics.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget())) {idx = method.getParameters().indexOf(parameter);}}}}}}if (idx < methodCall.getArguments().size() && idx >= 0) {org.emftext.language.java.expressions.Expression argument = methodCall.getArguments().get(idx);org.emftext.language.java.parameters.Parameter parameter = method.getParameters().get(idx);org.emftext.language.java.types.ClassifierReference parameterType = parameter.getTypeReference().getPureClassifierReference();if (argument instanceof org.emftext.language.java.instantiations.NewConstructorCall) {org.emftext.language.java.types.ClassifierReference argumentType = (( org.emftext.language.java.instantiations.NewConstructorCall)argument).getTypeReference().getPureClassifierReference();if (argumentType != null && parameterType.getTypeArguments().size() == argumentType.getTypeArguments().size()) {for( org.emftext.language.java.generics.TypeArgument typeArgument : parameterType.getTypeArguments()) {if(typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {if((( org.emftext.language.java.generics.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {resultList.add(0, (( org.emftext.language.java.generics.QualifiedTypeArgument)argumentType.getTypeArguments().get(parameterType.getTypeArguments().indexOf(typeArgument))).getTypeReference().getTarget());}}}}if (argumentType != null && parameterType.getTarget() instanceof org.emftext.language.java.generics.TypeParameter) {resultList.add(0,argumentType.getTarget());}}else if (parameterType != null && argument instanceof org.emftext.language.java.references.Reference) {org.emftext.language.java.references.Reference argReference = ( org.emftext.language.java.references.Reference) argument;while (argReference.getNext() instanceof org.emftext.language.java.references.Reference &&!(argReference.getNext() instanceof org.emftext.language.java.references.ReflectiveClassReference) ) {argReference = argReference.getNext();}if (argReference instanceof org.emftext.language.java.references.ElementReference) {org.emftext.language.java.references.ElementReference elementReference = ( org.emftext.language.java.references.ElementReference) argReference;while (elementReference.getNext() instanceof org.emftext.language.java.references.ElementReference) {elementReference = ( org.emftext.language.java.references.ElementReference) elementReference.getNext();}if (elementReference.getTarget() instanceof org.emftext.language.java.types.TypedElement) {org.emftext.language.java.types.ClassifierReference argumentType = (( org.emftext.language.java.types.TypedElement)elementReference.getTarget()).getTypeReference().getPureClassifierReference();if (argumentType != null && parameterType.getTypeArguments().size() == argumentType.getTypeArguments().size()) {for( org.emftext.language.java.generics.TypeArgument typeArgument : parameterType.getTypeArguments()) {if(typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {if((( org.emftext.language.java.generics.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {int idx2 = parameterType.getTypeArguments().indexOf(typeArgument);if (argumentType.getTypeArguments().get(idx2) instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {resultList.add(0, (( org.emftext.language.java.generics.QualifiedTypeArgument)argumentType.getTypeArguments().get(idx2)).getTypeReference().getTarget());}else if (argumentType.getTypeArguments().get(idx2) instanceof org.emftext.language.java.generics.ExtendsTypeArgument) {for( org.emftext.language.java.types.TypeReference extendedType : (( org.emftext.language.java.generics.ExtendsTypeArgument) argumentType.getTypeArguments().get(idx2)).getExtendTypes()) {resultList.add(0, extendedType.getTarget());}}}}}}if (argumentType != null && parameterType.getTarget() instanceof org.emftext.language.java.generics.TypeParameter) {resultList.add(0,argumentType.getTarget());}}if(elementReference.getNext() instanceof org.emftext.language.java.references.ReflectiveClassReference) {if (parameterType.getTypeArguments().size() == 1) {for( org.emftext.language.java.generics.TypeArgument typeArgument : parameterType.getTypeArguments()) {if(typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument) {if((( org.emftext.language.java.generics.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {resultList.add(0, elementReference.getReferencedType());}}}}}}else {if (parameterType.getTarget() instanceof org.emftext.language.java.generics.TypeParameter) {while (argReference.getNext() instanceof org.emftext.language.java.references.Reference) {argReference = argReference.getNext();}resultList.add(0, (( org.emftext.language.java.references.Reference) argReference).getReferencedType());}}}}//return typeif(method.equals(typeReference.eContainer())) {//bound by the type of a method argument?org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.Classifier> allSuperTypes = null;for( org.emftext.language.java.parameters.Parameter parameter : method.getParameters()) {if(this.equals(parameter.getTypeReference().getTarget())) {idx = method.getParameters().indexOf(parameter);org.emftext.language.java.classifiers.Classifier argumentType = ( org.emftext.language.java.classifiers.Classifier) methodCall.getArguments().get(idx).getType();if(allSuperTypes == null) {allSuperTypes = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.Classifier>();allSuperTypes.add(argumentType);allSuperTypes.addAll(argumentType.getAllSuperClassifiers());}else {allSuperTypes.add(argumentType);org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.Classifier> allOtherSuperTypes = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.Classifier>();allOtherSuperTypes.add(argumentType);allOtherSuperTypes.addAll(argumentType.getAllSuperClassifiers());org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.Classifier> temp = allSuperTypes;allSuperTypes = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.Classifier>();for( org.emftext.language.java.classifiers.Classifier st : allOtherSuperTypes) {if(temp.contains(st)) {allSuperTypes.add(st);}}}} }//all types given by all bindingsif (allSuperTypes != null) {resultList.addAll(allSuperTypes);}}}}//remove nullsfor( java.util.Iterator<?> it = resultList.iterator(); it.hasNext(); ) {if (it.next() == null) {it.remove();}}if(resultList.isEmpty() || (resultList.size() == 1 && resultList.get(0).equals(this))) {return this;}else {org.emftext.language.java.util.TemporalCompositeClassifier temp = new org.emftext.language.java.util.TemporalCompositeClassifier(this);for( org.emftext.language.java.types.Type aResult : resultList) {if(aResult instanceof org.emftext.language.java.types.PrimitiveType) {aResult = (( org.emftext.language.java.types.PrimitiveType) aResult).wrapPrimitiveType();}if (aResult instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {//flattentemp.getSuperTypes().addAll((( org.emftext.language.java.util.TemporalCompositeClassifier)aResult).getSuperTypes());}else {temp.getSuperTypes().add(( org.emftext.language.java.classifiers.Classifier) aResult);}}temp.getSuperTypes().add(this);return temp;}
@5342#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Import#java.lang.String containerName = getNamespacesAsString();if (containerName == null) {return null;}java.lang.String fullQualifiedName = containerName + name;return getConcreteClassifierProxy(fullQualifiedName);
@5343#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Import#java.lang.String containerName = getNamespacesAsString();if (containerName == null) {return org.eclipse.emf.common.util.ECollections.emptyEList();}return getConcreteClassifierProxies(containerName, "*");
@5344#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Import#org.emftext.language.java.classifiers.ConcreteClassifier concreteClassifier = getClassifierAtNamespaces();if(concreteClassifier == null || concreteClassifier.eIsProxy()) {return org.eclipse.emf.common.util.ECollections.emptyEList();}org.eclipse.emf.common.util.EList< org.emftext.language.java.commons.NamedElement> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.commons.NamedElement>();result.addAll(concreteClassifier.getAllMembers(this));if (concreteClassifier instanceof org.emftext.language.java.classifiers.Enumeration) {result.addAll((( org.emftext.language.java.classifiers.Enumeration)concreteClassifier).getConstants());}return result;
@5345#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#ImportingElement#org.eclipse.emf.common.util.EList< org.emftext.language.java.classifiers.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.classifiers.ConcreteClassifier>();for( org.eclipse.emf.ecore.EObject classifier : org.emftext.language.java.JavaClasspath.get(this).getDefaultImports()) {result.add(( org.emftext.language.java.classifiers.ConcreteClassifier)classifier);}return result;
@5346#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#for( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.classifiers.ConcreteClassifier && name.equals(member.getName())) {return ( org.emftext.language.java.classifiers.ConcreteClassifier) member;} }for( org.emftext.language.java.members.Member member : getDefaultMembers()) {if (member instanceof org.emftext.language.java.classifiers.ConcreteClassifier && name.equals(member.getName())) {return ( org.emftext.language.java.classifiers.ConcreteClassifier) member;} }return null;
@5347#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#for( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.members.Field && name.equals(member.getName())) {return ( org.emftext.language.java.members.Field) member;} }for( org.emftext.language.java.members.Member member : getDefaultMembers()) {if (member instanceof org.emftext.language.java.members.Field && name.equals(member.getName())) {return ( org.emftext.language.java.members.Field) member;} }return null;
@5348#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.emftext.language.java.members.Method found = null;for( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.members.Method && name.equals(member.getName())) {if(found != null) {return null;}else {found = ( org.emftext.language.java.members.Method) member;}} } for( org.emftext.language.java.members.Member member : getDefaultMembers()) {if (member instanceof org.emftext.language.java.members.Method && name.equals(member.getName())) {if(found != null) {return null;}else {found = ( org.emftext.language.java.members.Method) member;}} }return found;
@5349#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Method> methodList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.members.Method>();for ( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.members.Method) {methodList.add(( org.emftext.language.java.members.Method) member);}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(methodList);
@5350#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Method> methodsToRemove = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.members.Method>();for ( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.members.Method) {if (name.equals(member.getName())) {methodsToRemove.add(( org.emftext.language.java.members.Method) member);}}}getMembers().removeAll(methodsToRemove);
@5351#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Member> matchingMembers = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.members.Member>();for ( org.emftext.language.java.members.Member member : getMembers()) {if (name.equals(member.getName())) {matchingMembers.add(member);}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(matchingMembers);
@5352#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.emftext.language.java.members.Field field = org.emftext.language.java.members.MembersFactory.eINSTANCE.createField();field.setName(name);org.emftext.language.java.types.ClassifierReference typeRef = org.emftext.language.java.types.TypesFactory.eINSTANCE.createClassifierReference();typeRef.setTarget(getConcreteClassifier(qualifiedTypeName));field.setTypeReference(typeRef);getMembers().add(field);return field;
@5353#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Field> fieldList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.members.Field>();for ( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.members.Field) {fieldList.add(( org.emftext.language.java.members.Field) member);}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(fieldList);
@5354#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#MemberContainer#org.eclipse.emf.common.util.EList< org.emftext.language.java.members.Constructor> constructorList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.members.Constructor>();for ( org.emftext.language.java.members.Member member : getMembers()) {if (member instanceof org.emftext.language.java.members.Constructor) {constructorList.add(( org.emftext.language.java.members.Constructor) member);}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(constructorList);
@5355#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AdditionalField#long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();return size;
@5356#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Method#org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> argumentTypeList = methodCall.getArgumentTypes();org.eclipse.emf.common.util.EList< org.emftext.language.java.parameters.Parameter> parameterList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.parameters.Parameter>(this.getParameters());org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> parameterTypeList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.types.Type>();for( org.emftext.language.java.parameters.Parameter parameter : parameterList)  {//determine types before messing with the parametersparameterTypeList.add(parameter.getTypeReference().getBoundTarget(methodCall));}if (!parameterList.isEmpty()) {org.emftext.language.java.parameters.Parameter lastParameter = parameterList.get(parameterList.size() - 1);org.emftext.language.java.types.Type lastParameterType  = parameterTypeList.get(parameterTypeList.size() - 1);;if (lastParameter instanceof org.emftext.language.java.parameters.VariableLengthParameter) {//in case of variable length add/remove some parameterswhile(parameterList.size() < argumentTypeList.size()) {if (needsPerfectMatch) return false;parameterList.add(lastParameter);parameterTypeList.add(lastParameterType);}if(parameterList.size() > argumentTypeList.size()) {if (needsPerfectMatch) return false;parameterList.remove(lastParameter);parameterTypeList.remove(parameterTypeList.size() - 1);}}}if (parameterList.size() == argumentTypeList.size()) { boolean parametersMatch = true;for (int i = 0; i < argumentTypeList.size(); i++) {org.emftext.language.java.parameters.Parameter  parameter = parameterList.get(i);org.emftext.language.java.expressions.Expression argument = methodCall.getArguments().get(i);org.emftext.language.java.types.Type parameterType = parameterTypeList.get(i);org.emftext.language.java.types.Type argumentType  = argumentTypeList.get(i);if (argumentType == null || parameterType == null) {return false;}if (parameterType != null && argumentType != null) {if (!parameterType.eIsProxy() || !argumentType.eIsProxy()) {if (needsPerfectMatch) {parametersMatch = parametersMatch&& argumentType.equalsType(argument.getArrayDimension(),parameterType, parameter.getArrayDimension());}else {parametersMatch = parametersMatch && argumentType.isSuperType(argument.getArrayDimension(),parameterType, parameter);}}else {return false;}}else {return false;}}return parametersMatch; } return false;
@5357#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Method#if (!isMethodForCall(methodCall, false)) {return false;}if (otherMethod.isMethodForCall(methodCall, true)) {if (isMethodForCall(methodCall, true)) {//we both match perfectly; lets compare our return typesorg.emftext.language.java.types.Type target = getTypeReference().getTarget();if (target instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {if ((( org.emftext.language.java.classifiers.ConcreteClassifier) target).getAllSuperClassifiers().contains(otherMethod.getTypeReference().getTarget())) {// I am the more concrete typereturn true;}}}//the other already matches perfectly; I am not betterreturn false;}if (!otherMethod.isMethodForCall(methodCall, false)) {//I match, but the other does notreturn true;}//we both match, I am only better if I match perfectly <- //TODO #763: this is not enough: we need to check for "nearest subtype" herereturn isMethodForCall(methodCall, true);
@5358#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Method#long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter) {size++;}return size;
@5359#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#if (this.eIsProxy()) {return false;}//all members of an interface are public by defaultif (this.eContainer() instanceof org.emftext.language.java.classifiers.Interface) {return false;}if(context.eIsProxy()) {context = ( org.emftext.language.java.commons.Commentable) org.eclipse.emf.ecore.util.EcoreUtil.resolve(context, this);}org.emftext.language.java.classifiers.ConcreteClassifier contextClassifier = context.getContainingConcreteClassifier(); if (!(eContainer() instanceof org.emftext.language.java.commons.Commentable)) {return true;}org.emftext.language.java.classifiers.ConcreteClassifier myClassifier = (( org.emftext.language.java.commons.Commentable) eContainer()).getParentConcreteClassifier();//special case: self reference to outer instanceif(context instanceof org.emftext.language.java.references.Reference) {if ((( org.emftext.language.java.references.Reference)context).getPrevious() instanceof org.emftext.language.java.references.SelfReference) {org.emftext.language.java.references.SelfReference selfReference = ( org.emftext.language.java.references.SelfReference) (( org.emftext.language.java.references.Reference)context).getPrevious();if (selfReference.getSelf() instanceof org.emftext.language.java.literals.Self) {if(selfReference.getPrevious() != null) {org.emftext.language.java.types.Type type = selfReference.getPrevious().getReferencedType();if (type instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {contextClassifier = ( org.emftext.language.java.classifiers.ConcreteClassifier) type;}}}}}for( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier : this.getAnnotationsAndModifiers()) {if(modifier instanceof org.emftext.language.java.modifiers.Private) {if (myClassifier.equalsType(0, contextClassifier,0)) {return false;}return true;}if(modifier instanceof org.emftext.language.java.modifiers.Public) {return false;}if(modifier instanceof org.emftext.language.java.modifiers.Protected) {//package visibilityif (getContainingPackageName() != null && getContainingPackageName().equals(context.getContainingPackageName())) {return false;}//try outer classifiers as well while(contextClassifier instanceof org.emftext.language.java.classifiers.Classifier) {if (contextClassifier.isSuperType(0, myClassifier, null)) {return false;}org.eclipse.emf.ecore.EObject container = contextClassifier.eContainer();if (container instanceof org.emftext.language.java.commons.Commentable) {contextClassifier = (( org.emftext.language.java.commons.Commentable) container).getParentConcreteClassifier();} else {contextClassifier = null;}if (contextClassifier != null && !contextClassifier.eIsProxy() && contextClassifier.isSuperType(0, myClassifier, null)) {return false;}}//visibility through anonymous subclassorg.emftext.language.java.classifiers.AnonymousClass anonymousClass = context.getContainingAnonymousClass();while (anonymousClass != null) {contextClassifier = anonymousClass.getSuperClassifier();if (contextClassifier == null) {return true;}if (contextClassifier.isSuperType(0, myClassifier, null)) {return false;}org.eclipse.emf.ecore.EObject container = anonymousClass.eContainer();if (container instanceof org.emftext.language.java.commons.Commentable) {anonymousClass = (( org.emftext.language.java.commons.Commentable) container).getContainingAnonymousClass();} else {anonymousClass = null;}}return true;}}//package visibility?if (getContainingPackageName() != null && getContainingPackageName().equals(context.getContainingPackageName())) {return false;}return true;
@5360#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#//all members of an interface are static by defaultif (this.eContainer() instanceof org.emftext.language.java.classifiers.Interface) {return true;}for( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier : this.getAnnotationsAndModifiers()) {if(modifier instanceof org.emftext.language.java.modifiers.Static) {return true;}}return false;
@5361#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#java.util.List< org.emftext.language.java.modifiers.AnnotationInstanceOrModifier> modifiers = getAnnotationsAndModifiers();java.util.List< org.emftext.language.java.modifiers.AnnotationInstanceOrModifier> modifiersToRemove = new java.util.ArrayList< org.emftext.language.java.modifiers.AnnotationInstanceOrModifier>();for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier : modifiers) {if (modifierType.isInstance(modifier)) {modifiersToRemove.add(modifier);}}modifiers.removeAll(modifiersToRemove);
@5362#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#if (isPublic()) {return;}removeModifier( org.emftext.language.java.modifiers.Private.class);removeModifier( org.emftext.language.java.modifiers.Protected.class);getAnnotationsAndModifiers().add( org.emftext.language.java.modifiers.ModifiersFactory.eINSTANCE.createPublic());
@5363#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#if (isPrivate()) {return;}removeModifier( org.emftext.language.java.modifiers.Public.class);removeModifier( org.emftext.language.java.modifiers.Protected.class);getAnnotationsAndModifiers().add( org.emftext.language.java.modifiers.ModifiersFactory.eINSTANCE.createPrivate());
@5364#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#if (isProtected()) {return;}removeModifier( org.emftext.language.java.modifiers.Private.class);removeModifier( org.emftext.language.java.modifiers.Public.class);getAnnotationsAndModifiers().add( org.emftext.language.java.modifiers.ModifiersFactory.eINSTANCE.createProtected());
@5365#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#org.eclipse.emf.common.util.EList< org.emftext.language.java.modifiers.AnnotationInstanceOrModifier> elements = getAnnotationsAndModifiers();org.eclipse.emf.common.util.EList< org.emftext.language.java.modifiers.Modifier> modifiers = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.modifiers.Modifier>(); for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier next : elements) {if (next instanceof org.emftext.language.java.modifiers.Modifier) {modifiers.add(( org.emftext.language.java.modifiers.Modifier) next);}}return org.eclipse.emf.common.util.ECollections.unmodifiableEList(modifiers);
@5366#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#java.util.List< org.emftext.language.java.modifiers.Modifier> modifiers = getModifiers();org.eclipse.emf.common.util.EList< org.emftext.language.java.modifiers.AnnotationInstanceOrModifier> elements = getAnnotationsAndModifiers();elements.removeAll(modifiers);
@5367#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#java.util.List< org.emftext.language.java.modifiers.AnnotationInstanceOrModifier> modifiers = getAnnotationsAndModifiers();for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier : modifiers) {if (type.isInstance(modifier)) {return true;}}return false;
@5368#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AnnotableAndModifiable#getAnnotationsAndModifiers().add(newModifier);
@5369#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Reference#if (this instanceof org.emftext.language.java.literals.Literal) {return (( org.emftext.language.java.literals.Literal) this).getType();}org.emftext.language.java.types.Type type = null;//referenced element point to a typeif (this instanceof org.emftext.language.java.types.TypedElement) {org.emftext.language.java.types.TypeReference typeRef = (( org.emftext.language.java.types.TypedElement) this).getTypeReference();type = typeRef.getBoundTarget(this);}//element points to this or superelse if (this instanceof org.emftext.language.java.references.SelfReference) {org.emftext.language.java.types.Type thisClass = null;if (this.getPrevious() != null) {thisClass = this.getPrevious().getReferencedType();}else {org.emftext.language.java.classifiers.AnonymousClass anonymousContainer = getContainingAnonymousClass();if (anonymousContainer != null) {thisClass = anonymousContainer;}else {thisClass = getContainingConcreteClassifier();}}//find super class if "self" is "super"if ((( org.emftext.language.java.references.SelfReference) this).getSelf() instanceof org.emftext.language.java.literals.Super) {if (thisClass instanceof org.emftext.language.java.classifiers.Class) {return (( org.emftext.language.java.classifiers.Class)thisClass).getSuperClass();}if (thisClass instanceof org.emftext.language.java.classifiers.AnonymousClass) {return (( org.emftext.language.java.classifiers.AnonymousClass)thisClass).getSuperClassifier();}}return thisClass;}//element points to the object's class objectelse if(this instanceof org.emftext.language.java.references.ReflectiveClassReference) {return getClassClass();}//referenced element points to an element with a typeelse if (this instanceof org.emftext.language.java.references.ElementReference) {org.emftext.language.java.references.ReferenceableElement target = ( org.emftext.language.java.references.ReferenceableElement) (( org.emftext.language.java.references.ElementReference) this).getTarget();if (target.eIsProxy()) {type = null;}//Navigate through AdditionalLocalVariable or Fieldif(target instanceof org.emftext.language.java.variables.AdditionalLocalVariable) {target = ( org.emftext.language.java.references.ReferenceableElement) target.eContainer();}if(target instanceof org.emftext.language.java.members.AdditionalField) {target = ( org.emftext.language.java.references.ReferenceableElement) target.eContainer();}if (target instanceof org.emftext.language.java.types.TypedElement) {org.emftext.language.java.types.TypeReference typeRef = (( org.emftext.language.java.types.TypedElement) target).getTypeReference();if (typeRef != null) {type = typeRef.getBoundTarget(this);}}else if (target instanceof org.emftext.language.java.types.Type /*e.g. Annotation*/ ) {return ( org.emftext.language.java.types.Type) target;}else if(target instanceof org.emftext.language.java.members.EnumConstant) {type = ( org.emftext.language.java.classifiers.Enumeration)target.eContainer();}}//Strings may also appear as referenceelse if (this instanceof org.emftext.language.java.references.StringReference) {return getStringClass();}else if (this instanceof org.emftext.language.java.expressions.NestedExpression) {type = (( org.emftext.language.java.expressions.NestedExpression) this).getExpression().getType();}else if (this instanceof org.emftext.language.java.references.PrimitiveTypeReference) {type = (( org.emftext.language.java.references.PrimitiveTypeReference)this).getPrimitiveType();}else {assert(false);}return type;
@5370#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Reference#if (eContainer() instanceof org.emftext.language.java.references.Reference) {  org.emftext.language.java.references.Reference container = ( org.emftext.language.java.references.Reference) eContainer( ) ;   if (this.equals(container.getNext())) { return container; }}return null;
@5371#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Argumentable#org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> resultList = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.java.types.Type>();for( org.emftext.language.java.expressions.Expression exp : getArguments()) {org.emftext.language.java.types.Type type = exp.getType();resultList.add(type);}return resultList;
@5372#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#StatementListContainer#org.eclipse.emf.common.util.EList< org.emftext.language.java.variables.LocalVariable> localVariables = getChildrenByType( org.emftext.language.java.variables.LocalVariable.class);for ( org.emftext.language.java.variables.LocalVariable localVariable : localVariables) {if (localVariable.getName().equals(name)) {return localVariable;}}return null;
@5373#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Type#org.emftext.language.java.types.Type _this = this;//comparison for type parametersif (_this instanceof org.emftext.language.java.generics.TypeParameter) {org.emftext.language.java.generics.TypeParameter typeParameter = ( org.emftext.language.java.generics.TypeParameter) _this;for ( org.emftext.language.java.types.TypeReference referencedType : typeParameter.getExtendTypes()) {if (referencedType.getTarget() != null && !referencedType.getTarget().eIsProxy() && referencedType.getTarget().equalsType(arrayDimension, otherType, otherArrayDimension)) {return true;}}if (typeParameter.getExtendTypes().isEmpty()) {if (getObjectClass().equalsType(arrayDimension, otherType, otherArrayDimension)) {return true;}}} if (otherType instanceof org.emftext.language.java.generics.TypeParameter) {org.emftext.language.java.generics.TypeParameter typeParameter = ( org.emftext.language.java.generics.TypeParameter) otherType;for ( org.emftext.language.java.types.TypeReference referencedType : typeParameter.getExtendTypes()) {if (referencedType.getTarget() != null && !referencedType.getTarget().eIsProxy() && equalsType(arrayDimension, referencedType.getTarget(), otherArrayDimension)) {return true;}}if (typeParameter.getExtendTypes().isEmpty()) {if (equalsType(arrayDimension, getObjectClass(), otherArrayDimension)) {return true;}}}//do comparison on the classifier levelif (_this instanceof org.emftext.language.java.types.PrimitiveType) {_this = (( org.emftext.language.java.types.PrimitiveType)_this).wrapPrimitiveType();}if (otherType instanceof org.emftext.language.java.types.PrimitiveType) {otherType = (( org.emftext.language.java.types.PrimitiveType) otherType).wrapPrimitiveType();}if (arrayDimension == otherArrayDimension &&otherType instanceof org.emftext.language.java.classifiers.Classifier && _this instanceof org.emftext.language.java.classifiers.Classifier &&(otherType.equals(_this))) {return true;}return false;
@5374#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Type#if(otherType == null) {return false;}org.emftext.language.java.types.Type _this = this;if (_this instanceof org.emftext.language.java.util.TemporalCompositeClassifier || otherType instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> _thisTypeList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.types.Type>();org.eclipse.emf.common.util.EList< org.emftext.language.java.types.Type> otherTypeList = new org.emftext.language.java.util.UniqueEList< org.emftext.language.java.types.Type>();if (_this instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {for( org.eclipse.emf.ecore.EObject aType : (( org.emftext.language.java.util.TemporalCompositeClassifier)_this).getSuperTypes()) {_thisTypeList.add(( org.emftext.language.java.types.Type)aType);}}else {_thisTypeList.add(_this);}if (otherType instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {for( org.eclipse.emf.ecore.EObject aType : (( org.emftext.language.java.util.TemporalCompositeClassifier)otherType).getSuperTypes()) {otherTypeList.add(( org.emftext.language.java.types.Type)aType);}}else {otherTypeList.add(_this);}for( org.emftext.language.java.types.Type one_thisType : _thisTypeList) {for( org.emftext.language.java.types.Type oneOtherType : otherTypeList) {boolean result = one_thisType.isSuperType(arrayDimension, oneOtherType, otherArrayType);if (result) {return true;}}}return false;}//if I am a void, I am of every typeif (_this.equals(getLibClass("Void"))) {return true;}//if the other is Object I am a subtype in any case (also array dimensions do not matter)if (otherType.equals(getObjectClass())) {return true;}//String, primitives, and arrays are serializableorg.emftext.language.java.classifiers.ConcreteClassifier serializableClass = ( org.emftext.language.java.classifiers.ConcreteClassifier) org.eclipse.emf.ecore.util.EcoreUtil.resolve(getConcreteClassifierProxy("java.io.Serializable"), _this);if (otherType.equals(serializableClass)) {if (_this.equals(serializableClass)) { return true;}else if (_this.equals(getStringClass())) { return true;}else if (_this instanceof org.emftext.language.java.types.PrimitiveType) {return true;}else if (arrayDimension > 0) {//all arrays are serializablereturn true;}}//if one of us is a parameter to the best of my knowledge, we might matchif(_this instanceof org.emftext.language.java.generics.TypeParameter) {return true;}if(otherType instanceof org.emftext.language.java.generics.TypeParameter ) {return true;}//if array dimensions do not match, I am no subtypeboolean isTypeParameter = false;if (otherArrayType instanceof org.emftext.language.java.types.TypedElement) {org.emftext.language.java.types.Type type = (( org.emftext.language.java.types.TypedElement)otherArrayType).getTypeReference().getTarget();isTypeParameter = type instanceof org.emftext.language.java.generics.TypeParameter;}boolean isVariableLengthParameter = otherArrayType instanceof org.emftext.language.java.parameters.VariableLengthParameter;long otherArrayDim = 0;if(otherArrayType != null) {otherArrayDim = otherArrayType.getArrayDimension();}if (isTypeParameter && isVariableLengthParameter) {if(arrayDimension != otherArrayDim && arrayDimension != otherArrayDim- 1 && arrayDimension < otherArrayDim) {return false;}}else if (isTypeParameter) {if(arrayDimension < otherArrayDim) {return false;}}else if (isVariableLengthParameter) {if(arrayDimension != otherArrayDim && arrayDimension != otherArrayDim- 1) {return false;}}else {if(arrayDimension != otherArrayDim) {return false;}}//annotationsif(_this instanceof org.emftext.language.java.classifiers.Annotation && (otherType.equals(getAnnotationInterface()) ||(( org.emftext.language.java.classifiers.ConcreteClassifier)_this).getAllSuperClassifiers().contains(getAnnotationInterface()))) {return true;}//do comparison on the classifier levelif (_this instanceof org.emftext.language.java.types.PrimitiveType) {_this = (( org.emftext.language.java.types.PrimitiveType) _this).wrapPrimitiveType();}if (otherType instanceof org.emftext.language.java.types.PrimitiveType) {otherType = (( org.emftext.language.java.types.PrimitiveType) otherType).wrapPrimitiveType();}//compare in type hierarchyif (otherType instanceof org.emftext.language.java.classifiers.ConcreteClassifier && _this instanceof org.emftext.language.java.classifiers.ConcreteClassifier &&(otherType.equals(_this) || (( org.emftext.language.java.classifiers.ConcreteClassifier)_this).getAllSuperClassifiers().contains(otherType))) {return true;}if (otherType instanceof org.emftext.language.java.classifiers.ConcreteClassifier && _this instanceof org.emftext.language.java.classifiers.AnonymousClass &&(( org.emftext.language.java.classifiers.AnonymousClass)_this).getAllSuperClassifiers().contains(otherType)) {return true;}//everything can be implicitly casted to CharSequence, so I match when the other type is a CharSequenceorg.emftext.language.java.classifiers.Interface charSequenceClass = getLibInterface("CharSequence");if (otherType instanceof org.emftext.language.java.classifiers.ConcreteClassifier) {if(otherType.equals(charSequenceClass) ||(( org.emftext.language.java.classifiers.ConcreteClassifier)otherType).getAllSuperClassifiers().contains(charSequenceClass)) {return true;}}//there are some specifics for primitive types not reflected in the type hierarchyif (otherType instanceof org.emftext.language.java.classifiers.Class) {org.emftext.language.java.types.PrimitiveType primitiveType = (( org.emftext.language.java.classifiers.Class) otherType).unWrapPrimitiveType();if(primitiveType == null) {return false;}otherType = primitiveType;}if (_this instanceof org.emftext.language.java.classifiers.Class) {org.emftext.language.java.types.PrimitiveType primitiveType = (( org.emftext.language.java.classifiers.Class) _this).unWrapPrimitiveType();if(primitiveType == null) {return false;}_this = primitiveType;}if (_this instanceof org.emftext.language.java.types.Boolean) {if (otherType instanceof org.emftext.language.java.types.Boolean) {return true;}else {return false;}}if (_this instanceof org.emftext.language.java.types.Byte ||_this instanceof org.emftext.language.java.types.Int ||_this instanceof org.emftext.language.java.types.Short ||_this instanceof org.emftext.language.java.types.Long ||_this instanceof org.emftext.language.java.types.Char) {if (otherType instanceof org.emftext.language.java.types.Byte ||otherType instanceof org.emftext.language.java.types.Int ||otherType instanceof org.emftext.language.java.types.Short ||otherType instanceof org.emftext.language.java.types.Long ||otherType instanceof org.emftext.language.java.types.Char ||otherType instanceof org.emftext.language.java.types.Float ||otherType instanceof org.emftext.language.java.types.Double) {return true;}else {return false;}}if (_this instanceof org.emftext.language.java.types.Float ||_this instanceof org.emftext.language.java.types.Double) {if (otherType instanceof org.emftext.language.java.types.Float ||otherType instanceof org.emftext.language.java.types.Double) {return true;}else {return false;}}return false;
@5375#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Type#//method has to be specified in subclassesthrow new java.lang.UnsupportedOperationException();
@5376#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#TypeReference#if (type == null) {return;}if (type.eIsProxy()) {return;}if (this instanceof org.emftext.language.java.types.NamespaceClassifierReference) {org.emftext.language.java.types.NamespaceClassifierReference nsClassifierReference = ( org.emftext.language.java.types.NamespaceClassifierReference) this;nsClassifierReference.getClassifierReferences().clear();nsClassifierReference.getNamespaces().clear();nsClassifierReference.getNamespaces().addAll(type.getContainingContainerName());org.emftext.language.java.types.ClassifierReference classifierRef = org.emftext.language.java.types.TypesFactory.eINSTANCE.createClassifierReference();classifierRef.setTarget(type);nsClassifierReference.getClassifierReferences().add(classifierRef);}
@5377#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#TypeReference#org.emftext.language.java.types.Type type = null;if (this instanceof org.emftext.language.java.types.ClassifierReference || this instanceof org.emftext.language.java.types.NamespaceClassifierReference) {org.emftext.language.java.types.ClassifierReference classifierRef = getPureClassifierReference();if (classifierRef != null) {type = classifierRef.getTarget();}if (reference instanceof org.emftext.language.java.references.MethodCall) {org.emftext.language.java.references.MethodCall potentialCloneCall = ( org.emftext.language.java.references.MethodCall) reference;//clone returns the type of the cloned in the case of arraysorg.emftext.language.java.references.ReferenceableElement potentialCloneCallTarget = potentialCloneCall.getTarget();if (potentialCloneCallTarget != null && !potentialCloneCallTarget.eIsProxy() && "clone".equals(potentialCloneCallTarget.getName()))  {if (potentialCloneCall.getPrevious() instanceof org.emftext.language.java.references.ElementReference) {org.emftext.language.java.references.ElementReference prevRef = ( org.emftext.language.java.references.ElementReference) potentialCloneCall.getPrevious();if (prevRef.getTarget() instanceof org.emftext.language.java.arrays.ArrayTypeable && (( org.emftext.language.java.arrays.ArrayTypeable)prevRef.getTarget()).getArrayDimension() > 0) {type = prevRef.getReferencedType();}}}}}else if(this instanceof org.emftext.language.java.types.PrimitiveType) {return ( org.emftext.language.java.types.PrimitiveType) this;}//resolve parameter to real typeif (type instanceof org.emftext.language.java.generics.TypeParameter) {type = (( org.emftext.language.java.generics.TypeParameter) type).getBoundType(this, reference);}if (type != null && type.eIsProxy()) {//this may happen, when e.g. a super type is resolved. It is ok.return null;}return type;
@5378#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#TypeReference#org.emftext.language.java.types.ClassifierReference classifierReference = null;if (this instanceof org.emftext.language.java.types.ClassifierReference) {classifierReference = ( org.emftext.language.java.types.ClassifierReference) this;}if (this instanceof org.emftext.language.java.types.NamespaceClassifierReference) {org.emftext.language.java.types.NamespaceClassifierReference nsClassifierReference = ( org.emftext.language.java.types.NamespaceClassifierReference) this;if (!nsClassifierReference.getClassifierReferences().isEmpty()) {int lastIndex = nsClassifierReference.getClassifierReferences().size() - 1;classifierReference = nsClassifierReference.getClassifierReferences().get(lastIndex);}}return classifierReference;
@5379#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#PrimitiveType#org.emftext.language.java.classifiers.Class javaClass = wrapPrimitiveType();return javaClass.getAllMembers(context);
@5380#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Variable#long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter) {size++;}return size;
@5381#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Variable#org.emftext.language.java.statements.ExpressionStatement callStatement = org.emftext.language.java.statements.StatementsFactory.eINSTANCE.createExpressionStatement();callStatement.setExpression(createMethodCall(methodName, arguments));return callStatement;
@5382#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#Variable#org.emftext.language.java.references.IdentifierReference thisRef = org.emftext.language.java.references.ReferencesFactory.eINSTANCE.createIdentifierReference();thisRef.setTarget(this);org.emftext.language.java.references.MethodCall methodCall = org.emftext.language.java.references.ReferencesFactory.eINSTANCE.createMethodCall();org.emftext.language.java.types.Type thisType = getTypeReference().getTarget();if (thisType instanceof org.emftext.language.java.members.MemberContainer) {org.emftext.language.java.members.MemberContainer castedType = ( org.emftext.language.java.members.MemberContainer) thisType;org.emftext.language.java.members.Method method = castedType.getContainedMethod(methodName);if (method == null) {return null;}methodCall.setTarget(method);// add argumentsmethodCall.getArguments().addAll(arguments);thisRef.setNext(methodCall);return thisRef;} else {return null;}
@5383#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jamopp.ecore#body#AdditionalLocalVariable#long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();return size;
@5384#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Java.ecore#body#Class#if ( getLibClass ( "Boolean" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createBoolean(); } if ( getLibClass ( "Byte" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createByte(); } if ( getLibClass ( "Character" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createChar(); } if ( getLibClass ( "Float" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createFloat(); } if ( getLibClass ( "Double" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createDouble(); } if ( getLibClass ( "Integer" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createInt(); } if ( getLibClass ( "Long" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createLong(); } if ( getLibClass ( "Short" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createShort(); } if ( getLibClass ( "Void" ) .equals ( this ) ) { return org.emftext.language.java.types.TypesFactory.eINSTANCE.createVoid(); } return null ; 
@5385#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Java.ecore#body#Reference#if ( eContainer() instanceof org.emftext.language.java.references.Reference ) {  Reference container = (Reference) eContainer( ) ;   if (this.equals(container.getNext())) { return container; }}return null;
@5386#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/javaforms.ecore#body#ConditionalItem#if ( getItemType ( ) instanceof org.emftext.language.forms.FreeText ) { org.emftext.language.java.classifiers.ConcreteClassifier stringClass = getConcreteClassifier ( "java.lang.String" ) ; org.emftext.language.java.types.ClassifierReference reference = org.emftext.language.java.types.TypesFactory.eINSTANCE.createClassifierReference(); reference .setTarget ( stringClass ) ; return reference ; } return null ; 
@5387#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/JavaVMTypes.ecore#documentation#JvmIdentifiableElement#<p>The identifier of a JvmIdentifiableElement is a canonical representation of the element.</p><p>A type will return its fully qualified name as its identifier with a '$' delimiter for inner classes. The identifier of an executables contains the identifiers of their respective parameter types. They donot contain any information about type parameters.</p><p>Examples for identifiers are:</p><ul><li>java.lang.String for a class</li><li>java.util.Map$Entry for an inner class</li><li>java.lang.String.String() for a constructor (note the repeated simple name)</li><li>java.lang.String.charAt(int) for a method</li><li>java.lang.String.offset for a field</li><li>java.lang.Object[][] for an array type</li></ul>
@5388#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jdt.ecore#body#JDTJavaClassifier#java.lang.StringBuilder qualifiedName = new java.lang.StringBuilder();qualifiedName.append(getPackageName());qualifiedName.append(".");for ( java.lang.String enclosingType : getEnclosingTypeNames()) {qualifiedName.append(enclosingType);qualifiedName.append("$");}qualifiedName.append(getSimpleName());return qualifiedName.toString();
@5389#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/jdt.ecore#body#JDTJavaClassifier#if (!isHasCachedFields()) {try {org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace();org.eclipse.core.resources.IWorkspaceRoot root = workspace.getRoot();java.lang.String projectName = getProjectName();if (projectName != null) {org.eclipse.core.resources.IProject project = root.getProject(projectName);if (project != null) {org.eclipse.jdt.core.IJavaProject javaProject = org.eclipse.jdt.core.JavaCore.create(project);if (javaProject != null && javaProject.exists()) {org.eclipse.jdt.core.IType type = javaProject.findType(getQualifiedName());org.eclipse.jdt.core.IField[] fields = type.getFields();for ( org.eclipse.jdt.core.IField field : fields) {org.emftext.commons.jdt.JDTField newField = org.emftext.commons.jdt.JdtFactory.eINSTANCE.createJDTField();newField.setName(field.getElementName());getCachedFields().add(newField);}}}}} catch ( org.eclipse.jdt.core.JavaModelException e) {// TODO handle exception}setHasCachedFields(true);}return getCachedFields();
@5390#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/junit.ecore#fixtureImpliesTests#Runner#fixtures->notEmpty() implies tests->notEmpty()
@5391#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/junit.ecore#fixtureTestsIsInTests#Runner#fixtures->forAll(tests->includesAll(self.tests))
@5394#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/kgraph.ecore#documentation#EMapPropertyHolder#Serialize all entries of the properties map using {@link Object#toString()}and write them into the list of persistent entries. The previous content is cleared.
@5401#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.after() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5402#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.after() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5403#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.after() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5404#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.between() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5405#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.always() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5406#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.always() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5407#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.always() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5408#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.before() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5409#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.before() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5410#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.before() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5411#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.eventually() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5412#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.eventually() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5413#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.never() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5414#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.never() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5415#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.never() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5416#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.newPEval() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5417#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.responds() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5418#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.responds() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5419#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.sequence() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5420#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.sequence() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5421#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedEvent() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5422#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedEvents() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5423#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedMessages() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5424#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedMessages() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5425#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedMessage() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5426#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedMessage() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5427#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedProperties() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5428#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.receivedProperty() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5429#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.responds() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5430#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.timeout() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5431#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.unless() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5432#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.unless() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5433#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.until() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5434#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclAny#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclAny.until() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5435#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclMessage#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclMessage.argument() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5436#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclMessage#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclMessage.argument() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5437#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclMessage#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclMessage.arguments() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5438#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclMessage#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclMessage.className() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5439#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#OclMessage#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method OclMessage.methodName() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5440#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.name() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5441#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.satisfied() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5442#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.openDate() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5443#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.closeDate() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5444#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.openEvent() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5445#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.closeEvent() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5446#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.scopeEvent() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5447#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.support() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5448#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#PropertyEvent#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method PropertyEvent.property() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5449#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#Event#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method Event.date() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5450#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#Event#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method Event.timestamp() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5451#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/LTL.ecore#body#Event#// This method has not been implemented.it.unitn.disi.zanshin.core.CoreUtils.log.error("Method Event.object() has not been implemented."); //$NON-NLS-1$throw new UnsupportedOperationException();
@5452#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/M2TWeaving.ecore#body#WeavingModel#WeavingLink.allInstances()->select(l | l.modelElement = element)->asOrderedSet()
@5453#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/M2TWeaving.ecore#body#WeavingModel#let allTextElements:Set(TextElement) =TextElement.allInstances()inlet closestDistance:Integer = allTextElements->collect(e | offset - e.offset)->select(n | n >= 0)->min()inallTextElements->select(e | (((offset - e.offset) = closestDistance)or( (closestDistance = 0) and ( offset - (e.offset + e.length) ) = closestDistance)))->asOrderedSet()->sortedBy(t | t.offset)
@5454#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/M2TWeaving.ecore#body#WeavingModel#let textElements:OrderedSet(TextElement) =self.findTextElementForOffset(offset)in-- If the closes distance is not 0 there is no decision to takeif (textElements->size() <= 1) thentextElementselse--Hit an Attribute and want Attributes -> everything is fineif (self.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Attribute))->size() > 0 and strategy = SearchStrategy::AttributePreffered) thenself.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Attribute))else--Hit an Entity and want an Entity -> everything is fineif (self.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Entity))->size() > 0 and strategy = SearchStrategy::EntityPreffered) thenself.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Entity))else--Bad lucktextElementsendifendifendif
@5455#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/M2TWeaving.ecore#body#WeavingLink#let firstChild:WeavingModelContent = self.children->first()inif (firstChild.oclIsUndefined()) then-1elseif (firstChild.oclIsTypeOf(TextElement)) thenfirstChild.oclAsType(TextElement).offsetelsefirstChild.oclAsType(WeavingLink).calculateOffset()endifendif 
@5456#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/M2TWeaving.ecore#body#WeavingLink#let lastChild:WeavingModelContent = self.children->last()inif (lastChild.oclIsUndefined()) then-1elseif (lastChild.oclIsTypeOf(TextElement)) then(lastChild.oclAsType(TextElement).offset + lastChild.oclAsType(TextElement).length) - self.calculateOffset()elselastChild.oclAsType(WeavingLink).calculateLength()endifendif 
@5457#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/M2TWeaving.ecore#body#TextElement#self.text.trim().size()
@5461#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#Module#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5462#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#MetamodelDeclaration#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5463#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#Property#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5464#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#RuleDeclaration#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5465#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#SimpleRuleReference#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5466#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#QualifiedRuleReference#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5467#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#SimpleParameterReference#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5468#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#QualifiedParameterReference#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5469#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#FormalParameter#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5470#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#ReturnParameter#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5471#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#ReferenceType#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5472#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#PrimitiveType#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5473#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#CollectionType#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5474#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#StringLiteral#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5475#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#IntLiteral#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5476#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#RealLiteral#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5477#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#BooleanLiteral#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5478#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#RuleInvocation#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5479#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#RuleInvocationSuper#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5480#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#Feature#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5481#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Mitra.ecore#body#VariableAccess#if (eIsProxy()) return super.toString();return ToString.valueOf(this);
@5485#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/modules.ecore#body#ValidateConfiguration#configuration.validate();
@5486#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/modules.ecore#body#OutputAverages#configuration.outputAverages();
@5487#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/modules.ecore#body#OutputItems#configuration.outputItems();
@5488#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/modules.ecore#body#OutputSummaries#configuration.outputSummaries ( getPrefix(), getSuffix() );
@5489#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/modules.ecore#body#OutputGlobalSummaries#configuration.outputGlobalSummaries();
@5490#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/MultiRobotSystem.ecore#TransmitterRemote#Agent#transmitters.remote->excludes(self)
@5491#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/MultiRobotSystem.ecore#EffectorOutputs#Effector#outputs->size() > 0
@5492#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/MultiRobotSystem.ecore#SensorInputs#Sensor#inputs->size() > 0
@5493#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/MultiRobotSystem.ecore#TransmitterBuffers#Transmitter#(inputs->size() > 0 or outputs->size() > 0)
@5494#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Archetype#this.setPeutAgir(true);this.setNbAction(0);this.setNbDef(0);int init = this.getInit() + this.getActive().getInit();init+= Des.fullRoll();this.setRolledInit(init);this.setCurrent(this.getActive());
@5495#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Archetype#int total = 0;total+=this.getAttaque();total+=this.getBonusAtaque();total+=this.getMalusCritTemp();return total;
@5496#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Archetype#int total = 0;total+=this.getDefense();total+=this.getBonusDef();total+=this.getMalusCritTemp();return total;
@5497#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Archetype#Config attaque = this.getCurrent();Config contrattaque = this.getCible().getContre();if(attaque==null){return;}int nb  = attaque.getNbAttaques();int superbonus = bonus;while(nb>0){nb--;int r =attaque.attaque(superbonus);superbonus=0;if(r>=0){contrattaque.attaque(r);}}if(attaque.getEnchaine()!=null) {this.setCurrent(attaque.getEnchaine());baston(0);}
@5498#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Config#TypeDef td = this.getTypeDef();TypeAttaque ta = attaquand.getTypeAttaque();if(ta==TypeAttaque.TIR){if(td==TypeDef.ESQUIVE)return 30;if(td==TypeDef.PARADE)return 80;}if(ta==TypeAttaque.LANCE){if(td==TypeDef.PARADE)return 50;}return 0;
@5499#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Config#Archetype attaquant, defenseur;Config attaque, defense;attaquant=this.getOwner();attaque=this;defenseur=attaquant.getCible();defense = defenseur.getActive();String attakname = attaque.getNom();if(!attaquant.isPeutAgir())return -1;//Score de baseint attaqueTotale =attaquant.getTotalAttaque();int defenseTotale=defenseur.getTotalDefense();//bonus configattaqueTotale+=attaque.getAttaque();defenseTotale+=defense.getDefense();//bonus malus contexteif(defense.getTypeDef()==TypeDef.ESQUIVE|| defense.getTypeDef()==TypeDef.PARADE){int def = defenseur.getNbDef();if(def ==1) defenseTotale=defenseTotale-30;if(def ==2) defenseTotale=defenseTotale-50;if(def ==3) defenseTotale=defenseTotale-70;if(def >3) defenseTotale=defenseTotale-90;defenseur.setNbDef(def+1);}//rollSystem.out.println("att :"+attaqueTotale+ " def :"+defenseTotale);if(attaquant.isJoueur()){InputDialog d = new InputDialog(new Shell(),"Score du joueur", "Entrez le score d'attaque au dés de "+attaquant.getNom(), "50",null);int choice = d.open();if(choice==Window.OK) {Integer result = Integer.parseInt(d.getValue());attaqueTotale+=result;}else {attaqueTotale+=Des.fullRoll();}}else {attaqueTotale+=Des.fullRoll();}if(defenseur.isJoueur()) {InputDialog d = new InputDialog(new Shell(),"Score du joueur", "Entrez le score de défense au dés de "+attaquant.getNom(), "50",null);int choice = d.open();if(choice==Window.OK) {Integer result = Integer.parseInt(d.getValue());defenseTotale+=result;}else {defenseTotale+=Des.fullRoll();}}else {defenseTotale+=Des.fullRoll();}if(defenseTotale<0) defenseTotale=0;int marge = attaqueTotale - defenseTotale;System.out.println("marge : "+marge);if(marge>0) {defenseur.setPeutAgir(defense.getTypeDef()==TypeDef.ENCAISSEMENT);int absorption = 2 + defenseur.getIP(attaque.getTypeDegat());marge -= absorption * 10;if(marge>10) {int degat = attaque.getDegats()* marge /100;int hp = defenseur.getHp()- degat;defenseur.setHp(hp);String tab[] ={"Ok"}; String info = defenseur.getNom()+" encaisse "+degat+" points de dégats sur "+attakname+". Restant : "+hp;MessageDialog d = new MessageDialog(new Shell(), "Résultat", null, info, 0, tab, 0);d.open();}else {String tab[] ={"Ok"}; String info = defenseur.getNom()+" se défend de justesse sur "+attakname+". 0 Dégat, pas d'actions";MessageDialog d = new MessageDialog(new Shell(), "Résultat", null, info, 0, tab, 0);d.open();}}else if (marge<0) {int result = Des.getContre(marge);String tab[] ={"Ok"}; String info = "Défense réussi par"+defenseur.getNom()+", contre attaque contre "+attakname+" possible avec un bonus de "+result;MessageDialog d = new MessageDialog(new Shell(), "Résultat", null, info, 0, tab, 0);d.open();return result;}else{String tab[] ={"Ok"}; String info = "Défense réussi par"+defenseur.getNom()+", pas de contre attaque possible contre "+attakname;MessageDialog d = new MessageDialog(new Shell(), "Résultat", null, info, 0, tab, 0);d.open();return -1;}return-1;
@5500#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Combat#setNbRound(nbRound+1);EList<Archetype> l = this.getArchetypes();for(Archetype arch : l ){arch.resetRound();}
@5501#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nima.ecore#body#Combat#setNbRound(nbRound+1);LinkedList<Archetype> l =new LinkedList<Archetype>(this.getArchetypes());for(Archetype arch : l ) {arch.resetRound();}Collections.sort(l, new InitComparator());for(Archetype arch : l ) {if(arch.isPeutAgir()) {arch.baston(0);}}
@5502#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#ModelImplementsInitP1#self.advertisesExportField->size() > 0 or self.advertisesImportField->size() > 0
@5503#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#ModelImplementsInitP2#self.realizesImportField->size() > 0 or self.realizesExportField->size() > 0
@5504#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#AdvertisesImportField#self.addsToState = self.parent.importParam
@5505#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#AdvertisesExportField#self.addsToState = self.parent.exportParam
@5506#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#RealizesImportField#self.realizedInState = self.parent.importParam
@5507#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#RealizesExportField#self.realizedInState = self.parent.exportParam
@5508#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/nuopc.ecore#derivation#ModelAdvance#self.parent.implementsSetServices.attachesModelAdvance.userRoutine = self.name
@5521#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/opmodel.ecore#body#InstanceBase#for (PropertyInstance propertyInstance:getProperties()){ if (propertyInstance.getName().equals(name)) return propertyInstance;}return null;
@5522#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/opmodel.ecore#body#TypeDescriptor#return (!getChildren().isEmpty());
@5523#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/opmodel.ecore#body#PropertyInstance#return getDescriptor().getName();
@5524#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/opmodel.ecore#body#PropertyInstance#return getDescriptor().getType();
@5525#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/opmodel.ecore#body#PropertyInstance#String oldValue = value;value = val;if (eNotificationRequired())eNotify(new ENotificationImpl(this, Notification.SET, opmodelPackage.PROPERTY_INSTANCE__VALUE, oldValue, value));return true;
@5526#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/org.eclipse.gmf.codegen.jar_models.gmfgen.ecore#documentation#GenEditorGenerator#Derived from genModel.genPackage[0].getBasePackage() by default
@5527#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/org.eclipse.gmf.codegen.jar_models.gmfgen.ecore#documentation#GenEditorGenerator#By default, genModel.genPackage[0].getPrefix().toLowerCase(), as in emf/templates/editor/pluign.xmljet
@5528#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/org.eclipse.gmf.codegen.jar_models.gmfgen.ecore#documentation#ResizeConstraints#Same as {@link #getResizeHandleNames()}, for nonResizeHandle attribute
@5529#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/org.eclipse.gmf.codegen.jar_models.gmfgen.ecore#documentation#ParentAssignedViewmap#Child could provide typed alternative to setFigure() method
@5530#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/org.eclipse.gmf.codegen.jar_models.gmfgen.ecore#documentation#GenLiteralExpressionProvider#GenLiteralExpressionProvider#getLanguage() == GenLanguage.LITERAL
@5535#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/owlcl.ecore#body#OWLCLSpec#if (super.getNamespace().size() == 0) {Namespace metamodelNamespace = org.emftext.language.owl.OwlFactory.eINSTANCE.createNamespace();metamodelNamespace.setPrefix("");metamodelNamespace.setImportedOntology(getOntology());super.getNamespace().add(metamodelNamespace);}return super.getNamespace();
@5536#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/owlcl.ecore#body#OWLCLSpec#if (super.getOntology() == null) {org.emftext.runtime.owltext.transformation.Ecore2Owl transformation = new org.emftext.runtime.owltext.transformation.Ecore2Owl();      org.eclipse.emf.ecore.EPackage metamodel = this.getConstrainedMetamodel();      if (metamodel != null) {      org.emftext.language.owl.OntologyDocument ontologyDocument = transformation.transformMetamodel(metamodel, null);      super.setOntology(ontologyDocument.getOntology());      }}return super.getOntology();
@5537#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#NamedElement# org.emftext.language.pacad.PointAndClickAdventure adventure = ( org.emftext.language.pacad.PointAndClickAdventure)  org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer(this); org.emftext.language.pacad.PointAndClickAdventure mainScript = adventure.getMainScript();if (mainScript != null) {adventure = mainScript;}if (this == adventure.getThingObject()) {return getDeclaredName();} org.emftext.language.pacad.NamedElement current = this;while (current != null) { java.lang.String declaredName = current.getDeclaredName();if (declaredName != null) {return declaredName;}if (current instanceof  org.emftext.language.pacad.Object) {current = (( org.emftext.language.pacad.Object) current).getParent();} else {current = null;}}return null;
@5538#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#Object#// find main adventure org.emftext.language.pacad.PointAndClickAdventure adventure = getAdventure();// search for a command that applied to this objectfor ( org.emftext.language.pacad.Command command : adventure.getAvailableCommands( org.emftext.language.pacad.CommandType.USE)) { org.eclipse.emf.common.util.EList< org.emftext.language.pacad.Object> subjects = command.getSubjects();// if there is a command that applied and that has more than one// argument this object cannot be used on its ownif (subjects.contains(this) && subjects.size() > 1) {return false;}}return true;
@5539#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#Object#// find main adventure org.emftext.language.pacad.PointAndClickAdventure adventure = ( org.emftext.language.pacad.PointAndClickAdventure)  org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer(this);if (adventure.getMainScript() != null) {adventure = adventure.getMainScript();}return adventure;
@5540#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#Object#if (getDefinedPositionX() <= 0 && getParent() != null) {return getParent().getPositionX();} else {return getDefinedPositionX();}
@5541#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#Object#if (getDefinedPositionY() <= 0 && getParent() != null) {return getParent().getPositionY();} else {return getDefinedPositionY();}
@5542#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#InternalObject#if (getDefinedWidth() <= 0 && getParent() != null && getParent() instanceof  org.emftext.language.pacad.InternalObject) {return (( org.emftext.language.pacad.InternalObject) getParent()).getWidth();} else {return getDefinedWidth();}
@5543#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#InternalObject#if (getDefinedHeight() <= 0 && getParent() != null && getParent() instanceof  org.emftext.language.pacad.InternalObject) {return (( org.emftext.language.pacad.InternalObject) getParent()).getHeight();} else {return getDefinedHeight();}
@5544#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#Room# org.emftext.language.pacad.Room current = this;while (current != null) { java.lang.String declaredBackgroundSound = current.getDeclaredBackgroundSound();if (declaredBackgroundSound != null) {return declaredBackgroundSound;} org.emftext.language.pacad.Object parent = current.getParent();if (parent instanceof  org.emftext.language.pacad.Room) {current = ( org.emftext.language.pacad.Room) parent;} else {current = null;}}return null;
@5545#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#PointAndClickAdventure# org.eclipse.emf.common.util.EList< org.emftext.language.pacad.AdventureElement> elements = getAllElements();for ( org.emftext.language.pacad.AdventureElement next : elements) {if (next instanceof  org.emftext.language.pacad.Object) { org.emftext.language.pacad.Object nextObject = ( org.emftext.language.pacad.Object) next;if ("thingy".equals(nextObject.getId())) {return nextObject;}}}return null;
@5546#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#PointAndClickAdventure# org.eclipse.emf.common.util.EList< org.emftext.language.pacad.AdventureElement> allElements = new  org.eclipse.emf.common.util.BasicEList< org.emftext.language.pacad.AdventureElement>();allElements.addAll(getElements());for ( org.emftext.language.pacad.AdventureElement e : getElements()) {if (e instanceof  org.emftext.language.pacad.Import) { org.emftext.language.pacad.Import imprt = ( org.emftext.language.pacad.Import) e;allElements.addAll(imprt.getImportedAdventure().getAllElements());}if (e instanceof  org.emftext.language.pacad.Room) {allElements.addAll((( org.emftext.language.pacad.Room) e).getContainedObjects());}}return allElements;
@5547#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#PointAndClickAdventure# org.eclipse.emf.common.util.EList< org.emftext.language.pacad.Object> allObjects = new  org.eclipse.emf.common.util.BasicEList< org.emftext.language.pacad.Object>();for ( org.emftext.language.pacad.AdventureElement e : getAllElements()) {if (e instanceof  org.emftext.language.pacad.Object) {allObjects.add(( org.emftext.language.pacad.Object) e);}}return allObjects;
@5548#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#PointAndClickAdventure# org.eclipse.emf.common.util.EList< org.emftext.language.pacad.Import> imports = new  org.eclipse.emf.common.util.BasicEList< org.emftext.language.pacad.Import>();for ( org.emftext.language.pacad.AdventureElement e : getElements()) {if (e instanceof  org.emftext.language.pacad.Import) {imports.add(( org.emftext.language.pacad.Import) e);}}return imports;
@5549#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#PointAndClickAdventure# org.eclipse.emf.common.util.EList< org.emftext.language.pacad.Command> allCommands = new  org.eclipse.emf.common.util.BasicEList< org.emftext.language.pacad.Command>();for ( org.emftext.language.pacad.AdventureElement e : getAllElements()) {if (e instanceof  org.emftext.language.pacad.Command) {allCommands.add(( org.emftext.language.pacad.Command) e);}}return allCommands;
@5550#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/pacad.ecore#body#PointAndClickAdventure# org.eclipse.emf.common.util.EList< org.emftext.language.pacad.Command> availableCommands = new  org.eclipse.emf.common.util.BasicEList< org.emftext.language.pacad.Command>();for ( org.emftext.language.pacad.Command e : getAllCommands()) {if (e.getType() == type) {availableCommands.add(( org.emftext.language.pacad.Command) e);}}return availableCommands;
@5551#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/packager.ecore#body#PackageDescriptor#for ( DescriptionField f : getFields() ){if ( ( f.getType() != null ) && ( f.getType() == type ) ){return f;}}return null;
@5552#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/packager.ecore#body#PackageDescriptor#DescriptionField f = getFieldFromType ( type );if ( f != null ){return f.getValue();}return null;
@5553#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/People.ecore#MixedGenderParents#Person#father.gender <> mother.gender
@5554#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/People.ecore#body#Person#children->any(name=childName)
@5555#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/People.ecore#derivation#Person#parents->any(gender = Gender::MALE)
@5556#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/People.ecore#derivation#Person#parents->any(gender = Gender::FEMALE)
@5563#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#nameExists#Place#name <> null
@5564#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#nameUnique#Place#Place.allInstances()->isUnique(name)
@5565#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#tokPositive#Place#tokens >= 0
@5566#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#notUnconnected#Place#connection->isEmpty() implies Transition.allInstances()->select(p : Transition | p.connection->exists(t : Place | t.name = self.name))->notEmpty()
@5567#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#nameExists#Transition#name <> null
@5568#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#nameUnique#Transition#Place.allInstances()->isUnique(name)
@5569#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/petri.ecore#notUnconnected#Transition#connection->isEmpty() implies Place.allInstances()->select(p : Place | p.connection->exists(t : Transition | t.name = self.name))->notEmpty()
@5572#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#BooleanLiteralExp#self.type = Boolean
@5573#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#CollectionItem#type = item.type
@5574#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Bag implies type.oclIsKindOf (BagType)
@5575#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#CollectionLiteralExp#kind <> CollectionKind::Collection
@5576#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::OrderedSet implies type.oclIsKindOf (OrderedSetType)
@5577#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Sequence implies type.oclIsKindOf (SequenceType)
@5578#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Set implies type.oclIsKindOf (SetType)
@5579#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Constraint#true 
@5580#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Element#--self->closure(oclContents())oclContents()
@5581#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Element#null
@5582#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#EnumLiteralExp#self.type = referredEnumLiteral.enumeration
@5583#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IfExp#self.condition.type = Boolean
@5584#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IntegerLiteralExp#self.type = Integer
@5585#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IterateExp#_'body'.type.conformsTo(result.type)
@5586#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IterateExp#self.result.initExpression->size() = 1
@5587#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IterateExp#type = result.type
@5588#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'any' implies _'body'.type = 'Boolean'
@5589#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'any' implies iterator->size() = 1
@5590#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'any' implies type = source.type.oclAsType(CollectionType).elementType
@5591#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#true
@5592#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'closure' impliestype.oclAsType(CollectionType).elementType= source.type.oclAsType(CollectionType).elementType
@5593#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'closure' implies iterator->size() = 1
@5594#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'closure' impliessource.type.oclAsType(CollectionType).elementType =if _'body'.type.oclIsKindOf(CollectionType)then _'body'.type.oclAsType(CollectionType).elementTypeelse _'body'.typeendif
@5595#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'closure' impliesif source.type.oclIsKindOf(SequenceType) or source.type.oclIsKindOf(OrderedSetType) thentype.oclIsKindOf(OrderedSetType)elsetype.oclIsKindOf(SetType)endif
@5596#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'collect' impliestype.oclAsType(CollectionType).elementType =_'body'.type.oclAsType(CollectionType).elementType
@5597#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'collect' implies iterator->size() = 1
@5598#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'collectNested' implies iterator->size() = 1
@5599#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'collectNested' implies type.oclIsKindOf(BagType)
@5600#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'collectNested' implies type = _'body'.type
@5601#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'collect' impliesif source.type.oclIsKindOf(SequenceType) or source.type.oclIsKindOf(OrderedSetType) thentype.oclIsKindOf(SequenceType)elsetype.oclIsKindOf(BagType)endif
@5602#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'exists' implies _'body'.type = Boolean
@5603#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'exists' implies type = Boolean
@5604#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'forAll' implies _'body'.type = Boolean
@5605#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'forAll' implies type = Boolean
@5606#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'isUnique' implies iterator->size() = 1
@5607#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'isUnique' implies type = Boolean
@5608#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#self.iterator->forAll(source.type.oclAsType (CollectionType).elementType.conformsTo(type))
@5609#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'one' implies _'body'.type = Boolean
@5610#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'one' implies iterator->size() = 1
@5611#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'one' implies type = Boolean
@5612#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'reject' or name = 'select' implies iterator->size() = 1
@5613#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'reject' or name = 'select' implies type = Boolean
@5614#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'reject' or name = 'select' implies type = source.type
@5615#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'sortedBy' impliestype.oclAsType(CollectionType).elementType =_'body'.type.oclAsType(CollectionType).elementType
@5616#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'sortedBy' implies iterator->size() = 1
@5617#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#name = 'sortedBy' impliesif source.type.oclIsKindOf(SequenceType) or source.type.oclIsKindOf(BagType) thentype.oclIsKindOf(SequenceType)elsetype.oclIsKindOf(OrderedSetType)endif
@5618#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#IteratorExp#true
@5619#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#LetExp#type = _'in'.type
@5620#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#LoopExp#self.iterator->forAll(initExpression->isEmpty())
@5621#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#LoopExp#source.type.oclIsKindOf (CollectionType)
@5622#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#MessageExp#calledOperation->size() + sentSignal->size() = 1
@5623#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#MessageExp#not target.type.oclIsKindOf (CollectionType)
@5624#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Operation#bodyExpression <> null and bodyExpression.oclIsKindOf(ExpressionInOCL) implies CompatibleBody(bodyExpression)
@5625#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Operation#true
@5626#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Operation#postcondition->isUnique(name)
@5627#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Operation#precondition->isUnique(name)
@5628#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#OperationCallExp#argument->size() = referredOperation.ownedParameter->size()
@5629#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#OperationCallExp#let operation : Operation = self.referredOperation inlet parameters : OrderedSet(Parameter) = operation.ownedParameter inlet selfType : Type = operation.owningType inSequence{1..argument->size()}->forAll (i | let argument : OCLExpression = argument->at(i) inlet parameter : Parameter = parameters->at(i) inlet parameterType : Type = parameter.type inargument.type.conformsTo(parameterType.specializeIn(self, selfType)))
@5630#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#ParameterableElement#p.oclIsKindOf(self.oclType())
@5631#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.
@5632#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Property#defaultExpression <> null and defaultExpression.oclIsKindOf(ExpressionInOCL) implies CompatibleBody(defaultExpression)
@5633#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Property#--Type.allInstances()->exists(c| c.ownedAttribute->includes(p))let container : ocl::OclElement = oclContainer() in container.oclIsKindOf(Type) and container.oclAsType(Type).ownedAttribute->includes(self)
@5634#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#PropertyCallExp#type = getSpecializedReferredPropertyType()
@5635#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#PropertyCallExp#not referredProperty.isStatic implies source.type.conformsTo(getSpecializedReferredPropertyOwningType())
@5636#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#PropertyCallExp#referredProperty.owningType 
@5637#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#PropertyCallExp#referredProperty.type 
@5638#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#SelfType#selfType
@5639#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this templateable element is actually a template.
@5640#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.
@5641#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#Type#The query isTemplate() returns whether this templateable element is actually a template.
@5642#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Type#ownedInvariant->isUnique(name)
@5643#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Type#self
@5644#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#TypedMultiplicityElement#bodySpecification.type.conformsTo(self.type)
@5645#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#TypedMultiplicityElement#Parameter{name='name'}
@5646#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.
@5647#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.
@5648#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.
@5649#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.
@5650#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.
@5651#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.
@5652#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Pivot.ecore#body#Variable#initExpression <> null implies initExpression.type.conformsTo(type)
@5653#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.content->select(e|e.oclIsKindOf(Generalization))->collect(g | g.oclAsType(Generalization))->asSet()
@5654#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.content->select(e|e.oclIsKindOf(SetRelationship))->collect(g | g.oclAsType(SetRelationship))->asSet()
@5655#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.content->select(e|e.oclIsKindOf(Clabject))->collect(g | g.oclAsType(Clabject))->asSet()
@5656#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.content->select(e|e.oclIsKindOf(Entity))->collect(g | g.oclAsType(Entity))->asOrderedSet()
@5657#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.content->select(e|e.oclIsKindOf(Connection))->collect(g | g.oclAsType(Connection))->asOrderedSet()
@5658#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.content->select(e|e.oclIsKindOf(Classification))->collect(g | g.oclAsType(Classification))->asSet()
@5659#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.oclAsType(ecore::EObject).eContainer().oclAsType(Ontology)
@5660#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#if (self.getOntology().content->indexOf(self) = self.getOntology().content->size()) thennullelseself.getOntology().content->at(self.getOntology().content->indexOf(self) + 1)endif
@5661#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#if (self.getOntology().content->indexOf(self) = 1) thennullelseself.getOntology().content->at(self.getOntology().content->indexOf(self) - 1)endif
@5662#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.getOntology().content->indexOf(self)-1
@5663#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.getOntology().content->indexOf(self) = 1
@5664#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Model#self.getOntology().content->indexOf(self) = self.getOntology().content->size()
@5665#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Ontology#if level > 0 and level < self.content->size() thenself.content->at(level)elsenullendif
@5666#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Ontology#self.oclAsType(ecore::EObject).eClass().ePackage.getEAnnotation('http://melanee.org/PLM/Datatypes').details.key->asOrderedSet()
@5667#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Ontology#if (self.oclAsType(ecore::EObject).eClass().ePackage.getEAnnotation('http://melanee.org/PLM/Datatypes').details->select(e | e.key = type)->size() = 1) thenself.oclAsType(ecore::EObject).eClass().ePackage.getEAnnotation('http://melanee.org/PLM/Datatypes').details->select(e | e.key = type).value->first()elsenullendif
@5668#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Correlation#self.oclAsType(ecore::EObject).eContainer().oclAsType(Model)
@5669#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#SetRelationship#if self.oclIsTypeOf(Equality) thenself.oclAsType(Equality).equalelseif self.oclIsTypeOf(Complement) thenself.oclAsType(Complement).complementelseself.oclAsType(Inversion).inverseendifendif
@5670#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Equality#self.equal
@5671#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Inversion#self.inverse
@5672#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Complement#self.complement
@5673#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Generalization#not (self.disjoint.oclIsUndefined() or self.disjoint = false)
@5674#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Generalization#not (self.complete.oclIsUndefined() or self.complete = false)
@5675#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Generalization#not (self.intersection.oclIsUndefined() or self.intersection = false)
@5676#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Generalization#if self.name.oclIsUndefined() or self.name = '' thenlet superT : String = self.supertype->iterate(s:Clabject; res:String=''| res.concat(s.represent()).concat(',')) inlet subT : String = self.subtype->iterate(s:Clabject; res:String=''| res.concat(s.represent()).concat(','))in'['.concat(superT.substring(1,superT.size()-1)).concat(']<-[').concat(subT.substring(1,subT.size()-1)).concat(']')else self.nameendif
@5677#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Classification#self.instance.represent().concat('->').concat(self.type.represent())
@5678#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Classification.allInstances()->select(i | i.type = self).instance->asSet()
@5679#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let parent:ecore::EObject = self.oclAsType(ecore::EObject).eContainer()inif (parent.oclIsUndefined()) thennullelseif (parent.oclIsTypeOf(Model)) thenparent.oclAsType(Model)elseif (parent.oclIsKindOf(Clabject)) thenparent.oclAsType(Clabject).getModel()elsenullendifendifendif
@5680#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getModel().getOntology()
@5681#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) =self.getDirectSupertypes()->asOrderedSet()in--Start recursiondirectResult->iterate(c:Clabject; type:OrderedSet(Clabject) = directResult|type->union(c.getSupertypes(directResult))->asOrderedSet())
@5682#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) =self.getDirectSupertypes()->asOrderedSet()in--Start recursiondirectResult->iterate(c:Clabject; type:OrderedSet(Clabject) = directResult|if (immediateResult->includes(c)) thentypeelsetype->union(c.getSupertypes(immediateResult->union(directResult)->asOrderedSet()))->asOrderedSet()endif)
@5683#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Generalization.allInstances()->select(g | g.subtype->includes(self)).supertype->flatten()->asOrderedSet()
@5684#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) =Generalization.allInstances()->select(g | g.supertype->includes(self)).subtype->flatten()->asOrderedSet()in--Start recursiondirectResult->iterate(c:Clabject; type:OrderedSet(Clabject) = directResult|type->union(c.getSubtypes())->asOrderedSet())
@5685#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#getSubtypes()->select(st | st.feature->forAll(f | self.feature->one(selfF | selfF.name = f.name)))
@5686#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#getSupertypes()->select(st | self.feature->forAll(f | st.feature->one(selfF | selfF.name = f.name)))
@5687#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Classification.allInstances()->select(i|i.instance = self)
@5688#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Classification.allInstances()->select(i|i.type = self)
@5689#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let allTypes:OrderedSet(Clabject) = self.getSubtypes()->including(self)->asOrderedSet()inallTypes.getClassificationsAsType().instance->union(allTypes.getClassificationsAsType().instance.getSubtypes())->asOrderedSet()--allTypes->iterate(type:Clabject; instances:Set(Clabject) = Set(Clabject){}|----Take all instances--instances->union(type.getClassificationsAsType().instance)--Union with subtypes of instances--->union(type.getClassificationsAsType().instance.getSubtypes())->asSet()--)
@5690#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let allTypes:Set(Clabject) = self.getSupertypes()->including(self)inallTypes.getClassificationsAsInstance().type->union(allTypes.getClassificationsAsInstance().type.getSupertypes())->asOrderedSet()--allTypes->iterate(type:Clabject; instances:Set(Clabject) =Set(Clabject){}|----Take all types--instances->union(type.getClassificationsAsInstance().type)--Union with supertypes of types--->union(type.getClassificationsAsInstance().type.getSupertypes())->asSet()--)
@5691#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsInstance().type->asOrderedSet()
@5692#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsInstance().type->union(self.getClassificationsAsInstance().type.getSupertypes())->asOrderedSet()
@5693#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) = self.getModelTypes()->asOrderedSet()indirectResult->union(directResult.getTypes()->asOrderedSet())->asOrderedSet()
@5694#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) = self.getTypes()->asOrderedSet()indirectResult->union(directResult.getTypes()->asOrderedSet())->asOrderedSet()
@5695#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsType().instance->asOrderedSet()
@5696#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsType().instance->union(self.getClassificationsAsType().instance.getSubtypes())->asOrderedSet()
@5697#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) = self.getEigenInstances()->asOrderedSet()indirectResult->union(directResult.getInstances()->asOrderedSet())->asOrderedSet()
@5698#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let directResult:OrderedSet(Clabject) = self.getInstances()->asOrderedSet()indirectResult->union(directResult.getInstances()->asOrderedSet())->asOrderedSet()
@5699#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let features:OrderedSet(Feature) =  self.getSupertypes()->including(self).feature->asOrderedSet()infeatures->select(f | features->excluding(f)->forAll(f2 | f.name = f2.name implies not f.getClabject().getSubtypes()->includes(f2.getClabject())))->asOrderedSet()
@5700#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getAllFeatures()->select(f | f.oclIsTypeOf(Attribute)).oclAsType(Attribute)->asOrderedSet()
@5701#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.feature->select(f | f.oclIsKindOf(Attribute)).oclAsType(Attribute)->asOrderedSet()
@5702#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.feature->select(f | f.oclIsKindOf(Attribute)).oclAsType(Attribute)->select(f | f.name = name)->first()
@5703#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getAllFeatures()->select(f | f.oclIsTypeOf(Method)).oclAsType(Method)->asOrderedSet()
@5704#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.feature->select(f | f.oclIsKindOf(Method))->asOrderedSet()
@5705#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#type.getInstances()->includes(self)
@5706#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#instance.getTypes()->includes(self)
@5707#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Participation.allInstances()->select(r | r.destination = self).connection->asOrderedSet()
@5708#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getInheritedConnections()->union(self.getEigenConnections())->asOrderedSet()
@5709#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getSupertypes().getEigenConnections()->asOrderedSet()
@5710#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsInstance()->select((kind= ClassificationKind::isonym) or (kind= ClassificationKind::instantiation)).type->asSet()
@5711#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsInstance()->select(kind= ClassificationKind::hyponym).type->asSet()
@5712#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let blueprints:OrderedSet(Clabject) = self.getClassificationsAsInstance()->select(c | c.kind= ClassificationKind::instantiation).type->asOrderedSet()inif blueprints->size() > 0 then blueprints->first() else null endif
@5713#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsType()->select(c | c.kind = ClassificationKind::instantiation).instance->asOrderedSet()
@5714#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsType()->select(c | c.kind = ClassificationKind::isonym).instance->asOrderedSet()
@5715#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getClassificationsAsType()->select(c | c.kind = ClassificationKind::hyponym).instance->asOrderedSet()
@5716#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#connection.getDomain(self)
@5717#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#--At first we look if a visualization descriptor is directly attachedlet possibleVisualization:Set(AbstractDSLVisualizer) = self.visualizer.dslVisualizer->asSet()in--Now look at the superTypes if nothing is directly foundlet possibleVisualizationOfModelSupertypes:Set(AbstractDSLVisualizer) =if (possibleVisualization->size() = 0) thenself.getSupertypes().visualizer.dslVisualizer->asSet()elsepossibleVisualizationendifin--Look at the model types if nothing is foundif (possibleVisualizationOfModelSupertypes->size() = 0) thenself.getTypes().getPossibleDomainSpecificVisualizers()->asSet()elsepossibleVisualizationOfModelSupertypesendif
@5718#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Generalization.allInstances()->select(g|g.subtype->includes(self))
@5719#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Generalization.allInstances()->select(g|g.supertype->includes(self))
@5720#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let allConnections:OrderedSet(Connection)=Connection.allInstances()->select(c | c.getParticipants()->includes(self))->asOrderedSet()inallConnections->collect(c| if c.participation->select(r|r.destination=self)->size() = 1 then c.participation->reject(r|r.destination=self) else c.participation endif)->asOrderedSet()->sortedBy(r | r.participationName())
@5721#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getSupertypes()->iterate(super;res : OrderedSet(Participation)= OrderedSet{} |res->union(super.getEigenNavigations())->asOrderedSet())
@5722#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getEigenNavigations()->union(self.getInheritedNavigations())->asOrderedSet()
@5723#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getAllNavigations().participationName()->asOrderedSet()
@5724#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getDirectSupertypes()->collect(getDomainForParticipationName(participationName))->asOrderedSet()->union(self.getEigenNavigations()->select(r|r.participationName() = participationName).destination->asOrderedSet())->asOrderedSet()
@5725#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getAllNavigations()->select(r | r.participationName() = participationName)->asOrderedSet()
@5726#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#self.getEigenNavigationsAsDestination()->union(self.getInheritedNavigationsAsDestination())->asOrderedSet()
@5727#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Participation.allInstances()->select(destination = self)->asOrderedSet()
@5728#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#Participation.allInstances()->select(r| self.getSupertypes()->includes(r.destination))->asOrderedSet()
@5729#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#if self.oclIsTypeOf(Connection) then self.oclAsType(Connection).represent() else self.oclAsType(Entity).represent() endif
@5730#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#if self.getAllFeatures()->select(f|f.name = name)->size() = 0 then nullelseself.getAllFeatures()->select(f|f.name = name)->asOrderedSet()->first()endif
@5731#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#if (self.potency > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer; s : String = ''|let numberAsString : String = OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(self.potency.div(denominator).mod(10) + 1)inif s='' and numberAsString = '0' thenselses.concat(numberAsString)endif)elseif (self.potency = 0) then'0'else'*'endifendif
@5732#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let siblings:OrderedSet(Clabject) = --get all disjoint generalizations in which self participatesself.getGeneralizationsAsSubtype()->reject(g | g.disjoint = null or not g.disjoint)--from these disjoint generalization get all subtypes except self.subtype->reject(s | s=self)->asOrderedSet()in siblings->union(siblings->collect(s | s.getSubtypes())->asOrderedSet())->union(self.getSupertypes()->reject(super | super = self)->collect(super | super.getDisjointSiblings())->asOrderedSet())->asOrderedSet()
@5733#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#--contained in model?if (self.oclAsType(ecore::EObject).eContainer().oclIsTypeOf(Model)) then--yes! -> is this clabject connected via a composition?let containers:OrderedSet(Clabject) =self.getConnections().participation->select(r | r.oclAsType(Participation).destination <> self)->select(r | r.containment).destination->asOrderedSet()in--yes! -> return the containing clabjectif (containers->size() = 0) then self.getModel()--no! -> return the containing model else containers->first().oclAsType(Element) endif--no! -> return the containing model else self.getModel() endif
@5734#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#let foundAttributes:OrderedSet(Attribute) =self.getAllAttributes()->select(a | a.name = name)in if (foundAttributes->size() > 0) then foundAttributes->first()elsenullendif
@5735#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Clabject#--Type-level connections are needed to check constrainsts againtlet typeLevelConnections:OrderedSet(Connection) =self.getDirectTypes().getConnections()->asOrderedSet()in--Connections at instance levels are validatedlet instanceLevelConnections:OrderedSet(Connection) =self.getConnections()in--All participations from which the context it self is not destination is interestinglet instanceLevelParticipations:OrderedSet(Participation) =instanceLevelConnections.participation->select(p : Participation | p.destination <> self)->asOrderedSet()in--If there is no connection at the type/instance level nothing can be violatedif (typeLevelConnections->size() = 0 or instanceLevelConnections->size() = 0) thenfalseelse--For all connections at the type level constraints must be valid at instance leveltypeLevelConnections->forAll(typeConnection : Connection | --All Connections that belong to checked type Connectionlet relevantInstanceLevelConnections:OrderedSet(Connection)=instanceLevelConnections->select(c : Connection | c.getTypes()->includes(typeConnection))in--Get the participations connected to the instance connectionslet relevantInstanceParticipations:OrderedSet(Participation) = instanceLevelParticipations->select(p : Participation | instanceLevelConnections.participation->includes(p))in--Get the right participations at the type levellet relevantTypeParticipation:Participation =typeConnection.participation->select(p : Participation | p.navigable = instanceLevelParticipations->first().navigable)->first()in--Get the sum of multiplicities from the the to the instance connections connected participationsnot (relevantTypeParticipation.upper = -1 or relevantInstanceParticipations.upper->sum() <= relevantTypeParticipation.upper))endif
@5736#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Feature#self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject)
@5737#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Feature#if (self.durability > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer; s : String = ''|let numberAsString : String = OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(self.durability.div(denominator).mod(10) + 1)inif s='' and numberAsString = '0' thenselses.concat(numberAsString)endif)elseif (self.durability = 0) then'0'else'*'endifendif
@5738#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Feature#if self.oclIsTypeOf(Attribute) then self.oclAsType(Attribute).represent() else self.oclAsType(Method).represent() endif
@5739#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Entity#if self.name.oclIsUndefined() then '' else self.name endif
@5740#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.navigable).destination->asOrderedSet()
@5741#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->reject(r | r.navigable).destination->asOrderedSet()
@5742#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#--Works only on connections with two or more participants or has a name by itselfif (not (self.participation->size() > 1)) thenif (not self.name.oclIsUndefined() or self.name <> '') thenself.nameelse''endifelseif (not self.name.oclIsUndefined() and self.name.size() <> 0) thenself.nameelselet navigableParticipations:OrderedSet(Participation) =self.participation->select(r | r.navigable)->asOrderedSet()inif (navigableParticipations->size() = 1) thenlet domainParticipationName:String = navigableParticipations->first().getHumanReadableParticipationName()inlet notNavigableParticipations:OrderedSet(Participation)=self.participation->reject(r | r.navigable)->asOrderedSet()inif (notNavigableParticipations->size() = 0) thennavigableParticipations.destination->first().name.concat('.').concat(domainParticipationName)elsenotNavigableParticipations->first().destination.name.concat('.').concat(domainParticipationName)endifelseif (navigableParticipations->size() > 0) thenlet connectionName:String = navigableParticipations->iterate(r:Participation; name:String = '' |let participationNameToUpper:String = if (r.destination.name.size() = 0) then''elser.destination.name.substring(1,1).toUpper().concat(if (r.destination.name.size() > 1) then r.destination.name.substring(2, r.destination.name.size()) else '' endif)endifinif (r = navigableParticipations->last()) thenname.concat(participationNameToUpper)elsename.concat(participationNameToUpper).concat('And')endif)in'Between'.concat(connectionName)else''endifendifendifendif
@5743#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.getAllParticipations().destination->asOrderedSet()
@5744#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->collect(r|r.getHumanReadableParticipationName())->asOrderedSet()
@5745#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.navigable and  r.destination <> source).destination->asOrderedSet()
@5746#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.destination = source)->collect(r|r.participationName())->asOrderedSet()
@5747#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.participationName() = rN).lower->first()
@5748#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.participationName() = rN).upper->first()
@5749#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.participationName() = rN).navigable->first()
@5750#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->size()
@5751#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.getDirectSupertypes()->iterate(super;r : OrderedSet(Participation)= OrderedSet{} |r->union(super.oclAsType(Connection).getAllParticipations()->reject(rs|r->exists(rss|rss.participationName()=rs.participationName())))->asOrderedSet())
@5752#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->union(self.getInheritedParticipations()->reject(r | self.participation->exists(rs | rs.participationName() = r.participationName() ) ))->asOrderedSet()
@5753#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#self.participation->select(r | r.participationName() = rN).destination->first()
@5754#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Connection#if self.name.oclIsUndefined() or self.name = '' thenself.participation.represent()->iterate(r:String; res:String='|'| res.concat(r).concat('|'))else self.nameendif
@5755#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#if (self.hasDefaultParticipationName()) thenif (self.destination.name.size() > 0) thenself.destination.name.substring(1,1).toLower().concat(if (self.destination.name.size() > 1) then self.destination.name.substring(2, self.destination.name.size()) else '' endif)else''endifelseself.expressedParticipationNameendif
@5756#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#if (self.expressedParticipationName.oclIsUndefined() or self.expressedParticipationName = '') thentrueelsefalseendif
@5757#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#let destinationName : String = if self.destination.name.oclIsUndefined() or self.destination.name.size() = 0 then'_' else self.destination.name endif inself.participationName().concat('[').concat(self.representMultiplicity()).concat(']').concat(if self.navigable then '->' else '-' endif).concat(destinationName)
@5758#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#if (self.hasDefaultParticipationName()) thenif (self.destination.name.size() > 0) thenself.destination.name.substring(1,1).toLower().concat(if (self.destination.name.size() > 1) then self.destination.name.substring(2, self.destination.name.size()) else '' endif)else''endifelseself.expressedParticipationNameendif
@5759#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#let lowerString:String = if (self.lower > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(            denominator : Integer;            s : String = ''|            let numberAsString : String = OrderedSet{                    '0','1','2','3','4','5','6','7','8','9'                }->at(self.lower.div(denominator).mod(10) + 1)            in                if s='' and numberAsString = '0' then                    s                else                    s.concat(numberAsString)                endif        )else if (self.lower = 0) then'0'else'*'endifendifinlet upperString:String = if (self.upper > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(            denominator : Integer;            s : String = ''|            let numberAsString : String = OrderedSet{                    '0','1','2','3','4','5','6','7','8','9'                }->at(self.upper.div(denominator).mod(10) + 1)            in                if s='' and numberAsString = '0' then                    s                else                    s.concat(numberAsString)                endif        )else if (self.upper = 0) then'0'else'*'endifendifinif (self.lower = 0 and self.upper = -1) then'*'elseif (self.lower = self.upper) thenlowerStringelselowerString.concat('..').concat(upperString)endifendif
@5760#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#self.represent()
@5761#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Participation#let participationNameConforms:Boolean = (self.participationName() = participation.participationName()) or (self.hasDefaultParticipationName() and participation.hasDefaultParticipationName())inparticipationNameConforms and ( self.navigable = participation.navigable)
@5762#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#LMLVisualizer#let default:OrderedSet(String) = self.oclAsType(ecore::EObject).eContainer().eClass().eAllAttributes->collect(a | if a.name <> 'level' then a.name.concat('= default') else a.name.concat('= noshow') endif)->asOrderedSet()inif (self.getContainingElement().oclIsTypeOf(Entity)) thendefault->append('ProximityClassification= 1')->append('DSLRendering= false')->append('ProximityIndication= [](){0}')elseif (self.getContainingElement().oclIsTypeOf(Connection)) thendefault->append('ProximityClassification= 1')->append('DSLRendering= false')->append('ProximityIndication= [](){0}')->append('collapsed= false')elseif (self.getContainingElement().oclIsTypeOf(Generalization)or self.getContainingElement().oclIsTypeOf(SetRelationship)) thendefault->append('collapsed= false')elseif (self.getContainingElement().oclIsTypeOf(Ontology)) thendefault->append('showClassificationParticipationNames = false')elsedefaultendifendifendifendif
@5763#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#LMLVisualizer#let keyValueList : Sequence(String) =self.attributes->select(a | a.size() > key.size())->select(a | a.substring(1, key.size()) = key)->asSequence()inlet keyValue : String =if (keyValueList->size() > 0) thenkeyValueList->first()else''endifinlet indexOfEquals:Integer =--Key not found?if (keyValue <> '') thenSequence{1 .. keyValue.size()}->iterate(i:Integer; index:Integer = -1 | if (index = -1 and keyValue.substring(i,i) = '=') then i else index endif)else-1endifinlet value:String =--No Equals found in keyValueif(indexOfEquals <> -1) thenkeyValue.substring(indexOfEquals + 1, keyValue.size())else''endifinlet valueWithoutLeadingSpace:String = --No value foundif (value <> '') thenif (value.substring(1,1) = ' ' and value.size() > 1) thenvalue.substring(2, value.size())elsevalueendifelse''endifinvalueWithoutLeadingSpace
@5764#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#LMLVisualizer#self.oclAsType(ecore::EObject).eContainer().oclAsType(Element)
@5765#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Attribute#if (self.mutability > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer;s : String = ''|let numberAsString : String = OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(self.mutability.div(denominator).mod(10) + 1)inif s='' and numberAsString = '0' thenselses.concat(numberAsString)endif)elseif (self.mutability = 0) then'0'else'*'endifendif
@5766#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Attribute#if self.datatype.oclIsUndefined() or self.datatype = '' thenself.nameelseself.name.concat('[').concat(self.datatype).concat(']')endif
@5767#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Attribute#let primitiveDatatypes:Sequence(String) = self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'datatype').eAnnotations.details.keyinlet enumerationDatatypes:Sequence(String) =self.getClabject().getOntology().enumerations.namein primitiveDatatypes->union(enumerationDatatypes)->asOrderedSet()
@5768#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/PLM.ecore#body#Method#self.name.concat('(').concat(')')
@5771#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/processors.ecore#body#StoreConfigurationSlotProcessor#for ( ConfigurationSlot slot : getSlots () ){System.out.println ( " ** Storing slot: " + slot );slot.store();}
@5772#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#TopLevelCS#ocl::Root {nestedPackage = ownedNestedPackage --.ast() -- FIXME when BaseCST implemented }
@5773#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#QVToClassCS#ocl::Class {name = name,ownedAttribute = ownedProperty, -- .ast() FIXME when BASECST implementedownedOperation = ownedOperation -- .ast() FIXME when BASECST implemented}
@5774#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#OperationParameterDeclarationCS#qvtoperational::VarParameter {name = name--kind = if direction = DirectionKindCS::inout then--qvtoperational::DirectionKind::inout--   else if direction = DirectionKindCS::out then--   qvtoperational::DirectionKind::out--   else --   qvtoperational::DirectionKind::_in--   endif endif--initExpression = if (initPart.oclIsUndefined()) then--null--else--initPart.expression -- FIXME todo .ast()--endif}
@5775#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#MetamodelCS#ocl::Package {name = name,nsPrefix = name,-- QVTo spec doesn't provide concrete syntax for nsPrefixnsURI = name,-- QVTo spec doesn't provide concrete syntax for nsURI. Build an internal protocolownedType = ownedType -- .ast() FIXME when BaseCST is implemented-- type = TODO}
@5776#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#ClassifierPropertyCS#ocl::Property {name = name,isComposite = qualifier->exists(x | x = 'composite')-- type = TODO}
@5777#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#MappingOperationCS#qvtoperational::MappingOperation {name = name,-- ownedParameter = signature.parameter.ast()ownedParameter = ownedParameter -- FIXME .ast()}
@5778#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/QVTOperationalCS.ecore#body#TransformationCS#qvtoperational::OperationalTransformation {name = name,nsPrefix = name,nsURI = name,nestedPackage = ownedNestedPackage, -- FIXME ,ownedType = ownedType, -- FIXME .ast(),ownedOperation = ownedOperation -- FIXME .ast()}
@5779#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RandL.ecore#body#Transaction#// TODO: implement this method         // Ensure that you remove @generated or mark it @generated NOT body         assert post_getProgram_1();        throw new UnsupportedOperationException();        
@5780#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RandL.ecore#body#Customer#// TODO: implement this method         // Ensure that you remove @generated or mark it @generated NOT body         assert post_birthdayHappens_1();        
@5781#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RandL.ecore#body#LoyaltyProgram#// TODO: implement this method         // Ensure that you remove @generated or mark it @generated NOT body         assert post_selectPopularPartners_1(d );        throw new UnsupportedOperationException();        
@5782#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RandL.ecore#body#LoyaltyProgram#assert pre_enrollAndCreateCustomer_1(n, d );        // TODO: implement this method         // Ensure that you remove @generated or mark it @generated NOT body         assert post_enrollAndCreateCustomer_1(n, d );        throw new UnsupportedOperationException();        
@5783#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RandL.ecore#body#LoyaltyAccount#assert pre_isEmpty_1();        // TODO: implement this method         // Ensure that you remove @generated or mark it @generated NOT body         assert post_isEmpty_1();        throw new UnsupportedOperationException();        
@5784#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RDBMS.ecore#post_a#Table#self.name = n
@5785#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RDBMS.ecore#post_a#Column#self.name = n
@5786#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RDBMS.ecore#post_a#Column#self.table.name = n
@5787#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Element#An element may not directly or indirectly own itself.not self.allOwnedElements()->includes(self)
@5788#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Element#Elements that must be owned must have an owner.self.mustBeOwned() implies owner->notEmpty()
@5789#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@5790#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = true
@5791#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = false
@5792#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Package#If an element that is owned by a package has visibility, it is public or private.self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)
@5793#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = member->select( m | self.makesVisible(m))
@5794#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.self.member->includes(el)result = (ownedMember->includes(el)) or(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
@5795#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#If there is no name, or one of the containing namespaces has no name, there is no qualified name.(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())  implies self.qualifiedName->isEmpty()
@5796#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
@5797#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#If a NamedElement is not owned by a Namespace, it does not have a visibility.namespace->isEmpty() implies visibility->isEmpty()
@5798#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif
@5799#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.result = if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif
@5800#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif
@5801#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.result = '::'
@5802#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#NamedElement#The query allOwningPackages() returns all the directly or indirectly owning packages.result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())
@5803#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Namespace#All the members of a Namespace are distinguishable within it.membersAreDistinguishable()
@5804#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Namespace#The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
@5805#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Namespace#The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.result = if self.ownedMember ->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then elementImports->collect(el | el.getName())  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))  endifendif
@5806#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.result = self.member->forAll( memb |self.member->excluding(memb)->forAll(other |memb.isDistinguishableFrom(other, self)))
@5807#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |mem.imp.isDistinguishableFrom(mem, self)))
@5808#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
@5809#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ElementImport#An importedElement has either public visibility or no visibility at all.self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public
@5810#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = if self.alias->notEmpty() then  self.aliaselse  self.importedElement.nameendif
@5811#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Constraintx#The value specification for a constraint must evaluate to a Boolean value.self.specification().booleanValue().isOclKindOf(Boolean)
@5812#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@5813#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@5814#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@5815#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@5816#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@5817#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@5818#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@5819#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Association#An association specializing another association has the same number of ends as the other association.self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())
@5820#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Association#Only binary associations can be aggregations.self.memberEnd->exists(aggregation <> Aggregation::none) implies self.memberEnd->size() = 2
@5821#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Association#Association ends of associations with more than two ends must be owned by the association.if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)
@5822#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query isTemplate() returns whether this templateable element is actually a template.result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())
@5823#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@5824#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@5825#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#A classifier may only specialize classifiers of a valid type.self.parents()->forAll(c | self.maySpecializeType(c))
@5826#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The general classifiers are the classifiers referenced by the generalization relationships.result = self.parents()
@5827#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@5828#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@5829#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = generalization.general
@5830#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@5831#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true
@5832#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (self=other) or (self.allParents()->includes(other))
@5833#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The inherit operation is overridden to exclude redefined properties.The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.result = inhs
@5834#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@5835#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@5836#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.redefinee.isRedefinitionContextValid(self)result = false
@5837#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))
@5838#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#GeneralizationSet#Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.generalization->collect(g | g.general)->asSet()->size() <= 1
@5839#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#If the language attribute is not empty, then the size of the body and language arrays must be the same.language->notEmpty() implies (body->size() = language->size())
@5840#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#The behavior may only have return result parameters.self.behavior.notEmpty() implies  self.behavior.ownedParameters->select(p | p.direction<>#return)->isEmpty()
@5841#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#The behavior must have exactly one return result parameter.self.behavior.notEmpty() implies  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1
@5842#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.self.isIntegral()true
@5843#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an integer.result = false
@5844#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.self.isIntegral()result = false
@5845#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.self.isIntegral()result = false
@5846#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The lower bound must be a non-negative integer literal.lowerBound()->notEmpty() implies lowerBound() >= 0
@5847#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The upper bound must be greater than or equal to the lower bound.(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
@5848#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The derived lower attribute must equal the lowerBound.result = lowerBound()
@5849#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The derived upper attribute must equal the upperBound.result = upperBound()
@5850#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@5851#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@5852#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@5853#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif
@5854#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif
@5855#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#MultiplicityElement#The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))
@5856#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(Property) and   let prop : Property = redefinee.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isDerived implies prop.isDerived) and  (self.isComposite implies prop.isComposite))
@5857#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#A multiplicity of a composite aggregation must not have an upper bound greater than 1.A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)
@5858#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.self.subsettedProperty->notEmpty() implies  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |    self.subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
@5859#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#A redefined property must be inherited from a more general classifier containing the redefining property.if (redefinedProperty->notEmpty()) then  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))
@5860#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.self.subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound()<=sp.upperBound() ))
@5861#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#Only a navigable property can be marked as readOnly.isReadOnly implies isNavigable()
@5862#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#A binding of a property template parameter representing an attribute must be to an attribute.(isAttribute(self) and (templateParameterSubstitution->notEmpty())  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))
@5863#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some classifier.result = Classifier.allInstances->exists(c | c.attribute->includes(p))
@5864#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2  then    let otherEnd = (association.memberEnd - self)->any() in      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif    else Set {}    endif
@5865#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.result = if association->notEmpty()then association.endType-typeelse if classifier->notEmpty() then Set{classifier} else Set{} endifendif
@5866#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)
@5867#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#Class#A passive class may not own receptions.not self.isActive implies self.ownedReception.isEmpty()
@5868#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#StringExpression#The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.result = if subExpression->notEmpty()then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))
@5869#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#StringExpression#If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having todefine a collating sequence between operands and subexpressions).if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()
@5870#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#InstanceSpecification#The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))
@5871#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#InstanceSpecification#One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
@5872#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.result = true
@5873#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralInteger#The query integerValue() gives the value.result = value
@5874#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.result = true
@5875#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralString#The query stringValue() gives the value.result = value
@5876#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.result = true
@5877#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.result = value
@5878#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.result = true
@5879#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralNull#The query isNull() returns true.result = true
@5880#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.result = true
@5881#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefOntoUML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.result = value
@5882#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#not_own_self#Element#not self.allOwnedElements()->includes(self)
@5883#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#not_own_self$message#Element#'An element may not directly or indirectly own itself.'
@5884#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#has_owner#Element#self.mustBeOwned() implies owner.oclAsSet()->notEmpty()
@5885#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#has_owner$message#Element#'Elements that must be owned must have an owner.'
@5886#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@5887#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#body#Element#ownedElement->union(ownedElement->collect(e : Element | e.allOwnedElements()))
@5888#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = true
@5889#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = false
@5890#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = member->select( m | self.makesVisible(m))
@5891#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.self.member->includes(el)result = (ownedMember->includes(el)) or(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
@5892#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#has_no_qualified_name#NamedElement#self.name.oclAsSet()->isEmpty() or self.allNamespaces()->select(ns : Namespace | ns.name.oclAsSet()->isEmpty())->notEmpty() implies self.qualifiedName.oclAsSet()->isEmpty()
@5893#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#has_no_qualified_name$message#NamedElement#'If there is no name, or one of the containing namespaces has no name, there is no qualified name.'
@5894#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#visibility_needs_ownership#NamedElement#namespace.oclAsSet()->isEmpty() implies visibility.oclAsSet()->isEmpty()
@5895#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#visibility_needs_ownership$message#NamedElement#'If a NamedElement is not owned by a Namespace, it does not have a visibility.'
@5896#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif
@5897#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.result = if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif
@5898#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif
@5899#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.result = '::'
@5900#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#body#NamedElement#'::'
@5901#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#NamedElement#The query allOwningPackages() returns all the directly or indirectly owning packages.result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())
@5902#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#derivation#NamedElement#if name.oclAsSet()->isEmpty() or allNamespaces()->select(ns : Namespace | ns.name.oclAsSet()->isEmpty())->notEmpty() then null else allNamespaces()->iterate(ns : Namespace ; all : String = name | ns.name.concat(separator()).concat(all)) endif
@5903#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#derivation#DirectedRelationship#if self.oclIsKindOf(Generalization) then Set{self.oclAsType(Generalization).specific} else null endif
@5904#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#derivation#DirectedRelationship#if self.oclIsKindOf(Generalization) then Set{self.oclAsType(Generalization).general} else null endif
@5905#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#derivation#Relationship#if self.oclIsKindOf(DirectedRelationship) then self.oclAsType(DirectedRelationship).source->union(self.oclAsType(DirectedRelationship).target) else if self.oclIsKindOf(Association) then self.oclAsType(Association).endType else null endif endif
@5906#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Namespace#The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
@5907#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Namespace#The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.result = if self.ownedMember ->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then elementImports->collect(el | el.getName())  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))  endifendif
@5908#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.result = self.member->forAll( memb |self.member->excluding(memb)->forAll(other |memb.isDistinguishableFrom(other, self)))
@5909#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |mem.imp.isDistinguishableFrom(mem, self)))
@5910#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
@5911#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = if self.alias->notEmpty() then  self.aliaselse  self.importedElement.nameendif
@5912#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@5913#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@5914#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@5915#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@5916#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@5917#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@5918#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@5919#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query isTemplate() returns whether this templateable element is actually a template.result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())
@5920#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The general classifiers are the classifiers referenced by the generalization relationships.result = self.parents()
@5921#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@5922#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@5923#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = generalization.general
@5924#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@5925#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true
@5926#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (self=other) or (self.allParents()->includes(other))
@5927#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The inherit operation is overridden to exclude redefined properties.The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.result = inhs
@5928#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@5929#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@5930#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#body#Classifier#self.parents()->union(self.parents()->collect(p : Classifier | p.allParents()))
@5931#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.redefinee.isRedefinitionContextValid(self)result = false
@5932#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))
@5933#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.self.isIntegral()true
@5934#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an integer.result = false
@5935#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.self.isIntegral()result = false
@5936#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.self.isIntegral()result = false
@5937#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The derived lower attribute must equal the lowerBound.result = lowerBound()
@5938#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The derived upper attribute must equal the upperBound.result = upperBound()
@5939#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@5940#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@5941#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@5942#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif
@5943#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif
@5944#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#MultiplicityElement#The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))
@5945#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(Property) and   let prop : Property = redefinee.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isDerived implies prop.isDerived) and  (self.isComposite implies prop.isComposite))
@5946#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some classifier.result = Classifier.allInstances->exists(c | c.attribute->includes(p))
@5947#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Property#If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2  then    let otherEnd = (association.memberEnd - self)->any() in      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif    else Set {}    endif
@5948#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.result = if association->notEmpty()then association.endType-typeelse if classifier->notEmpty() then Set{classifier} else Set{} endifendif
@5949#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)
@5950#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#StringExpression#The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.result = if subExpression->notEmpty()then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))
@5951#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.result = true
@5952#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralInteger#The query integerValue() gives the value.result = value
@5953#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.result = true
@5954#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralString#The query stringValue() gives the value.result = value
@5955#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.result = true
@5956#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.result = value
@5957#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.result = true
@5958#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralNull#The query isNull() returns true.result = true
@5959#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.result = true
@5960#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RefUML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.result = value
@5961#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/rmap.ecore#documentation#Provider#<p>Some providers are backed by other resource map like files. The PDE map filesand the Team PSF files are examples of this. This method returns the resource maprepresentation of the backing files</p><p>It is the resolvers responsibility to check if the provider is delegating and ifit is, use the delegation map.</p>@return A resource map to use for delegation@throws CoreException if the delegation map cannot be produced@throws UnsupportedOperationException if the provider is not a delegating kind@see #hasDelegationMap()
@5964#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Room.ecore#body#InterfaceItem#if (this instanceof org.eclipse.etrice.core.room.Port)return ((org.eclipse.etrice.core.room.Port) this).getProtocol();else if (this instanceof org.eclipse.etrice.core.room.SAPRef)return ((org.eclipse.etrice.core.room.SAPRef) this).getProtocol();else if (this instanceof org.eclipse.etrice.core.room.SPPRef)return ((org.eclipse.etrice.core.room.SPPRef) this).getProtocol();return null;
@5965#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Room.ecore#body#StateGraphItem#if (this instanceof org.eclipse.etrice.core.room.State) return ((org.eclipse.etrice.core.room.State)this).getName();else if (this instanceof org.eclipse.etrice.core.room.TrPoint) return ((org.eclipse.etrice.core.room.TrPoint)this).getName();else if (this instanceof org.eclipse.etrice.core.room.ChoicePoint) return ((org.eclipse.etrice.core.room.ChoicePoint)this).getName();else if (this instanceof org.eclipse.etrice.core.room.Transition) return ((org.eclipse.etrice.core.room.Transition)this).getName();return "";
@5966#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Room.ecore#body#State#return (this instanceof org.eclipse.etrice.core.room.SimpleState)? ((org.eclipse.etrice.core.room.SimpleState)this).getName() :(this instanceof org.eclipse.etrice.core.room.RefinedState)? (((org.eclipse.etrice.core.room.RefinedState)this).getTarget()==null? "":((org.eclipse.etrice.core.room.RefinedState)this).getTarget().getName()) :"";
@5967#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#L1#Layout#self.oclAsSet()->collect(cells)->forAll(c : PresentationCell | c.row <= self.rows and c.row > 0)
@5968#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#L2#Layout#self.oclAsSet()->collect(cells)->forAll(c : PresentationCell | c.column <= self.columns and c.column > 0)
@5969#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#L3#Layout#self.oclAsSet()->collect(cells)->forAll(c : PresentationCell | self.oclAsSet()->collect(cells)->select(pc : PresentationCell | (pc.row = c.row and pc.column = c.column))->size() = 1)
@5970#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#F1#Filter#self.oclAsSet()->collect(text)->forAll(c : String | c.size() > 0)
@5971#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#S1#Source#self.name.size() > 0
@5972#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#S2#Source#self.url.size() > 0
@5973#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/RSS.ecore#S3#Source#let s : String = self.url.substring(1, 7) in s = 'http://'
@5974#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/saltCommon.ecore#documentation#SDocumentGraph#Tokenizes all {@link STextualDS} object being contained in this {@link SDocumentGraph} object. The Tokenization is similar to the tokenization made by the TreeTagger tokenizer. This method calls the method {@link #createTokenizer()} and initilizes with automatic detected values. The language will be detected automatically for each {@link STextualDS} object by use of the {@link TextCategorizer} (see: <a href="http://textcat.sourceforge.net/doc/org/knallgrau/utils/textcat/TextCategorizer.html">http://textcat.sourceforge.net/doc/org/knallgrau/utils/textcat/TextCategorizer.html</a>). If the language is one of the given ones: english, french, italian and german, abbreviations also taken from the Treetagger will be used.To customize these settings use the method {@link #createTokenizer()}.The used Treetagger is a reimplementation in Java with permission from the original TreeTagger tokenizer in Perl by Helmut Schmid (see: <a href="http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/">http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/</a>).For each token detected in the text given by <code>sTextualDS.getSText()</code> an {@link SToken} object is created and linked with the {@link STextualDS} object via a new {@link STextualRelation} object containing the textual offset.
@5975#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/saltCommon.ecore#documentation#SDocumentGraph#Creates a new {@link Tokenizer} object to tokenize the set {@link STextualDS} objects being contained in this {@link SDocumentGraph} object. To customize the tokenization, set take a look to the properties of the returned {@link Tokenizer} object. This method is used by the method {@link #tokenize()}.The used Treetagger is a reimplementation in Java with permission from the original TreeTagger tokenizer in Perl by Helmut Schmid (see: <a href="http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/">http://www.ims.uni-stuttgart.de/projekte/corplex/TreeTagger/</a>).For each token detected in the text given by <code>sTextualDS.getSText()</code> an {@link SToken} object is created and linked with the {@link STextualDS} object via a new {@link STextualRelation} object containing the textual offset. If the set {@link STextualDS} object is empty or if it does not belong to this {@link SDocumentGraph} object an exception is thrown. 
@5976#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/signature_and_call.ecore#ArgumentsMustMatchParameterList#Call#self.arguments->size() = self.signature.parameters->size()
@6577#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/simTL4J.ecore#body#Class#if ( getLibClass ( "Boolean" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createBoolean(); } if ( getLibClass ( "Byte" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createByte(); } if ( getLibClass ( "Character" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createChar(); } if ( getLibClass ( "Float" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createFloat(); } if ( getLibClass ( "Double" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createDouble(); } if ( getLibClass ( "Integer" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createInt(); } if ( getLibClass ( "Long" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createLong(); } if ( getLibClass ( "Short" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createShort(); } if ( getLibClass ( "Void" ) .equals ( this ) ) { return sg.edu.nus.comp.simTL.language.java.simTL4J.types.TypesFactory.eINSTANCE.createVoid(); } return null ; 
@6578#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/simTL4J.ecore#body#Reference#if ( eContainer() instanceof sg.edu.nus.comp.simTL.language.java.simTL4J.references.Reference ) {  Reference container = (Reference) eContainer( ) ;   if (this.equals(container.getNext())) { return container; }}return null;
@6579#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#TooExpensiveToUseThemTogether#House#eprice > 15 implies ev->forAll(e : EV | e.charging = false) or not wh.on or room.heating->flatten()->forAll(e : Heating | e.level < 3)
@6580#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#SuperExpensiveNotUseAnything#House#eprice > 20 implies ev->forAll(e : EV | e.charging = false) and not wh.on and room.heating->flatten()->forAll(e : Heating | e.level = 0)
@6581#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#WatchDog#House#gate.outlocked implies sec.on
@6582#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#NoWindowOpenWhenSecOn#House#sec.on implies room->select(e : Room | e.name = 'liv').window->flatten()->forAll(e : Window | e.opened = false)
@6583#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__VeryNotSafe#House#gate.outlocked implies sec.on = true
@6584#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#DoNotHeatItForever#WaterHeater#temp < 50 or not on
@6585#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#ColdWaterNeedHeating#WaterHeater#temp < 30 implies on
@6586#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#INeedHotWaterInTheMorning#WaterHeater#house.time < 2 or house.time > 8 or on
@6587#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__HotWaterAlways#WaterHeater#temp < 30 and (house.time < 2 or house.time > 8) implies on = true
@6588#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#LowLeveNeedCharge#EV#if pluged then level < 30 implies charging else true endif
@6589#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#LowPricePleaseCharge#EV#if pluged then house.eprice < 10 implies charging else true endif
@6590#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#TooColdNeedHeating#Room#temp < 18 implies heating->exists(e : Heating | e.level > 0)
@6591#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#ExtremelyColdNeedMoreHeating#Room#temp < 10 implies heating.level->sum() > 3 * heating->size()
@6592#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#NoWindowOpenWhenHeating#Room#window->forAll(e : Window | e.opened = false) or ac->forAll(e : AirConditioner | e.level = 0)
@6593#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#NoHeatingAndCoolingTogether#Room#heating->forAll(e : Heating | e.level = 0) or ac->forAll(e : AirConditioner | e.level = 0)
@6594#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#TooLateNoShouting#Room#house.time > 22 implies projector.volume < 4
@6595#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#ProjectingInDarkness#Room#projector.on and bright > 500 implies light->forAll(e : Light | e.level = 0) and window->forAll(e : Window | e.curtainOn)
@6596#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#INeedFreshAir#Room#air > 5 implies window->exists(e : Window | e.opened)
@6597#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#TooColdToOpenWindow#Room#house.outtemp > 5 or window->forAll(e : Window | not e.opened)
@6598#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__AlwaysOpenWindow#Room#air > 6 and house.outtemp >= 10 implies window->asSequence()->first().opened = true
@6599#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__AlwaysTurnOnFirstHeating#Room#temp < 10 and house.eprice < 20 implies heating->asSequence()->first().level = 10
@6600#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__ILoveCurtains#Room#projector.on implies window->asSequence()->first().curtainOn = true
@6601#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#TooHotOpenAC#AirConditioner#room.temp > 28 implies level > 5
@6602#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#CodeNoAC#AirConditioner#room.temp < 23 implies level = 0
@6603#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#HotOutside#AirConditioner#room.house.outtemp > 30 implies level > 5
@6604#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__HotOutside#AirConditioner#level > 0 implies level = 9
@6605#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__LightWideOpen#Light#level <> 0 implies level = 5
@6606#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#TooNoisyToWatchTVWhenWashing#Projector#if room.wm <> null then not room.wm.on or not on else true endif
@6607#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#OnWhenLoaded#WashingMachine#loaded implies on
@6608#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__WashImmediately#WashingMachine#loaded implies on = true
@6609#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#RunningOutOfPower#Sensor#battery < 20 implies circle < 30
@6610#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#MakeCoffeeForMeInTheMorning#CoffeeMaker#room.house.time = 7 and loaded implies on
@6611#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#NoCarNoCoffee#CoffeeMaker#room.house.ev->exists(e : EV | e.pluged) or on
@6612#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#KeepItWarm#CoffeeMaker#room.temp > 20 implies not warming
@6613#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SmartHouse.ecore#User__IWantWarmed#CoffeeMaker#loaded implies warming = true
@6614#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#UniqueServiceMethodSignatures#ServiceComponent#self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))
@6615#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#LivingComponent#ServiceComponent#ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))
@6616#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#UniqueSCURINamespace#ServiceComponent#ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)
@6617#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#FilledMethodDescription#ServiceMethod#self.description.size() > 0
@6618#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#OnlyRestMethods#ServiceMethod#RestMethod.allInstances()->includes(self)
@6619#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#DifferentParameternames#ServiceMethod#self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)
@6620#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#uniqueEntityNames#Entity#not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))
@6621#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#singleAttributeNameInEntity#Entity#self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)
@6622#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#InternalIDAttribute#Entity#self.ID.attributeOf = self
@6623#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#existingCollectionItem#CollectionType#DataType.allInstances()->exists(d : DataType | self.itemType = d)
@6624#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#UniqueItemType#CollectionType#CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)
@6625#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#uniqueDatatypeNames#ServiceOrientedArchitecture#self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)
@6626#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#uniqueComponentNames#ServiceOrientedArchitecture#self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)
@6627#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#FilledOCLDescription#OCLConstraint#self.description.size() > 0
@6628#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#UniqueLiteralNames#Enum#self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)
@6629#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#LivingDataType#Enum#ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))
@6630#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/SoaModel.ecore#UniqueLiteralValues#Enum#self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)
@6631#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/sokan.ecore#documentation#FacetedRequest#A list of facet names for which valueCounts are needed. <br>See <code>FacetedResponse.getValueCounts()</code> for more information
@6632#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/sokan.ecore#documentation#FacetedRequest#Limits the number of rows that are contained in theresponse content. This can be used to split-up query-result contents to handy parts which get shown in seperate pages. You can consider this <code>int</code> value as the maximum number of results to appear in the page.<br><br>Set to <0, if the result's content should not be limited.<br>Example: 50 values should be shown on the thirdpage, then rows=50 and offset=101. <br>See <code>FacetedRequest.getOffset()</code> for moreinformation
@6633#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/sokan.ecore#documentation#FacetedRequest#If the result of this faceted request should be presented in pages, the Offset can be used to specify the first value of the result set. The first recordto appear in the result set is given by this value.<br><br>Set to <0, if an offset is not needed. <br>Example: 50 values should be shown on the thirdpage, then rows=50 and offset=101. <br>See <code>FacetedRequest.getOffset()</code> for more information.
@6636#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#body#TextualDSLVisualizer#self.getContainingLMLVisualizer().getContainingElement()
@6637#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#body#TextualDSLVisualizer#self.oclAsType(ecore::EObject).eContainer().oclAsType(PLM::LMLVisualizer)
@6638#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#body#TextualVisualizationDescriptor#self.getContainingTextualVisualizer().getContainingPLMElement().oclAsType(PLM::Element)
@6639#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#body#TextualVisualizationDescriptor#let container:OclAny = self.oclAsType(ecore::EObject).eContainer()inif (container.oclIsTypeOf(TextualDSLVisualizer)) thencontainer.oclAsType(TextualDSLVisualizer)-- This is the case if a descriptor is stored in a choiceelsecontainer.oclAsType(TextualVisualizationDescriptor).getContainingTextualVisualizer()endif
@6640#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#body#Value#self.getContainingTextualVisualizer().getContainingPLMElement().oclAsType(PLM::Clabject).getAttributeByName(self.expression)->size() > 0
@6641#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#vaildR#RGBColor#self.R <= 255 and self.R >= 0
@6642#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#vaildR$message#RGBColor#'R must be between 0 and 255'
@6643#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#vaildG#RGBColor#self.G <= 255 and self.G >= 0
@6644#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#vaildG$message#RGBColor#'G must be between 0 and 255'
@6645#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#vaildB#RGBColor#self.B <= 255 and self.B >= 0
@6646#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/textdef.ecore#vaildB$message#RGBColor#'B must be between 0 and 255'
@6861#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Element#An invariant constraint based on the following OCL expression:<code>not self.allOwnedElements()->includes(self)</code>
@6862#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Element#An invariant constraint based on the following OCL expression:<code>self.mustBeOwned() implies owner->notEmpty()</code>
@6863#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Element#A query based on the following OCL expression:<code>ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))</code>
@6864#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif</code>
@6865#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif</code>
@6866#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>upperBound() > 1</code>
@6867#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>(lowerBound() <= C) and (upperBound() >= C)</code>
@6868#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>(self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())</code>
@6869#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#An invariant constraint based on the following OCL expression:<code>upperBound()->notEmpty() implies upperBound() > 0</code>
@6870#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#An invariant constraint based on the following OCL expression:<code>lowerBound()->notEmpty() implies lowerBound() >= 0</code>
@6871#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#An invariant constraint based on the following OCL expression:<code>(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()</code>
@6872#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#An invariant constraint based on the following OCL expression:<code>lower=lowerBound()</code>
@6873#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#An invariant constraint based on the following OCL expression:<code>upper = upperBound()</code>
@6874#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>lowerBound()</code>
@6875#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#MultiplicityElement#A query based on the following OCL expression:<code>upperBound()</code>
@6876#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#NamedElement#An invariant constraint based on the following OCL expression:<code>self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty()implies self.qualifiedName->isEmpty()</code>
@6877#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#NamedElement#An invariant constraint based on the following OCL expression:<code>(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) impliesself.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name |ns.name->union(self.separator())->union(result))</code>
@6878#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#NamedElement#A query based on the following OCL expression:<code>if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif</code>
@6879#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#NamedElement#A query based on the following OCL expression:<code>if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif</code>
@6880#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#NamedElement#A query based on the following OCL expression:<code>if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif</code>
@6881#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#NamedElement#An invariant constraint based on the following OCL expression:<code>namespace->isEmpty() implies visibility->isEmpty()</code>
@6882#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Namespace#An invariant constraint based on the following OCL expression:<code>membersAreDistinguishable()</code>
@6883#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Namespace#A query based on the following OCL expression:<code>if self.ownedMember->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in    if elementImports->notEmpty()    then elementImports->collect(el | el.getName())    else         self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))->collect(pi | pi.importedPackage.getNamesOfMember(element))    endifendif</code>
@6884#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Namespace#An invariant constraint based on the following OCL expression:<code>self.importedMember->includesAll(self.importedMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers()))))</code>
@6885#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Namespace#A query based on the following OCL expression:<code>self.importedMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))</code>
@6886#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#A query based on the following OCL expression:<code>(redefinee.oclIsKindOf(Property) and     let prop: Property = redefinee.oclAsType(Property) in        type.conformsTo(prop.type) and        (lowerBound()->notEmpty and prop.lowerBound()->notEmpty() implies lowerBound() >= prop.lowerBound())    and        (upperBound()->notEmpty and prop.upperBound()->notEmpty() implies upperBound() <= prop.upperBound())    and        (prop.isDerived implies isDerived))</code>
@6887#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#An invariant constraint based on the following OCL expression:<code>opposite = if owningAssociation->notEmpty() and association.memberEnd->size() = 2 then let otherEnd = (association.memberEnd - self)->any() in if otherEnd.owningAssociation->notEmpty then otherEnd else Set{} endifelse Set {}endif</code>
@6888#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#A query based on the following OCL expression:<code>if owningAssociation->notEmpty() and association.memberEnd->size() = 2 then let otherEnd = (association.memberEnd - self)->any() in if otherEnd.owningAssociation->notEmpty then otherEnd else Set{} endifelse Set {}endif</code>
@6889#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#An invariant constraint based on the following OCL expression:<code>isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)</code>
@6890#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#An invariant constraint based on the following OCL expression:<code>subsettedProperty->notEmpty() implies(subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |subsettedProperty->forAll(sp | sp.subsettingContext()->exists(c | sc.conformsTo(c)))))</code>
@6891#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#An invariant constraint based on the following OCL expression:<code>(subsettedProperty->exists(sp | sp.class->notEmpty())implies class->notEmpty())and(redefinedProperty->exists(rp | rp.class->notEmpty())implies class->notEmpty())</code>
@6892#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#An invariant constraint based on the following OCL expression:<code>subsettedProperty->forAll(sp |type.conformsTo(sp.type) and((upperBound()->notEmpty() and sp.upperBound()->notEmpty()) impliesupperBound()<=sp.upperBound() ))</code>
@6893#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#An invariant constraint based on the following OCL expression:<code>isReadOnly implies class->notEmpty()</code>
@6894#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Property#A query based on the following OCL expression:<code>if association->notEmpty()then association.endType-type else if classifier->notEmpty then Set{classifier} else Set{} endifendif</code>
@6895#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#A query based on the following OCL expression:<code>if returnResult->size() = 1 then returnResult->any().lower else Set{} endif</code>
@6896#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#A query based on the following OCL expression:<code>if returnResult->size() = 1 then returnResult->any().upper else Set{} endif</code>
@6897#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#A query based on the following OCL expression:<code>(redefinee.oclIsKindOf(Operation) and    let op: Operation = redefinee.oclAsType(Operation) in        self.formalParameter.size() = op.formalParameter.size() and        self.returnResult.size() = op.returnResult.size() and        forAll(i | op.formalParameter[i].type.conformsTo(self.formalParameter[i].type)) and        forAll(i | op.returnResult[i].type.conformsTo(self.returnResult[i].type)))</code>
@6898#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#An invariant constraint based on the following OCL expression:<code>if returnResult->size() = 1 then  type = returnResult.typeelse  type = nilendif</code>
@6899#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#A query based on the following OCL expression:<code>if returnResult->size() = 1 then returnResult->any().isOrdered else false endif</code>
@6900#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#A query based on the following OCL expression:<code> if returnResult->size() = 1 then returnResult->any().isUnique else true endif</code>
@6901#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#A query based on the following OCL expression:<code>if returnResult->size() = 1 then returnResult->any().type else Set{} endif</code>
@6902#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Operation#An invariant constraint based on the following OCL expression:<code>bodyCondition->notEmpty() implies isQuery</code>
@6903#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Package#An invariant constraint based on the following OCL expression:<code>self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)</code>
@6904#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Package#A query based on the following OCL expression:<code>el.visibility->isEmpty() or el.visibility = #public</code>
@6905#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#An invariant constraint based on the following OCL expression:<code>not self.allParents()->includes(self)</code>
@6906#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#An invariant constraint based on the following OCL expression:<code>self.parents()->forAll(c | self.maySpecializeType(c))</code>
@6907#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#An invariant constraint based on the following OCL expression:<code>self.inheritedMember->includesAll(self.inherit(self.parents()->collect(p | p.inheritableMembers(self)))</code>
@6908#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#A query based on the following OCL expression:<code>self.inherit(self.parents()->collect(p | p.inheritableMembers(self))</code>
@6909#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#A query based on the following OCL expression:<code>self.parents()->union(self.parents()->collect(p | p.allParents())</code>
@6910#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#A query based on the following OCL expression:<code>self.parents()</code>
@6911#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#An invariant constraint based on the following OCL expression:<code>general = self.parents()</code>
@6912#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#Classifier#A query based on the following OCL expression:<code>(self=other) or (self.allParents()->includes(other))</code>
@6913#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#BehavioralFeature#A query based on the following OCL expression:<code>if n.oclIsKindOf(BehavioralFeature)then    if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()    then Set{}->include(self)->include(n)->isUnique( bf | bf.parameter->collect(type))    else true    endifelse trueendif</code>
@6914#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#InstanceSpecification#An invariant constraint based on the following OCL expression:<code>slot->forAll(s |  classifier->exists(c | c.allFeatures()->includes(s.definingFeature))</code>
@6915#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#InstanceSpecification#An invariant constraint based on the following OCL expression:<code>classifier->forAll(c |(c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1))</code>
@6916#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#RedefinableElement#A query based on the following OCL expression:<code>self.redefinitionContext->exists(c | redefinable.redefinitionContext->exists(r | c.allParents()->includes(r)))</code>
@6917#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#ElementImport#An invariant constraint based on the following OCL expression:<code>self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public</code>
@6918#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/UML2.ecore#documentation#ElementImport#A query based on the following OCL expression:<code>if self.alias->notEmpty() then     self.aliaselse    self.importedElement.nameendif</code>
@7353#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/urdad.ecore#requestClassNameEqualsServiceNamePlusRequest#ServiceContract#  (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
@7354#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/urdad.ecore#resultClassNameEqualsServiceNamePlusResult#ServiceContract#  (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
@7355#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/WebIDL.ecore#body#Interface#EList<Operation> lResult = new org.eclipse.emf.common.util.BasicEList<Operation>();for(java.util.Iterator<InterfaceMember> ite=this.getMembers().iterator();ite.hasNext();){InterfaceMember lIm = ite.next();if (lIm instanceof Operation){lResult.add((Operation)lIm);}}return lResult;
@7356#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/WebIDL.ecore#body#Interface#EList<Attribute> lResult = new org.eclipse.emf.common.util.BasicEList<Attribute>();for(java.util.Iterator<InterfaceMember> ite=this.getMembers().iterator();ite.hasNext();){InterfaceMember lIm = ite.next();if (lIm instanceof Attribute){lResult.add((Attribute)lIm);}}return lResult;
@7357#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/webpage.ecore#body#Article#if (eIsProxy()) return super.toString();    StringBuffer result = new StringBuffer(super.toString());    result.append("Article: ");    result.append(name);    return result.toString(); 
@7358#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Width_of_page_must_be_non_negative#Page#width >= 0
@7359#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Width_of_page_must_be_non_negative$message#Page#'The page has a negative width.'
@7360#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Height_of_page_must_be_non_negative#Page#height >= 0
@7361#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Height_of_page_must_be_non_negative$message#Page#'The page has a negative height.'
@7362#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Width_of_component_must_be_non_negative#Component#width >= 0
@7363#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Height_of_componentmust_be_non_negative#Component#height >= 0
@7364#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Header_level_of_text_field_must_be_0_to_6#Text_field#header_level >= 0 and header_level <= 6
@7365#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Pages_must_have_unique_titles#Webshop_builder_3k#self.pages->collect(title)->size() = self.pages->collect(title)->asSet()->size()
@7366#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Webshop_must_have_index_page#Webshop_builder_3k#not index_page.oclIsUndefined()
@7367#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Index_page_must_have_result_list#Webshop_builder_3k#index_page.oclIsUndefined() or index_page.components->select(oclIsTypeOf(Result_list))->size() = 1
@7368#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Details_page_must_have_item#Webshop_builder_3k#item_details_page.oclIsUndefined() or item_details_page.components->select(oclIsTypeOf(Item))->size() = 1
@7369#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#Navigation_button_must_have_picture_or_text#Navigation_button#self.picture.oclAsSet()->size() + self.text.oclAsSet()->size() >= 1
@7370#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Webshop_Builder_3k_Model.ecore#thickness_positive#Border#thickness > 0
@7371#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/WML.ecore#body#WMLTag#EList<WMLTag> result = new org.eclipse.emf.common.util.BasicEList<WMLTag>();        for ( WMLExpression expression : getExpressions( ) ) {            if ( expression.isWMLTag( ) )                result.add( expression.asWMLTag( ) );        }        return result;
@7372#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/WML.ecore#body#WMLTag#EList<WMLKey> result = new org.eclipse.emf.common.util.BasicEList<WMLKey>();        for ( WMLExpression expression : getExpressions( ) ) {            if ( expression.isWMLKey( ) )                result.add( expression.asWMLKey( ) );        }        return result;
@7373#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/Worthwhile.ecore#body#BooleanLiteral#return this.isValue();
@7375#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/XMA_GUIDesigner.ecore#documentation#NotebookPage#If false, the Notebook Page will be added automatically to the TabFolder, else the page has to be added manually (e.g. in th enter() method of the outer page)..
@7376#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/XMA_GUIDesigner.ecore#documentation#XMATreeColumn#Calls pack() on all columns.  
@7377#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/XMA_GUIDesigner.ecore#documentation#XMACombo#Specifies if the "Data Source" is determined at UI-design-time (the default) or dynamically at application-runtime (this is called "dynamic"). If "YN Dynamic" is set to false, the field "Data Source" specifies where the list of values displayed in the combo-box is drawn from. Otherwise, i.e., "YN Dynamic" is set to true, the value entered in "Data Source" is ignored and the application must set the data-source explicitely in code. The latter is done either by using the method IListDomWM.setDataSource() or connecting the widget-model to an ADomain-AtomicAttrVal, where the data-source is taken from the ADomain.
@7378#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/XMA_GUIDesigner.ecore#documentation#XMATableColumn#Calls pack() on all columns.  
@7379#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/xpl.ecore#body#XplManager#getNetworkStateListeners().add(listener);
@7380#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/xpl.ecore#body#XplManager#getNetworkStateListeners().remove(listener);
@7381#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/xpl.ecore#body#XplManager#getDeviceDiscoveryListeners().add(listener);
@7382#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/xpl.ecore#body#XplManager#getDeviceDiscoveryListeners().remove(listener);
@7383#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/xpl.ecore#documentation#XplManager#Network IP address to which the manager will try to reach the xPL network.<br>This can be configured before calling {@ #connect()} method.<br>Default value will be automatically configured to the LAN IP address (if any, or to loopback interface in the worst case)
@7384#E:/FinalProject Repos/repos\damenac\puzzle\examples\empirical-study\puzzle.empirical.study\githubmetamodels/xpl.ecore#body#XplDeviceIdentity#return getVendorID()+"-"+getDeviceID()+"."+getInstanceID();
@8024#E:/FinalProject Repos/repos\damenac\puzzle\plugins\fr.inria.diverse.puzzle.merge\data-test/Java.ecore#body#Type#//method has to be specified in subclassesthrow new java.lang.UnsupportedOperationException();
@14171#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#ReplicasNumber#Deployment#replicas>0
@14172#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#sameNameLabels#Deployment#labels -> isUnique(key)
@14173#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#sameContainerName#Deployment#containers -> isUnique(name)
@14174#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#sameContainerPort#Deployment#containers -> isUnique(containerPort)
@14175#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#sameNameEnvironment#Container#environments -> isUnique(name)
@14176#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#sameServiceName#Kubernetes#services -> isUnique(name)
@14177#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#sameServicePort#Kubernetes#services -> isUnique(port)
@14178#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-kubernetes-editor\metamodel/kubernetes.ecore#cloudLocal#Kubernetes#cloud = CloudType::LOCAL implies services -> forAll (s:Service | s.type<>ServiceType::LoadBalancer)
@14179#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-microservices-editor\metamodel/microservices.ecore#sameName#Application#self.microservices->isUnique(m:Microservice | m.name)
@14180#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-microservices-editor\metamodel/microservices.ecore#samePort#Application#self.microservices->isUnique(m:Microservice | m.port)
@14181#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-microservices-editor\metamodel/microservices.ecore#emptyPort#Application#self.microservices->forAll(m:Microservice | m.port = 0) implies self.microservices.port = self.microservices.imagePort
@14182#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-microservices-editor\metamodel/microservices.ecore#sameName#Microservice#self.group->isUnique(g:Group | g.name)
@14183#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-microservices-editor\metamodel/microservices.ecore#dosExternal#Microservice#self.toConnection ->select(type = ConnectionType::EXTERNAL)->size()<=1
@14184#E:/FinalProject Repos/repos\dani8art\model-driven-microservices-generator\MDMG-microservices-editor\metamodel/microservices.ecore#external#Connection#type = ConnectionType::EXTERNAL implies toMicroservice->isEmpty()
@14237#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#threeThereShallNotExist#ManufacturingSystem#self.consistsOf->selectByKind(Step).oclAsType(ManufacturingSystemElement).responsible->excludes(self.responsible)
@14238#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#fiveNoEndStorage#ManufacturingSystem#self.consistsOf.transition-> forAll(m:ManufacturingSystemElement| m.transition <> self.start)
@14239#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#oneResponsible#Step#self.responsible->size() = 1
@14240#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#sevenOutputInputs#Step#Step.allInstances()->select(transition->includes(self))->forAll(output.outputTypes->excludesAll(self.input->selectByType(WorkPieceCondition).requiresType)=false)
@14241#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#nineForEachStep#Step#Step.allInstances()->select(transition->includes(self))->selectByKind(Step)->forAll(speed<=self.speed)
@14242#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#secondEachResponsibleThree#Responsible#let ms:Integer = Step.allInstances()->select(responsible=self)->size() in ms>0 and ms<4
@14243#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#fourNoStartStorage#StoragePoint#ManufacturingSystem.allInstances()->collect(start)->includes(self) implies ManufacturingSystemElement.allInstances() -> collect(transition) -> excludes(self)
@14244#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#fiveTransitionShallOnlyConnect#ManufacturingSystemElement#ManufacturingSystem.allInstances()->select(consistsOf->includes(self)).ManufacturingSystem::consistsOf->includesAll(self.transition)
@14245#E:/FinalProject Repos/repos\davidust\assignment5mde\assignment3\model/manufacturingSystem.ecore#eightForCompositeSteps#CompositeStep#self.input->selectByKind(WorkPieceCondition).requiresType ->includesAll(self.contains.start.stores)and self.output.outputTypes->includesAll(self.contains.end.stores)
@14246#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#AtMostOneReturnParameter#Function#self.parameters->select(p |p.direction = ParameterDirectionKind::RETURN)->size() <= 1
@14247#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#AttributeSpecificationValidAttribute#StateSystem#self.attributes->union(self.systemUnit.attributes)->includesAll(self.processibleEvents->selectByKind(ChangeEvent).changeExpression.booleanFunctionCall.parameters.valueSpecification->selectByKind(AttributeValueSpecification).attribute)
@14248#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneInitialState#StateSystem#self.nodes->selectByKind(State)->select(s | s.initial)->size() = 1
@14249#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#MaxOneTerminalState#StateSystem#self.nodes->selectByKind(State)->select(s | s.terminal)->size() <= 1
@14250#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#NoIncomingEdgeForInitalState#StateSystem#self.edges.target->selectByKind(State)->select(s | s.initial)->size() = 0
@14251#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneOutgoingEdgeForInitalState#StateSystem#self.edges.source->selectByKind(State)->select(s | s.initial)->size() = 1
@14252#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneIncomingEdgeForTerminalState#StateSystem#self.nodes->selectByType(State)->select(s |s.terminal)->size() = 0 or self.edges.target->selectByType(State)->select(s | s.terminal)->size() = 1
@14253#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#NoOutgoingEdgeForTerminalState#StateSystem#self.edges.source->selectByKind(State)->select(s |s.terminal)->size() = 0
@14254#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneIncomingEdge#SelectionDivergence#self.incomingEdges->size() = 1
@14255#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#AtLeastTwoOutgoingEdges#SelectionDivergence#self.outgoingEdges->size() >= 2
@14256#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#SuccessorTransitionMustDefineTrigger#SelectionDivergence#self.outgoingEdges.target->selectByType(Transition)->select(t |t.trigger.oclIsUndefined())->size() <= 1
@14257#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OutgoingEdgeTargetIsValid#SelectionDivergence#self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(Transition))
@14258#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#AtLeastTwoIncomingEdges#SelectionConvergence#self.incomingEdges->size() >= 2
@14259#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneOutgoingEdge#SelectionConvergence#self.outgoingEdges->size() = 1
@14260#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OutgoingEdgeTargetIsValid#SelectionConvergence#self.outgoingEdges.target->forAll(t | t.oclIsTypeOf(State))
@14261#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#StateTypeIsValid#State#not (self.terminal and self.initial)
@14262#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#NoActionsForIntialOrTerminalState#State#not (self.initial or self.terminal) or self.actionSequence->isEmpty()
@14263#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#RegularStateEdgesAreValid#State#(self.initial or self.terminal) or (self.incomingEdges->size() = 1 and self.outgoingEdges->size() = 1)
@14264#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OutgoingEdgeTargetIsValid#State#self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(Transition) or t.oclIsTypeOf(SelectionDivergence))
@14265#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneIncomingEdge#Transition#self.incomingEdges->size() = 1
@14266#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneOutgoingEdge#Transition#self.outgoingEdges->size() = 1
@14267#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OutgoingEdgeTargetIsValid#Transition#self.outgoingEdges.target->forAll(t |t.oclIsTypeOf(State) or t.oclIsTypeOf(SelectionConvergence))
@14268#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#OneParameterValueForEachDefinedParameter#FunctionCall#self.parameters.parameter->includesAll(self.function.parameters->select(p| p.direction = ParameterDirectionKind::IN))
@14269#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#FunctionCallParameterValid#ParameterValue#self.functionCall.function.parameters->includes(self.parameter)
@14270#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#AttributeSpecificationValidType#AttributeValueSpecification#self.attribute.type = self.parameterValue.parameter.type
@14271#E:/FinalProject Repos/repos\DavidZaf\Lab3\at.ac.tuwien.big.statesml.transformations\metamodels/statesml.ecore#HasBooleanReturnParameter#ChangeExpression#self.booleanFunctionCall.function.parameters->exists(p |p.direction = ParameterDirectionKind::RETURN and p.type.name = 'Boolean')
@14292#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#typeHierarchy#Artifact#type.containerTypes->includes(parent.type) or parent = null
@14293#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#allowedAttributes#Artifact#attributes->forAll(a : Attribute | a.artifactTypes->includes(self.type)) or type = null
@14294#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#stateSequence#State#(next->excludes(self) or next->size() = 0) and (previous->excludes(self) or previous->size() = 0)
@14295#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#allowedAttributeValues#State#values->forAll(v : Value | artifact.attributes->includes(v.ofAttribute))
@14296#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#uniqueAttributeValues#State#artifact.attributes->forAll(a : Attribute | values->select(v : Value | (v.ofAttribute = a))->size() <= 1)
@14297#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#State#            if (activity->isEmpty())             then OrderedSet{}             else self->collect(s : State | self.activity.targetState)             endif
@14298#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#State#            if (fromActivity->isEmpty())             then OrderedSet{}             else self->collect(s : State | self.fromActivity.state)             endif
@14299#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#State#            if (fromActivity->isEmpty())            then null            else null            endif
@14300#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#activityStates#Activity#state <> targetState
@14301#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#allowedValueDeltas#Activity#deltas->forAll(d : Delta | state.artifact.attributes->includes(d.value.ofAttribute))
@14302#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#uniqueValueDeltas#Activity#state.artifact.attributes->forAll(a : Attribute | deltas->select(d : Delta | (d.value.ofAttribute = a))->size() <= 1)
@14303#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#Value#ofAttribute.name
@14304#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#Delta#activity.targetState.values->select(v : Value | v.ofAttribute = self.onAttribute)->last()
@14305#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#Delta#activity.state.values->select(v : Value | v.ofAttribute = self.onAttribute)->last()
@14306#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#Delta#if targetValue.oclIsUndefined() or value.oclIsUndefined() then 0 else targetValue.content - value.content endif
@14307#E:/FinalProject Repos/repos\DECENTSoftwareAssessment\DECENT.Meta\model/DECENTv2.ecore#derivation#ActivityValue#ofAttribute.name
@14308#E:/FinalProject Repos/repos\deep-modeling\melanee-formdsl\plugins\org.melanee.formdsl.model.weaving\model/Model2WidgetWeaving.ecore#body#WeavingModel#WeavingLink.allInstances()->select(l | l.PLMElement = PLMElement)->asOrderedSet()->first().WidgetElement
@14309#E:/FinalProject Repos/repos\deep-modeling\melanee-formdsl\plugins\org.melanee.formdsl.models.definition\model/formdsldef.ecore#body#FormVisualizer#'form'
@14310#E:/FinalProject Repos/repos\deep-modeling\melanee-tabledsl\plugins\org.melanee.tabledsl.models.definition\model/tabledef.ecore#body#TableVisualizer#'table'
@14311#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#body#TextualVisualizer#self.getContainingLMLVisualizer().getContainingElement()
@14312#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#body#TextualVisualizer#self.oclAsType(ecore::EObject).eContainer().oclAsType(PLM::LMLVisualizer)
@14313#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#body#TextualVisualizer#'text'
@14314#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#body#TextualVisualizationDescriptor#self.getContainingTextualVisualizer().getContainingPLMElement().oclAsType(PLM::Element)
@14315#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#body#TextualVisualizationDescriptor#let container:OclAny = self.oclAsType(ecore::EObject).eContainer()inif (container.oclIsTypeOf(TextualVisualizer)) thencontainer.oclAsType(TextualVisualizer)-- This is the case if a descriptor is stored in a choiceelseif(container.oclIsTypeOf(Aspect)) thencontainer.oclAsType(ecore::EObject).eContainer().oclAsType(TextualVisualizer)elsecontainer.oclAsType(TextualVisualizationDescriptor).getContainingTextualVisualizer()endifendif
@14316#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#body#Value#self.getContainingTextualVisualizer().getContainingPLMElement().oclAsType(PLM::Clabject).getAttributeByName(self.expression)->size() > 0
@14317#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#vaildR#RGBColor#self.R <= 255 and self.R >= 0
@14318#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#vaildR$message#RGBColor#'R must be between 0 and 255'
@14319#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#vaildG#RGBColor#self.G <= 255 and self.G >= 0
@14320#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#vaildG$message#RGBColor#'G must be between 0 and 255'
@14321#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#vaildB#RGBColor#self.B <= 255 and self.B >= 0
@14322#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.definition\model/textdef.ecore#vaildB$message#RGBColor#'B must be between 0 and 255'
@14323#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#WeavingModel#WeavingLink.allInstances()->select(oclIsTypeOf(WeavingLink))->select(l | l.modelElement = element)->asOrderedSet()
@14324#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#WeavingModel#TraitWeavingLink.allInstances()->select(l | l.modelElement = element)->asOrderedSet()
@14325#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#WeavingModel#let allTextElements:Set(TextElement) =TextElement.allInstances()inlet closestDistance:Integer = allTextElements->collect(e | offset - e.offset)->select(n | n >= 0)->min()inallTextElements->select(e | (((offset - e.offset) = closestDistance)or( (closestDistance = 0) and ( offset - (e.offset + e.length) ) = closestDistance)))->asOrderedSet()->sortedBy(t | t.offset)
@14326#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#WeavingModel#let textElements:OrderedSet(TextElement) =self.findTextElementForOffset(offset)in-- If the closes distance is not 0 there is no decision to takeif (textElements->size() <= 1) thentextElementselse--Hit an Attribute and want Attributes -> everything is fineif (self.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Attribute))->size() > 0 and strategy = SearchStrategy::AttributePreferred) thenself.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Attribute))else--Hit an Entity and want an Entity -> everything is fineif (self.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclIsTypeOf(TraitWeavingLink))->size() > 0 and strategy = SearchStrategy::TraitPreferred) thenself.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclIsTypeOf(TraitWeavingLink))else--Hit an Entity and want an Entity -> everything is fineif (self.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Entity))->size() > 0 and strategy = SearchStrategy::EntityPreferred) thenself.findTextElementForOffset(offset)->select(t | t.oclAsType(ecore::EObject).eContainer().oclAsType(WeavingLink).modelElement.oclIsTypeOf(PLM::Entity))else--Bad lucktextElementsendifendifendifendif
@14327#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#WeavingLink#let firstChild:WeavingModelContent = self.children->first()inif (firstChild.oclIsUndefined()) then-1elseif (firstChild.oclIsTypeOf(TextElement)) thenfirstChild.oclAsType(TextElement).offsetelsefirstChild.oclAsType(WeavingLink).calculateOffset()endifendif 
@14328#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#WeavingLink#let lastChild:WeavingModelContent = self.children->last()inif (lastChild.oclIsUndefined()) then-1elseif (lastChild.oclIsTypeOf(TextElement)) then(lastChild.oclAsType(TextElement).offset + lastChild.oclAsType(TextElement).length) - self.calculateOffset()elselastChild.oclAsType(WeavingLink).calculateLength()endifendif 
@14329#E:/FinalProject Repos/repos\deep-modeling\melanee-textdsl\plugins\org.melanee.textdsl.models.weaving\model/M2TWeaving.ecore#body#TextElement#self.text.trim().size()
@14330#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#inputsAreProvidedByDataSources#ComputeNode#ComputeNode.allInstances() ->forAll(n | n.processInputData -> forAll( i |i.providedBy -> size() >0)  )
@14331#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#allUsersMustHaveReadPermissionOnInputData#ComputeNode#ComputeNode.allInstances() ->forAll(n | n.processInputData -> forAll(d |User.allInstances() -> select(u |u.hasComputeNode -> includes(n)) ->forAll(u |u.hasRole -> exists(r |r.hasPermission ->  exists( p |p.protectedData = d andp.actionType -> exists (a |a.operation = DataOperation::READ))))))
@14332#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#outputStoredDataMustBeProvided#ComputeNode#ComputeNode.allInstances() ->forAll(n | n.produceOutputData -> forAll(d |n.storeOutput -> forAll( s |d.providedBy -> includes(s)) ))
@14333#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#allUsersMustHaveCreatePermissionOnOutputData#ComputeNode#ComputeNode.allInstances() ->forAll(n | n.produceOutputData -> forAll(d |User.allInstances() -> select(u |u.hasComputeNode -> includes(n)) ->forAll(u |u.hasRole -> exists(r |r.hasPermission ->  exists( p |p.protectedData = d andp.actionType -> exists (a |a.operation = DataOperation::CREATE))))))
@14334#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#protectsProvidedData#Permission#Permission.allInstances() ->forAll(p | p.protectedData.providedBy ->size() > 0 )
@14335#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#declaredFieldsBelongToProtectedData#Permission#Permission.allInstances() ->forAll(p | p.actionType -> forAll( a |a.schemaField -> forAll(f |p.protectedData.fields -> includes(f))))
@14336#E:/FinalProject Repos/repos\dice-project\DICE-Models\io.github.dice-project.dpim\model/dpim.ecore#nonReadPermissionsRequireStoredProtectedData#Permission#Permission.allInstances() ->select(p |p.actionType -> exists(a |not a.operation = DataOperation::READ)) -> forAll(p | p.protectedData.providedBy -> exists( ds |ds.oclIsKindOf(StorageSystem)))
@14337#E:/FinalProject Repos/repos\dice-project\DICER\dicer-core\metamodels/ddsm.ecore#hasSingleExecutionPlatorm#ClientNode#requiredexecutionplatform ->one(platform |  ExecutionBinding.allInstances() ->  exists(binding | binding.requiredexecutionplatform.elementId = platform.elementId and(binding.providedexecutionplatform.owner.oclIsKindOf(MasterSlavePlatform) orbinding.providedexecutionplatform.owner.oclIsKindOf(PeerToPeerPlatform))))
@14338#E:/FinalProject Repos/repos\dice-project\DICER\dicer-core\metamodels/ddsm.ecore#stormClusterDependsOnZookeeper#StormCluster#Relationship.allInstances() ->exists(r | self.requiredport -> exists(p |p.elementId = r.requiredport.elementId and(r.providedport.owner.oclIsTypeOf(ZookeeperCluster) orr.providedport.owner.oclIsTypeOf(ZookeeperQuorum))))
@14339#E:/FinalProject Repos/repos\dice-project\DICER\dicer-core\metamodels/ddsm.ecore#peerPlatformsNeedBinding#PeerToPeerPlatform#requiresPeerVm -> forAll(platform | ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = platform.elementId and      b.providedexecutionplatform.owner.oclIsTypeOf(VM)))
@14340#E:/FinalProject Repos/repos\dice-project\DICER\dicer-core\metamodels/ddsm.ecore#slavePlatformsNeedBinding#MasterSlavePlatform#requiresSlaveVm -> forAll(platform | ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = platform.elementId and          b.providedexecutionplatform.owner.oclIsTypeOf(VM)))
@14341#E:/FinalProject Repos/repos\dice-project\DICER\dicer-core\metamodels/ddsm.ecore#masterPlatformNeedBinding#MasterSlavePlatform#ExecutionBinding.allInstances() ->exists(b | b.requiredexecutionplatform.elementId = requiresMasterVm.elementId and          b.providedexecutionplatform.owner.oclIsTypeOf(VM))
@14342#E:/FinalProject Repos/repos\dice-project\DICER\dicer-core\metamodels/ddsm.ecore#kafkaClusterDependsOnZookeeper#KafkaCluster#Relationship.allInstances() ->exists(r | self.requiredport -> exists(p |p.elementId = r.requiredport.elementId andr.providedport.owner.oclIsTypeOf(ZookeeperCluster)))
@14343#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#UniqueVariableNames#ADT#Tuple {message : String = 'The following variables are defined more than once: ' + variables->select(v | (variables->select(v1 | (v1.name = v.name))->size() > 1))->collect(name)->toString(),status : Boolean = variables->isUnique(name)}.status
@14344#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#NameNotEmpty#ASort#Tuple {message : String = 'Cannot assign empty name to sort',status : Boolean = name <> ''}.status
@14345#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#SuperSortNotNull#SubSort#Tuple {message : String = 'The super sort of sort ' + name + 'cannot be null',status : Boolean = superSort <> null}.status
@14346#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#UniqueSorts#Signature#Tuple {message : String = 'There are some sorts in the adt that appear more than once: ' + sorts->select(s1 | (sorts->select(s2 | (s2.name = s1.name))->size() > 1))->collect(name)->toString(),status : Boolean = sorts <> null implies sorts->isUnique(name)}.status
@14347#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#UniqueOperations#Signature#Tuple {message : String = 'There are some operations in the adt that appear more than once: ' + allOperations->select(op1 | (allOperations->select(op2 | (op2.name = op1.name))->size() > 1))->collect(name)->toString(),status : Boolean = allOperations->isUnique(name)}.status
@14348#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#NameNotEmpty#VariableDeclaration#name <> ''
@14349#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#ValidReturnType#Operation#Tuple {message : String = 'The return type for operation ' + name + ' was not set.',status : Boolean = returnType <> null}.status
@14350#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#CorrectNumberOfParameters#Term#Tuple {message : String = 'Invalid number of parameters for term: ' + self.toString() + '. Required ' +operationSymbol.formalParameters->size()->toString() + ', found ' + subterms->size()->toString(),status : Boolean = (operationSymbol <> null) implies subterms->size() = operationSymbol.formalParameters->size()}.status
@14351#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#CorrectTypeOfParameters#Term#Tuple {message : String = 'Invalid type of parameters for term: ' + self.toString(),status : Boolean = subterms <> nullimplies subterms->forAll(p | ((p.sort <> null) and (operationSymbol <> null)) impliesp.sort.isSubSortOf(operationSymbol.formalParameters->at(subterms->indexOf(p))))}.status
@14352#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.adt\model/adt.ecore#RightAdtSubterms#Term#Tuple {message : String = 'Some subterms do not have the same adt as the parent term: ' +self.toString(),status : Boolean = (subterms <> null) implies subterms->forAll(t | t.adt = self.adt)}.status
@14353#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.ts\model/transitionsystem.ecore#UniqueVariableParameters#DeclaredStrategy#Tuple {message : String = 'The parameter names are not unique for declared strategy: ' + name,status : Boolean = formalParams<> null implies formalParams->isUnique(name)}.status
@14354#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.ts\model/transitionsystem.ecore#ValidFormalParams#DeclaredStrategy#Tuple {message : String = 'Formal params for strategy ' + name + ' are null',status : Boolean = formalParams <> null}.status
@14355#E:/FinalProject Repos/repos\didierbuchs\stratagem\ch.unige.cui.smv.metamodel.ts\model/transitionsystem.ecore#RightNumberOfParams#DeclaredStrategyInstance#Tuple {message : String = 'Invalid number of parameters for strategy ' + name + '. Required ' +declaration.formalParams->size()->toString() + ', found ' + actualParams->size()->toString(),status : Boolean = (declaration <> null) implies declaration.formalParams->size() = actualParams->size()}.status
@14359#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#tailleTortue#Tortue#self.taille >= 0 and self.taille < self.espece.tailleMaxAdulte
@14360#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#pasDeMalQuiPont#Tortue#self.sexe = M implies self.datePonte->isEmpty()
@14361#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#habiteLaOuIlFaut#Tortue#self.espece.repartitionGeographique.lieu->includes(self.lieuHabite)
@14362#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#pre#Tortue#nvelleTaille >= self.taille
@14363#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#post#Tortue#self.taille = nvelleTaille
@14364#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#pre#Tortue#(self.captive = 0 and self.espece.modeElevage.regimeCaptivite->includes(t)) or (self.captive = 0 and self.espece.biologie.regimeGeneral->includes(t))
@14365#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#post#EspeceTortue#self.biologie.regimeGeneral->includes(t)
@14366#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#mangeCeQuilFaut#Biologie#self.regimeGeneral->includesAll(self.especeTortue.modeElevage.regimeCaptivite)
@14367#E:/FinalProject Repos/repos\Doelia\M2-modeles\eclipse\1103m_TP_tortue\model/Tortues.ecore#bonneTemperature#ModeElevage#self.tempJour > self.tempNuit
@15010#E:/FinalProject Repos/repos\dorisserruto\modeldriventest\AbstractTestCases/atcmetamodel.ecore#Element_name#Element#self.name<>null
@15011#E:/FinalProject Repos/repos\dorisserruto\modeldriventest\AbstractTestCases/atcmetamodel.ecore#Element_location#Element#self.location<>null
@15012#E:/FinalProject Repos/repos\dorisserruto\modeldriventest\AbstractTestCases/atcmetamodel.ecore#Element_trule#Element#self.trule<>null
@15013#E:/FinalProject Repos/repos\dorisserruto\modeldriventest\AbstractTestCases/atcmetamodel.ecore#testScenarios_mult1#TestScenarioModel#self.testScenarios->size() > 0
@15238#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#uniquePageID#AbstractPage#AbstractPage.allInstances() -> forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(AbstractPage).ID <> e2.oclAsType(AbstractPage).ID)
@15239#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#capitalLetter#AbstractPage#self.title.matches('[A-Z].*')
@15240#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#uniquePageElementID#PageElement#PageElement.allInstances() -> forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)
@15241#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#addStar#InputElement#(self.isMandatory and self.label.matches('.*[*]')) or (self.isMandatory = false)
@15242#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#startLevel#Heading#self.level>0
@15243#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#mandatory#TextField#(self.isMandatory and self.text.matches('.*') or (self.isMandatory = false))
@15244#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#mandatory#TextArea#(self.isMandatory and self.text.matches('.*') or (self.isMandatory = false))
@15245#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#selfLink#EndPage#self.predecessor->excludes(self)
@15246#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#selfLink#FormPage#self.predecessor->excludes(self) and self.successor->excludes(self)
@15247#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#cyclic#FormPage#ID > predecessor and ID < successor
@15248#E:/FinalProject Repos/repos\drubas\model_engineering_lab1\model/fml_metamodel.ecore#selfLink#StartPage#self.successor->excludes(self)
@15249#E:/FinalProject Repos/repos\drubas\model_engineering_lab3\metamodels/form.ecore#derivation#Page#previousPage->asSet()->union(previousPage->asSet()->closure(previousPage))
@15250#E:/FinalProject Repos/repos\drubas\model_engineering_lab3\metamodels/form.ecore#derivation#Page#nextPage->asSet()->union(nextPage->asSet()->closure(nextPage))
@15251#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#BooleanLiteralExp#self.type = Boolean
@15252#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#CollectionItem#type = item.type
@15253#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Bag implies type.oclIsKindOf (BagType)
@15254#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#CollectionLiteralExp#kind <> CollectionKind::Collection
@15255#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::OrderedSet implies type.oclIsKindOf (OrderedSetType)
@15256#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Sequence implies type.oclIsKindOf (SequenceType)
@15257#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#CollectionLiteralExp#kind = CollectionKind::Set implies type.oclIsKindOf (SetType)
@15258#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Constraint#true 
@15259#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Element#--self->closure(oclContents())oclContents()
@15260#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Element#null
@15261#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#EnumLiteralExp#self.type = referredEnumLiteral.enumeration
@15262#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IfExp#self.condition.type = Boolean
@15263#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IntegerLiteralExp#self.type = Integer
@15264#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IterateExp#_'body'.type.conformsTo(result.type)
@15265#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IterateExp#self.result.initExpression->size() = 1
@15266#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IterateExp#type = result.type
@15267#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'any' implies _'body'.type = 'Boolean'
@15268#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'any' implies iterator->size() = 1
@15269#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'any' implies type = source.type.oclAsType(CollectionType).elementType
@15270#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#true
@15271#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'closure' impliestype.oclAsType(CollectionType).elementType= source.type.oclAsType(CollectionType).elementType
@15272#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'closure' implies iterator->size() = 1
@15273#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'closure' impliessource.type.oclAsType(CollectionType).elementType =if _'body'.type.oclIsKindOf(CollectionType)then _'body'.type.oclAsType(CollectionType).elementTypeelse _'body'.typeendif
@15274#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'closure' impliesif source.type.oclIsKindOf(SequenceType) or source.type.oclIsKindOf(OrderedSetType) thentype.oclIsKindOf(OrderedSetType)elsetype.oclIsKindOf(SetType)endif
@15275#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'collect' impliestype.oclAsType(CollectionType).elementType =_'body'.type.oclAsType(CollectionType).elementType
@15276#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'collect' implies iterator->size() = 1
@15277#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'collectNested' implies iterator->size() = 1
@15278#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'collectNested' implies type.oclIsKindOf(BagType)
@15279#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'collectNested' implies type = _'body'.type
@15280#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'collect' impliesif source.type.oclIsKindOf(SequenceType) or source.type.oclIsKindOf(OrderedSetType) thentype.oclIsKindOf(SequenceType)elsetype.oclIsKindOf(BagType)endif
@15281#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'exists' implies _'body'.type = Boolean
@15282#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'exists' implies type = Boolean
@15283#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'forAll' implies _'body'.type = Boolean
@15284#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'forAll' implies type = Boolean
@15285#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'isUnique' implies iterator->size() = 1
@15286#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'isUnique' implies type = Boolean
@15287#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#self.iterator->forAll(source.type.oclAsType (CollectionType).elementType.conformsTo(type))
@15288#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'one' implies _'body'.type = Boolean
@15289#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'one' implies iterator->size() = 1
@15290#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'one' implies type = Boolean
@15291#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'reject' or name = 'select' implies iterator->size() = 1
@15292#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'reject' or name = 'select' implies type = Boolean
@15293#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'reject' or name = 'select' implies type = source.type
@15294#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'sortedBy' impliestype.oclAsType(CollectionType).elementType =_'body'.type.oclAsType(CollectionType).elementType
@15295#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'sortedBy' implies iterator->size() = 1
@15296#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#name = 'sortedBy' impliesif source.type.oclIsKindOf(SequenceType) or source.type.oclIsKindOf(BagType) thentype.oclIsKindOf(SequenceType)elsetype.oclIsKindOf(OrderedSetType)endif
@15297#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#IteratorExp#true
@15298#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#LetExp#type = _'in'.type
@15299#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#LoopExp#self.iterator->forAll(initExpression->isEmpty())
@15300#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#LoopExp#source.type.oclIsKindOf (CollectionType)
@15301#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#MessageExp#calledOperation->size() + sentSignal->size() = 1
@15302#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#MessageExp#not target.type.oclIsKindOf (CollectionType)
@15303#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Operation#bodyExpression <> null and bodyExpression.oclIsKindOf(ExpressionInOCL) implies CompatibleBody(bodyExpression)
@15304#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Operation#true
@15305#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Operation#postcondition->isUnique(name)
@15306#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Operation#precondition->isUnique(name)
@15307#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#OperationCallExp#argument->size() = referredOperation.ownedParameter->size()
@15308#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#OperationCallExp#let operation : Operation = self.referredOperation inlet parameters : OrderedSet(Parameter) = operation.ownedParameter inlet selfType : Type = operation.owningType inSequence{1..argument->size()}->forAll (i | let argument : OCLExpression = argument->at(i) inlet parameter : Parameter = parameters->at(i) inlet parameterType : Type = parameter.type inargument.type.conformsTo(parameterType.specializeIn(self, selfType)))
@15309#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#ParameterableElement#p.oclIsKindOf(self.oclType())
@15310#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.
@15311#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Property#defaultExpression <> null and defaultExpression.oclIsKindOf(ExpressionInOCL) implies CompatibleBody(defaultExpression)
@15312#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Property#--Type.allInstances()->exists(c| c.ownedAttribute->includes(p))let container : ocl::OclElement = oclContainer() in container.oclIsKindOf(Type) and container.oclAsType(Type).ownedAttribute->includes(self)
@15313#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#PropertyCallExp#type = getSpecializedReferredPropertyType()
@15314#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#PropertyCallExp#not referredProperty.isStatic implies source.type.conformsTo(getSpecializedReferredPropertyOwningType())
@15315#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#PropertyCallExp#referredProperty.owningType 
@15316#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#PropertyCallExp#referredProperty.type 
@15317#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#SelfType#selfType
@15318#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this templateable element is actually a template.
@15319#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.
@15320#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Type#ownedInvariant->isUnique(name)
@15321#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Type#self
@15322#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#TypedMultiplicityElement#bodySpecification.type.conformsTo(self.type)
@15323#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#TypedMultiplicityElement#Parameter{name='name'}
@15324#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.
@15325#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.
@15326#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.
@15327#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.
@15328#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.
@15329#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.
@15330#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl/Pivot.ecore#body#Variable#initExpression <> null implies initExpression.type.conformsTo(type)
@15331#E:/FinalProject Repos/repos\dstrueber\bigtrafo\de.bigtrafo.benchmark\ocl\instances\01/PetriNetWithOCLPaper.ecore#TransitionHasIncomingArcs#Transition#self.preArc -> notEmpty()
@15351#E:/FinalProject Repos/repos\dvojtise\logo\domain\example.logo.model\model/ASMLogo.ecore#same_number_of_formals_and_actuals#ProcCall#actualArgs->size() = declaration.args->size()
@15352#E:/FinalProject Repos/repos\dvojtise\logo\domain\example.logo.model\model/ASMLogo.ecore#unique_names_for_formal_arguments#ProcDeclaration#args->forAll( a1 , a2 | a1.name = a2.name implies a1 = a2)
@15353#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#Equipment#self-&gt;closure(equipments).equipmentResources-&gt;asOrderedSet()
@15354#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#Equipment#self-&gt;closure(equipments)-&gt;asOrderedSet()
@15355#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#Equipment#self.equipments-&gt;size()
@15356#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#EquipmentGroup#self-&gt;closure(equipmentRefs).equipmentResources-&gt;asOrderedSet()
@15357#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#EquipmentGroup#self-&gt;closure(equipmentRefs)-&gt;asOrderedSet()
@15358#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#EquipmentGroup#self.equipments-&gt;size()
@15359#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#ValidFunctionName#Function#not self.functionName.oclIsUndefined()
@15360#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#Function#self-&gt;closure(functions).functionResources-&gt;asOrderedSet()
@15361#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#derivation#Function#self-&gt;closure(functions)-&gt;asOrderedSet()
@15362#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/library.ecore#ValidNodeID#NodeType#not self.nodeID.oclIsUndefined()
@15363#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\05012011/operators.ecore#ValidNodeID#Node#not self.nodeID.oclIsUndefined()
@15364#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#Component#self->closure(equipments).resources->asOrderedSet()
@15365#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#Equipment#self->closure(equipments)->asOrderedSet()
@15366#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#Equipment#self.equipments->size()
@15367#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#EquipmentGroup#self->closure(equipmentRefs).equipmentResources->asOrderedSet()
@15368#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#EquipmentGroup#self->closure(equipmentRefs)->asOrderedSet()
@15369#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#EquipmentGroup#self.equipments->size()
@15370#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#ValidFunctionName#Function#not self.functionName.oclIsUndefined()
@15371#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#derivation#Function#self->closure(functions)->asOrderedSet()
@15372#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/library.ecore#ValidNodeID#NodeType#not self.nodeID.oclIsUndefined()
@15373#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\06032012/operators.ecore#ValidNodeID#Node#not self.nodeID.oclIsUndefined()
@15374#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#Component#self->closure(equipments).resources->asOrderedSet()
@15375#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#Equipment#self->closure(equipments)->asOrderedSet()
@15376#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#Equipment#self.equipments->size()
@15377#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#EquipmentGroup#self->closure(equipmentRefs).equipmentResources->asOrderedSet()
@15378#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#EquipmentGroup#self->closure(equipmentRefs)->asOrderedSet()
@15379#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#EquipmentGroup#self.equipments->size()
@15380#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#ValidFunctionName#Function#not self.functionName.oclIsUndefined()
@15381#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#derivation#Function#self->closure(functions)->asOrderedSet()
@15382#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\13042011/library.ecore#ValidNodeID#NodeType#not self.nodeID.oclIsUndefined()
@15394#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\25102010/networks.ecore#derivation#Equipment#self-&gt;closure(equipments).equipmentResources-&gt;asOrderedSet()
@15395#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\25102010/networks.ecore#derivation#Equipment#self-&gt;closure(equipments)-&gt;asOrderedSet()
@15396#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\25102010/networks.ecore#ValidFunctionName#Function#not self.functionName.oclIsUndefined()
@15397#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\25102010/networks.ecore#derivation#Function#self-&gt;closure(functions).functionResources-&gt;asOrderedSet()
@15398#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\25102010/networks.ecore#derivation#Function#self-&gt;closure(functions)-&gt;asOrderedSet()
@15399#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\cdo\25102010/networks.ecore#ValidNodeID#Node#not self.nodeID.oclIsUndefined()
@15431#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#Equipment#self->closure(equipments).equipmentResources->asOrderedSet()
@15432#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#Equipment#self->closure(equipments)->asOrderedSet()
@15433#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#Equipment#self.equipments->size()
@15434#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#EquipmentGroup#self->closure(equipmentRefs).equipmentResources->asOrderedSet()
@15435#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#EquipmentGroup#self->closure(equipmentRefs)->asOrderedSet()
@15436#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#EquipmentGroup#self.equipments->size()
@15437#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#ValidFunctionName#Function#not self.functionName.oclIsUndefined()
@15438#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#Function#self->closure(functions).functionResources->asOrderedSet()
@15439#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#derivation#Function#self->closure(functions)->asOrderedSet()
@15440#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\13042011/library.ecore#ValidNodeID#NodeType#not self.nodeID.oclIsUndefined()
@15448#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#derivation#Equipment#self-&gt;closure(equipments).equipmentResources-&gt;asOrderedSet()
@15449#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#derivation#Equipment#self-&gt;closure(equipments)-&gt;asOrderedSet()
@15450#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#derivation#Equipment#self.equipments-&gt;size()
@15451#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#ValidFunctionName#Function#not self.functionName.oclIsUndefined()
@15452#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#derivation#Function#self-&gt;closure(functions).functionResources-&gt;asOrderedSet()
@15453#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#derivation#Function#self-&gt;closure(functions)-&gt;asOrderedSet()
@15454#E:/FinalProject Repos/repos\dzonekl\netxstudio\model\com.netxforge.netxstudio.models\models\emf\25102010/networks.ecore#ValidNodeID#Node#not self.nodeID.oclIsUndefined()
@15465#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#entityNameUniques#Entity#Entity.allInstances()->forAll(e1 | self<>e1 implies self.name<>e1.name)
@15466#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#entityHasAttributesAndOneId#Entity#not(self.entityAttribute->isEmpty()) and self.superType=null implies (self.entityAttribute->one(a | a.isId=true))
@15467#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#entityHasAttributesAndOneIdSubType#Entity#(not(self.entityAttribute->isEmpty()) and self.superType<>null) implies (self.entityAttribute->forAll(a | a.isId=false))
@15468#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#superTypeNotSelf#Entity#self.superType<>null implies self.superType<>self
@15469#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#typeNoneHasEnumerationType#Attribute#self.type=AttributeType::None implies self.enumerationType<>null
@15470#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#typeNotNoneHasNoEnumerationType#Attribute#self.type<>AttributeType::None implies self.enumerationType=null
@15471#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#ifIdThenMandatory#Attribute#self.isId=true implies self.mandatory=true
@15472#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#oneWelcomeForm#Model#self.modelForm->notEmpty() implies self.modelForm->one(f | f.isWelcomeForm=true)
@15473#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#lowerBoundLargerZero#Relationship#self->forAll(self.lowerBound>=0)
@15474#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#lowerBoundIsLessThanUpperBound#Relationship#self.upperBound<>-1 implies self.upperBound >= self.lowerBound
@15475#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#upperBoundLargerThanMinusOne#Relationship#self->forAll(self.upperBound = -1 or self.upperBound > 0)
@15476#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#oppositeRelationshipPointsToThisRelationship#Relationship#self.opposite<>null implies (self.opposite.opposite=self)
@15477#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#oppositetargetEntityIsThisSourceEntity#Relationship#self.opposite<>null implies (self.Entity=opposite.target)
@15478#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#oppositeCannotBeSelf#Relationship#self.opposite<>self
@15479#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#formNameUnique#Form#Form.allInstances()->forAll(f1 | self<>f1 implies self.name<>f1.name)
@15480#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#attributesFromFormEntity#Form#self.pages->forAll(pa |pa.pageElements->select(oclIsKindOf(AttributePageElement))->forAll(pa:AttributePageElement | ((self.formEntity->closure(e | e.superType)).entityAttribute)->includes(pa.attributeRef)))
@15481#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#relationshipsFromFormEntity#Form#self.pages->forAll(pa |pa.pageElements->select(oclIsKindOf(RelationshipPageElement))->forAll(pa:RelationshipPageElement | (self.formEntity.relationship)->includes(pa.relationshipRef)))
@15482#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#columnAttributesFromTargetEntities#TableRelationshipPageElement#self.columns->forAll(col | self.relationshipRef.target.entityAttribute->includes(col.attributeReference))
@15483#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#PageXORPageElementOrNone#Condition#(self.targetPageElement<>null implies self.targetPage=null) and (self.targetPage<>null implies self.targetPageElement=null)
@15484#E:/FinalProject Repos/repos\e0725675\ModelEngineeringWS14\lab1\EFML\model/forms.ecore#notSameChildren#CompositeCondition#self.child2<>self.child1
@15554#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#oneWelcomePage#Form#self.organized->select(p | p.isWelcome)->size() = 1 and self.organized->select(p | p.isWelcome)->forAll(p | p.predecessor->isEmpty())
@15555#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#oneFirstPage#Form#self.organized->select(p | p.predecessor->isEmpty())->size() = 1
@15556#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#titleStartsUpperCase#Page#not (Title.size()=0) and Title.at(1) = Title.at(1).toUpper()
@15557#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#noCycles#Page#self.predecessor->asSet()->union(self.predecessor->closure(p | p.predecessor))->excludes(self)
@15558#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#uniqueID#PageElement#PageElement.allInstances()->forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)
@15559#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#RadioOnlyOneSelected#SelectField#self.Type <> SelectionType::RADIO or (self.consists->select(preselected)->size() <= 1 and self.consists->select(selected)->size() <= 1)
@15560#E:/FinalProject Repos/repos\e0828330\modelEng01\Assignment1\model/form.ecore#selectionIsOfSubsequentPage#SelectionItem#self.displayElementVisible -> forAll(e |e.contained.predecessor->asSet()->union(e.contained.predecessor->closure(p | p.predecessor))->includes(self.contained.contained))
@15723#E:/FinalProject Repos/repos\eclipse\ocl\tests\org.eclipse.ocl.examples.codegen.tests\play\model/play.ecore#tooTrue#CgClass#true and true
@15724#E:/FinalProject Repos/repos\eclipse\ocl\tests\org.eclipse.ocl.examples.codegen.tests\play\model/play.ecore#tooTrue$message#CgClass#self.oclType().name
@15725#E:/FinalProject Repos/repos\eclipse\ocl\tests\org.eclipse.ocl.examples.codegen.tests\play\model/play.ecore#body#CgClass#true or false
@15726#E:/FinalProject Repos/repos\eclipse\ocl\tests\org.eclipse.ocl.examples.codegen.tests\play\model/play.ecore#body#CgClass#false and false
@15727#E:/FinalProject Repos/repos\eclipse\ocl\tests\org.eclipse.ocl.examples.codegen.tests\play\model/play.ecore#derivation#CgClass#'a' + 'b'
@16054#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#documentation#StatesModel#OCL Constraint forbidding duplicate System Unit Model names.
@16055#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#uniqueClassNames#StatesModel#self.systemunits->forAll(s1, s2 | s1 <> s2 implies s1.name <> s2.name)
@16056#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#documentation#Transition#If the Transition is coming from a Selection Divergence, then it must define a Trigger
@16057#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#mustDefineTriggerIfComingFromDivergence#Transition#if(self.incoming.source = SelectionDivergence) then self.trigger->size()=1 else self.trigger->size()>=0 endif
@16058#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#multipleOutgoingEdges#SelectionDivergence#self.outgoing->size()>1
@16059#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#singleIncomingEdge#SelectionDivergence#self.incoming->size()=1
@16060#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#documentation#SelectionConvergence#OCL Constraints determining maximum incoming and minimum outgoing edges
@16061#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#multipleIncomingEdges#SelectionConvergence#self.incoming->size()>1 and self.outgoing->size()=1
@16062#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#documentation#InitialState#OCL Constraint forbidding Function calls being made by Initial Steps
@16063#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#noIncomingEdges#InitialState#self.incoming->size()=0
@16064#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#onlyOneOutgoingEdge#InitialState#self.outgoing->size()=1
@16065#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#initialStatesCannotDefineFunctionCalls#InitialState#self.functioncall->size()=0
@16066#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#documentation#TerminalState#OCL Constraint forbidding Function calls being made by Terminal Steps
@16067#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#noOutgoingEdges#TerminalState#self.outgoing->size()=0
@16068#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#onlyOneIncomingEdge#TerminalState#self.incoming->size()=1
@16069#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#terminalStatesCannotDefineFunctionCalls#TerminalState#self.functioncall->size()=0
@16070#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#documentation#MiddleState#OCL Constraint determining maximum Incoming Edges for Middle States
@16071#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#onlyOneOutgoingEdge#MiddleState#self.outgoing->size()=1
@16072#E:/FinalProject Repos/repos\edonjakupi\model-engineering\Lab 1\Group16_Lab1\model/statesml.ecore#onlyOneIncomingEdge#MiddleState#self.incoming->size()=1
@16101#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#taskName#Task#self.name <> null
@16102#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#taskInFolder#Task#self.orderedTasks->size() >= 1
@16103#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#uniqueNames#Task#self.orderedTasks->forAll(t1 : Task, t2 : Task | t1 <> t2 implies t1.name <> t2.name)
@16104#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#folderName#Folder#self.name <> null
@16105#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#uniqueNamesSubFolders#Folder#self.subFolders->forAll(f1 : Folder, f2 : Folder | f1 <> f2 implies f1.name <> f2.name)
@16106#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#pre_sortCondition#Folder#self.orderedTasks->size() > 1
@16107#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#pre_moveCondition#Folder#self.orderedTasks->size() > 1
@16108#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#rootFolderParent#ToDoListManager#self.rootFolder.parent = null
@16109#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#uniqueTaskId#ToDoListManager#tasks->isUnique(id)
@16110#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#uniqueFolderId#ToDoListManager#self.folders->isUnique(id)
@16111#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#rootIsPartOfSet#ToDoListManager#self.folders->includes(self.rootFolder)
@16112#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#pre_sortCondition#ToDoListManager#folder.orderedTasks->size() > 1
@16113#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#pre_moveCondition#ToDoListManager#folder.orderedTasks->size() > 1
@16114#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#body#PersistenceProvider#entitymanager.getTransaction().begin();try {entitymanager.persist(o);entitymanager.getTransaction().commit();} catch (EntityExistsException|IllegalStateException|IllegalArgumentException e) {entitymanager.getTransaction().rollback();e.printStackTrace();} 
@16115#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#body#PersistenceProvider#entitymanager.getTransaction().begin();try {entitymanager.persist(entitymanager.merge(o));entitymanager.getTransaction().commit();} catch (IllegalStateException|IllegalArgumentException e) {entitymanager.getTransaction().rollback();e.printStackTrace();} 
@16116#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#body#PersistenceProvider#entitymanager.getTransaction().begin();try {entitymanager.remove(entitymanager.merge(o));entitymanager.getTransaction().commit();} catch (IllegalStateException|IllegalArgumentException e) {entitymanager.getTransaction().rollback();e.printStackTrace();} 
@16117#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#body#PersistenceProvider#startEmbeddedDB();
@16118#E:/FinalProject Repos/repos\efraimlopez\mdd\ca.concordia.todolist\model/ToDoListDiag.ecore#body#PersistenceProvider#Query q = entitymanager.createQuery("select t from "+entityType.getName()+" t");   return q.getResultList();
@16119#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#RN#ERSchema#relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
@16120#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#EN#ERSchema#entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
@16121#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#EAN#Entity#attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
@16122#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#REN#Relship#ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
@16123#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#RAN#Relship#attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
@16124#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#RSK#Relship#not attrs->exists(a1 : ERAttribute | a1.isKey)
@16125#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\InputMM/ER.ecore#EA_XOR#ERAttribute#self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
@16126#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\OutputMM/REL.ecore#REL_RN#RELSchema#relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
@16127#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\OutputMM/REL.ecore#REL_MULT1#RELSchema#self.relations->size() > 0
@16128#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\OutputMM/REL.ecore#REL_AN#Relation#attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
@16129#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\OutputMM/REL.ecore#REL_K#Relation#attrs->exists(a : RELAttribute | a.isKey = true)
@16130#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\ER2REL\OutputMM/REL.ecore#REL_MULT2#Relation#self.attrs->size() > 0
@16131#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\NonInjectiveInPatterns\InputMM/systemmodel.ecore#SrcAndDstInSameSubSystem#Signal#srcPort.parentBlock.parentBlock = dstPort.parentBlock.parentBlock and dstPort.parentBlock.parentBlock = self.parentBlock
@16132#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\NonInjectiveInPatterns\InputMM/systemmodel.ecore#SrcAndDstSameDataType#Signal#srcPort.dataType.baseType = dstPort.dataType.baseType and srcPort.dataType.dimensions = dstPort.dataType.dimensions
@16133#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\NonInjectiveInPatterns\InputMM/systemmodel.ecore#InSystemBlock#Inport#not sourceBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
@16134#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\NonInjectiveInPatterns\InputMM/systemmodel.ecore#InSystemBlock$message#Inport#'Inport ' + name + 'has sourceBlock '
@16135#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\NonInjectiveInPatterns\InputMM/systemmodel.ecore#InSystemBlock#Outport#not sinkBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
@16136#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\OldAGTExp\InputMM/systemmodel.ecore#SrcAndDstInSameSubSystem#Signal#srcPort.parentBlock.parentBlock = dstPort.parentBlock.parentBlock and dstPort.parentBlock.parentBlock = self.parentBlock
@16137#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\OldAGTExp\InputMM/systemmodel.ecore#SrcAndDstSameDataType#Signal#srcPort.dataType.baseType = dstPort.dataType.baseType and srcPort.dataType.dimensions = dstPort.dataType.dimensions
@16138#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\OldAGTExp\InputMM/systemmodel.ecore#InSystemBlock#Inport#not sourceBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
@16139#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\OldAGTExp\InputMM/systemmodel.ecore#InSystemBlock$message#Inport#'Inport ' + name + 'has sourceBlock '
@16140#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\OldAGTExp\InputMM/systemmodel.ecore#InSystemBlock#Outport#not sinkBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
@16156#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\TestNGC\InputMM/systemmodel.ecore#SrcAndDstInSameSubSystem#Signal#srcPort.parentBlock.parentBlock = dstPort.parentBlock.parentBlock and dstPort.parentBlock.parentBlock = self.parentBlock
@16157#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\TestNGC\InputMM/systemmodel.ecore#SrcAndDstSameDataType#Signal#srcPort.dataType.baseType = dstPort.dataType.baseType and srcPort.dataType.dimensions = dstPort.dataType.dimensions
@16158#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\TestNGC\InputMM/systemmodel.ecore#InSystemBlock#Inport#not sourceBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
@16159#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\TestNGC\InputMM/systemmodel.ecore#InSystemBlock$message#Inport#'Inport ' + name + 'has sourceBlock '
@16160#E:/FinalProject Repos/repos\eliericha\atlanalyser\fr.tpt.atlanalyser.examples\examples\TestNGC\InputMM/systemmodel.ecore#InSystemBlock#Outport#not sinkBlock.oclIsUndefined() = parentBlock.oclIsKindOf(SystemBlock)
@16161#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#UniqueId#User#Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
@16162#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#UniqueId#Publication#Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
@16163#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#body#Publication#self ->select(u : User | Authorship.publi = p) 
@16164#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#Relation#Enemity#Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
@16165#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#Relation#Friendship#Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
@16166#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#Relation#PubliRef#Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
@16167#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#body#PubliRef#self ->select(u : User | Authorship.publi = p) 
@16168#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF(WithoutLike).ecore#body#PubliRef#self ->select(u2 : User | Friendship.user3 = u) 
@16169#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#UniqueId#User#Tuple {message : String = 'User must have a unique id',status : Boolean = User.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)}.status
@16170#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#UniqueId#Publication#Tuple {message : String = 'User must have a unique id',status : Boolean = Publication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)}.status
@16171#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#body#Publication#self ->select(u : User | Authorship.publi = p) 
@16172#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#Relation#Enemity#Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user1 <> self.user2 }.status
@16173#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#Relation#Friendship#Tuple {message : String = 'User1 must be different from user2',status : Boolean = self.user3 <> self.user4 }.status
@16174#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#Relation#PubliRef#Tuple {message : String = 'Publication must be different from Origin publication',status : Boolean = self.publi <> self.publiRef }.status
@16175#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#body#PubliRef#self ->select(u : User | Authorship.publi = p) 
@16176#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#body#PubliRef#self ->select(u2 : User | Friendship.user3 = u) 
@16177#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#body#LikePublication#self ->select(u : User | Authorship.publi = p) 
@16178#E:/FinalProject Repos/repos\elisedcvl\ProjectGMFDecourval\DecourvalProjectGMF\model/FriendzGMF.ecore#body#LikePublication#self ->select(u2 : User | Friendship.user3 = u) 
@16197#E:/FinalProject Repos/repos\emale001\CEN5064\CD\CPS_System\SourceCode\CProvML\model/CProvML.ecore#NodeNameCannotBeEmpty#Node#Tuple {message : String = 'Name must not be empty.',status : Boolean = if name.size() > 0 then true else null endif}.status
@16198#E:/FinalProject Repos/repos\emale001\CEN5064\CD\CPS_System\SourceCode\CProvML\model/CProvML.ecore#NodesCannotBeConnectedToSelf#Node#Tuple {message : String = 'Node cannot connect to itself.',status : Boolean = if sourceConnections->forAll(c | c.source <> c.target) then true else null endif}.status
@16199#E:/FinalProject Repos/repos\emale001\CEN5064\CD\CPS_System\SourceCode\CProvML\model/CProvML.ecore#NodesCannotBeConnectedMoreThanOnce#Node#Tuple {message : String = 'Nodes may not connect more than once.',status : Boolean = let selfConnections : Boolean = sourceConnections->forAll(a | sourceConnections->forAll(b | a <> b implies a.target <> b.target)) in let otherConnections : Boolean = sourceConnections->forAll(sc | sc.target.sourceConnections->forAll(tc | sc.source <> tc.target)) inif selfConnections and otherConnections then true else null endif}.status
@16203#E:/FinalProject Repos/repos\EPiCS\soundgates\software\editor\Soundgates\model/soundgates.ecore#UnconnectedPort#Port#if (self.direction=Direction::IN) then (not (self.incomingConnection=null)) else (self.outgoingConnection->size()>0) endif
@16204#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\gsn.metamodel\model/gsn.ecore#isValidModule#Module#(self.gid <> null and self.gid.size() > 0) and(self.content <> null and self.content.size() > 0)
@16205#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\gsn.metamodel\model/gsn.ecore#isValidGoal#Goal#(self.gid <> null and self.gid.size() > 0) andif self.toBeSupported <> nullthenif self.undeveloped <> nullthen self.toBeSupported xor self.undevelopedelse trueendifelsetrueendif
@16206#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\gsn.metamodel\model/gsn.ecore#isValidSupportedBy#SupportedBy#self.source->forAll(s|(s.oclIsTypeOf(Goal)) or (s.oclIsTypeOf(Strategy))) andself.target->forAll(t|(t.oclIsTypeOf(Goal)) or(t.oclIsTypeOf(Strategy)) or(t.oclIsTypeOf(Solution)) or(t.oclIsTypeOf(AwayGoal)) or(t.oclIsTypeOf(AwaySolution)) or(t.oclIsTypeOf(Module)) or(t.oclIsTypeOf(Contract)))andself.source->size() = 1
@16207#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\gsn.metamodel\model/gsn.ecore#isValidInContextOf#InContextOf#self.source->forAll(s|s.oclIsTypeOf(Goal) or s.oclIsTypeOf(Strategy)) andself.target->forAll(t|(t.oclIsTypeOf(Context)) or (t.oclIsTypeOf(Assumption)) or (t.oclIsTypeOf(Justification)) or(t.oclIsTypeOf(AwayGoal)) or(t.oclIsTypeOf(AwayContext)) or(t.oclIsTypeOf(Module)))andself.source->size() <= 1 andself.target->size() <= 1
@16208#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidModule#ArgumentPackage#self.name = 'Module'
@16209#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidContractModule#ArgumentPackageBinding#self.name = 'ContractModule' andself.participantPackage->size() = self.participantPackage->asSet()->size()
@16210#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidGSNNotation#ArtefactElementCitation#(self.name = 'Solution' and self.isAbstract = false) or(self.name = 'Solution' and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or (self.name = 'Context' and self.isAbstract = false) or(self.name = 'Context' and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or(self.name = 'Solution' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or     (self.name = 'Context' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
@16211#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidGSNNotation#ArgumentAssetCitation#(self.name = 'AwayGoal') or(self.name = 'AwaySolution') or(self.name = 'AwayContext')
@16212#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidGSNNotation#Claim#(self.name = 'Goal' and self.assumed = false and self.isAbstract = false) or(self.name = 'Goal' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or(self.name = 'Goal' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='TBSC') and not self.taggedValue->exists(t|t.sKey='undeveloped')) or (self.name ='Assumption' and self.assumed = true and self.isAbstract = false) or(self.name ='Assumption' and self.assumed = true and self.isAbstract = false and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or (self.name = 'Justification' and self.assumed = false and self.isAbstract = false) or(self.name = 'Justification' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))  or(self.name = 'Goal' and self.assumed = false and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'undeveloped') and not self.taggedValue->exists(t|t.sKey='TBSC')) or(self.name = 'Context' and self.assumed = true and self.isAbstract = false) or(self.name = 'Goal' and self.assumed = false and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
@16213#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidReasoning#ArgumentReasoning#(AssertedInference.allInstances()->select(as|as.reasoning = self)->size() = 1 and self.name = 'Strategy' and self.isAbstract = false) or (self.name = 'Strategy' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'undeveloped')) or(self.name = 'Strategy' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
@16214#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#validSupportedBy#AssertedInference#(self.name = 'SupportedBy' andself.source->forAll(s|(s.oclIsTypeOf(Claim) and s.name = 'Goal') or (s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and self.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal')) or(self.name = 'SupportedBy' andself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' or (s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and self.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and self.reasoning->notEmpty()) or(self.name = 'SupportedBy' andself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' ) and self.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or(self.name = 'SupportedBy' andself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' or (s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and self.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and self.taggedValue->one(t|t.sKey = 'required') andself.taggedValue->select(t|t.sKey='required')->first().sExpression->oclAsType(Integer) > 0) or(self.name = 'SupportedBy' andself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' or (s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and self.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and self.reasoning->notEmpty() and self.taggedValue->one(t|t.sKey = 'required') andself.taggedValue->select(t|t.sKey='required')->first().sExpression->oclAsType(Integer) > 0)
@16215#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidSupportedBy#AssertedEvidence#(self.name = 'SupportedBy' andself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Solution') or(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal')) andself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal'))or(self.name = 'SupportedBy' andself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Solution') or(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal')) andself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or(self.name = 'SupportedBy' andself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Solution') or(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal')) andself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') andself.taggedValue->one(t|t.sKey = 'required') andself.taggedValue->select(t|t.sKey='required')->first().sExpression->oclAsType(Integer) > 0)
@16216#E:/FinalProject Repos/repos\epsilonlabs\SACM-UML-Profile\sacm.emf\model/SACM.ecore#isValidInContextOf#AssertedContext#(self.name = 'InContextOf' and self.isAbstract = false and self.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Context') or(s.oclIsTypeOf(Claim) and s.name = 'Context') or(s.oclIsTypeOf(Claim) and s.name = 'Justification') or(s.oclIsTypeOf(Claim) and s.name = 'Assumption') or (s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayContext') or(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module')) andself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal')) or(self.name = 'InContextOf' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))
@16217#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#identifierIsMember#Entity#self.attributes -> includes(self.identifier) or self.supertypes.attributes -> includes(self.identifier)
@16218#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#validBinaryRelationship#Entity#self.relationships -> forAll(r: Relationship | r.opposite -> isEmpty() or r.opposite.target = self and r.opposite.opposite = r)
@16219#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#attributeTypeNoneWhenEnum#Attribute#self.enumerationType -> isEmpty() or self.type = AttributeType::None
@16220#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#validRelationshipBounds#Relationship#self.lowerBound >= 0 and (self.lowerBound <= self.upperBound or self.upperBound = -1)
@16221#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#attributePageElementMapsFormEntity#Form#(self.consists.contains -> selectByKind(AttributePageElement)).refers_to -> forAll(a: Attribute | self.associated_with.attributes -> includes(a) or self.associated_with.supertypes -> forAll(e: Entity | e.attributes -> includes(a)))
@16222#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#relationshipPageElementMapsFormEntity#Form#(self.consists.contains -> selectByKind(RelationshipPageElement)).refers_to -> forAll(r: Relationship | self.associated_with.relationships -> includes(r))
@16223#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#tableClolumnElementMapsReferencedEntity#Form#(self.consists.contains -> selectByKind(Table)).consists.refers_to -> forAll(a: Attribute | self.associated_with.attributes -> includes(a) or associated_with.supertypes -> forAll(e: Entity | e.attributes -> includes(a)))
@16224#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#validSelectionFieldType#SelectionField#self.refers_to.type = AttributeType::Boolean xor not self.refers_to.enumerationType.oclIsUndefined()
@16225#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#validCompositCondition#CompositionCondition#self.combinesAttributeValue -> size() + self.combinesComposite -> size() = 2
@16226#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#validAttributeValueCondition#AttributeValueCondition#self.conditionsPageElement -> isEmpty() xor self.conditionsPage -> isEmpty()
@16227#E:/FinalProject Repos/repos\fexman\me4everWS14\model/forms.ecore#welcomeFormExistsAndIsUnique#EMFL_FormModel#(self.forms.isWelcomeForm -> excluding(false)) -> size() = 1
@16228#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#mustHaveName#WebApplication#not self.name.oclIsUndefined() and name <>''
@16229#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#uniqueEntities#WebApplication#self.entities->forAll(e1 : Entity, e2 : Entity | e1 <> e2 implies e1.name <> e2.name)
@16230#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#pageForEntity#WebApplication#DynamicPage.allInstances()->collect(entity)->asSet() = Entity.allInstances()
@16231#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#singleHomePage#WebApplication#webpages->collect(homeLink.target)->forAll(p | p = self.homePage)
@16232#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#checkDate#WebApplication#creationDateBeforeGoLive()
@16233#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#uniqueAttributes#Entity#self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1 <> a2 implies a1.name <> a2.name)
@16234#E:/FinalProject Repos/repos\FH-SE-Master\Model-Driven-Engineering\Übung 1\at.fh-hagenberg.swml.solution\model/solution.ecore#staticPageLinkTarget#WebPage#self.homeLink.target.oclIsTypeOf(StaticPage)
@16251#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#correctArc#Arc#(self.debut.oclIsTypeOf(Place) and self.fin.oclIsTypeOf(Transition))or (self.debut.oclIsTypeOf(Transition) and self.fin.oclIsTypeOf(Place))
@16252#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#pasBoucle#Arc#self.debut <> self.fin
@16253#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#poidsPos#Arc#self.poids > 0
@16254#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#nbJetonPos#Place#self.nbJeton >= 0
@16255#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#bornePos#Place#self.borne > 0
@16256#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#petriElementnameNotEmpty#PetriElement#self.name <> null and self.name <> ''
@16257#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.petrinet/PetriNet.ecore#petriNewtorkNameNotEmpty#ReseauPetri#self.name <> null and self.name <> ''
@16258#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#nomDifferent#Process#Process.allInstances()->select(i | i.oclIsTypeOf(WorkDefinition))->forAll(i,j | i<>j implies i.name <> j.name)
@16259#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#derivation#ProcessElement#Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
@16260#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#oneChar#WorkDefinition#self.name <> ''
@16261#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#previousWDinSameProcess#WorkSequence#self.process = self.predecessor.process
@16262#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#nextWDinSameProcess#WorkSequence#self.process = self.successor.process
@16263#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#nonReflexive#WorkSequence#self.successor <> self.predecessor
@16264#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#nameNotEmpty#Resource#self.name <> null and self.name <> ''
@16265#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#correctWeight#UseResources#self.weight <= self.usedResource.quantity
@16266#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\BE\fr.enseeiht.gls.simplepdl/SimplePDL.ecore#positiveWeight#UseResources#self.weight >= 0
@16267#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#nbJetonsPositif#Place#self.nbJetons >= 0
@16268#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#poidsPositif#Arc#self.poids > 0
@16269#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#arcCorrect#Arc#(self.dbt.oclIsTypeOf(Place) and self.fin.oclIsTypeOf(Transition))or (self.dbt.oclIsTypeOf(Transition) and self.fin.oclIsTypeOf(Place))
@16270#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#nameNotNull#PetriElement#self.nom <> '' and self.nom <> null
@16271#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#nameNotNull#PetriNet#self.name <> '' and self.name <> null
@16272#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#nameForbidden#PetriNet#name <> 'PetriNet'
@16273#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#nameDifferentArc#PetriNet#self->select(arc | arc.oclIsTypeOf(Arc))->forAll(i,j|i<>j implies i.name <> j.name)
@16274#E:/FinalProject Repos/repos\flogaribal\ENSEEIHT\2A\GLS\Projet\fr.enseeiht.gls.projet404.games.Games2PetriNet/PetriNet.ecore#nameDifferentPetriElement#PetriNet#self->select(pe | pe.oclIsTypeOf(PetriElement))->forAll(i,j|i<>j implies i.name <> j.name)
@16275#E:/FinalProject Repos/repos\fp7-netide\IDE\plugins\eu.netide.configuration\model/Topology.ecore#nodirectconnection#Host#self.ports->forAll(not connector.connectedports->collect(networkelement)->one(p | p <> self).oclIsKindOf(Host))
@16276#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#atLeastOneSysOpOrAdminAvailable#Wikipedia#user->select(obj |obj.oclIsKindOf(RegisteredUser))->size() > 0 implies (user->select(obj |obj.oclIsKindOf(SysOp))->size() > 0 and user->select(obj | obj.oclIsKindOf(Administrator))->size() > 0)
@16277#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#qualityOfWikipedia#Wikipedia#averageEditedPagesPerUser >= 1
@16278#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#Wikipedia#user.countRevisions->sum() / user->size()
@16279#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#User#self.Wikipedia.currentDateJD
@16280#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#User#self.authoredRevisions->size()
@16281#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#User#Revision.allInstances()->select(author = self)
@16282#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#timeIsCorrect#RegisteredUser#wikiTime >= registrationDateJD
@16283#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#RegisteredUser#wikiTime - registrationDateJD
@16284#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#RegisteredUser#if (self.countRevisions < 20 or registeredSinceDays < 7) then userType::RegisteredUserelse userType::AutoConfirmedUserendif
@16285#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 2\at.ac.univie.swa.ase2015.a9902268.task2\model/model.ecore#derivation#RegisteredUser#if (self.oclIsKindOf(Administrator) or self.oclIsKindOf(SysOp)) then adminActions::CreateDeleteContentelse (if self.userType = userType::AutoConfirmedUser then adminActions::CreateContentelse (null)endif) endif
@16296#E:/FinalProject Repos/repos\fridlutz\UNIVIE\ASE\UE\Task 5\input\WikiSampleSolution\model/wikiSampleSolution.ecore#mustHaveSysopAndAdmin#Wiki#users->exists(user | user.role.type = RoleType::ADMIN )andusers->exists(user | user.role.type = RoleType::SYSOP )
@16297#E:/FinalProject Repos/repos\fschmidt\se\uid_language\model/uid.ecore#nameNotNull#IE#name.oclIsUndefined() <> true
@16298#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\DSLEngineering\com.sap.furcas.example.bibtex.metamodel\model/Bibtex.ecore#uniqueName#LiteratureDb#LiteratureDb.allInstances()->select(db | db.name = self.name)->size() = 1
@16299#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\DSLEngineering\com.sap.furcas.example.bibtex.metamodel\model/Bibtex.ecore#uniqueID#Entry#self.literaturedb.entries->select(e | e.id = self.id)->size() = 1
@16300#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\DSLEngineering\com.sap.furcas.metamodel\model/textblocks.ecore#body#TextBlock#self.subNodes->select(n | n.oclIsKindOf(TextBlock)).oclAsType(TextBlock)->asOrderedSet()
@16301#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\DSLEngineering\com.sap.furcas.metamodel\model/textblocks.ecore#body#TextBlock#self.subNodes->select(n | n.oclIsKindOf(AbstractToken)).oclAsType(AbstractToken)->asOrderedSet()
@16302#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\DSLEngineering\com.sap.furcas.test\scenarioFixtures/NestedScopes.ecore#body#Statement#if self.block->notEmpty() then  let pos:Integer = self.block.statementsInBlock->indexOf(self) in  if pos > 1 then    self.addDeclarationsWithNewNames(    if self.block.statementsInBlock->at(-1+pos).oclIsKindOf(Definition) then      self.block.statementsInBlock->at(-1+pos).oclAsType(Definition)->asSet()    else      Set{}    endif,    self.block.statementsInBlock->at(-1+pos).getDeclarationsInScope())  else    -- first statement in block; consider block itself    self.block.getDeclarationsInScope()  endifelse       Set{}endif
@16303#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\DSLEngineering\com.sap.furcas.test\scenarioFixtures/NestedScopes.ecore#body#Statement#inner->union(outer->select(o | not inner->exists(i | i.name = o.name))->asSet())
@16304#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\EMFEnhancements\de.hpi.sam.petriNet\model/petriNet.ecore#modelName#PetriNet#self.elements->notEmpty()
@16305#E:/FinalProject Repos/repos\FURCAS-dev\FURCAS\EMFEnhancements\de.hpi.sam.petriNet\model/petriNet.ecore#numberOfTokens#Place#self.noTokens > 3
@16981#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\extraplugins\layers\org.eclipse.papyrus.layers.stackmodel\model/layers.ecore#documentation#LayersStack#Try to attach this Layer. If successful, the state go to "attached". Otherwise, an exception is thrown.A Layer can be attached if its required attributes are set.Required attributes:<ul>  <li>application</li>  <li>owningLayerStack</li>  <li>parent container</li>  <li></li></ul>Just after enterring in "attached" state, the enterAttachedState() method is called.If this Layer is successfully attached, then attach subLayers.
@16982#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\extraplugins\layers\org.eclipse.papyrus.layers.stackmodel\model/layers.ecore#documentation#LayerExpression#Try to attach this Layer. If successful, the state go to "attached". Otherwise, an exception is thrown.A Layer can be attached if its required attributes are set.Required attributes:<ul>  <li>application</li>  <li>owningLayerStack</li>  <li>parent container</li>  <li></li></ul>Just after enterring in "attached" state, the enterAttachedState() method is called.If this Layer is successfully attached, then attach subLayers.
@17531#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\plugins\developer\org.eclipse.papyrus.gmfgenextension\model/papyrusGmfgenExtension.ecore#documentation#SpecificLocator#This class is used to precise itw own locator used for the border item, like port or template.for example, in the case of templateSignature of ClassEditPart in the method protected boolean addFixedChild(EditPart childEditPart):replacement of the general BorderItemLocator is needed in order to constrain the movement. if (childEditPart instanceof RedefinableTemplateSignatureEditPart) {   // BorderItemLocator locator = new BorderItemLocator(getMainFigure(), PositionConstants.NORTH);   BorderItemLocator locator = new TemplateClassifierBorderItemLocator(getMainFigure(), PositionConstants.NORTH);   getBorderedFigure().getBorderItemContainer().add(((RedefinableTemplateSignatureEditPart) childEditPart).getFigure(), locator);   return true;}
@17532#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\plugins\developer\org.eclipse.papyrus.gmfgenextension\model/papyrusGmfgenExtension.ecore#documentation#SpecificDiagramUpdater#This class is used to precise itw own locator used for the border item, like port or template.for example, in the case of templateSignature of ClassEditPart in the method protected boolean addFixedChild(EditPart childEditPart):replacement of the general BorderItemLocator is needed in order to constrain the movement. if (childEditPart instanceof RedefinableTemplateSignatureEditPart) {   // BorderItemLocator locator = new BorderItemLocator(getMainFigure(), PositionConstants.NORTH);   BorderItemLocator locator = new TemplateClassifierBorderItemLocator(getMainFigure(), PositionConstants.NORTH);   getBorderedFigure().getBorderItemContainer().add(((RedefinableTemplateSignatureEditPart) childEditPart).getFigure(), locator);   return true;}
@17533#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\plugins\developer\org.eclipse.papyrus.gmfgenextension\model/papyrusGmfgenExtension.ecore#documentation#SpecificLocatorExternalLabel#This class is used to precise itw own locator used for the border item, like port or template.for example, in the case of templateSignature of ClassEditPart in the method protected boolean addFixedChild(EditPart childEditPart):replacement of the general BorderItemLocator is needed in order to constrain the movement. if (childEditPart instanceof RedefinableTemplateSignatureEditPart) {   // BorderItemLocator locator = new BorderItemLocator(getMainFigure(), PositionConstants.NORTH);   BorderItemLocator locator = new TemplateClassifierBorderItemLocator(getMainFigure(), PositionConstants.NORTH);   getBorderedFigure().getBorderItemContainer().add(((RedefinableTemplateSignatureEditPart) childEditPart).getFigure(), locator);   return true;}
@17534#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\plugins\facet\org.eclipse.papyrus.emf.facet.query.ocl.metamodel\model/oclQuery.ecore#body#OclQuery#return getOclExpression();
@17989#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#defaultRowAxisProviderExistsInCollection#TableConfiguration#rowAxisProviders->includes(defaultRowAxisProvider)
@17990#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#defaultColumnAxisProviderExistsInCollection#TableConfiguration#columnAxisProviders->includes(defaultColumnAxisProvider)
@17991#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#documentation#AbstractAxisProvider#Abstract Element for the AxisProvider. This one only provides a method getAxis().
@17992#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#oneObjectLabelConfigurationTypes#AbstractHeaderAxisConfiguration#ownedLabelConfigurations->collect(ilc : nattable::nattablelabelprovider::ILabelProviderConfiguration | ilc.oclAsType(nattable::nattablelabelprovider::ObjectLabelProviderConfiguration))->size() <= 1
@17993#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#oneFeatureLabelConfigurationTypes#AbstractHeaderAxisConfiguration#ownedLabelConfigurations->collect(ilc : nattable::nattablelabelprovider::ILabelProviderConfiguration | ilc.oclAsType(nattable::nattablelabelprovider::FeatureLabelProviderConfiguration))->size() <= 1
@17994#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#axisManagersIdUnique#TableHeaderAxisConfiguration#axisManagers->forAll(am1 : AxisManagerRepresentation, am2 : AxisManagerRepresentation | am1.axisManagerId <> am2.axisManagerId)
@17995#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#currentRowAxisInHistory#Table#rowAxisProvidersHistory->includes(currentRowAxisProvider)
@17996#E:/FinalProject Repos/repos\Gabitchov\org.eclipse.papyrus\sandbox\pasteInNewTable\org.eclipse.papyrus.infra.nattable.model\model/nattable.ecore#currentColumnAxisInHistory#Table#columnAxisProvidersHistory->includes(currentColumnAxisProvider)
@17997#E:/FinalProject Repos/repos\gambastian\automatizacion2015\MDD_Course_Samples\models\eol/example.ecore#correctDelayDefinition#Transition#self.maxDelay > self.minDelay
@18005#E:/FinalProject Repos/repos\gemoc\gemoc-studio\official_samples\SigPML\language_workbench\org.gemoc.sample.sigpml\model-gen/XSigPMLMT.ecore#matchRates#Place#if byteSize > 0 then byteSize >= itsOutputPort.byteRate and byteSize >= itsInputPort.byteRate else true endif
@18022#E:/FinalProject Repos/repos\gemoc\ModelingCrashCourse\material\fsm\org.gemoc.course.fsm.model\model/fsm.ecore#uniqueStateNames#FiniteStateMachine#self.states->forAll(s1, s2| s1 <> s2 implies s1.name <> s2.name)
@18023#E:/FinalProject Repos/repos\gemoc\ModelingCrashCourse\material\fsm\org.gemoc.course.fsm.model\model/fsm.ecore#uniqueStateNameInFSM#State#self.oclContainer.oclAsType(FiniteStateMachine).states->forAll(s1| s1 <> self implies s1.name <> self.name)
@18024#E:/FinalProject Repos/repos\gemoc\ModelingCrashCourse\material\fsm\org.gemoc.course.fsm.model\model/fsm.ecore#deterministicTransition#Transition#self.oclContainer.oclAsType(State).outgoingTransitions->forAll(t| t <> self implies t.input <> self.input)
@18030#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveWCET#Task#worstCaseExecTime > 0
@18031#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#ExecutionAndDeadlineAllowsCompletion#Task#worstCaseExecTime <= implicitDeadline
@18032#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#ExecutionAndPeriodAllowsCompletion#Task#if (periodicity <> Periodicity::Aperiodic)then worstCaseExecTime <= characteristicPeriodelse trueendif
@18033#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#DeadlineLessThanPeriod#Task#implicitDeadline <= characteristicPeriod
@18034#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositivePeriod#Task#characteristicPeriod > 0
@18035#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveDelay#Module#delay > 0
@18036#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#NonZeroPeriod#Module#period > 0
@18037#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#NonOverlappingPartitions#Module#let allIntervals : Sequence(Interval) = partition.executionIntervals->flatten()->sortedBy(i : Interval | i.start)in if (allIntervals->size() <= 1)then trueelse allIntervals->subSequence(1, allIntervals->size() - 1)->forAll(i : Interval | i.end <= allIntervals->at(1 + allIntervals->indexOf(i)).start)endif
@18038#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#derivation#Module#if (partition->size() > 0)then partition->collect(p | p.availabilityFactor)->sum()else 0.0endif
@18039#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositivePeriod#Partition#period > 0
@18040#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#AvailibilityFactorLessThanOrEqualToOne#Partition#availabilityFactor <= 1
@18041#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PeriodSpansIntervals#Partition#let sortedIntervals : Sequence(Interval) = executionIntervals->sortedBy(start) inif (sortedIntervals->size() > 1)then sortedIntervals->last().end <= periodelse trueendif
@18042#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#NonOverlappingIntervals#Partition#if (executionIntervals->size() <= 1)then true -- Nothing can overlap if there is only one or none!elselet sortedIntervals : Sequence(Interval) = executionIntervals->sortedBy(i : Interval | i.start) insortedIntervals->subSequence(1, sortedIntervals->size() - 1)->forAll(i : Interval | i.end <= sortedIntervals->at(1 + sortedIntervals->indexOf(i)).start)endif
@18043#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#derivation#Partition#if (module->oclIsInvalid() or module->oclIsUndefined() or module = null)then 0.0else self.module.periodendif
@18044#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#derivation#Partition#--check for divide by zero!if (period <> 0)then executionIntervals->collect(i : Interval | i.end - i.start)->sum() / periodelse 0.0endif
@18045#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#EndAfterStart#Interval#end >= start
@18046#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#NonZeroLength#Interval#end <> start
@18047#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveNetworkLatency#Network#latency > 0
@18048#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveNetworkBandwith#Network#networkBandwidth > 0
@18049#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#AtleastTwoSwitchPorts#Switch#switchPorts->size() > 1
@18050#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#DestinationsCannotIncludeSource#VirtualLink#destinations->forAll(dest : Module | dest <> source)
@18051#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveBAG#VirtualLink#BAG > 0
@18052#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveMaxFrameSize#VirtualLink#maxFrameSize > 0
@18053#E:/FinalProject Repos/repos\ghidalgo3\realtimeanalysis\fr.ensma.realtimescheduling\model/model.ecore#PositiveBandwidth#Port#Bandwidth > 0
@18054#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#TooMuchBricks#Brick#Brick.allInstances()->select(b | b.oclIsTypeOf(DigitalSensor) or b.oclIsTypeOf(DigitalActuator) or b.oclIsTypeOf(AnalogActuator))->size() <= 5
@18055#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#derivation#Brick#if (self.oclIsTypeOf(AnalogSensor)) thenBrick.allInstances()->select(b | b.oclIsTypeOf(AnalogSensor) and b.name <> null)->sortedBy(name)->indexOf(self)else if (self.oclIsTypeOf(AnalogActuator)) then8 + Brick.allInstances()->select(b | b.oclIsTypeOf(AnalogActuator) and b.name <> null)->sortedBy(name)->indexOf(self)else if (Brick.allInstances()->select(b | (b.oclIsTypeOf(DigitalSensor) or b.oclIsTypeOf(DigitalActuator)) and b.name <> null)->sortedBy(name)->indexOf(self) = 1) then8else13 - Brick.allInstances()->select(b | (b.oclIsTypeOf(DigitalSensor) or b.oclIsTypeOf(DigitalActuator)) and b.name <> null)->sortedBy(name)->indexOf(self)endifendifendif
@18056#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#TooMuchAnalogSensor#AnalogSensor#AnalogSensor.allInstances()->size() <= 5
@18057#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#TooMuchAnalogActuator#AnalogActuator#AnalogSensor.allInstances()->size() <= 3
@18058#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#TimeMustBePositive#TimeCondition#self.time > 0
@18059#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#InvalidValue#AnalogCondition#self.value >= 0 and self.value <= 1023
@18060#E:/FinalProject Repos/repos\giacogiac\animated-hipster\ArduinoML\model/ArduinoML.ecore#InvalidValue#AnalogActionValue#self.value >= 0 and self.value <= 1023
@18061#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#defineOnlyOneRootNode#Node#(Node.allInstances()->select(n | n.parent.oclIsUndefined ()))->size() = 1
@18062#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#defineInitialConnectorWhenComposite#State#self.subnodes->size() > 0 and Transition.allInstances()->exists(t | t.target=self) implies self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() = 1
@18063#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#defineMaxOneInitialConnector#State#self.subnodes->size() > 0 implies (self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() <= 1)
@18064#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#onlyLeafStatesHaveDoo#State#(not self.doo.oclIsUndefined()) implies (self.subnodes->size() = 0)
@18065#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#transitionOwner#Transition#let lca : State = LCA(self.source, self.target) in self.owner = lca or isAncestor(self.owner, lca)
@18066#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#legalBoundaryCrossing#Transition#(self.target.parent <> self.source) and isAncestor(self.target.parent, self.source)
@18067#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#maxOneTransitionFromInitialConnector#Transition#(self.source.oclIsTypeOf(Connector) and self.source.name='initial') implies (Transition.allInstances()->select(t | t.source = self.source)->size()) <= 1
@18068#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#noGuardFromInitialConnector#Transition#(self.source.oclIsTypeOf(Connector) and self.source.name='initial') implies guard.oclIsUndefined()
@18069#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#body#Transition#if (one = two) then trueelseif (two.parent.oclIsUndefined ())then falseelse if (two.parent = one)then trueelse isAncestor(one, two.parent)endifendifendif
@18070#E:/FinalProject Repos/repos\gijss\rfsm-modeling\be.kuleuven.rodinia.model.rfsm\model/rfsm.ecore#body#Transition#if isAncestor(one, two) and one.oclIsTypeOf(State)then one.oclAsType(State)else if isAncestor(two, one) and two.oclIsTypeOf(State)then two.oclAsType(State)elseLCA(one.parent,two.parent)endifendif
@18071#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Element#An element may not directly or indirectly own itself.not self.allOwnedElements()->includes(self)
@18072#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Element#Elements that must be owned must have an owner.self.mustBeOwned() implies owner->notEmpty()
@18073#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
@18074#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = true
@18075#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = false
@18076#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Package#If an element that is owned by a package has visibility, it is public or private.self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)
@18077#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = member->select( m | self.makesVisible(m))
@18078#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.self.member->includes(el)result = (ownedMember->includes(el)) or(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
@18079#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#If there is no name, or one of the containing namespaces has no name, there is no qualified name.(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())  implies self.qualifiedName->isEmpty()
@18080#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
@18081#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#If a NamedElement is not owned by a Namespace, it does not have a visibility.namespace->isEmpty() implies visibility->isEmpty()
@18082#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))else    Set{}endif
@18083#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.result = if self.namespace->isEmpty()then Sequence{}else self.namespace.allNamespaces()->prepend(self.namespace)endif
@18084#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()else trueendif
@18085#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.result = '::'
@18086#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#NamedElement#The query allOwningPackages() returns all the directly or indirectly owning packages.result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())
@18087#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Namespace#All the members of a Namespace are distinguishable within it.membersAreDistinguishable()
@18088#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Namespace#The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
@18089#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Namespace#The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.result = if self.ownedMember ->includes(element)then Set{}->include(element.name)else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then elementImports->collect(el | el.getName())  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))  endifendif
@18090#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.result = self.member->forAll( memb |self.member->excluding(memb)->forAll(other |memb.isDistinguishableFrom(other, self)))
@18091#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |mem.imp.isDistinguishableFrom(mem, self)))
@18092#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
@18093#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ElementImport#An importedElement has either public visibility or no visibility at all.self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public
@18094#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = if self.alias->notEmpty() then  self.aliaselse  self.importedElement.nameendif
@18095#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Constraintx#The value specification for a constraint must evaluate to a Boolean value.self.specification().booleanValue().isOclKindOf(Boolean)
@18096#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.result = false
@18097#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@18098#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = Set{}
@18099#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = Set{}
@18100#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = Set{}
@18101#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = false
@18102#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = false
@18103#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Association#An association specializing another association has the same number of ends as the other association.self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())
@18104#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Association#Only binary associations can be aggregations.self.memberEnd->exists(aggregation <> Aggregation::none) implies self.memberEnd->size() = 2
@18105#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Association#Association ends of associations with more than two ends must be owned by the association.if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)
@18106#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query isTemplate() returns whether this templateable element is actually a template.result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())
@18107#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@18108#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.not self.allParents()->includes(self)
@18109#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#A classifier may only specialize classifiers of a valid type.self.parents()->forAll(c | self.maySpecializeType(c))
@18110#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The general classifiers are the classifiers referenced by the generalization relationships.result = self.parents()
@18111#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))
@18112#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = member->select(oclIsKindOf(Feature))
@18113#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = generalization.general
@18114#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = member->select(m | c.hasVisibilityOf(m))
@18115#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.self.allParents()->collect(c | c.member)->includes(n)result = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true
@18116#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (self=other) or (self.allParents()->includes(other))
@18117#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The inherit operation is overridden to exclude redefined properties.The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.result = inhs
@18118#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = self.oclIsKindOf(c.oclType)
@18119#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = self.parents()->union(self.parents()->collect(p | p.allParents())
@18120#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.redefinee.isRedefinitionContextValid(self)result = false
@18121#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))
@18122#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#GeneralizationSet#Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.generalization->collect(g | g.general)->asSet()->size() <= 1
@18123#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#If the language attribute is not empty, then the size of the body and language arrays must be the same.language->notEmpty() implies (body->size() = language->size())
@18124#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#The behavior may only have return result parameters.self.behavior.notEmpty() implies  self.behavior.ownedParameters->select(p | p.direction<>#return)->isEmpty()
@18125#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#The behavior must have exactly one return result parameter.self.behavior.notEmpty() implies  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1
@18126#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.self.isIntegral()true
@18127#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an integer.result = false
@18128#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.self.isIntegral()result = false
@18129#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.self.isIntegral()result = false
@18130#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The lower bound must be a non-negative integer literal.lowerBound()->notEmpty() implies lowerBound() >= 0
@18131#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The upper bound must be greater than or equal to the lower bound.(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
@18132#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The derived lower attribute must equal the lowerBound.result = lowerBound()
@18133#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The derived upper attribute must equal the upperBound.result = upperBound()
@18134#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = upperBound() > 1
@18135#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.upperBound()->notEmpty() and lowerBound()->notEmpty()result = (lowerBound() <= C) and (upperBound() >= C)
@18136#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
@18137#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer.result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif
@18138#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif
@18139#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MultiplicityElement#The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))
@18140#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.redefinee.isRedefinitionContextValid(self)result = redefinee.oclIsKindOf(Property) and   let prop : Property = redefinee.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isDerived implies prop.isDerived) and  (self.isComposite implies prop.isComposite))
@18141#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#A multiplicity of a composite aggregation must not have an upper bound greater than 1.A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)
@18142#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.self.subsettedProperty->notEmpty() implies  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |    self.subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
@18143#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#A redefined property must be inherited from a more general classifier containing the redefining property.if (redefinedProperty->notEmpty()) then  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))
@18144#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.self.subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound()<=sp.upperBound() ))
@18145#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#Only a navigable property can be marked as readOnly.isReadOnly implies isNavigable()
@18146#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#A binding of a property template parameter representing an attribute must be to an attribute.(isAttribute(self) and (templateParameterSubstitution->notEmpty())  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))
@18147#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some classifier.result = Classifier.allInstances->exists(c | c.attribute->includes(p))
@18148#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2  then    let otherEnd = (association.memberEnd - self)->any() in      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif    else Set {}    endif
@18149#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.result = if association->notEmpty()then association.endType-typeelse if classifier->notEmpty() then Set{classifier} else Set{} endifendif
@18150#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)
@18151#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#Class#A passive class may not own receptions.not self.isActive implies self.ownedReception.isEmpty()
@18152#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#StringExpression#The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.result = if subExpression->notEmpty()then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))
@18153#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#StringExpression#If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having todefine a collating sequence between operands and subexpressions).if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()
@18154#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#InstanceSpecification#The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))
@18155#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#InstanceSpecification#One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
@18156#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#MeasurementDomain#The query isScientific() informs about the existence of a compositionRule caracterizing a scientific measurement domain or a cognitive measurement domain otherwise
@18157#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.result = true
@18158#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralInteger#The query integerValue() gives a single Integer value when one can be computed.result = Set{}
@18159#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralDecimal#The query isComputable() is redefined to be true.result = true
@18160#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralDecimal#The query decimalValue() gives a single Decimal value when one can be computed.result = Set{}
@18161#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.result = true
@18162#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralString#The query stringValue() gives the value.result = value
@18163#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.result = true
@18164#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.result = value
@18165#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.result = true
@18166#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralNull#The query isNull() returns true.result = true
@18167#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.result = true
@18168#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.ontouml\model/RefOntoUML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.result = value
@18169#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.z3py\model/z3py.ecore#FunctionCallNumberOfArguments#FunctionCall#self.calledFunction.numberOfArguments = self.arguments->size()
@18170#E:/FinalProject Repos/repos\gitdelehe\ontouml-lightweight-editor\br.ufes.inf.nemo.z3py\model/z3py.ecore#IrreflexiveQuant#Quantification#self.expression <> self
@18171#E:/FinalProject Repos/repos\glovas\psd-ui-generator\hu.bme.mit.mobilgen.psdprocessor.model\model/PSDStructure.ecore#nonNegativePosition#View#pos.x >= 0 and pos.y >= 0
@18172#E:/FinalProject Repos/repos\glovas\psd-ui-generator\hu.bme.mit.mobilgen.psdprocessor.model\model/PSDStructure.ecore#uniqueID#View#View.allInstances()->select(v:View|v.ID=self.ID)->size() = 1
@18173#E:/FinalProject Repos/repos\glovas\psd-ui-generator\hu.bme.mit.mobilgen.psdprocessor.model\model/PSDStructure.ecore#properChildrenCount#Grid#children->size() = (cols * rows)
@18174#E:/FinalProject Repos/repos\glovas\psd-ui-generator\hu.bme.mit.mobilgen.psdprocessor.model\model/PSDStructure.ecore#defaultInRange#Select#(options->size() = 0) or (options->includes(default))
@18175#E:/FinalProject Repos/repos\glovas\psd-ui-generator\hu.bme.mit.mobilgen.psdprocessor.model\model/PSDStructure.ecore#defaultInRange#Slider#(self.default >= 0) and (self.default <= self.max)
@18176#E:/FinalProject Repos/repos\glovas\psd-ui-generator\hu.bme.mit.mobilgen.psdprocessor.model\model/PSDStructure.ecore#maxIsBigger#Slider#max > 0
@18189#E:/FinalProject Repos/repos\grammarware\sle16\bousse\framework-sources\ModelDebugging\simulationmodelanimation\plugins\fr.obeo.dsl.debug\model/debug.ecore#documentation#Variable#Tells if the {@link Variable#getValue() value} can be changed
@18290#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#defineName#Pouex#not self.name.oclIsUndefined() and self.name <> ''
@18291#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#coherentValueMinDefaultMax#Feature#self.minimum <= self.default and self.default <= self.maximum
@18292#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#checkCicleActivationLevelOne#State#self.activationConditions->selectByType(StateActivationCondition)->forAll(s: StateActivationCondition | self <> s.state)
@18293#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#checkCicleActivationLevelTwo#State#self.activationConditions->selectByKind(LogicActivationCondition).terms->selectByType(StateActivationCondition)->forAll(s: StateActivationCondition | self <> s.state)
@18294#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#checkCicleActivationFromLevelThree#State#self.activationConditions->selectByKind(LogicActivationCondition).oclAsSet()->closure(l: LogicActivationCondition | l.terms->selectByKind(LogicActivationCondition)).terms->selectByType(StateActivationCondition)->forAll(s: StateActivationCondition | self <> s.state)
@18295#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#cantModifyFeatureTwiceOrMore#Action#self.influences->isUnique(i: Influence | i.feature.name)
@18296#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#notDivByZero#Influence#if self.operator = MathematicOperator::DIVISION then value <> 0 else true endif
@18297#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#uniqueNameInSameLevel#BodyPart#self.parent.oclIsUndefined() or self.parent.subparts->select(b: BodyPart | self.name = b.name)->size() = 1
@18298#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#thresholdShouldIsConsistentValueRespectOfFeatureMinMaxValue#ThresholdActivationCondition#self.threshold <= self.feature.maximum and self.threshold >= self.feature.minimum
@18299#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#atLeastOneActionForEachFeature#LiveObject#self.features->forAll(f: Feature | self.actions->select(a: Action | a.enable = true).influences.feature->exists(inf_feature: Feature | inf_feature = f))
@18300#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#ActionNameMustBeUnique#LiveObject#self.actions->isUnique(a: Action | a.name)
@18301#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#FeatureNameMustBeUnique#LiveObject#self.features->isUnique(f: Feature | f.name)
@18302#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#StateNameMustBeUnique#LiveObject#self.states->isUnique(s: State | s.name)
@18303#E:/FinalProject Repos/repos\hachreak\dmss.pouex\metamodel/PouexMM.ecore#almostExistOneStateDead#LiveObject#self.states->selectByType(StateDead)->size() > 0
@18304#E:/FinalProject Repos/repos\Hadschii\mbse_project\uebung\de.tu_bs.cs.isf.mbse.metro\model/Metro.ecore#actualNoTrains#Metro#self.noTrains >= self.trains->size()
@18305#E:/FinalProject Repos/repos\Hadschii\mbse_project\uebung\de.tu_bs.cs.isf.mbse.metro\model/Metro.ecore#actualNoLines#Metro#self.noLines >= self.lines->size()
@18306#E:/FinalProject Repos/repos\Hadschii\mbse_project\uebung\de.tu_bs.cs.isf.mbse.metro\model/Metro.ecore#maxTrains#Line#self.trains->size() <= 4
@18307#E:/FinalProject Repos/repos\Hadschii\mbse_project\uebung\de.tu_bs.cs.isf.mbse.metro\model/Metro.ecore#maxCarriages#Train#self.carriages > 0 and self.carriages < 3
@18308#E:/FinalProject Repos/repos\Hadschii\mbse_project\uebung\de.tu_bs.cs.isf.mbse.metro\model/Metro.ecore#noPassengers#Train#(self.carriages*6 + 6) >= self.persons->size()
@18316#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\multiplicities/A_keys.ecore#unique_keys#RootA#self.as->forAll(x,y | x = y or x.key <> y.key)
@18317#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\multiplicities/B_keys.ecore#unique_keys#RootB#self.bs->forAll(x,y | x = y or x.key <> y.key)
@18318#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/RDBMS.ecore#post_a#Table#self.name = n
@18319#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/RDBMS.ecore#post_a#Column#self.name = n
@18320#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/RDBMS.ecore#post_a#Column#self.table.name = n
@18321#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#inheritance#Class#not self->closure(super)->includes(self)
@18322#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#names_c#Class#Class.allInstances()->forAll(x | x = self or x.name <> self.name)
@18323#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#names_a#Class#self.attributes->forAll(x | self.attributes->forAll(y | x = y or x.name <> y.name))
@18324#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_a#Class#self.name = n
@18325#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_b#Class#Package.allInstances()->forAll(x | x.classes@pre = x.classes)
@18326#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_e#Class#Package.allInstances()->forAll(x | x.name@pre = x.name)
@18327#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_f#Class#Attribute.allInstances()-> forAll(x | x.name@pre = x.name)
@18328#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_g#Class#Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes)
@18329#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_h#Class#Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent)
@18330#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_c#Class#Class.allInstances@pre() = Class.allInstances()
@18331#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_d#Class#Attribute.allInstances@pre() = Attribute.allInstances()
@18332#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_i#Class#Class.allInstances()-> forAll(x | x.super@pre = x.super)
@18333#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_z#Class#Package.allInstances@pre() = Package.allInstances()
@18334#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_ff#Class#Class.allInstances()-> forAll(x | x.name@pre = x.name or x = self)
@18335#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_b#Class#Package.allInstances()->forAll(x | x.classes@pre = x.classes)
@18336#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_e#Class#Package.allInstances()->forAll(x | x.name@pre = x.name)
@18337#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_f#Class#Attribute.allInstances@pre()-> forAll(x | x.name@pre = x.name)
@18338#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_g#Class#Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes or x = self)
@18339#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_h#Class#Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent)
@18340#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_c#Class#Class.allInstances@pre() = Class.allInstances()
@18341#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_d#Class#Attribute.allInstances@pre()->forAll(x | Attribute.allInstances()->includes(x))
@18342#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_i#Class#Class.allInstances()-> forAll(x | x.super@pre = x.super)
@18343#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_z#Class#Package.allInstances@pre() = Package.allInstances()
@18344#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_ff#Class#Class.allInstances()-> forAll(x | x.name@pre = x.name)
@18345#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_c#Class#Attribute.allInstances()->one(x | x.oclIsNew() and x.name = n and self.attributes->includes(x))
@18346#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_b#Class#Package.allInstances()->forAll(x | x.classes@pre = x.classes)
@18347#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_e#Class#Package.allInstances()->forAll(x | x.name@pre = x.name)
@18348#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_f#Class#Attribute.allInstances()-> forAll(x | x.name@pre = x.name)
@18349#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_g#Class#Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes)
@18350#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_h#Class#Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent or x = self)
@18351#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_c#Class#Class.allInstances@pre() = Class.allInstances()
@18352#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_d#Class#Attribute.allInstances@pre() = Attribute.allInstances()
@18353#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_i#Class#Class.allInstances()-> forAll(x | x.super@pre = x.super)
@18354#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_z#Class#Package.allInstances@pre() = Package.allInstances()
@18355#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_ff#Class#Class.allInstances()-> forAll(x | x.name@pre = x.name)
@18356#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_a#Attribute#self.name = n
@18357#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_b#Attribute#Package.allInstances()->forAll(x | x.classes@pre = x.classes)
@18358#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_e#Attribute#Package.allInstances()->forAll(x | x.name@pre = x.name)
@18359#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_f#Attribute#Class.allInstances()-> forAll(x | x.name@pre = x.name)
@18360#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_g#Attribute#Class.allInstances()-> forAll(x | x.attributes@pre = x.attributes)
@18361#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_h#Attribute#Class.allInstances()-> forAll(x | x.persistent@pre = x.persistent)
@18362#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_c#Attribute#Class.allInstances@pre() = Class.allInstances()
@18363#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_d#Attribute#Attribute.allInstances@pre() = Attribute.allInstances()
@18364#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_i#Attribute#Class.allInstances()-> forAll(x | x.super@pre = x.super)
@18365#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_z#Attribute#Package.allInstances@pre() = Package.allInstances()
@18366#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_keys/UML.ecore#post_ff#Attribute#Attribute.allInstances()-> forAll(x | x.name@pre = x.name or x = self)
@18370#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#acyclic_inheritance#Class#not self->closure(super)->includes(self)
@18371#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#unique_names#Class#self.attributes->forAll(x | self.attributes->forAll(y | x = y or x.name <> y.name))
@18372#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#post_add_attr#Class#Attribute.allInstances()->one(x | x.oclIsNew() and x.name = n and self.attributes->includes(x))
@18373#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#post_frame_attributes#Class#Class.allInstances()->forAll(x | x.attributes@pre = x.attributes or x = self)
@18374#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#post_frame_name#Class#NamedEntity.allInstances@pre()->forAll(x | x.name@pre = x.name or x = self)
@18375#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#post_frame_type#Class#Attribute.allInstances@pre()-> forAll(x | x.type@pre = x.type or x = self)
@18376#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#post_set_name#NamedEntity#self.name = n
@18377#E:/FinalProject Repos/repos\haslab\echo\examples\pt.uminho.haslab.echo.examples\metamodels\uml2rdbms_simple/UML.ecore#post_frame_name#NamedEntity#NamedEntity.allInstances()->forAll(x | x.name@pre = x.name or x = self)
@18668#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.ebnf\model/ebnfmm.ecore#body#FactorableSymbol#self.containingChoose != null
@18669#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#body#TextualDSLVisualizer#self.getContainingLMLVisualizer().getContainingElement()
@18670#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#body#TextualDSLVisualizer#self.oclAsType(ecore::EObject).eContainer().oclAsType(PLM::LMLVisualizer)
@18671#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#body#TextualVisualizationDescriptor#self.getContainingTextualVisualizer().getContainingPLMElement().oclAsType(PLM::Element)
@18672#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#body#TextualVisualizationDescriptor#let container:OclAny = self.oclAsType(ecore::EObject).eContainer()inif (container.oclIsTypeOf(TextualDSLVisualizer)) thencontainer.oclAsType(TextualDSLVisualizer)-- This is the case if a descriptor is stored in a choiceelsecontainer.oclAsType(TextualVisualizationDescriptor).getContainingTextualVisualizer()endif
@18673#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#body#Value#self.getContainingTextualVisualizer().getContainingPLMElement().oclAsType(PLM::Clabject).getAttributeByName(self.expression)->size() > 0
@18674#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#vaildR#RGBColor#self.R <= 255 and self.R >= 0
@18675#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#vaildR$message#RGBColor#'R must be between 0 and 255'
@18676#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#vaildG#RGBColor#self.G <= 255 and self.G >= 0
@18677#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#vaildG$message#RGBColor#'G must be between 0 and 255'
@18678#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#vaildB#RGBColor#self.B <= 255 and self.B >= 0
@18679#E:/FinalProject Repos/repos\JaimeChavarriaga\melanie-textdsl\de.uni_mannheim.informatik.swt.models.plm.textualrepresentation\model/PLM.textualrepresentation.ecore#vaildB$message#RGBColor#'B must be between 0 and 255'
@18686#E:/FinalProject Repos/repos\Javirln\Api-backend-generator\bin\metamodels/db.ecore#tablasConMismoNombre#EsquemaBD#self.tablas->forAll(t1, t2 : Tabla | t1 <> t2 implies t1.nombre <> t2.nombre)
@18687#E:/FinalProject Repos/repos\Javirln\Api-backend-generator\bin\metamodels/db.ecore#tablasConMismoNombre2#EsquemaBD#self.tablas->isUnique(nombre)
@18688#E:/FinalProject Repos/repos\Javirln\Api-backend-generator\bin\metamodels/db.ecore#columnasConMismoNombre#Tabla#self.columnas->forAll(c1, c2 : Columna | c1 <> c2 implies c1.nombre <> c2.nombre)
@18689#E:/FinalProject Repos/repos\Javirln\Api-backend-generator\bin\metamodels/db.ecore#columnasConMismoNombre2#Tabla#self.columnas->isUnique(nombre)
@18690#E:/FinalProject Repos/repos\Javirln\Api-backend-generator\bin\metamodels/db.ecore#nombreMayusculas#Tabla#self.nombre = self.nombre.toUpper()
@18691#E:/FinalProject Repos/repos\Javirln\Api-backend-generator\bin\metamodels/db.ecore#nombreMayusculaPrimeraLetra#Columna#self.nombre.substring(1, 1) = self.nombre.substring(1, 1).toUpper()
@18699#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#IncrementalScheme#OfflineModel#self.rootNodes()->forAll(n:Node| self.incremental(n))
@18700#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#MandatoryScheme#OfflineModel#self.rootNodes()->forAll(n:Node| self.mandatory(n))
@18701#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#FreeScheme#OfflineModel#self.rootNodes()->forAll(n:Node| self.free(n))
@18702#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#OfflineModel#nodes->select(parent.oclIsUndefined())
@18703#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#OfflineModel#scheme=Scheme::Incremental implies n.existeNodoPreCache() and n.existeNodoDefault()
@18704#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#OfflineModel#scheme=Scheme::Mandatory implies n.existeNodoPreCache() and not n.existeNodoDefault()
@18705#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#OfflineModel#scheme=Scheme::Free implies not n.existeNodoPreCache() and n.existeNodoDefault()
@18706#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#Node#self.children->closure(ch:AbstractNode | if (ch.oclIsTypeOf(Node)) then (ch.oclAsType(Node).children->including(self)) else Set(AbstractNode){} endif)->including(self)->select( oclIsTypeOf(Node))->collect(oclAsType(Node))->exists(v:Node | v.type.oclIsTypeOf(PreCache))
@18707#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#Node#self.children->closure(ch:AbstractNode | if (ch.oclIsTypeOf(Node)) then (ch.oclAsType(Node).children->including(self)) else Set(AbstractNode){} endif)->including(self)->select( oclIsTypeOf(Node))->collect(oclAsType(Node))->exists(v:Node | v.type.oclIsTypeOf(Default))
@18708#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#body#Node#self.children->closure(ch:AbstractNode | if (ch.oclIsTypeOf(Node)) then (ch.oclAsType(Node).children->including(self)) else Set(AbstractNode){} endif)->including(self)->select( oclIsTypeOf(Node))->collect(oclAsType(Node))->exists(v:Node | v.type.oclIsTypeOf(NoCache))
@18709#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#derivation#Node#if (self.type.oclIsTypeOf(PreCache)) then true else false endif
@18710#E:/FinalProject Repos/repos\jgallud\metamodel\es.uclm.offlinemodel\model/OfflineMOdel.ecore#ForceParentNode#Element#not self.parent.oclIsUndefined()
@18711#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoActividad#ActividadDiagrama#self.actividades->select(nombre<>null)->isUnique(nombre)
@18712#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoEspacio#ActividadDiagrama#self.actividades.espacios->select(nombre<>null)->isUnique(nombre)
@18713#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoTarea#ActividadDiagrama#self.actividades.espacios.tareas->select(nombre<>null)->isUnique(nombre)
@18714#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoPrueba#ActividadDiagrama#self.actividades.espacios.pruebas->select(nombre<>null)->isUnique(nombre)
@18715#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoLeccion#ActividadDiagrama#self.actividades.espacios.lecciones->select(nombre<>null)->isUnique(nombre)
@18716#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoConcepto#ConceptosDiagrama#self.temas.conceptos->select(nombre<>null)->isUnique(nombre)
@18717#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#NombreDuplicadoCaracterística#ConceptosDiagrama#self.temas.conceptos.atributos->select(nombre<>null)->isUnique(nombre)
@18718#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#body#Tarea#ActividadEnlace.allInstances()->exists(v1,v2|v1.origen=self and v2.destino=self)
@18719#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#body#Leccion#ActividadEnlace.allInstances()->exists(v1,v2|v1.origen=self and v2.destino=self)
@18720#E:/FinalProject Repos/repos\jmcruz-uma\CourseDesigner\vpresentation\org.mindmap.model\model/mindmap.ecore#body#Prueba#ActividadEnlace.allInstances()->exists(v1,v2|v1.origen=self and v2.destino=self)
@18721#E:/FinalProject Repos/repos\joao16ribeiro\EDOM\EDOM_Ex4\models/mindmap.ecore#mustHaveTitle#Map#not title.oclIsUndefined()
@18722#E:/FinalProject Repos/repos\joao16ribeiro\EDOM\EDOM_Ex4\models/mindmap.ecore#derivation#Map#let topics : Set(mindmap::Topic) =self.elements->select(oclIsKindOf(mindmap::Topic))->collect(oclAsType(mindmap::Topic))->asSet() in topics->asOrderedSet()->symmetricDifference(topics.subtopics->asSet())->asOrderedSet()
@18723#E:/FinalProject Repos/repos\joao16ribeiro\EDOM\EDOM_Ex4\models/mindmap.ecore#EndAfterStart#Topic#self.end >= self.start
@18724#E:/FinalProject Repos/repos\joao16ribeiro\EDOM\EDOM_Ex4\models/mindmap.ecore#body#Topic#self->closure(subtopics)
@18725#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#NoDepartmentMoreThanTwiceNumberOfEmployeesThanAnother#Company#self.department->forAll(d1 | --self.department->forAll(d2 | d1.numberOfEmployees <= d2.numberOfEmployees * 2)self.department->forAll(d2 | d1.employee->size() <= d2.employee->size() * 2))
@18726#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#AtLeastTwoEmployees#Department#--self.employee->iterate(p: Person; sum:Integer =0 | sum + 1) >= 2;self.employee->size() >= 2
@18727#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#derivation#Department#self.employee->size()
@18728#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#derivation#Department#self.employee->iterate(p; sum:Integer = 0 | sum + p.age)
@18729#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#AllEmployeesMustBeAdults#Person#self.age >= 18
@18730#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#PersonCannotBeSupervisorOfHimHerself#Person#self <> self.supervisor
@18731#E:/FinalProject Repos/repos\JoshuaGhost\lecture_slides\Folien_und_Literaturen\1\Model-based_Software_Engineering-Dokumente/company.ecore#derivation#Person#self.firstName.concat(' ').concat(self.name)
@19476#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#containmentReference#CREATE#self.parentCompositeReference.containment = true
@19477#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#uniqueParent#CREATE#let variableReference : VariableReference = self.parent.oclAsType(VariableReference),queryResult : EObjectReference = variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclAsType(EObjectReference)inif self.parent.oclIsKindOf(EObjectReference) thenself.parent.oclAsType(EObjectReference).elements->size() = 1elseif self.parent.oclIsKindOf(VariableReference) then if variableReference.referencedVariable.oclIsKindOf(QueryVariable) then if variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclIsKindOf(EObjectReference) then queryResult.elements->size() = 1 else false endif else true endifelse trueendifendif
@19478#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#typeMustBeConcrete#TypeVariable#not(self.type.abstract = true)
@19479#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#uniqueParent#SET#let variableReference : VariableReference = self.referenceOwner.oclAsType(VariableReference),queryResult : EObjectReference = variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclAsType(EObjectReference)inif self.referenceOwner.oclIsKindOf(EObjectReference) thenself.referenceOwner.oclAsType(EObjectReference).elements->size() = 1elseif self.referenceOwner.oclIsKindOf(VariableReference) then if variableReference.referencedVariable.oclIsKindOf(QueryVariable) then if variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclIsKindOf(EObjectReference) then queryResult.elements->size() = 1 else false endif else true endifelse trueendifendif
@19480#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#uniqueParent#MOVE#let variableReference : VariableReference = self.newParent.oclAsType(VariableReference),queryResult : EObjectReference = variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclAsType(EObjectReference)inif self.newParent.oclIsKindOf(EObjectReference) thenself.newParent.oclAsType(EObjectReference).elements->size() = 1elseif self.newParent.oclIsKindOf(VariableReference) then if variableReference.referencedVariable.oclIsKindOf(QueryVariable) then if variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclIsKindOf(EObjectReference) then queryResult.elements->size() = 1 else false endif else true endifelse trueendifendif
@19481#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#nameNotNull#Variable#not(self.name = null)
@19482#E:/FinalProject Repos/repos\jreimone\refactory\Evolution\plugins\org.modelrefactoring.evolution.operators\metamodel/operators.ecore#parameterLessOperation#EOperationQualifier#self.operation.eParameters->size() = 0
@19483#E:/FinalProject Repos/repos\jreimone\refactory\matching\org.modelrefactoring.guery.test\metamodels/feature.ecore#body#FeatureModel#org.eclipse.emf.common.util.EList< org.featuremapper.models.feature.Feature> toReturn = new org.eclipse.emf.common.util.BasicEList< org.featuremapper.models.feature.Feature>();if (this.getRoot() != null) {if (this.getRoot().getGroups() != null) {for ( org.featuremapper.models.feature.Group g : this.getRoot().getGroups()) {for ( org.featuremapper.models.feature.Feature f : g.getChildFeatures()) {toReturn.addAll(getFeatureRecursive(f));}}}toReturn.add(this.getRoot());org.eclipse.emf.common.util.EList< org.featuremapper.models.feature.FeatureModel> children = this.getChildren();if (children != null) {for ( org.featuremapper.models.feature.FeatureModel fm : children) {toReturn.addAll(fm.getAllFeatures());}}}return toReturn;
@19484#E:/FinalProject Repos/repos\jreimone\refactory\matching\org.modelrefactoring.guery.test\metamodels/feature.ecore#body#FeatureModel#org.eclipse.emf.common.util.EList< org.featuremapper.models.feature.Feature> toReturn = new org.eclipse.emf.common.util.BasicEList< org.featuremapper.models.feature.Feature>();for ( org.featuremapper.models.feature.Feature feature : getAllFeatures()) {if (feature.isMandatory()) {toReturn.add(feature);}}return toReturn;
@19485#E:/FinalProject Repos/repos\jreimone\refactory\matching\org.modelrefactoring.guery.test\metamodels/feature.ecore#body#FeatureModel#org.eclipse.emf.common.util.EList< org.featuremapper.models.feature.Feature> toReturn = new org.eclipse.emf.common.util.BasicEList< org.featuremapper.models.feature.Feature>();if (base != null) {toReturn.add(base);for ( org.featuremapper.models.feature.Group g : base.getGroups()) {for ( org.featuremapper.models.feature.Feature f : g.getChildFeatures()) {toReturn.addAll(getFeatureRecursive(f));}}}return toReturn;
@19486#E:/FinalProject Repos/repos\jreimone\refactory\matching\org.modelrefactoring.guery.test\metamodels/feature.ecore#body#Feature#return (this.getMinCardinality() > 0);
@19487#E:/FinalProject Repos/repos\jreimone\refactory\Plugins\org.emftext.language.refactoring.rolemapping\metamodel/rolemapping.ecore#body#ConcreteMapping#org.eclipse.emf.common.util.EList < org.emftext.language.refactoring.rolemapping.CollaborationMapping > mappings = getCollaborationMappings ( ) ;org.eclipse.emf.common.util.EList< org.emftext.language.refactoring.rolemapping.CollaborationMapping> targetMappings = new org.eclipse.emf.common.util.BasicEList< org.emftext.language.refactoring.rolemapping.CollaborationMapping>(); for ( org.emftext.language.refactoring.rolemapping.CollaborationMapping relationMapping : mappings ) { org.eclipse.emf.ecore.util.EcoreUtil .resolveAll ( relationMapping ) ; org.emftext.language.refactoring.roles.MultiplicityCollaboration collaboration = relationMapping .getCollaboration ( ) ; if ( collaboration .getTarget ( ) .equals ( role ) ) { targetMappings.add(relationMapping); } } return targetMappings ;
@19491#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractMoClass#org.eclipse.emf.ecore.EObject buffer = eContainer();while (buffer != null && !(buffer instanceof AbstractMoClass))buffer = buffer.eContainer();return (AbstractMoClass) buffer;
@19492#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractMoClass#return eContainer() instanceof ReplaceableClass ? (ReplaceableClass) eContainer() : null;
@19493#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractContent#return (AbstractMoClass)eContainer();
@19494#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractContent#return getName().startsWith("\u0027") && getName().endsWith("\u0027") ? getName().substring(1,getName().length()-1) : getName();
@19495#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#CommonContent#return getBody();
@19496#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ExtensionContent#return getBody();
@19497#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#Body#return (AbstractContent)eContainer();
@19498#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractBodyElements#return eContainer() instanceof Body ? (Body) eContainer() : (Body) eContainer().eContainer();
@19499#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractEquation#return eContainer() instanceof EquationSection ? (EquationSection) eContainer() : null;
@19500#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractEquation#return eContainer() instanceof AbstractEquation ? (AbstractEquation) eContainer() : null;
@19501#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractEquation#return eContainer() instanceof ElseWhenEquation ? (ElseWhenEquation) eContainer() : null;
@19502#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractEquation#return eContainer() instanceof ElseIfEquation ? (ElseIfEquation) eContainer() : null;
@19503#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractStatement#return eContainer() instanceof AlgorithmSection ? (AlgorithmSection) eContainer() : null;
@19504#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractStatement#return eContainer() instanceof AbstractStatement ? (AbstractStatement) eContainer() : null;
@19505#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractStatement#return eContainer() instanceof ElseIfStatements ? (ElseIfStatements) eContainer() : null;
@19506#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractStatement#return eContainer() instanceof ElseWhenStatement ? (ElseWhenStatement) eContainer() : null;
@19507#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ElseIfStatements#return (IfStatement) eContainer();
@19508#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ElseWhenStatement#return (WhenStatement) eContainer();
@19509#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractComponent#return eContainer() instanceof VisibilityComponentsSection ? (VisibilityComponentsSection) eContainer() : null;
@19510#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ComponentName#return eContainer() instanceof Component ? (Component) eContainer() : null;
@19511#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#Argument#return eContainer() instanceof FunctionCall ? (FunctionCall) eContainer() : null;
@19512#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ArgumentEntry#return eContainer() instanceof Argument ? (Argument) eContainer() : null;
@19513#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#Reference#return eContainer() instanceof Assignment ? (Assignment) eContainer() : null;
@19514#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#Reference#return eContainer() instanceof Expression ? (Expression) eContainer() : null;
@19515#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ElseIfEquation#return eContainer() instanceof AbstractEquation ? (AbstractEquation) eContainer() : null;
@19516#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ForIndices#return eContainer() instanceof ForEquation ? (ForEquation) eContainer() : null;
@19517#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ForIndices#return eContainer() instanceof ForStatement ? (ForStatement) eContainer() : null;
@19518#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ForIndex#return (ForIndices) eContainer();
@19519#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ElseWhenEquation#return eContainer() instanceof AbstractEquation ? (AbstractEquation) eContainer() : null;
@19520#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#ExpressionList#return eContainer() instanceof ExpressionListAssignment ? (ExpressionListAssignment) eContainer() : null;
@19521#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof ExpressionList ? (ExpressionList) eContainer() : null;
@19522#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof AbstractExpression ? (AbstractExpression) eContainer() : null;
@19523#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof AbstractStatement ? (AbstractStatement) eContainer() : null;
@19524#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof ElseIfStatements ? (ElseIfStatements) eContainer() : null;
@19525#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof ElseWhenStatement ? (ElseWhenStatement) eContainer() : null;
@19526#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof AbstractEquation ? (AbstractEquation) eContainer() : null;
@19527#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof ElseIfEquation ? (ElseIfEquation) eContainer() : null;
@19528#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof ElseWhenEquation ? (ElseWhenEquation) eContainer() : null;
@19529#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof BasicValue ? (BasicValue) eContainer() : null;
@19530#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#AbstractExpression#return eContainer() instanceof ArgumentEntry ? (ArgumentEntry) eContainer() : null;
@19531#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#IfExpression#return getThen();
@19532#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#IfExpression#return getElse();
@19533#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#Expression#return eContainer() instanceof EquationExpression ? (EquationExpression) eContainer() : null;
@19534#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#BasicValueWithOperator#return eContainer() instanceof Expression ? (Expression) eContainer() : null;
@19535#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#BasicValue#  Container expr = (Container) eContainer();  while(!(expr instanceof Expression)&&expr!=null){  expr = (Container) expr.eContainer();  }    return (Expression) expr;
@19536#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#BasicValue#return eContainer() instanceof BasicValueWithOperator ? (BasicValueWithOperator) eContainer() : null;
@19537#E:/FinalProject Repos/repos\jreimone\refactory\Registrations\Mappings\org.dresdenocl.refactoring\testdata/Modelica.ecore#body#BasicValue#return eContainer() instanceof BasicValue ? (BasicValue) eContainer() : null;
@19758#E:/FinalProject Repos/repos\jreimone\refactory\Tests\org.emftext.refactoring.examples.screencast\models\ecore\extractSubPackage/concretesyntax.ecore#body#ConcreteSyntax#if ( get_genClassCache ( ) == null ) { set_genClassCache ( org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createGenClassCache()) ; } return get_genClassCache ( ) ; 
@19759#E:/FinalProject Repos/repos\jreimone\refactory\Tests\org.emftext.refactoring.examples.screencast\models\ecore\extractSubPackage/concretesyntax.ecore#body#ConcreteSyntax#if ( get_eClassUtil ( ) == null ) { set_eClassUtil ( org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createEClassUtil()) ; } return get_eClassUtil ( ) ; 
@19760#E:/FinalProject Repos/repos\jreimone\refactory\Tests\org.emftext.refactoring.examples.screencast\models\ecore\extractSubPackage/concretesyntax.ecore#body#PartialTokenDefinition#org.emftext.sdk.concretesyntax.RegexComposer composer = org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createRegexComposer(); return composer .getComposedRegex ( this , new org.eclipse.emf.common.util.BasicEList < org.emftext.sdk.concretesyntax.AbstractTokenDefinition > ( ) ) ; 
@19761#E:/FinalProject Repos/repos\jreimone\refactory\Tests\org.emftext.refactoring.examples.screencast\models\ecore\extractSubPackage/concretesyntax.ecore#body#NormalTokenDefinition#org.emftext.sdk.concretesyntax.RegexComposer composer = org.emftext.sdk.concretesyntax.ConcretesyntaxFactory.eINSTANCE.createRegexComposer(); return composer .getComposedRegex ( this , new org.eclipse.emf.common.util.BasicEList < org.emftext.sdk.concretesyntax.AbstractTokenDefinition > ( ) ) ; 
@19762#E:/FinalProject Repos/repos\jreimone\refactory\Third-Party-Plugins\IncQuery\v0.7.0\org.eclipse.incquery.patternlanguage\src\org\eclipse\incquery\patternlanguage/PatternLanguage.ecore#body#VariableReference#if (variable == null) {InternalEObject container = this.eContainer;while (container != null&& !(container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.PatternBody || container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.Pattern)) {container = container.eInternalContainer();}if (container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.PatternBody) {//The side-effect of this call initializes the variable((org.eclipse.incquery.patternlanguage.patternLanguage.PatternBody) container).getVariables();} else if (container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.Pattern) {org.eclipse.incquery.patternlanguage.patternLanguage.Pattern pattern = (org.eclipse.incquery.patternlanguage.patternLanguage.Pattern) container;for (org.eclipse.incquery.patternlanguage.patternLanguage.Variable var : pattern.getParameters()) {if (var.getName().equals(getVar())) {var.getReferences().add(this);}}}  }return variable;
@19764#E:/FinalProject Repos/repos\jreimone\refactory\Third-Party-Plugins\IncQuery\v0.8.0\org.eclipse.incquery.patternlanguage\model\generated/PatternLanguage.ecore#body#VariableReference#if (variable == null) {InternalEObject container = this.eContainer;while (container != null&& !(container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.PatternBody|| container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.Pattern)) {container = container.eInternalContainer();}if (container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.PatternBody) {//The side-effect of this call initializes the variable((org.eclipse.incquery.patternlanguage.patternLanguage.PatternBody) container).getVariables();} else if (container instanceof org.eclipse.incquery.patternlanguage.patternLanguage.Pattern) {org.eclipse.incquery.patternlanguage.patternLanguage.Pattern pattern =(org.eclipse.incquery.patternlanguage.patternLanguage.Pattern) container;for (org.eclipse.incquery.patternlanguage.patternLanguage.Variable var : pattern.getParameters()) {if (var.getName() != null && var.getName().equals(getVar())) {var.getReferences().add(this);}}}}return variable;
@19765#E:/FinalProject Repos/repos\juancadavid\Eclipse-UPR\standardized\bundles\org.eclipse.upr.bpmn\bin\org\eclipse\upr\bpmnprof\impl/bpmnprof.ecore#derivation#ItemDefinition#self.base_Class
@19768#E:/FinalProject Repos/repos\juancadavid\Eclipse-UPR\standardized\bundles\org.eclipse.upr.depl\model/UMLProfileForDC.ecore#derivation#ComponentAssembly#Component.allInstances()->select(c|c.implementation->includes(self)).configProperty->flatten()
@19769#E:/FinalProject Repos/repos\juancadavid\Eclipse-UPR\standardized\bundles\org.eclipse.upr.depl\model/UMLProfileForDC.ecore#derivation#ComponentAssembly#Component.allInstances()->select(c|c.implementation->includes(self)).ownedPort->flatten()
@19770#E:/FinalProject Repos/repos\juancadavid\Eclipse-UPR\standardized\bundles\org.eclipse.upr.depl\model/UMLProfileForDC.ecore#derivation#CommunicationPath#self.interconnect.connectedNode->flatten()
@19771#E:/FinalProject Repos/repos\juancadavid\Eclipse-UPR\standardized\bundles\org.eclipse.upr.depl\model/UMLProfileForDC.ecore#derivation#Node#self.nodeConnector.communicationPath->flatten()
@19992#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DC.ecore#body#Dimension#width >=0
@19993#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DC.ecore#body#Dimension#height >=0
@19994#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DC.ecore#body#Bounds#width >= 0
@19995#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DC.ecore#body#Bounds#height >=0
@19996#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Canvas#transform->isEmpty()
@19997#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#GraphicalElement#clipPath->notEmpty() implies clipPath.id->notEmpty()
@19998#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Definition#id->notEmpty() implies id.size() > 0
@19999#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#fontSize >=  0
@20000#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#fillOpacity >=  0 and fillOpacity <=1
@20001#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#strokeWidth >=  0
@20002#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#strokeDashLength->size().mod(2) = 0
@20003#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#strokeOpacity >=  0 and strokeOpacity <=1
@20004#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Paint#paintServer->notEmpty() implies paintServer.id->notEmpty()
@20005#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Circle#radius >= 0
@20006#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#GradientStop#offset>=0 and offset<=1
@20007#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#GradientStop#opacity>=0 and opacity<=1
@20008#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Image#source->notEmpty() implies source.size() > 0
@20009#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#MarkedElement#startMarker->notEmpty() implies startMarker.id->notEmpty()
@20010#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#MarkedElement#midMarker->notEmpty() implies midMarker.id->notEmpty()
@20011#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#MarkedElement#endMarker->notEmpty() implies endMarker.id->notEmpty()
@20012#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#LinearGradient#start.x>=0 and start.x<=1 and end.x>=0 and end.x<=1 and start.y>=0 and start.y<=1 and end.y>=0 and end.y<=1
@20013#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Path#command->first().oclIsKindOf(MoveTo)
@20014#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#RadialGradient#centerX>=0 and centerX<=1 and centerY>=0 and centerY<=1
@20015#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#RadialGradient#focusX>=0 and focusX<=1 and focusY>=0 and focusY<=1
@20016#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#RadialGradient#radius>=0 and radius<=1
@20017#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Rectangle#cornerRadius >= 0
@20018#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Scale#factorX>=0 and factorY>=0
@20019#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Text#data->notEmpty() implies data.size() > 0
@20020#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Use#referencedElement->notEmpty() implies referencedElement.id->notEmpty()
@20021#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.umldi\model/UMLDI.ecore#body#UmlStyle#fontSize > 0
@20572#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#base_Class.isActivebase_Class.ownedReception->isEmpty()not(base_Class.isFinalSpecialization)(base_Class.generalization->size()) <= 1(base_Class.generalization->notEmpty()) implies (base_Class.generalization->forAll (g | g.isSubstitutable))base_Class.ownedAttribute->forAll(at | at.type->size() = 1)base_Class.feature->forAll (f | f.visibility <> UML::VisibilityKind::private)base_Class.nestedClassifier->isEmpty()base_Class.ownedOperation->notEmpty() implies    (base_Class.ownedOperation->forAll(op | op.concurrency = UML::CallConcurrencyKind::sequential))
@20573#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Protocol#base_Collaboration.generalization->size() <= 1
@20574#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#RTConnector#base_Connector.end->size() = 2
@20575#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTimeStateMach.ecore#documentation#RTStateMachine#base_StateMachine.region->size() = 1not base_StateMachine.isReentrant(base_StateMachine.ownedParameter->size()=0) and (base_StateMachine.ownedParameterSet->size() = 0)(base_StateMachine.behavioredClassifier->size()=1) and (base_StateMachine.behavioredClassifier.oclIsKindOf(Class))isPassive = not (base_StateMachine.behavioredClassifier.oclAsType(Class).isActive) 
@20576#E:/FinalProject Repos/repos\juancadavid\papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTimeStateMach.ecore#documentation#RTState#base_State.isComposite implies            (base_State.region->size() = 1)not base_State.isSubmachineStatebase_State.doActivity->size() = 0base_State.deferrableTrigger->size() = 0
@20577#E:/FinalProject Repos/repos\juancadavid\papyrus\plugins\developer\org.eclipse.papyrus.gmfgenextension\model/papyrusGmfgenExtension.ecore#documentation#SpecificLocator#This class is used to precise itw own locator used for the border item, like port or template.for example, in the case of templateSignature of ClassEditPart in the method protected boolean addFixedChild(EditPart childEditPart):replacement of the general BorderItemLocator is needed in order to constrain the movement. if (childEditPart instanceof RedefinableTemplateSignatureEditPart) {   // BorderItemLocator locator = new BorderItemLocator(getMainFigure(), PositionConstants.NORTH);   BorderItemLocator locator = new TemplateClassifierBorderItemLocator(getMainFigure(), PositionConstants.NORTH);   getBorderedFigure().getBorderItemContainer().add(((RedefinableTemplateSignatureEditPart) childEditPart).getFigure(), locator);   return true;}
@20578#E:/FinalProject Repos/repos\juancadavid\papyrus\plugins\developer\org.eclipse.papyrus.gmfgenextension\model/papyrusGmfgenExtension.ecore#documentation#SpecificDiagramUpdater#This class is used to precise itw own locator used for the border item, like port or template.for example, in the case of templateSignature of ClassEditPart in the method protected boolean addFixedChild(EditPart childEditPart):replacement of the general BorderItemLocator is needed in order to constrain the movement. if (childEditPart instanceof RedefinableTemplateSignatureEditPart) {   // BorderItemLocator locator = new BorderItemLocator(getMainFigure(), PositionConstants.NORTH);   BorderItemLocator locator = new TemplateClassifierBorderItemLocator(getMainFigure(), PositionConstants.NORTH);   getBorderedFigure().getBorderItemContainer().add(((RedefinableTemplateSignatureEditPart) childEditPart).getFigure(), locator);   return true;}
@20579#E:/FinalProject Repos/repos\juancadavid\papyrus\plugins\developer\org.eclipse.papyrus.gmfgenextension\model/papyrusGmfgenExtension.ecore#documentation#SpecificLocatorExternalLabel#This class is used to precise itw own locator used for the border item, like port or template.for example, in the case of templateSignature of ClassEditPart in the method protected boolean addFixedChild(EditPart childEditPart):replacement of the general BorderItemLocator is needed in order to constrain the movement. if (childEditPart instanceof RedefinableTemplateSignatureEditPart) {   // BorderItemLocator locator = new BorderItemLocator(getMainFigure(), PositionConstants.NORTH);   BorderItemLocator locator = new TemplateClassifierBorderItemLocator(getMainFigure(), PositionConstants.NORTH);   getBorderedFigure().getBorderItemContainer().add(((RedefinableTemplateSignatureEditPart) childEditPart).getFigure(), locator);   return true;}
@20595#E:/FinalProject Repos/repos\juancadavid\papyrus\plugins\uml\decoratormodel\org.eclipse.papyrus.uml.decoratormodel\model/profileExternalization.ecore#suppliers_are_packages#ApplyProfiles#base_Dependency.supplier->forAll(oclIsKindOf(uml::Package))
@20596#E:/FinalProject Repos/repos\juancadavid\papyrus\plugins\uml\decoratormodel\org.eclipse.papyrus.uml.decoratormodel\model/profileExternalization.ecore#clients_are_packages#ApplyProfiles#base_Dependency.client->forAll(oclIsKindOf(uml::Package))
@21050#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Activity#A Parameter with direction other than inout must have exactly one ActivityParameterNode in an Activity.ownedParameter->forAll(p |    p.direction <> ParameterDirectionKind::inout implies node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
@21051#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Activity#A Parameter with direction inout must have exactly two ActivityParameterNodes in an Activity, at most one with incoming ActivityEdges and at most one with outgoing ActivityEdges.ownedParameter->forAll(p | p.direction = ParameterDirectionKind::inout implieslet associatedNodes : Set(ActivityNode) = node->select(       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in   associatedNodes->size()=2 and  associatedNodes->select(incoming->notEmpty())->size()<=1 and  associatedNodes->select(outgoing->notEmpty())->size()<=1)
@21052#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Behavior#There may be at most one Behavior for a given pairing of BehavioredClassifier (as owner of the Behavior) and BehavioralFeature (as specification of the Behavior).specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1
@21053#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Behavior#If a Behavior has a specification BehavioralFeature, then it must have the same number of ownedParameters as its specification. The Behavior Parameters must also "match" the BehavioralParameter Parameters, but the exact requirements for this matching are not formalized.specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
@21054#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Class#Only an active Class may own Receptions and have a classifierBehavior.not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
@21055#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Class#Derivation for Class::/extension : Extensionresult = (Extension.allInstances()->select(ext |   let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in  endTypes->includes(self) or endTypes.allParents()->includes(self) ))<p>From package UML::StructuredClassifiers.</p>
@21056#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Class#Derivation for Class::/superClass : Classresult = (self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet())<p>From package UML::StructuredClassifiers.</p>
@21057#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#BehavioredClassifier#If a behavior is classifier behavior, it does not have a specification.classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
@21058#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query conformsTo() gives true for a Classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.result = (if other.oclIsKindOf(Classifier) then  let otherClassifier : Classifier = other.oclAsType(Classifier) in    self = otherClassifier or allParents()->includes(otherClassifier)else  falseendif)<p>From package UML::Classification.</p>
@21059#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query isTemplate() returns whether this Classifier is actually a template.result = (ownedTemplateSignature <> null or general->exists(g | g.isTemplate()))<p>From package UML::Classification.</p>
@21060#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#A Classifier may only specialize Classifiers of a valid type.parents()->forAll(c | self.maySpecializeType(c))
@21061#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.powertypeExtent->forAll( gs |   gs.generalization->forAll( gen |     not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific)   ))
@21062#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The parents of a Classifier must be non-final.parents()->forAll(not isFinalSpecialization)
@21063#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#Generalization hierarchies must be directed and acyclical. A Classifier can not be both a transitively general and transitively specific Classifier of the same Classifier.not allParents()->includes(self)
@21064#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query allFeatures() gives all of the Features in the namespace of the Classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.result = (member->select(oclIsKindOf(Feature))->collect(oclAsType(Feature))->asSet())<p>From package UML::Classification.</p>
@21065#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.result = (parents()->union(parents()->collect(allParents())->asSet()))<p>From package UML::Classification.</p>
@21066#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The general Classifiers are the ones referenced by the Generalization relationships.result = (parents())<p>From package UML::Classification.</p>
@21067#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a NamedElement is visible in the classifier. Non-private members are visible. It is only called when the argument is something owned by a parent.allParents()->including(self)->collect(member)->includes(n)result = (n.visibility <> VisibilityKind::private)<p>From package UML::Classification.</p>
@21068#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query inherit() defines how to inherit a set of elements passed as its argument.  It excludes redefined elements from the result.result = (inhs->reject(inh |  inh.oclIsKindOf(RedefinableElement) and  ownedMember->select(oclIsKindOf(RedefinableElement))->    select(redefinedElement->includes(inh.oclAsType(RedefinableElement)))       ->notEmpty()))<p>From package UML::Classification.</p>
@21069#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a Classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.c.allParents()->includes(self)result = (member->select(m | c.hasVisibilityOf(m)))<p>From package UML::Classification.</p>
@21070#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The inheritedMember association is derived by inheriting the inheritable members of the parents.result = (inherit(parents()->collect(inheritableMembers(self))->asSet()))<p>From package UML::Classification.</p>
@21071#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.result = (self.oclIsKindOf(c.oclType()))<p>From package UML::Classification.</p>
@21072#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.result = (generalization.general->asSet())<p>From package UML::Classification.</p>
@21073#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The Interfaces directly realized by this Classifierresult = ((clientDependency->  select(oclIsKindOf(Realization) and supplier->forAll(oclIsKindOf(Interface))))->      collect(supplier.oclAsType(Interface))->asSet())<p>From package UML::Classification.</p>
@21074#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The Interfaces directly used by this Classifierresult = ((supplierDependency->  select(oclIsKindOf(Usage) and client->forAll(oclIsKindOf(Interface))))->    collect(client.oclAsType(Interface))->asSet())<p>From package UML::Classification.</p>
@21075#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The Interfaces realized by this Classifier and all of its generalizationsresult = (directlyRealizedInterfaces()->union(self.allParents()->collect(directlyRealizedInterfaces()))->asSet())<p>From package UML::Classification.</p>
@21076#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The Interfaces used by this Classifier and all of its generalizationsresult = (directlyUsedInterfaces()->union(self.allParents()->collect(directlyUsedInterfaces()))->asSet())<p>From package UML::Classification.</p>
@21077#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#The query allAttributes gives an ordered set of all owned and inherited attributes of the Classifier. All owned attributes appear before any inherited attributes, and the attributes inherited from any more specific parent Classifier appear before those of any more general parent Classifier. However, if the Classifier has multiple immediate parents, then the relative ordering of the sets of attributes from those parents is not defined.result = (attribute->asSequence()->union(parents()->asSequence().allAttributes())->select(p | member->includes(p))->asOrderedSet())<p>From package UML::Classification.</p>
@21078#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Classifier#All StructuralFeatures related to the Classifier that may have Slots, including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of Associations, but excluding redefined StructuralFeatures.result = (member->select(oclIsKindOf(StructuralFeature))->  collect(oclAsType(StructuralFeature))->   union(self.inherit(self.allParents()->collect(p | p.attribute)->asSet())->     collect(oclAsType(StructuralFeature)))->asSet())<p>From package UML::Classification.</p>
@21079#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Namespace#All the members of a Namespace are distinguishable within it.membersAreDistinguishable()
@21080#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Namespace#The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this Namespace.result = (imps->reject(imp1  | imps->exists(imp2 | not imp1.isDistinguishableFrom(imp2, self))))<p>From package UML::CommonStructure.</p>
@21081#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Namespace#The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace, taking importing into account. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases.result = (if self.ownedMember ->includes(element)then Set{element.name}else let elementImports : Set(ElementImport) = self.elementImport->select(ei | ei.importedElement = element) in  if elementImports->notEmpty()  then     elementImports->collect(el | el.getName())->asSet()  else      self.packageImport->select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))->asSet()  endifendif)<p>From package UML::CommonStructure.</p>
@21082#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Namespace#The query importMembers() defines which of a set of PackageableElements are actually imported into the Namespace. This excludes hidden ones, i.e., those which have names that conflict with names of ownedMembers, and it also excludes PackageableElements that would have the indistinguishable names when imported.result = (self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | imp.isDistinguishableFrom(mem, self))))<p>From package UML::CommonStructure.</p>
@21083#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Namespace#The importedMember property is derived as the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.result = (self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet()))<p>From package UML::CommonStructure.</p>
@21084#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the Namespace's members are distinguishable within it.result = (member->forAll( memb |   member->excluding(memb)->forAll(other |       memb.isDistinguishableFrom(other, self))))<p>From package UML::CommonStructure.</p>
@21085#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#If a NamedElement is owned by something other than a Namespace, it does not have a visibility. One that is not owned by anything (and hence must be a Package, as this is the only kind of NamedElement that overrides mustBeOwned()) may have a visibility.(namespace = null and owner <> null) implies visibility = null
@21086#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#When there is a name, and all of the containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces.(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
@21087#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#If there is no name, or one of the containing Namespaces has no name, there is no qualifiedName.name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null
@21088#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of Namespaces in which the NamedElement is nested, working outwards.result = (if owner.oclIsKindOf(TemplateParameter) and  owner.oclAsType(TemplateParameter).signature.template.oclIsKindOf(Namespace) then    let enclosingNamespace : Namespace =      owner.oclAsType(TemplateParameter).signature.template.oclAsType(Namespace) in        enclosingNamespace.allNamespaces()->prepend(enclosingNamespace)else  if namespace->isEmpty()    then OrderedSet{}  else    namespace.allNamespaces()->prepend(namespace)  endifendif)<p>From package UML::CommonStructure.</p>
@21089#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#The query allOwningPackages() returns the set of all the enclosing Namespaces of this NamedElement, working outwards, that are Packages, up to but not including the first such Namespace that is not a Package.result = (if namespace.oclIsKindOf(Package)then  let owningPackage : Package = namespace.oclAsType(Package) in    owningPackage->union(owningPackage.allOwningPackages())else  nullendif)<p>From package UML::CommonStructure.</p>
@21090#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have types neither of which is a kind of the other or (b) they have different names.result = ((self.oclIsKindOf(n.oclType()) or n.oclIsKindOf(self.oclType())) implies    ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty())<p>From package UML::CommonStructure.</p>
@21091#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#When a NamedElement has a name, and all of its containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces.result = (if self.name <> null and self.allNamespaces()->select( ns | ns.name=null )->isEmpty()then     self.allNamespaces()->iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))else   nullendif)<p>From package UML::CommonStructure.</p>
@21092#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualifiedName.result = ('::')<p>From package UML::CommonStructure.</p>
@21093#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#NamedElement#result = (Dependency.allInstances()->select(d | d.client->includes(self)))<p>From package UML::CommonStructure.</p>
@21094#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Element#Elements that must be owned must have an owner.mustBeOwned() implies owner->notEmpty()
@21095#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Element#An element may not directly or indirectly own itself.not allOwnedElements()->includes(self)
@21096#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())<p>From package UML::CommonStructure.</p>
@21097#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Element#The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.result = (true)<p>From package UML::CommonStructure.</p>
@21098#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Stereotype#Stereotypes may only participate in binary associations.ownedAttribute.association->forAll(memberEnd->size()=2)
@21099#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Stereotype#A Stereotype may only generalize or specialize another Stereotype.allParents()->forAll(oclIsKindOf(Stereotype)) and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
@21100#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Stereotype#Where a stereotype’s property is an association end for an association other than a kind of extension, and the other end is not a stereotype, the other end must be owned by the association itself.ownedAttribute->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))->forAll(opposite.owner = association)
@21101#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Stereotype#The query containingProfile returns the closest profile directly or indirectly containing this stereotype.result = (self.namespace.oclAsType(Package).containingProfile())<p>From package UML::Packages.</p>
@21102#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Stereotype#A stereotype must be contained, directly or indirectly, in a profile.result = (self.containingProfile())<p>From package UML::Packages.</p>
@21103#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Profile#An element imported as a metaclassReference is not specialized or generalized in a Profile.metaclassReference.importedElement->select(c | c.oclIsKindOf(Classifier) and(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()and packagedElement->    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
@21104#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Profile#All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
@21105#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#The query mustBeOwned() indicates whether elements of this type must have an owner.result = (false)<p>From package UML::Packages.</p>
@21106#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#The query allApplicableStereotypes() returns all the directly or indirectly owned stereotypes, including stereotypes contained in sub-profiles.result = (let ownedPackages : Bag(Package) = ownedMember->select(oclIsKindOf(Package))->collect(oclAsType(Package)) in ownedStereotype->union(ownedPackages.allApplicableStereotypes())->flatten()->asSet())<p>From package UML::Packages.</p>
@21107#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#The query containingProfile() returns the closest profile directly or indirectly containing this package (or this package itself, if it is a profile).result = (if self.oclIsKindOf(Profile) then self.oclAsType(Profile)elseself.namespace.oclAsType(Package).containingProfile()endif)<p>From package UML::Packages.</p>
@21108#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.member->includes(el)result = (ownedMember->includes(el) or(elementImport->select(ei|ei.importedElement = VisibilityKind::public)->collect(importedElement.oclAsType(NamedElement))->includes(el)) or(packageImport->select(visibility = VisibilityKind::public)->collect(importedPackage.member->includes(el))->notEmpty()))<p>From package UML::Packages.</p>
@21109#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#Derivation for Package::/nestedPackageresult = (packagedElement->select(oclIsKindOf(Package))->collect(oclAsType(Package))->asSet())<p>From package UML::Packages.</p>
@21110#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#Derivation for Package::/ownedStereotyperesult = (packagedElement->select(oclIsKindOf(Stereotype))->collect(oclAsType(Stereotype))->asSet())<p>From package UML::Packages.</p>
@21111#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#Derivation for Package::/ownedTyperesult = (packagedElement->select(oclIsKindOf(Type))->collect(oclAsType(Type))->asSet())<p>From package UML::Packages.</p>
@21112#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Package#The query visibleMembers() defines which members of a Package can be accessed outside it.result = (member->select( m | m.oclIsKindOf(PackageableElement) and self.makesVisible(m))->collect(oclAsType(PackageableElement))->asSet())<p>From package UML::Packages.</p>
@21113#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ParameterableElement#The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints.result = (self.oclIsKindOf(p.oclType()))<p>From package UML::CommonStructure.</p>
@21114#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ParameterableElement#The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter.result = (templateParameter->notEmpty())<p>From package UML::CommonStructure.</p>
@21115#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TemplateSignature#Parameters must own the ParameterableElements they parameter or those ParameterableElements must be owned by the TemplateableElement being templated.template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
@21116#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TemplateableElement#The query isTemplate() returns whether this TemplateableElement is actually a template.result = (ownedTemplateSignature <> null)<p>From package UML::CommonStructure.</p>
@21117#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TemplateableElement#The query parameterableElements() returns the set of ParameterableElements that may be used as the parameteredElements for a TemplateParameter of this TemplateableElement. By default, this set includes all the ownedElements. Subclasses may override this operation if they choose to restrict the set of ParameterableElements.result = (self.allOwnedElements()->select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)->asSet())<p>From package UML::CommonStructure.</p>
@21118#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TemplateBinding#A TemplateBiinding contains at most one TemplateParameterSubstitution for each formal TemplateParameter of the target TemplateSignature.signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
@21119#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Type#The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations.result = (false)<p>From package UML::CommonStructure.</p>
@21120#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Association#An Association specializing another Association has the same number of ends as the other Association.parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
@21121#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Association#When an Association specializes another Association, every end of the specific Association corresponds to an end of the general Association, and the specific end reaches the same type or a subtype of the corresponding general end.Sequence{1..memberEnd->size()}->forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
@21122#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Association#Only binary Associations can be aggregations.memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
@21123#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Association#Ends of Associations with more than two ends must be owned by the Association itself.memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
@21124#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Association#memberEnd->forAll(type->notEmpty())
@21125#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Association#endType is derived from the types of the member ends.result = (memberEnd->collect(type)->asSet())<p>From package UML::StructuredClassifiers.</p>
@21126#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#The query isCompatibleWith() determines if this Property is compatible with the specified ParameterableElement. This Property is compatible with ParameterableElement p if the kind of this Property is thesame as or a subtype of the kind of p. Further, if p is a TypedElement, then the type of this Property must be conformant with the type of p.result = (self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypeElement) impliesself.type.conformsTo(p.oclAsType(TypedElement).type)))<p>From package UML::Classification.</p>
@21127#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining Property is consistent with a redefined Property if the type of the redefining Property conforms to the type of the redefined Property, and the multiplicity of the redefining Property (if specified) is contained in the multiplicity of the redefined Property.redefiningElement.isRedefinitionContextValid(self)result = (redefiningElement.oclIsKindOf(Property) and   let prop : Property = redefiningElement.oclAsType(Property) in   (prop.type.conformsTo(self.type) and   ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and   ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and   (self.isComposite implies prop.isComposite)))<p>From package UML::Classification.</p>
@21128#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
@21129#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#A multiplicity on the composing end of a composite aggregation must not have an upper bound greater than 1.isComposite and association <> null implies opposite.upperBound() <= 1
@21130#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#A redefined Property must be inherited from a more general Classifier.(redefinedProperty->notEmpty()) implies  (redefinitionContext->notEmpty() and      redefinedProperty->forAll(rp|        ((redefinitionContext->collect(fc|          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
@21131#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#A subsetting Property may strengthen the type of the subsetted Property, and its upper bound may be less.subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))
@21132#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#A binding of a PropertyTemplateParameter representing an attribute must be to an attribute.(self.isAttribute()and (templateParameterSubstitution->notEmpty())implies (templateParameterSubstitution->forAll(ts |    ts.formal.oclIsKindOf(Property)    and ts.formal.oclAsType(Property).isAttribute())))
@21133#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node.deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
@21134#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#If a Property is a classifier-owned end of a binary Association, its owner must be the type of the opposite end.(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
@21135#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#All qualified Properties must be Association endsqualifier->notEmpty() implies association->notEmpty()
@21136#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#The query isAttribute() is true if the Property is defined as an attribute of some Classifier.result = (not classifier->isEmpty())<p>From package UML::Classification.</p>
@21137#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#The query isNavigable() indicates whether it is possible to navigate across the property.result = (not classifier->isEmpty() or association.navigableOwnedEnd->includes(self))<p>From package UML::Classification.</p>
@21138#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#If this property is a memberEnd of a binary association, then opposite gives the other end.result = (if association <> null and association.memberEnd->size() = 2then    association.memberEnd->any(e | e <> self)else    nullendif)<p>From package UML::Classification.</p>
@21139#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Property#The query subsettingContext() gives the context for subsetting a Property. It consists, in the case of an attribute, of the corresponding Classifier, and in the case of an association end, all of the Classifiers at the other ends.result = (if association <> nullthen association.memberEnd->excluding(self)->collect(type)->asSet()else   if classifier<>null  then classifier->asSet()  else Set{}   endifendif)<p>From package UML::Classification.</p>
@21140#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConnectableElement#Derivation for ConnectableElement::/end : ConnectorEndresult = (ConnectorEnd.allInstances()->select(role = self))<p>From package UML::StructuredClassifiers.</p>
@21141#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConnectorEnd#If a ConnectorEnd references a partWithPort, then the role must be a Port that is defined or inherited by the type of the partWithPort.partWithPort->notEmpty() implies   (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
@21142#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConnectorEnd#If a ConnectorEnd is attached to a Port of the containing Classifier, partWithPort will be empty.(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
@21143#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConnectorEnd#The Property held in self.partWithPort must not be a Port.partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
@21144#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The upper bound must be greater than or equal to the lower bound.upperBound() >= lowerBound()
@21145#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The lower bound must be a non-negative integer literal.lowerBound() >= 0
@21146#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#If it is not empty, then lowerValue must have an Integer value.lowerValue <> null implies lowerValue.integerValue() <> null
@21147#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#If it is not empty, then upperValue must have an UnlimitedNatural value.upperValue <> null implies upperValue.unlimitedValue() <> null
@21148#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The operation compatibleWith takes another multiplicity as input. It returns true if the other multiplicity is wider than, or the same as, self.result = ((other.lowerBound() <= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() <= other.upperBound())))<p>From package UML::CommonStructure.</p>
@21149#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()result = ((self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound()))<p>From package UML::CommonStructure.</p>
@21150#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The operation is determines if the upper and lower bound of the ranges are the ones given.result = (lowerbound = self.lowerBound() and upperbound = self.upperBound())<p>From package UML::CommonStructure.</p>
@21151#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.upperBound()->notEmpty()result = (upperBound() > 1)<p>From package UML::CommonStructure.</p>
@21152#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The derived lower attribute must equal the lowerBound.result = (lowerBound())<p>From package UML::CommonStructure.</p>
@21153#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the integerValue of lowerValue, if this is given, and 1 otherwise.result = (if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif)<p>From package UML::CommonStructure.</p>
@21154#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The derived upper attribute must equal the upperBound.result = (upperBound())<p>From package UML::CommonStructure.</p>
@21155#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MultiplicityElement#The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.result = (if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif)<p>From package UML::CommonStructure.</p>
@21156#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query isCompatibleWith() determines if this ValueSpecification is compatible with the specified ParameterableElement. This ValueSpecification is compatible with ParameterableElement p if the kind of this ValueSpecification is the same as or a subtype of the kind of p. Further, if p is a TypedElement, then the type of this ValueSpecification must be conformant with the type of p.result = (self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypedElement) implies self.type.conformsTo(p.oclAsType(TypedElement).type)))<p>From package UML::Values.</p>
@21157#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query booleanValue() gives a single Boolean value when one can be computed.result = (null)<p>From package UML::Values.</p>
@21158#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query integerValue() gives a single Integer value when one can be computed.result = (null)<p>From package UML::Values.</p>
@21159#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications.result = (false)<p>From package UML::Values.</p>
@21160#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query isNull() returns true when it can be computed that the value is null.result = (false)<p>From package UML::Values.</p>
@21161#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query realValue() gives a single Real value when one can be computed.result = (null)<p>From package UML::Values.</p>
@21162#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query stringValue() gives a single String value when one can be computed.result = (null)<p>From package UML::Values.</p>
@21163#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValueSpecification#The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.result = (null)<p>From package UML::Values.</p>
@21164#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DeploymentTarget#Derivation for DeploymentTarget::/deployedElementresult = (deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet())<p>From package UML::Deployments.</p>
@21165#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#If the language attribute is not empty, then the size of the body and language arrays must be the same.language->notEmpty() implies (_'body'->size() = language->size())
@21166#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#The behavior must have exactly one return result parameter.behavior <> null implies   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
@21167#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#The behavior may only have return result parameters.behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()
@21168#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#The query isIntegral() tells whether an expression is intended to produce an Integer.result = (false)<p>From package UML::Values.</p>
@21169#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#The query isNonNegative() tells whether an integer expression has a non-negative value.self.isIntegral()result = (false)<p>From package UML::Values.</p>
@21170#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#The query isPositive() tells whether an integer expression has a positive value.result = (false)self.isIntegral()<p>From package UML::Values.</p>
@21171#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#Derivation for OpaqueExpression::/resultresult = (if behavior = null thennullelsebehavior.ownedParameter->first()endif)<p>From package UML::Values.</p>
@21172#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueExpression#The query value() gives an integer value for an expression intended to produce one.self.isIntegral()result = (0)<p>From package UML::Values.</p>
@21173#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Parameter#A Parameter may only be associated with a Connector end within the context of a Collaboration.end->notEmpty() implies collaboration->notEmpty()
@21174#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Parameter#Derivation for Parameter::/defaultresult = (if self.type = String then defaultValue.stringValue() else null endif)<p>From package UML::Classification.</p>
@21175#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation ifit has the same number of owned parameters, and for each parameter the following holds:- Direction, ordering and uniqueness are the same.- The corresponding types are covariant, contravariant or invariant.- The multiplicities are compatible, depending on the parameter direction.result = (redefiningElement.oclIsKindOf(Operation) andlet op : Operation = redefiningElement.oclAsType(Operation) inself.ownedParameter->size() = op.ownedParameter->size() andSequence{1..self.ownedParameter->size()}->forAll(i |    let redefiningParam : Parameter = op.ownedParameter->at(i),               redefinedParam : Parameter = self.ownedParameter->at(i) in                 (redefiningParam.isUnique = redefinedParam.isUnique) and                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and                 (redefiningParam.direction = redefinedParam.direction) and                 (redefiningParam.type.conformsTo(redefinedParam.type) or                     redefinedParam.type.conformsTo(redefiningParam.type)) and                 (redefiningParam.direction = ParameterDirectionKind::inout implies                         (redefinedParam.compatibleWith(redefiningParam) and                         redefiningParam.compatibleWith(redefinedParam))) and                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies                         redefinedParam.compatibleWith(redefiningParam)) and                 ((redefiningParam.direction = ParameterDirectionKind::out or                      redefiningParam.direction = ParameterDirectionKind::return) implies                         redefiningParam.compatibleWith(redefinedParam))))redefiningElement.isRedefinitionContextValid(self)<p>From package UML::Classification.</p>
@21176#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#An Operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return.'self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
@21177#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.result = (if returnResult()->notEmpty() then returnResult()-> exists(isOrdered) else false endif)<p>From package UML::Classification.</p>
@21178#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.result = (if returnResult()->notEmpty() then returnResult()->exists(isUnique) else true endif)<p>From package UML::Classification.</p>
@21179#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower has no value.result = (if returnResult()->notEmpty() then returnResult()->any(true).lower else null endif)<p>From package UML::Classification.</p>
@21180#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty setresult = (ownedParameter->select (direction = ParameterDirectionKind::return))<p>From package UML::Classification.</p>
@21181#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type has no value.result = (if returnResult()->notEmpty() then returnResult()->any(true).type else null endif)<p>From package UML::Classification.</p>
@21182#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Operation#If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper has no value.result = (if returnResult()->notEmpty() then returnResult()->any(true).upper else null endif)<p>From package UML::Classification.</p>
@21183#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#BehavioralFeature#The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they must have different signatures.result = ((n.oclIsKindOf(BehavioralFeature) and ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()) implies  Set{self}->including(n.oclAsType(BehavioralFeature))->isUnique(ownedParameter->collect(p|  Tuple { name=p.name, type=p.type,effect=p.effect,direction=p.direction,isException=p.isException,              isStream=p.isStream,isOrdered=p.isOrdered,isUnique=p.isUnique,lower=p.lower, upper=p.upper }))  )<p>From package UML::Classification.</p>
@21184#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#BehavioralFeature#When isAbstract is true there are no methods.isAbstract implies method->isEmpty()
@21185#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#RedefinableElement#The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.result = (false)redefiningElement.isRedefinitionContextValid(self)<p>From package UML::Classification.</p>
@21186#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#RedefinableElement#The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.result = (redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext)))<p>From package UML::Classification.</p>
@21187#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ParameterSet#If a parameterized entity has input Parameters that are in a ParameterSet, then any inputs that are not in a ParameterSet must be streaming. Same for output Parameters.((parameter->exists(direction = ParameterDirectionKind::_'in')) implies     behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))    and((parameter->exists(direction = ParameterDirectionKind::out)) implies     behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))
@21188#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ParameterSet#Two ParameterSets cannot have exactly the same set of Parameters.parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))
@21189#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Reception#A Reception's parameters match the ownedAttributes of its signal by name, type, and multiplicitysignal.ownedAttribute->size() = ownedParameter->size() andSequence{1..signal.ownedAttribute->size()}->forAll( i |     ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and     ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound())
@21190#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ProtocolStateMachine#The states of a ProtocolStateMachine cannot have entry, exit, or do activity Behaviors.region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
@21191#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StateMachine#The query isConsistentWith() specifies that a redefining StateMachine is consistent with a redefined StateMachine provided that the redefining StateMachine is an extension of the redefined StateMachine : Regions are inherited and Regions can be added, inherited Regions can be redefined. In case of multiple redefining StateMachine, extension implies that the redefining StateMachine gets orthogonal Regions for each of the redefined StateMachine.result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)<p>From package UML::StateMachines.</p>
@21192#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StateMachine#The query isRedefinitionContextValid() specifies whether the redefinition context of a StateMachine is properly related to the redefinition contexts of the specified StateMachine to allow this element to redefine the other. The context Classifier of a redefining StateMachine must redefine the context Classifier of the redefined StateMachine.result = (if redefinedElement.oclIsKindOf(StateMachine) then  let redefinedStateMachine : StateMachine = redefinedElement.oclAsType(StateMachine) in    self._'context'().oclAsType(BehavioredClassifier).redefinedClassifier->      includes(redefinedStateMachine._'context'())else  falseendif)<p>From package UML::StateMachines.</p>
@21193#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StateMachine#A StateMachine as the method for a BehavioralFeature cannot have entry/exit connection points.specification <> null implies connectionPoint->isEmpty()
@21194#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StateMachine#The query ancestor(s1, s2) checks whether Vertex s2 is an ancestor of Vertex s1.result = (if (s2 = s1) then true else if s1.container.stateMachine->notEmpty() then     trueelse     if s2.container.stateMachine->notEmpty() then         false    else        ancestor(s1, s2.container.state)     endif endifendif  )<p>From package UML::StateMachines.</p>
@21195#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StateMachine#This utility funciton is like the LCA, except that it returns the nearest composite State that contains both input Vertices.result = (if v2.oclIsTypeOf(State) and ancestor(v1, v2) thenv2.oclAsType(State)else if v1.oclIsTypeOf(State) and ancestor(v2, v1) thenv1.oclAsType(State)else if (v1.container.state->isEmpty() or v2.container.state->isEmpty()) then null.oclAsType(State)else LCAState(v1.container.state, v2.container.state)endif endif endif)<p>From package UML::StateMachines.</p>
@21196#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.(kind = PseudostateKind::fork) implies-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions -- such that these targets belong to different regions of that orthogonal state outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in((contState <> null) and (contState.region->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))
@21197#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#In a complete statemachine, a choice Vertex must have at least one incoming and one outgoing Transition.(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
@21198#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#The outgoing Transition from an initial vertex may have a behavior, but not a trigger or a guard.(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
@21199#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#In a complete StateMachine, a join Vertex must have at least two incoming Transitions and exactly one outgoing Transition.(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
@21200#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#In a complete StateMachine, a junction Vertex must have at least one incoming and one outgoing Transition.(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
@21201#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#History Vertices can have at most one outgoing Transition.((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
@21202#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#An initial Vertex can have at most one outgoing Transition.(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
@21203#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#In a complete StateMachine, a fork Vertex must have at least two outgoing Transitions and exactly one incoming Transition.(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
@21204#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Pseudostate#All Transitions incoming a join Vertex must originate in different Regions of an orthogonal State.(kind = PseudostateKind::join) implies-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions -- such that these source vertices belong to different regions of that orthogonal state incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in((contState <> null) and (contState.region->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))
@21205#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Vertex#The operation containingStateMachine() returns the StateMachine in which this Vertex is defined.result = (if container <> nullthen-- the container is a region   container.containingStateMachine()else    if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then      self.oclAsType(Pseudostate).stateMachine   else       if (self.oclIsKindOf(ConnectionPointReference)) then          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible      else           null      endif   endifendif)<p>From package UML::StateMachines.</p>
@21206#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Vertex#Derivation for Vertex::/incoming.result = (Transition.allInstances()->select(target=self))<p>From package UML::StateMachines.</p>
@21207#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Vertex#Derivation for Vertex::/outgoingresult = (Transition.allInstances()->select(source=self))<p>From package UML::StateMachines.</p>
@21208#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Vertex#This utility operation returns true if the Vertex is contained in the State s (input argument).result = (if not s.isComposite() or container->isEmpty() thenfalseelseif container.state = s then trueelsecontainer.state.isContainedInState(s)endifendif)<p>From package UML::StateMachines.</p>
@21209#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Vertex#This utility query returns true if the Vertex is contained in the Region r (input argument).result = (if (container = r) thentrueelseif (r.state->isEmpty()) thenfalseelsecontainer.state.isContainedInRegion(r)endifendif)<p>From package UML::StateMachines.</p>
@21210#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices and Transitions conform to one of the following: (1) they are equal to corresponding elements of the redefined Region or, (2) they consistently redefine a State or Transition of the redefined region, or (3) they add new States or Transitions.result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)redefiningElement.isRedefinitionContextValid(self)<p>From package UML::StateMachines.</p>
@21211#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a Region are properly related to the redefinition contexts of the specified Region to allow this element to redefine the other. The containing StateMachine or State of a redefining Region must Redefine the containing StateMachine or State of the redefined Region.result = (if redefinedElement.oclIsKindOf(Region) then  let redefinedRegion : Region = redefinedElement.oclAsType(Region) in    if stateMachine->isEmpty() then    -- the Region is owned by a State      (state.redefinedState->notEmpty() and state.redefinedState.region->includes(redefinedRegion))    else -- the region is owned by a StateMachine      (stateMachine.extendedStateMachine->notEmpty() and        stateMachine.extendedStateMachine->exists(sm : StateMachine |          sm.region->includes(redefinedRegion)))    endifelse  falseendif)<p>From package UML::StateMachines.</p>
@21212#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#A Region can have at most one deep history Vertex.self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1
@21213#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#A Region can have at most one shallow history Vertex.subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1
@21214#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#A Region can have at most one initial Vertex.self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1
@21215#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#The operation belongsToPSM () checks if the Region belongs to a ProtocolStateMachine.result = (if  stateMachine <> null then  stateMachine.oclIsKindOf(ProtocolStateMachine)else   state <> null  implies  state.container.belongsToPSM()endif )<p>From package UML::StateMachines.</p>
@21216#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#The operation containingStateMachine() returns the StateMachine in which this Region is defined.result = (if stateMachine = null then  state.containingStateMachine()else  stateMachineendif)<p>From package UML::StateMachines.</p>
@21217#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Region#The redefinition context of a Region is the nearest containing StateMachine.result = (let sm : StateMachine = containingStateMachine() inif sm._'context' = null or sm.general->notEmpty() then  smelse  sm._'context'endif)<p>From package UML::StateMachines.</p>
@21218#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#The query containingStateMachine() returns the StateMachine that contains the State either directly or transitively.result = (container.containingStateMachine())<p>From package UML::StateMachines.</p>
@21219#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be redefined (extended) to become a composite State (by adding one or more Regions) and a composite State can be redefined (extended) by adding Regions and by adding Vertices, States, and Transitions to inherited Regions. All States may add or replace entry, exit, and 'doActivity' Behaviors.result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)redefiningElement.isRedefinitionContextValid(self)<p>From package UML::StateMachines.</p>
@21220#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#The query isRedefinitionContextValid() specifies whether the redefinition contexts of a State are properly related to the redefinition contexts of the specified State to allow this element to redefine the other. This means that the containing Region of a redefining State must redefine the containing Region of the redefined State.result = (if redefinedElement.oclIsKindOf(State) then  let redefinedState : State = redefinedElement.oclAsType(State) in    container.redefinedElement.oclAsType(Region)->exists(r:Region |      r.subvertex->includes(redefinedState))else  falseendif)<p>From package UML::StateMachines.</p>
@21221#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#Only composite States can have entry or exit Pseudostates defined.connectionPoint->notEmpty() implies isComposite
@21222#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#A composite State is a State with at least one Region.result = (region->notEmpty())<p>From package UML::StateMachines.</p>
@21223#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#An orthogonal State is a composite state with at least 2 regions.result = (region->size () > 1)<p>From package UML::StateMachines.</p>
@21224#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#A simple State is a State without any regions.result = ((region->isEmpty()) and not isSubmachineState())<p>From package UML::StateMachines.</p>
@21225#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#State#The redefinition context of a State is the nearest containing StateMachine.result = (let sm : StateMachine = containingStateMachine() inif sm._'context' = null or sm.general->notEmpty() then  smelse  sm._'context'endif)<p>From package UML::StateMachines.</p>
@21226#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Trigger#If a Trigger specifies one or more ports, the event of the Trigger must be a MessageEvent.port->notEmpty() implies event.oclIsKindOf(MessageEvent)
@21227#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Port#A defaultValue for port cannot be specified when the type of the Port is an Interface.type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
@21228#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Port#Derivation for Port::/providedresult = (if isConjugated then basicRequired() else basicProvided() endif)<p>From package UML::StructuredClassifiers.</p>
@21229#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Port#Derivation for Port::/requiredresult = (if isConjugated then basicProvided() else basicRequired() endif)<p>From package UML::StructuredClassifiers.</p>
@21230#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Port#The union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly the type of the Port if the Port is typed by an Interface.result = (if type.oclIsKindOf(Interface) then type.oclAsType(Interface)->asSet() else type.oclAsType(Classifier).allRealizedInterfaces() endif)<p>From package UML::StructuredClassifiers.</p>
@21231#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Port#The union of the sets of Interfaces used by the type of the Port and its supertypes.result = ( type.oclAsType(Classifier).allUsedInterfaces() )<p>From package UML::StructuredClassifiers.</p>
@21232#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transition: A redefining Transition redefines all properties of the corresponding redefined Transition except the source State and the Trigger.result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profilestrue)redefiningElement.isRedefinitionContextValid(self)<p>From package UML::StateMachines.</p>
@21233#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#A join segment must not have Guards or Triggers.(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
@21234#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#Transitions outgoing Pseudostates may not have a Trigger.source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
@21235#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#An initial Transition at the topmost level Region of a StateMachine that has no Trigger.(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) impliestrigger->isEmpty()
@21236#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#A fork segment must not have Guards or Triggers.(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())
@21237#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#The query containingStateMachine() returns the StateMachine that contains the Transition either directly or transitively.result = (container.containingStateMachine())<p>From package UML::StateMachines.</p>
@21238#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Transition#The redefinition context of a Transition is the nearest containing StateMachine.result = (let sm : StateMachine = containingStateMachine() inif sm._'context' = null or sm.general->notEmpty() then  smelse  sm._'context'endif)<p>From package UML::StateMachines.</p>
@21239#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OperationTemplateParameter#default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in     defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix |         let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))
@21240#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InstanceSpecification#An InstanceSpecification can act as a DeployedArtifact if it represents an instance of an Artifact.deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
@21241#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InstanceSpecification#No more than one slot in an InstanceSpecification may have the same definingFeature.classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
@21242#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InstanceSpecification#The definingFeature of each slot is a StructuralFeature related to a classifier of the InstanceSpecification, including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of Associations, but excluding redefined StructuralFeatures.slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
@21243#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InstanceSpecification#An InstanceSpecification can act as a DeploymentTarget if it represents an instance of a Node and functions as a part in the internal structure of an encompassing Node.deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))
@21244#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ElementImport#The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.result = (if alias->notEmpty() then  aliaselse  importedElement.nameendif)<p>From package UML::CommonStructure.</p>
@21245#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Extension#The non-owned end of an Extension is typed by a Class.metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
@21246#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Extension#An Extension is binary, i.e., it has only two memberEnds.memberEnd->size() = 2
@21247#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Extension#The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.result = (ownedEnd.lowerBound() = 1)<p>From package UML::Packages.</p>
@21248#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Extension#The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).result = (metaclassEnd().type.oclAsType(Class))<p>From package UML::Packages.</p>
@21249#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Extension#The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).result = (memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true))<p>From package UML::Packages.</p>
@21250#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExtensionEnd#The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.result = (if lowerValue=null then 0 else lowerValue.integerValue() endif)<p>From package UML::Packages.</p>
@21251#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExtensionEnd#The multiplicity of ExtensionEnd is 0..1 or 1.(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
@21252#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StringExpression#The query stringValue() returns the String resulting from concatenating, in order, all the component String values of all the operands or subExpressions that are part of the StringExpression.result = (if subExpression->notEmpty()then subExpression->iterate(se; stringValue: String = '' | stringValue.concat(se.stringValue()))else operand->iterate(op; stringValue: String = '' | stringValue.concat(op.stringValue()))endif)<p>From package UML::Values.</p>
@21253#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StringExpression#If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions).if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
@21254#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CollaborationUse#Connectors in a Collaboration typing a CollaborationUse must have corresponding Connectors between elements bound in the context Classifier, and these corresponding Connectors must have the same or more general type than the Collaboration Connectors.type.ownedConnector->forAll(connector |  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in          contextClassifier.ownedConnector->exists( correspondingConnector |               correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) ))
@21255#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredClassifier#All features of type ConnectableElement, equivalent to all direct and inherited roles.result = (allFeatures()->select(oclIsKindOf(ConnectableElement))->collect(oclAsType(ConnectableElement))->asSet())<p>From package UML::StructuredClassifiers.</p>
@21256#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Connector#The types of the ConnectableElements that the ends of a Connector are attached to must conform to the types of the ends of the Association that types the Connector, if any.type<>null implies   let noOfEnds : Integer = end->size() in   (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
@21257#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Connector#The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be owned or inherited roles of the Classifier that owned the Connector, or they must be Ports of such roles.structuredClassifier <> nulland  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)or  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))
@21258#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Connector#Derivation for Connector::/kind : ConnectorKindresult = (if end->exists(role.oclIsKindOf(Port) and partWithPort->isEmpty()and not role.oclAsType(Port).isBehavior)then ConnectorKind::delegation else ConnectorKind::assembly endif)<p>From package UML::StructuredClassifiers.</p>
@21259#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#GeneralizationSet#Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.generalization->collect(general)->asSet()->size() <= 1
@21260#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#GeneralizationSet#The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.powertype <> null implies generalization->forAll( gen |     not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)  )
@21261#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#RedefinableTemplateSignature#The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, as redefinition only adds new formal parameters.result = (redefiningElement.oclIsKindOf(RedefinableTemplateSignature))redefiningElement.isRedefinitionContextValid(self)<p>From package UML::Classification.</p>
@21262#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#RedefinableTemplateSignature#If any of the parent Classifiers are a template, then the extendedSignature must include the signature of that Classifier.classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))
@21263#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#RedefinableTemplateSignature#Derivation for RedefinableTemplateSignature::/inheritedParameterresult = (if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter->asSet() endif)<p>From package UML::Classification.</p>
@21264#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UseCase#UseCases can only be involved in binary Associations.Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
@21265#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UseCase#UseCases cannot have Associations to UseCases specifying the same subject.Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies    (   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in   usecases->size() > 1 implies usecases->collect(subject)->size() > 1   ))
@21266#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UseCase#A UseCase cannot include UseCases that directly or indirectly include it.not allIncludedUseCases()->includes(self)
@21267#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UseCase#A UseCase must have a name.name -> notEmpty ()
@21268#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UseCase#The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase.result = (self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet())<p>From package UML::UseCases.</p>
@21269#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExtensionPoint#An ExtensionPoint must have a name.name->notEmpty ()
@21270#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ClassifierTemplateParameter#If allowSubstitutable is true, then there must be a constrainingClassifier.allowSubstitutable implies constrainingClassifier->notEmpty()
@21271#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ClassifierTemplateParameter#The parameteredElement has no direct features, and if constrainedElement is empty it has no generalizations.parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
@21272#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#EncapsulatedClassifier#Derivation for EncapsulatedClassifier::/ownedPort : Portresult = (ownedAttribute->select(oclIsKindOf(Port))->collect(oclAsType(Port))->asOrderedSet())<p>From package UML::StructuredClassifiers.</p>
@21273#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityGroup#The Activity that directly or indirectly contains this ActivityGroup.result = (if superGroup<>null then superGroup.containingActivity()else inActivityendif)<p>From package UML::Activities.</p>
@21274#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityGroup#All containedNodes and containeEdges of an ActivityGroup must be in the same Activity as the group.containedNode->forAll(activity = self.containingActivity()) and containedEdge->forAll(activity = self.containingActivity())
@21275#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityEdge#If an ActivityEdge is directly owned by an Activity, then its source and target must be directly or indirectly contained in the same Activity.activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
@21276#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityPartition#If a non-external ActivityPartition represents a Classifier and has a superPartition, then the superPartition must represent a Classifier, and the Classifier of the subpartition must be nested (nestedClassifier or ownedBehavior) in the Classifier represented by the superPartition, or be at the contained end of a composition Association with the Classifier represented by the superPartition.(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies(   let representedClassifier : Classifier = represents.oclAsType(Classifier) in     superPartition.represents.oclIsKindOf(Classifier) and      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and         representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior)))        or       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))       or       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and                                                                       a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier)))))
@21277#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityPartition#If an ActivityPartition represents a Property and has a superPartition, then the Property must be of a Classifier represented by the superPartition, or of a Classifier that is the type of a Property represented by the superPartition.(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies(  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or   (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type))
@21278#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityPartition#If an ActivityPartition represents a Property and has a superPartition representing a Classifier, then all the other non-external subpartitions of the superPartition must represent Properties directly owned by the same Classifier.(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies(  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)  in    superPartition.subpartition->reject(isExternal)->forAll(p |        p.represents.oclIsKindOf(Property) and p.owner=representedClassifier))
@21279#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityPartition#An ActvivityPartition with isDimension = true may not be contained by another ActivityPartition.isDimension implies superPartition->isEmpty()
@21280#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityNode#The Activity that directly or indirectly contains this ActivityNode.result = (if inStructuredNode<>null then inStructuredNode.containingActivity()else activityendif)<p>From package UML::Activities.</p>
@21281#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InterruptibleActivityRegion#The interruptingEdges of an InterruptibleActivityRegion must have their source in the region and their target outside the region, but within the same Activity containing the region.interruptingEdge->forAll(edge |   node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
@21282#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#Returns this StructuredActivityNode and all Actions contained in it.result = (node->select(oclIsKindOf(Action)).oclAsType(Action).allActions()->including(self)->asSet())<p>From package UML::Actions.</p>
@21283#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#Returns all the ActivityNodes contained directly or indirectly within this StructuredActivityNode, in addition to the Pins of the StructuredActivityNode.result = (self.Action::allOwnedNodes()->union(node)->union(node->select(oclIsKindOf(Action)).oclAsType(Action).allOwnedNodes())->asSet())<p>From package UML::Actions.</p>
@21284#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#The Activity that directly or indirectly contains this StructuredActivityNode (considered as an Action).result = (self.Action::containingActivity())<p>From package UML::Actions.</p>
@21285#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#The outgoing ActivityEdges of the OutputPins of a StructuredActivityNode must have targets that are not within the StructuredActivityNode.output.outgoing.target->excludesAll(allOwnedNodes()-input)
@21286#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#The edges of a StructuredActivityNode are all the ActivityEdges with source and target ActivityNodes contained directly or indirectly within the StructuredActivityNode and at least one of the source or target not contained in any more deeply nested StructuredActivityNode.edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
@21287#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#The incoming ActivityEdges of an InputPin of a StructuredActivityNode must have sources that are not within the StructuredActivityNode.input.incoming.source->excludesAll(allOwnedNodes()-output)
@21288#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as sources of edges owned by the StructuredActivityNode.result = (node->union(input.oclAsType(ActivityNode)->asSet())->  union(node->select(oclIsKindOf(Action)).oclAsType(Action).output)->asSet())<p>From package UML::Actions.</p>
@21289#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuredActivityNode#Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as targets of edges owned by the StructuredActivityNode.result = (node->union(output.oclAsType(ActivityNode)->asSet())->  union(node->select(oclIsKindOf(Action)).oclAsType(Action).input)->asSet())<p>From package UML::Actions.</p>
@21290#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Action#The derivation for the context property.result = (let behavior: Behavior = self.containingBehavior() inif behavior=null then nullelse if behavior._'context' = null then behaviorelse behavior._'context'endifendif)<p>From package UML::Actions.</p>
@21291#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Action#Return this Action and all Actions contained directly or indirectly in it. By default only the Action itself is returned, but the operation is overridden for StructuredActivityNodes.result = (self->asSet())<p>From package UML::Actions.</p>
@21292#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Action#Returns all the ActivityNodes directly or indirectly owned by this Action. This includes at least all the Pins of the Action.result = (input.oclAsType(Pin)->asSet()->union(output->asSet()))<p>From package UML::Actions.</p>
@21293#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Action#result = (if inStructuredNode<>null then inStructuredNode.containingBehavior() else if activity<>null then activityelse interaction endifendif)<p>From package UML::Actions.</p>
@21294#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExceptionHandler#The handlerBody has no incoming or outgoing ActivityEdges and the exceptionInput has no incoming ActivityEdges.handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
@21295#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExceptionHandler#If the protectedNode is an Action with OutputPins, then the handlerBody must also be an Action with the same number of OutputPins, which are compatible in type, ordering, and multiplicity to those of the protectedNode.(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies(  handlerBody.oclIsKindOf(Action) and   let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in    protectedNodeOutput->size() = handlerBodyOutput->size() and    Sequence{1..protectedNodeOutput->size()}->forAll(i |    handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and    handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and    handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i))))
@21296#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExceptionHandler#The handlerBody is an Action with one InputPin, and that InputPin is the same as the exceptionInput.handlerBody.oclIsKindOf(Action) andlet inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input ininputs->size()=1 and inputs->first()=exceptionInput
@21297#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExceptionHandler#An ActivityEdge that has a source within the handlerBody of an ExceptionHandler must have its target in the handlerBody also, and vice versa.let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() innodes.outgoing->forAll(nodes->includes(target)) andnodes.incoming->forAll(nodes->includes(source))
@21298#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ObjectNode#A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same type as  or a supertype of the type of ObjectNode, be non-unique, and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of ObjectNode. The Behavior cannot have side effects.selection<>null impliesselection.inputParameters()->size()=1 andselection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) andselection.outputParameters()->size()=1 andselection.inputParameters()->forAll(p | self.type.conformsTo(p.type))
@21299#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InputPin#An InputPin may have outgoing ActivityEdges only when it is owned by a StructuredActivityNode, and these edges must target a node contained (directly or indirectly) in the owning StructuredActivityNode.outgoing->notEmpty() impliesaction<>null andaction.oclIsKindOf(StructuredActivityNode) andaction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)
@21300#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OutputPin#An OutputPin may have incoming ActivityEdges only when it is owned by a StructuredActivityNode, and these edges must have sources contained (directly or indirectly) in the owning StructuredActivityNode.incoming->notEmpty() impliesaction<>null andaction.oclIsKindOf(StructuredActivityNode) andaction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)
@21301#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Variable#A Variable is accessible by Actions within its scope (the Activity or StructuredActivityNode that owns it).result = (if scope<>null then scope.allOwnedNodes()->includes(a)else a.containingActivity()=activityScopeendif)<p>From package UML::Activities.</p>
@21302#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LinkAction#The inputValue InputPins is the same as the union of all the InputPins referenced by the endData.inputValue->asBag()=endData.allPins()
@21303#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LinkAction#The ends of the endData must all be from the same Association and include all and only the memberEnds of that association.endData.end = self.association().memberEnd->asBag()
@21304#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LinkAction#Returns the Association acted on by this LinkAction.result = (endData->asSequence()->first().end.association)<p>From package UML::Actions.</p>
@21305#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LinkEndData#Returns all the InputPins referenced by this LinkEndData. By default this includes the value and qualifier InputPins, but subclasses may override the operation to add other InputPins.result = (value->asBag()->union(qualifier.value))<p>From package UML::Actions.</p>
@21306#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuralFeatureAction#The structuralFeature must either be an owned or inherited feature of the type of the object InputPin, or it must be an owned end of a binary Association whose opposite end had as a type to which the type of the object InputPin conforms.object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) orobject.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)
@21307#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuralFeatureAction#The visibility of the structuralFeature must allow access from the object performing the ReadStructuralFeatureAction.structuralFeature.visibility = VisibilityKind::public or_'context'.allFeatures()->includes(structuralFeature) orstructuralFeature.visibility=VisibilityKind::protected and_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))
@21308#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StructuralFeatureAction#The structuralFeature must have exactly one featuringClassifier.structuralFeature.featuringClassifier->size() = 1
@21309#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptCallAction#The number of result OutputPins must be the same as the number of input (in and inout) ownedParameters of the Operation specified by the trigger Event. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter.let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() inresult->size() = parameter->size() andSequence{1..result->size()}->forAll(i | parameter->at(i).type.conformsTo(result->at(i).type) and parameter->at(i).isOrdered = result->at(i).isOrdered andparameter->at(i).compatibleWith(result->at(i)))
@21310#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptCallAction#The action must have exactly one trigger, which must be for a CallEvent.trigger->size()=1 andtrigger->asSequence()->first().event.oclIsKindOf(CallEvent)
@21311#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptEventAction#If isUnmarshall=false and any of the triggers are for SignalEvents or TimeEvents, there must be exactly one result OutputPin with multiplicity 1..1.not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies output->size() = 1 and output->first().is(1,1)
@21312#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptEventAction#AcceptEventActions may have no input pins.input->size() = 0
@21313#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptEventAction#There are no OutputPins if the trigger events are only ChangeEvents and/or CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction).(self.oclIsTypeOf(AcceptEventAction) and   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or                               event.oclIsKindOf(CallEvent))))implies output->size() = 0
@21314#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptEventAction#If isUnmarshall is true (and this is not an AcceptCallAction), there must be exactly one trigger, which is for a SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute.isUnmarshall and self.oclIsTypeOf(AcceptEventAction) impliestrigger->size()=1 andtrigger->asSequence()->first().event.oclIsKindOf(SignalEvent) andlet attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() inattribute->size()>0 and result->size() = attribute->size() andSequence{1..result->size()}->forAll(i | result->at(i).type = attribute->at(i).type and result->at(i).isOrdered = attribute->at(i).isOrdered andresult->at(i).includesMultiplicity(attribute->at(i)))
@21315#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AcceptEventAction#If isUnmarshall=false and all the triggers are for SignalEvents, then the type of the single result OutputPin must either be null or all the signals must conform to it.not isUnmarshall implies result->isEmpty() orlet type: Type = result->first().type intype=null or (trigger->forAll(event.oclIsKindOf(SignalEvent)) and  trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))
@21316#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActionInputPin#The fromAction of an ActionInputPin must have exactly one OutputPin.fromAction.output->size() = 1
@21317#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActionInputPin#The fromAction of an ActionInputPin cannot have ActivityEdges coming into or out of it or its Pins.fromAction.incoming->union(outgoing)->isEmpty() andfromAction.input.incoming->isEmpty() andfromAction.output.outgoing->isEmpty()
@21318#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#BroadcastSignalAction#The number of argument InputPins must be the same as the number of attributes in the signal.argument->size() = signal.allAttributes()->size()
@21319#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#BroadcastSignalAction#The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal.let attribute: OrderedSet(Property) = signal.allAttributes() inSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(attribute->at(i).type) and argument->at(i).isOrdered = attribute->at(i).isOrdered andargument->at(i).compatibleWith(attribute->at(i)))
@21320#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallAction#The number of argument InputPins must be the same as the number of input (in and inout) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each argument InputPin must be consistent with the corresponding input Parameter.let parameter: OrderedSet(Parameter) = self.inputParameters() inargument->size() = parameter->size() andSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(parameter->at(i).type) and argument->at(i).isOrdered = parameter->at(i).isOrdered andargument->at(i).compatibleWith(parameter->at(i)))
@21321#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallAction#The number of result OutputPins must be the same as the number of output (inout, out and return) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter.let parameter: OrderedSet(Parameter) = self.outputParameters() inresult->size() = parameter->size() andSequence{1..result->size()}->forAll(i | parameter->at(i).type.conformsTo(result->at(i).type) and parameter->at(i).isOrdered = result->at(i).isOrdered andparameter->at(i).compatibleWith(result->at(i)))
@21322#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallAction#Only synchronous CallActions can have result OutputPins.result->notEmpty() implies isSynchronous
@21323#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallBehaviorAction#Return the inout, out and return ownedParameters of the Behavior being called.result = (behavior.outputParameters())<p>From package UML::Actions.</p>
@21324#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallBehaviorAction#Return the in and inout ownedParameters of the Behavior being called.result = (behavior.inputParameters())<p>From package UML::Actions.</p>
@21325#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallOperationAction#Return the inout, out and return ownedParameters of the Operation being called.result = (operation.outputParameters())<p>From package UML::Actions.</p>
@21326#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallOperationAction#Return the in and inout ownedParameters of the Operation being called.result = (operation.inputParameters())<p>From package UML::Actions.</p>
@21327#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CallOperationAction#If onPort has no value, the operation must be an owned or inherited feature of the type of the target InputPin, otherwise the Port given by onPort must be an owned or inherited feature of the type of the target InputPin, and the Port must have a required or provided Interface with the operation as an owned or inherited feature.if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)endif
@21328#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Clause#The bodyOutput Pins are OutputPins on Actions in the body of the Clause._'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)
@21329#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Clause#The decider Pin must be on an Action in the test section of the Clause and must be of type Boolean with multiplicity 1..1.test.oclAsType(Action).allActions().output->includes(decider) anddecider.type = Boolean anddecider.is(1,1)
@21330#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Clause#The test and body parts of a ConditionalNode must be disjoint with each other.test->intersection(_'body')->isEmpty()
@21331#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConditionalNode#Return only this ConditionalNode. This prevents Actions within the ConditionalNode from having their OutputPins used as bodyOutputs or decider Pins in containing LoopNodes or ConditionalNodes.result = (self->asSet())<p>From package UML::Actions.</p>
@21332#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConditionalNode#The result OutputPins have no incoming edges.result.incoming->isEmpty()
@21333#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConditionalNode#A ConditionalNode has no InputPins.input->isEmpty()
@21334#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConditionalNode#No ExecutableNode in the ConditionNode may appear in the test or body part of more than one clause of a ConditionalNode.node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | self.clause->select(test->union(_'body')->includes(n))->size()=1)
@21335#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConditionalNode#Each clause of a ConditionalNode must have the same number of bodyOutput pins as the ConditionalNode has result OutputPins, and each clause bodyOutput Pin must be compatible with the corresponding result OutputPin (by positional order) in type, multiplicity, ordering, and uniqueness.clause->forAll(bodyOutput->size()=self.result->size() andSequence{1..self.result->size()}->forAll(i |bodyOutput->at(i).type.conformsTo(result->at(i).type) andbodyOutput->at(i).isOrdered = result->at(i).isOrdered andbodyOutput->at(i).isUnique = result->at(i).isUnique andbodyOutput->at(i).compatibleWith(result->at(i))))
@21336#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ConditionalNode#No two clauses within a ConditionalNode may be predecessorClauses of each other, either directly or indirectly.clause->closure(predecessorClause)->intersection(clause)->isEmpty()
@21337#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CreateLinkAction#The Association cannot be an abstract Classifier.not self.association().isAbstract
@21338#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LinkEndCreationData#Adds the insertAt InputPin (if any) to the set of all Pins.result = (self.LinkEndData::allPins()->including(insertAt))<p>From package UML::Actions.</p>
@21339#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CreateLinkObjectAction#The type of the result OutputPin must be the same as the Association of the CreateLinkObjectAction.result.type = association()
@21340#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CreateLinkObjectAction#The Association must be an AssociationClass.self.association().oclIsKindOf(AssociationClass)
@21341#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LinkEndDestructionData#Adds the destroyAt InputPin (if any) to the set of all Pins.result = (self.LinkEndData::allPins()->including(destroyAt))<p>From package UML::Actions.</p>
@21342#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ExpansionNode#One of regionAsInput or regionAsOutput must be non-empty, but not both.regionAsInput->notEmpty() xor regionAsOutput->notEmpty()
@21343#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#Return only this LoopNode. This prevents Actions within the LoopNode from having their OutputPins used as bodyOutputs or decider Pins in containing LoopNodes or ConditionalNodes.result = (self->asSet())<p>From package UML::Actions.</p>
@21344#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#Return the loopVariable OutputPins in addition to other source nodes for the LoopNode as a StructuredActivityNode.result = (self.StructuredActivityNode::sourceNodes()->union(loopVariable))<p>From package UML::Actions.</p>
@21345#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#The result OutputPins have no incoming edges.result.incoming->isEmpty()
@21346#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#The loopVariableInputs must not have outgoing edges.loopVariableInput.outgoing->isEmpty()
@21347#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#The union of the ExecutableNodes in the setupPart, test and bodyPart of a LoopNode must be the same as the subset of nodes contained in the LoopNode (considered as a StructuredActivityNode) that are ExecutableNodes.setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
@21348#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#The bodyOutput pins are OutputPins on Actions in the body of the LoopNode.bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
@21349#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#The test and body parts of a ConditionalNode must be disjoint with each other.setupPart->intersection(test)->isEmpty() andsetupPart->intersection(bodyPart)->isEmpty() andtest->intersection(bodyPart)->isEmpty()
@21350#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#A LoopNode must have the same number of bodyOutput Pins as loopVariables, and each bodyOutput Pin must be compatible with the corresponding loopVariable (by positional order) in type, multiplicity, ordering and uniqueness.bodyOutput->size()=loopVariable->size() andSequence{1..loopVariable->size()}->forAll(i |bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) andbodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered andbodyOutput->at(i).isUnique = loopVariable->at(i).isUnique andloopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))
@21351#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#A LoopNode must have the same number of loopVariableInputs and loopVariables, and they must match in type, uniqueness and multiplicity.loopVariableInput->size()=loopVariable->size() andloopVariableInput.type=loopVariable.type andloopVariableInput.isUnique=loopVariable.isUnique andloopVariableInput.lower=loopVariable.lower andloopVariableInput.upper=loopVariable.upper
@21352#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#A LoopNode must have the same number of result OutputPins and loopVariables, and they must match in type, uniqueness and multiplicity.result->size()=loopVariable->size() andresult.type=loopVariable.type andresult.isUnique=loopVariable.isUnique andresult.lower=loopVariable.lower andresult.upper=loopVariable.upper
@21353#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LoopNode#All ActivityEdges outgoing from loopVariable OutputPins must have targets within the LoopNode.allOwnedNodes()->includesAll(loopVariable.outgoing.target)
@21354#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#OpaqueAction#If the language attribute is not empty, then the size of the body and language lists must be the same.language->notEmpty() implies (_'body'->size() = language->size())
@21355#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadLinkAction#The type and ordering of the result OutputPin are same as the type and ordering of the open Association end.self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
@21356#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadLinkAction#The multiplicity of the open Association end must be compatible with the multiplicity of the result OutputPin.self.openEnd()->first().compatibleWith(result)
@21357#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadLinkAction#Visibility of the open end must allow access from the object performing the action.let openEnd : Property = self.openEnd()->first() in  openEnd.visibility = VisibilityKind::public or   endData->exists(oed |     oed.end<>openEnd and     (_'context' = oed.end.type or       (openEnd.visibility = VisibilityKind::protected and         _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))
@21358#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadLinkAction#Exactly one linkEndData specification (corresponding to the "open" end) must not have an value InputPin.self.openEnd()->size() = 1
@21359#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadLinkAction#The open end must be navigable.self.openEnd()->first().isNavigable()
@21360#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadLinkAction#Returns the ends corresponding to endData with no value InputPin. (A well-formed ReadLinkAction is constrained to have only one of these.)result = (endData->select(value=null).end->asOrderedSet())<p>From package UML::Actions.</p>
@21361#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReadSelfAction#If the ReadSelfAction is contained in an Behavior that is acting as a method, then the Operation of the method must not be static.let behavior: Behavior = self.containingBehavior() inbehavior.specification<>null implies not behavior.specification.isStatic
@21362#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReduceAction#The reducer Behavior must have two input ownedParameters and one output ownedParameter, where the type of the output Parameter and the type of elements of the input collection conform to the types of the input Parameters.let inputs: OrderedSet(Parameter) = reducer.inputParameters() inlet outputs: OrderedSet(Parameter) = reducer.outputParameters() ininputs->size()=2 and outputs->size()=1 andinputs.type->forAll(t | outputs.type->forAll(conformsTo(t)) and -- Note that the following only checks the case when the collection is via multiple tokens.collection.upperBound()>1 implies collection.type.conformsTo(t))
@21363#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReduceAction#The type of the output of the reducer Behavior must conform to the type of the result OutputPin.reducer.outputParameters().type->forAll(conformsTo(result.type))
@21364#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ReplyAction#The replyValue InputPins must match the output (return, out, and inout) parameters of the operation of the event of the replyToCall Trigger in number, type, ordering, and multiplicity.let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() inreplyValue->size()=parameter->size() andSequence{1..replyValue->size()}->forAll(i |replyValue->at(i).type.conformsTo(parameter->at(i).type) andreplyValue->at(i).isOrdered=parameter->at(i).isOrdered andreplyValue->at(i).compatibleWith(parameter->at(i)))
@21365#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#SendObjectAction#If onPort is not empty, the Port given by onPort must be an owned or inherited feature of the type of the target InputPin.onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
@21366#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#SendSignalAction#The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal.let attribute: OrderedSet(Property) = signal.allAttributes() inSequence{1..argument->size()}->forAll(i | argument->at(i).type.conformsTo(attribute->at(i).type) and argument->at(i).isOrdered = attribute->at(i).isOrdered andargument->at(i).compatibleWith(attribute->at(i)))
@21367#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#SendSignalAction#The number and order of argument InputPins must be the same as the number and order of attributes of the signal.argument->size()=signal.allAttributes()->size()
@21368#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#SendSignalAction#If onPort is not empty, the Port given by onPort must be an owned or inherited feature of the type of the target InputPin.not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
@21369#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StartClassifierBehaviorAction#If the InputPin has a type, then the type or one of its ancestors must have a classifierBehavior.object.type->notEmpty() implies    (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)
@21370#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StartObjectBehaviorAction#Return the inout, out and return ownedParameters of the Behavior being called.result = (self.behavior().outputParameters())<p>From package UML::Actions.</p>
@21371#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StartObjectBehaviorAction#Return the in and inout ownedParameters of the Behavior being called.result = (self.behavior().inputParameters())<p>From package UML::Actions.</p>
@21372#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StartObjectBehaviorAction#The type of the object InputPin must be either a Behavior or a BehavioredClassifier with a classifierBehavior.self.behavior()<>null
@21373#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#StartObjectBehaviorAction#A StartObjectBehaviorAction may not specify onPort.onPort->isEmpty()
@21374#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UnmarshallAction#The unmarshallType must have at least one StructuralFeature.unmarshallType.allAttributes()->size() >= 1
@21375#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UnmarshallAction#The number of result outputPins must be the same as the number of attributes of the unmarshallType.unmarshallType.allAttributes()->size() = result->size()
@21376#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#UnmarshallAction#The type, ordering and multiplicity of each attribute of the unmarshallType must be compatible with the type, ordering and multiplicity of the corresponding result OutputPin.let attribute:OrderedSet(Property) = unmarshallType.allAttributes() inSequence{1..result->size()}->forAll(i | attribute->at(i).type.conformsTo(result->at(i).type) andattribute->at(i).isOrdered=result->at(i).isOrdered andattribute->at(i).compatibleWith(result->at(i)))
@21377#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ValuePin#A ValuePin may have no incoming ActivityEdges.incoming->isEmpty()
@21378#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalNode#A FinalNode has no outgoing ActivityEdges.outgoing->isEmpty()
@21379#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityParameterNode#An ActivityParameterNode with no outgoing ActivityEdges and one or more incoming ActivityEdges must have a parameter with direction out, inout, or return.(incoming->notEmpty() and outgoing->isEmpty()) implies (parameter.direction = ParameterDirectionKind::out or  parameter.direction = ParameterDirectionKind::inout or  parameter.direction = ParameterDirectionKind::return)
@21380#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityParameterNode#An ActivityParameterNode with no incoming ActivityEdges and one or more outgoing ActivityEdges must have a parameter with direction in or inout.(outgoing->notEmpty() and incoming->isEmpty()) implies (parameter.direction = ParameterDirectionKind::_'in' or  parameter.direction = ParameterDirectionKind::inout)
@21381#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActivityParameterNode#An ActivityParameterNode may have all incoming ActivityEdges or all outgoing ActivityEdges, but it must not have both incoming and outgoing ActivityEdges.incoming->isEmpty() or outgoing->isEmpty()
@21382#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DecisionNode#If the DecisionNode has no decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has no in parameters.(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies   decisionInput.inputParameters()->isEmpty()
@21383#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DecisionNode#The ActivityEdges incoming to and outgoing from a DecisionNode, other than the decisionInputFlow (if any), must be either all ObjectFlows or all ControlFlows.let allEdges: Set(ActivityEdge) = incoming->union(outgoing) inlet allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif inallRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))
@21384#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DecisionNode#If the DecisionNode has a decisionInputFlow and an second incoming ObjectFlow, then any decisionInput has two in Parameters, the first of which has a type that is the same as or a supertype of the type of object tokens offered on the non-decisionInputFlow and the second of which has a type that is the same as or a supertype of the type of object tokens offered on the decisionInputFlow.(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) impliesdecisionInput.inputParameters()->size()=2
@21385#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DecisionNode#A DecisionNode has one or two incoming ActivityEdges and at least one outgoing ActivityEdge.(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
@21386#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DecisionNode#If the DecisionNode has a decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the decisionInputFlow.(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) impliesdecisionInput.inputParameters()->size()=1
@21387#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DecisionNode#If the DecisionNode has no decisionInputFlow and an incoming ObjectFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the incoming ObjectFlow.(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) impliesdecisionInput.inputParameters()->size()=1
@21388#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ObjectFlow#A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same as or a supertype of the type of the source ObjectNode, be non-unique and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of source ObjectNode. The Behavior cannot have side effects.selection<>null impliesselection.inputParameters()->size()=1 andselection.inputParameters()->forAll(not isUnique and is(0,*)) andselection.outputParameters()->size()=1
@21389#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ObjectFlow#A transformation Behavior has one input Parameter and one output Parameter. The input Parameter must be the same as or a supertype of the type of object token coming from the source end. The output Parameter must be the same or a subtype of the type of object token expected downstream. The Behavior cannot have side effects.transformation<>null impliestransformation.inputParameters()->size()=1 andtransformation.outputParameters()->size()=1
@21390#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ForkNode#A ForkNode has one incoming ActivityEdge.incoming->size()=1
@21391#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InitialNode#An InitialNode has no incoming ActivityEdges.incoming->isEmpty()
@21392#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#JoinNode#A JoinNode has one outgoing ActivityEdge.outgoing->size() = 1
@21393#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MergeNode#A MergeNode has one outgoing ActivityEdge.outgoing->size()=1
@21394#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FunctionBehavior#A FunctionBehavior has at least one output Parameter.self.ownedParameter->  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
@21395#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TimeEvent#The ValueSpecification when must return a non-negative Integer.when.integerValue() >= 0
@21396#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TimeExpression#If a TimeExpression has no expr, then it must have a single observation that is a TimeObservation.expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))
@21397#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#The query isDistinguishableFrom() specifies that any two Messages may coexist in the same Namespace, regardless of their names.result = (true)<p>From package UML::Interactions.</p>
@21398#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#If the sendEvent and the receiveEvent of the same Message are on the same Lifeline, the sendEvent must be ordered before the receiveEvent.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)implieslet f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered inf = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  impliesf.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )
@21399#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#Messages cannot cross boundaries of CombinedFragments or their operands.  This is true if and only if both MessageEnds are enclosed within the same InteractionFragment (i.e., an InteractionOperand or an Interaction).sendEvent->notEmpty() and receiveEvent->notEmpty() implieslet sendEnclosingFrag : Set(InteractionFragment) = sendEvent->asOrderedSet()->first().enclosingFragment()in let receiveEnclosingFrag : Set(InteractionFragment) = receiveEvent->asOrderedSet()->first().enclosingFragment()in  sendEnclosingFrag = receiveEnclosingFrag
@21400#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the Signal. A Message Argument corresponds to a Signal Attribute if the Argument is of the same Class or a specialization of that of the Attribute.(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()   in signalAttributes->size() = self.argument->size()   and self.argument->forAll( o: ValueSpecification |          not (o.oclIsKindOf(Expression)          and o.oclAsType(Expression).symbol->size()=0          and o.oclAsType(Expression).operand->isEmpty() ) implies              let p : Property = signalAttributes->at(self.argument->indexOf(o))              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
@21401#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#The signature must either refer an Operation (in which case messageSort is either synchCall or asynchCall or reply) or a Signal (in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same as that of the Message.signature->notEmpty() implies ((signature.oclIsKindOf(Operation) and (messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) ) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal ) ) and name = signature.name
@21402#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#In the case when a Message with messageSort synchCall or asynchCall has a non empty Operation signature, the arguments of the Message must correspond to the in and inout parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter.(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies  let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter-> select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )in requestParms->size() = self.argument->size() andself.argument->forAll( o: ValueSpecification | not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies let p : Parameter = requestParms->at(self.argument->indexOf(o)) ino.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
@21403#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Message#In the case when a Message with messageSort reply has a non empty Operation signature, the arguments of the Message must correspond to the out, inout, and return parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter.(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies  let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)in replyParms->size() = self.argument->size() andself.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) ine.operand->notEmpty()  implies let p : Parameter = replyParms->at(self.argument->indexOf(o)) ine.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
@21404#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Interaction#An Interaction instance must not be contained within another Interaction instance.enclosingInteraction->isEmpty()
@21405#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Lifeline#The selector for a Lifeline must only be specified if the referenced Part is multivalued. self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
@21406#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Lifeline#If a lifeline is in an Interaction referred to by an InteractionUse in an enclosing Interaction,  and that lifeline is common with another lifeline in an Interaction referred to by another InteractonUse within that same enclosing Interaction, it must be common to a lifeline within that enclosing Interaction. By common Lifelines we mean Lifelines with the same selector and represents associations.let intUses : Set(InteractionUse) = interaction.interactionUse  in intUses->forAll( iuse : InteractionUse | let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()->union(iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()               ) inlet peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()->union(usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()               )->excluding(iuse) inpeerUses->forAll( peerUse : InteractionUse | peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and  ( self.selector.oclIsKindOf(LiteralString) implies  l.selector.oclIsKindOf(LiteralString) and   self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )  and ( self.selector.oclIsKindOf(LiteralInteger) implies  l.selector.oclIsKindOf(LiteralInteger) and   self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value ))  implies usingInteraction.lifeline->select(represents = self.represents and ( self.selector.oclIsKindOf(LiteralString) implies  l.selector.oclIsKindOf(LiteralString) and   self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )and ( self.selector.oclIsKindOf(LiteralInteger) implies  l.selector.oclIsKindOf(LiteralInteger) and   self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value ))                                                )                    ))
@21407#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Lifeline#The selector value, if present, must be a LiteralString or a LiteralIntegerself.selector->notEmpty() implies self.selector.oclIsKindOf(LiteralInteger) or self.selector.oclIsKindOf(LiteralString)
@21408#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionUse#Actual Gates of the InteractionUse must match Formal Gates of the referred Interaction. Gates match when their names are equal and their messages correspond.actualGate->notEmpty() implies refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) andself.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)
@21409#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionUse#The returnValueRecipient must be a Property of a ConnectableElement that is represented by a Lifeline covered by this InteractionUse.returnValueRecipient->asSet()->notEmpty() implieslet covCE : Set(ConnectableElement) = covered.represents->asSet() in covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in allProps->includes(returnValueRecipient)
@21410#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionUse#The type of the returnValue must correspond to the type of the returnValueRecipient.returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
@21411#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionUse#The InteractionUse must cover all Lifelines of the enclosing Interaction that are common with the lifelines covered by the referred Interaction. Lifelines are common if they have the same selector and represents associationEnd values.let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()) inparentInteraction->size()=1 and let refInteraction : Interaction = refersTo inparentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and (( refLifeline.selector.oclIsKindOf(LiteralString) implies  intLifeline.selector.oclIsKindOf(LiteralString) and   refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and( refLifeline.selector.oclIsKindOf(LiteralInteger) implies  intLifeline.selector.oclIsKindOf(LiteralInteger) and   refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )) implies self.covered->asSet()->includes(intLifeline)))
@21412#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#The query isDistinguishableFrom() specifies that two Gates may coexist in the same Namespace, without an explicit name property. The association end formalGate subsets ownedElement, and since the Gate name attributeis optional, it is allowed to have two formal gates without an explicit name, but having derived names which are distinct.result = (true)<p>From package UML::Interactions.</p>
@21413#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#If this Gate is an actualGate, it must have exactly one matching formalGate within the referred Interaction.interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
@21414#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#If this Gate is inside a CombinedFragment, it must have exactly one matching Gate which is outside of that CombinedFragment.isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
@21415#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#If this Gate is outside an 'alt' CombinedFragment,  for every InteractionOperator inside that CombinedFragment there must be exactly one matching Gate inside the CombindedFragment with its opposing end enclosed by that InteractionOperator. If this Gate is outside CombinedFragment with operator other than 'alt',   there must be exactly one matching Gate inside that CombinedFragment.isOutsideCF() implies if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt then self.combinedFragment.operand->forAll(op : InteractionOperand | self.combinedFragment.cfragmentGate->select(isInsideCF() and  oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1) else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1 endif
@21416#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#isFormal() implies that no other formalGate of the parent Interaction returns the same getName() as returned for selfisFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
@21417#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#isActual() implies that no other actualGate of the parent InteractionUse returns the same getName() as returned for selfisActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
@21418#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#isOutsideCF() implies that no other outside cfragmentGate of the parent CombinedFragment returns the same getName() as returned for selfisOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
@21419#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#isInsideCF() implies that no other inside cfragmentGate attached to a message with its other end in the same InteractionOperator as self, returns the same getName() as returned for selfisInsideCF() implieslet selfOperand : InteractionOperand = self.getOperand() in  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1
@21420#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#This query returns true if this Gate is attached to the boundary of a CombinedFragment, and its other end (if present)  is outside of the same CombinedFragment.result = (self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implieslet oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() inif oppEnd.oclIsKindOf(MessageOccurrenceSpecification) then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)in  self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =     oppMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(oppMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet())else let oppGate : Gate = oppEnd.oclAsType(Gate) in self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =     oppGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(oppGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())endif)<p>From package UML::Interactions.</p>
@21421#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#This query returns true if this Gate is attached to the boundary of a CombinedFragment, and its other end (if present) is inside of an InteractionOperator of the same CombinedFragment.result = (self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implieslet oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() inif oppEnd.oclIsKindOf(MessageOccurrenceSpecification)then let oppMOS : MessageOccurrenceSpecification= oppEnd.oclAsType(MessageOccurrenceSpecification)in combinedFragment = oppMOS.enclosingOperand.combinedFragmentelse let oppGate : Gate = oppEnd.oclAsType(Gate)in combinedFragment = oppGate.combinedFragment.enclosingOperand.combinedFragmentendif)<p>From package UML::Interactions.</p>
@21422#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#This query returns true value if this Gate is an actualGate of an InteractionUse.result = (interactionUse->notEmpty())<p>From package UML::Interactions.</p>
@21423#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#This query returns true if this Gate is a formalGate of an Interaction.result = (interaction->notEmpty())<p>From package UML::Interactions.</p>
@21424#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#This query returns the name of the gate, either the explicit name (.name) or the constructed name ('out_" or 'in_' concatenated in front of .message.name) if the explicit name is not present.result = (if name->notEmpty() then name->asOrderedSet()->first()else  if isActual() or isOutsideCF()   then if isSend()     then 'out_'.concat(self.message.name->asOrderedSet()->first())    else 'in_'.concat(self.message.name->asOrderedSet()->first())    endif  else if isSend()    then 'in_'.concat(self.message.name->asOrderedSet()->first())    else 'out_'.concat(self.message.name->asOrderedSet()->first())    endif  endifendif)<p>From package UML::Interactions.</p>
@21425#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#This query returns true if the name of this Gate matches the name of the in parameter Gate, and the messages for the two Gates correspond. The Message for one Gate (say A) corresponds to the Message for another Gate (say B) if (A and B have the same name value) and (if A is a sendEvent then B is a receiveEvent) and (if A is a receiveEvent then B is a sendEvent) and (A and B have the same messageSort value) and (A and B have the same signature value).result = (self.getName() = gateToMatch.getName() and self.message.messageSort = gateToMatch.message.messageSort andself.message.name = gateToMatch.message.name andself.message.sendEvent->includes(self) implies gateToMatch.message.receiveEvent->includes(gateToMatch)  andself.message.receiveEvent->includes(self) implies gateToMatch.message.sendEvent->includes(gateToMatch) andself.message.signature = gateToMatch.message.signature)<p>From package UML::Interactions.</p>
@21426#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Gate#If the Gate is an inside Combined Fragment Gate, this operation returns the InteractionOperand that the opposite end of this Gate is included within.result = (if isInsideCF() then  let oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in    if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)    then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)        in oppMOS.enclosingOperand->asOrderedSet()->first()    else let oppGate : Gate = oppEnd.oclAsType(Gate)        in oppGate.combinedFragment.enclosingOperand->asOrderedSet()->first()    endif  else nullendif)<p>From package UML::Interactions.</p>
@21427#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MessageEnd#This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.result = (message->asSet().messageEnd->asSet()->excluding(self))message->notEmpty()<p>From package UML::Interactions.</p>
@21428#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MessageEnd#This query returns value true if this MessageEnd is a sendEvent.message->notEmpty()result = (message.sendEvent->asSet()->includes(self))<p>From package UML::Interactions.</p>
@21429#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MessageEnd#This query returns value true if this MessageEnd is a receiveEvent.message->notEmpty()result = (message.receiveEvent->asSet()->includes(self))<p>From package UML::Interactions.</p>
@21430#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#MessageEnd#This query returns a set including the enclosing InteractionFragment this MessageEnd is enclosed within.result = (if self->select(oclIsKindOf(Gate))->notEmpty() then -- it is a Gatelet endGate : Gate =   self->select(oclIsKindOf(Gate)).oclAsType(Gate)->asOrderedSet()->first()  in  if endGate.isOutsideCF()   then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())  else if endGate.isInsideCF()     then endGate.combinedFragment.oclAsType(InteractionFragment)->asSet()    else if endGate.isFormal()       then endGate.interaction.oclAsType(InteractionFragment)->asSet()      else if endGate.isActual()         then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)->asSet())        else null        endif      endif    endif  endifelse -- it is a MessageOccurrenceSpecificationlet endMOS : MessageOccurrenceSpecification  =   self->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first()   in  if endMOS.enclosingInteraction->notEmpty()   then endMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()  else endMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet()  endifendif)<p>From package UML::Interactions.</p>
@21431#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionConstraint#Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.maxint->notEmpty() or minint->notEmpty() impliesinteractionOperand.combinedFragment.interactionOperator =InteractionOperatorKind::loop
@21432#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionConstraint#If minint is specified, then the expression must evaluate to a non-negative integer.minint->notEmpty() implies minint->asSequence()->first().integerValue() >= 0
@21433#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionConstraint#If maxint is specified, then the expression must evaluate to a positive integer.maxint->notEmpty() implies maxint->asSequence()->first().integerValue() > 0
@21434#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InteractionConstraint#If maxint is specified, then minint must be specified and the evaluation of maxint must be >= the evaluation of minint.maxint->notEmpty() implies (minint->notEmpty() and maxint->asSequence()->first().integerValue() >=minint->asSequence()->first().integerValue() )
@21435#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#InformationItem#An informationItem has no feature, no generalization, and no associations.self.generalization->isEmpty() and self.feature->isEmpty()
@21436#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ActionExecutionSpecification#The Action referenced by the ActionExecutionSpecification must be owned by the Interaction owning that ActionExecutionSpecification.(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) andlet parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction
@21437#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CombinedFragment#If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines covered by the enclosing InteractionFragment.interactionOperator=InteractionOperatorKind::break  implies   enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
@21438#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#CombinedFragment#If the interactionOperator is opt, loop, break, assert or neg, there must be exactly one operand.(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop orinteractionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert orinteractionOperator = InteractionOperatorKind::neg)implies operand->size()=1
@21439#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Continuation#Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionOperand. enclosingOperand->notEmpty() and  let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in    ( peerFragments->notEmpty() and    ((peerFragments->first() = self) or  (peerFragments->last() = self)))
@21440#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Continuation#Across all Interaction instances having the same context value, every Lifeline instance covered by a Continuation (self) must be common with one covered Lifeline instance of all other Continuation instances with the same name as self, and every Lifeline instance covered by a Continuation instance with the same name as self must be common with one covered Lifeline instance of self. Lifeline instances are common if they have the same selector and represents associationEnd values.enclosingOperand.combinedFragment->notEmpty() andlet parentInteraction : Set(Interaction) = enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->collect(enclosingInteraction).oclAsType(Interaction)->asSet()in (parentInteraction->size() = 1) and let peerInteractions : Set(Interaction) = (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)-> select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in (peerInteractions->notEmpty()) and   let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment-> select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->   forAll(c : Continuation |  (c.name = self.name) implies   (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self  self.covered->asSet()->  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))   and (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c c.covered->asSet()->  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))  )
@21441#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Continuation#Continuations are always global in the enclosing InteractionFragment e.g., it always covers all Lifelines covered by the enclosing InteractionOperator.enclosingOperand->notEmpty() and  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in     (operandLifelines->notEmpty() and     operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))
@21442#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DestructionOccurrenceSpecification#No other OccurrenceSpecifications on a given Lifeline in an InteractionOperand may appear below a DestructionOccurrenceSpecification.let o : InteractionOperand = enclosingOperand in o->notEmpty() and let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)in peerEvents->last() = self
@21443#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalState#A FinalState has no exit Behavior.exit->isEmpty()
@21444#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalState#A FinalState cannot have any outgoing Transitions.outgoing->size() = 0
@21445#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalState#A FinalState cannot have Regions.region->size() = 0
@21446#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalState#A FinalState cannot reference a submachine.submachine->isEmpty()
@21447#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalState#A FinalState has no entry Behavior.entry->isEmpty()
@21448#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#FinalState#A FinalState has no state (doActivity) Behavior.doActivity->isEmpty()
@21449#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ProtocolTransition#If a ProtocolTransition refers to an Operation (i.e., has a CallEvent trigger corresponding to an Operation), then that Operation should apply to the context Classifier of the StateMachine of the ProtocolTransition.if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then     containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())else true endif
@21450#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ProtocolTransition#A ProtocolTransition always belongs to a ProtocolStateMachine.container.belongsToPSM()
@21451#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#ProtocolTransition#Derivation for ProtocolTransition::/referredresult = (trigger->collect(event)->select(oclIsKindOf(CallEvent))->collect(oclAsType(CallEvent).operation)->asSet())<p>From package UML::StateMachines.</p>
@21452#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AssociationClass#An AssociationClass cannot be defined between itself and something else.self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
@21453#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#AssociationClass#The owned attributes and owned ends of an AssociationClass are disjoint.ownedAttribute->intersection(ownedEnd)->isEmpty()
@21454#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Component#A Component cannot nest Classifiers.nestedClassifier->isEmpty()
@21455#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Component#A Component nested in a Class cannot have any packaged elements.nestingClass <> null implies packagedElement->isEmpty()
@21456#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Component#Derivation for Component::/providedresult = (let ris : Set(Interface) = allRealizedInterfaces(),        realizingClassifiers : Set(Classifier) =  self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allRealizedInterfaces())),        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),        providedByPorts : Set(Interface) = ports.provided->asSet()in     ris->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet())<p>From package UML::StructuredClassifiers.</p>
@21457#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Component#Derivation for Component::/requiredresult = (let uis : Set(Interface) = allUsedInterfaces(),        realizingClassifiers : Set(Classifier) = self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allUsedInterfaces())),        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),        usedByPorts : Set(Interface) = ports.required->asSet()in    uis->union(realizingClassifierInterfaces)->union(usedByPorts)->asSet())<p>From package UML::StructuredClassifiers.</p>
@21458#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Actor#An Actor can only have Associations to UseCases, Components, and Classes. Furthermore these Associations must be binary.Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )
@21459#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Actor#An Actor must have a name.name->notEmpty()
@21460#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#Duration#If a Duration has no expr, then it must have a single observation that is a DurationObservation.expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))
@21461#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DurationConstraint#The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0.if (constrainedElement->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0) endif
@21462#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DurationConstraint#A DurationConstraint has either one or two constrainedElements.constrainedElement->size() = 1 or constrainedElement->size()=2
@21463#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#DurationObservation#The multiplicity of firstEvent must be 2 if the multiplicity of event is 2. Otherwise the multiplicity of firstEvent is 0.if (event->size() = 2)  then (firstEvent->size() = 2) else (firstEvent->size() = 0)endif
@21464#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralBoolean#The query booleanValue() gives the value.result = (value)<p>From package UML::Values.</p>
@21465#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralBoolean#The query isComputable() is redefined to be true.result = (true)<p>From package UML::Values.</p>
@21466#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralInteger#The query integerValue() gives the value.result = (value)<p>From package UML::Values.</p>
@21467#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralInteger#The query isComputable() is redefined to be true.result = (true)<p>From package UML::Values.</p>
@21468#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralNull#The query isComputable() is redefined to be true.result = (true)<p>From package UML::Values.</p>
@21469#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralNull#The query isNull() returns true.result = (true)<p>From package UML::Values.</p>
@21470#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralReal#The query isComputable() is redefined to be true.result = (true)<p>From package UML::Values.</p>
@21471#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralReal#The query realValue() gives the value.result = (value)<p>From package UML::Values.</p>
@21472#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralString#The query isComputable() is redefined to be true.result = (true)<p>From package UML::Values.</p>
@21473#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralString#The query stringValue() gives the value.result = (value)<p>From package UML::Values.</p>
@21474#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralUnlimitedNatural#The query isComputable() is redefined to be true.result = (true)<p>From package UML::Values.</p>
@21475#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#LiteralUnlimitedNatural#The query unlimitedValue() gives the value.result = (value)<p>From package UML::Values.</p>
@21476#E:/FinalProject Repos/repos\juancadavid\papyrus\tests\framework\org.eclipse.papyrus.tests.framework\model/UML.ecore#documentation#TimeConstraint#A TimeConstraint has one constrainedElement.constrainedElement->size() = 1
@21477#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#derivation#Aspect#let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
@21478#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#uniqueTypes#StructuralView#self.types->isUnique(name)
@21479#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#uniqueTypes$message#StructuralView#'There may be only one type of the same type'
@21480#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#noTwoClassesWithSameName#StructuralView#self.classes->isUnique(name)
@21481#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#noTwoClassesWithSameName$message#StructuralView#'Name of a class has to be unique'
@21482#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#notSelfSuperType#Class#not self.superTypes->includes(self)
@21483#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#notSelfSuperType$message#Class#'A class may not be it\'s own supertype'
@21484#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#uniqueName#AssociationEnd#self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
@21485#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#uniqueName$message#AssociationEnd#'AssociationEnds of a class must be unique'
@21486#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#AssociationEnd#self.assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass
@21487#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validName#NamedElement#if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
@21488#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validName$message#NamedElement#'Name of RAM elements may not be empty'
@21489#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#aspectCannotMapSelf#Instantiation#not (self.externalAspect = self.Aspect)
@21490#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#aspectCannotMapSelf$message#Instantiation#'Aspect may not depend on itself'
@21491#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#mandatoryAspectParametersMapped#Instantiation#if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
@21492#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#mandatoryAspectParametersMapped$message#Instantiation#'Partial elements from lower-level aspects have to be mapped'
@21493#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validSourceModelElement#Mapping#self.fromElement.oclIsTypeOf(Class) or self.fromElement.oclIsTypeOf(Operation)
@21494#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validSourceModelElement$message#Mapping#'The source model element may only be of type Class or Operation'
@21495#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#sameTypesMapped#Mapping#self.toElements->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.fromElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.fromElement.oclType()) endif)
@21496#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#sameTypesMapped$message#Mapping#'Mapping must be between same types of elements'
@21497#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validMapping#Mapping#let clazz : Class = if fromElement.oclIsTypeOf(Operation) then fromElement.oclAsType(Operation).Classifier else fromElement endif in self.Instantiation.externalAspect.structuralView.classes->includes(clazz) and self.toElements->forAll(element : MappableElement | let clazz : Class = if element.oclIsTypeOf(Operation) then element.oclAsType(Operation).Classifier else element endif in if clazz.oclIsKindOf(PrimitiveType) then self.Instantiation.Aspect.structuralView.types->includes(clazz) else self.Instantiation.Aspect.structuralView.classes->includes(clazz) endif)
@21498#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validMapping$message#Mapping#'Source must be from depending aspect and targets must be from current aspect'
@21499#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#messageViewDefined#Operation#if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.StructuralView.Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
@21500#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#messageViewDefined$message#Operation#'MessageView missing for public operation'
@21501#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#notVoid#Parameter#not self.type.oclIsTypeOf(RVoid)
@21502#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#notVoid$message#Parameter#'The type of the parameter may not be void'
@21503#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RVoid#'void'
@21504#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RBoolean#'boolean'
@21505#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RBoolean#'java.lang.Boolean'
@21506#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RInt#'int'
@21507#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RInt#'java.lang.Integer'
@21508#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RChar#'char'
@21509#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RChar#'java.lang.Character'
@21510#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RString#'String'
@21511#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RString#'java.lang.String'
@21512#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RAny#'*'
@21513#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#specifiesIsFirstMessage#MessageView#if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
@21514#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#specifiesIsFirstMessage$message#MessageView#'The first message in the MessageView must match specifies of the MessageView'
@21515#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#specificationDefined#MessageView#if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
@21516#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#specificationDefined$message#MessageView#'A MessageView for a non-partial operation must have a specification'
@21517#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#isAffectedBy#MessageView#if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
@21518#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#isAffectedBy$message#MessageView#'An empty MessageView must have at least one affectedBy'
@21519#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#isAffectedBy#MessageViewReference#self.affectedBy->size() > 0
@21520#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#isAffectedBy$message#MessageViewReference#'The MessageViewReference must have at least one affectedBy'
@21521#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#notAffectedBySelf#AspectMessageView#not self.affectedBy->includes(self)
@21522#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#notAffectedBySelf$message#AspectMessageView#'Message View may not be affected by itself'
@21523#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validSelfMessage#Message#if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then if self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) then self.interaction.fragments->indexOf(self.sendEvent) < self.interaction.fragments->indexOf(self.receiveEvent) else true endif else true endif
@21524#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validSelfMessage$message#Message#'receiveEvent of a self message may not come before the sendEvent'
@21525#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#argumentsSpecified#Message#if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
@21526#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#argumentsSpecified$message#Message#'All arguments of the operation must be specified'
@21527#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#createMessageIsFirst#Message#if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
@21528#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#createMessageIsFirst$message#Message#'The create message occurrence may not come after any other occurrence on this lifeline'
@21529#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#returnsSpecified#Message#if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
@21530#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#returnsSpecified$message#Message#'Reply message must have returns specified if return type is not void'
@21531#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#boundariesNotCrossed#Message#let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
@21532#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#boundariesNotCrossed$message#Message#'Messages may not cross boundaries of CombinedFragments or their operands'
@21533#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validReturns#Message#if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
@21534#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validReturns$message#Message#'Returns may only be specified if message sort is reply message'
@21535#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validAssignTo#Message#if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
@21536#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validAssignTo$message#Message#'Return type of signature operation must match the type of assignTo'
@21537#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#deleteMessageIsLast#Message#if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
@21538#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#deleteMessageIsLast$message#Message#'The destruction occurrence may not come before any other occurrence on this lifeline'
@21539#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validReturnsValue#Message#if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
@21540#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validReturnsValue$message#Message#'Type of return value must match the type of the return'
@21541#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#assignToAllowed#Message#if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
@21542#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#assignToAllowed$message#Message#'assignTo may not be specified for operations whose return type is void'
@21543#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#noCrossingMessages#Message#if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
@21544#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#noCrossingMessages$message#Message#'Messages may not cross each other, MessageEnds of one message must come one after the other (also, send must come before receive)'
@21545#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validSignature#Message#if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
@21546#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validSignature$message#Message#'Message signature must be an operation of the classifier that is represented by the lifeline of the receive event'
@21547#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#derivation#Message#if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
@21548#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validCoveredMultiplicity#InteractionFragment#if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
@21549#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validCoveredMultiplicity$message#InteractionFragment#'InteractionFragment may only have one Lifeline it covers (except CombinedFragment)'
@21550#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validOperands#CombinedFragment#if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
@21551#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validOperands$message#CombinedFragment#'opt and loop fragments may only have one operand'
@21552#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validParameterValue#ParameterValueMapping#if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
@21553#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validParameterValue$message#ParameterValueMapping#'Type of value must match the type of the parameter'
@21554#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validValueType#ParameterValue#self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
@21555#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validValueType$message#ParameterValue#'Type of value must match the type of the parameter'
@21556#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#body#RCollection#let partial : String = if type.oclIsTypeOf(Class) and type.oclAsType(Class).partial or type.oclIsTypeOf(Operation) and type.oclAsType(Operation).partial then '|' else '' endif in let name : String = self.oclType().name.substring(2, self.oclType().name.size()) in if type.name.oclIsUndefined() then name else name + '<' + partial + type.name + '>' endif
@21557#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validUpperBound#Property#self.upperBound > 0 or self.upperBound = - 1
@21558#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validUpperBound$message#Property#'The upperbound must be greater than zero or -1 representing *'
@21559#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validLowerBound#Property#self.lowerBound >= 0
@21560#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validLowerBound$message#Property#'The lowerbound must be greater than or equal to zero'
@21561#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validMultiplicity#Property#self.lowerBound <= self.upperBound or self.upperBound = - 1
@21562#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\aoUrnToRamWorkspace\aoUrnToRam\metamodel/RAM.ecore#validMultiplicity$message#Property#'The lowerBound must be less than or equal to the upperBound'
@21563#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#derivation#Aspect#let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
@21564#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#uniqueTypes#StructuralView#self.types->isUnique(name)
@21565#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#uniqueTypes$message#StructuralView#'There may be only one type of the same type'
@21566#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#noTwoClassesWithSameName#StructuralView#self.classes->isUnique(name)
@21567#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#noTwoClassesWithSameName$message#StructuralView#'Name of a class has to be unique'
@21568#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#notSelfSuperType#Class#not self.superTypes->includes(self)
@21569#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#notSelfSuperType$message#Class#'A class may not be it\'s own supertype'
@21570#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#uniqueName#AssociationEnd#self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
@21571#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#uniqueName$message#AssociationEnd#'AssociationEnds of a class must be unique'
@21572#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#AssociationEnd#self.assoc.ends->select(end : AssociationEnd | end <> self)->at(1).myClass
@21573#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validName#NamedElement#if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
@21574#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validName$message#NamedElement#'Name of RAM elements may not be empty'
@21575#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#aspectCannotMapSelf#Instantiation#not (self.externalAspect = self.Aspect)
@21576#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#aspectCannotMapSelf$message#Instantiation#'Aspect may not depend on itself'
@21577#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#mandatoryAspectParametersMapped#Instantiation#if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
@21578#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#mandatoryAspectParametersMapped$message#Instantiation#'Partial elements from lower-level aspects have to be mapped'
@21579#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#Mapping#null
@21580#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#Mapping#null
@21581#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#messageViewDefined#Operation#if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.oclContainer().oclAsType(StructuralView).Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
@21582#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#messageViewDefined$message#Operation#'MessageView missing for public operation'
@21583#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#notVoid#Parameter#not self.type.oclIsTypeOf(RVoid)
@21584#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#notVoid$message#Parameter#'The type of the parameter may not be void'
@21585#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RVoid#'void'
@21586#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RBoolean#'boolean'
@21587#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RBoolean#'java.lang.Boolean'
@21588#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RInt#'int'
@21589#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RInt#'java.lang.Integer'
@21590#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RChar#'char'
@21591#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RChar#'java.lang.Character'
@21592#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RString#'String'
@21593#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RString#'java.lang.String'
@21594#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RAny#'*'
@21595#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#specifiesIsFirstMessage#MessageView#if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
@21596#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#specifiesIsFirstMessage$message#MessageView#'The first message in the MessageView must match specifies of the MessageView'
@21597#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#specificationDefined#MessageView#if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
@21598#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#specificationDefined$message#MessageView#'A MessageView for a non-partial operation must have a specification'
@21599#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#isAffectedBy#MessageView#if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
@21600#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#isAffectedBy$message#MessageView#'An empty MessageView must have at least one affectedBy'
@21601#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#isAffectedBy#MessageViewReference#self.affectedBy->size() > 0
@21602#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#isAffectedBy$message#MessageViewReference#'The MessageViewReference must have at least one affectedBy'
@21603#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#notAffectedBySelf#AspectMessageView#not self.affectedBy->includes(self)
@21604#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#notAffectedBySelf$message#AspectMessageView#'Message View may not be affected by itself'
@21605#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validSelfMessage#Message#if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let sendEvent : InteractionFragment = self.sendEvent.oclAsType(InteractionFragment) in let receiveEvent : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in if sendEvent.covered->asOrderedSet()->at(1) = receiveEvent.covered->asOrderedSet()->at(1) then sendEvent.container.fragments->indexOf(self.sendEvent) < receiveEvent.container.fragments->indexOf(self.receiveEvent) else true endif else true endif
@21606#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validSelfMessage$message#Message#'receiveEvent of a self message may not come before the sendEvent'
@21607#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#argumentsSpecified#Message#if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
@21608#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#argumentsSpecified$message#Message#'All arguments of the operation must be specified'
@21609#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#createMessageIsFirst#Message#if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
@21610#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#createMessageIsFirst$message#Message#'The create message occurrence may not come after any other occurrence on this lifeline'
@21611#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#returnsSpecified#Message#if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
@21612#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#returnsSpecified$message#Message#'Reply message must have returns specified if return type is not void'
@21613#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#boundariesNotCrossed#Message#let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
@21614#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#boundariesNotCrossed$message#Message#'Messages may not cross boundaries of CombinedFragments or their operands'
@21615#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validReturns#Message#if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
@21616#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validReturns$message#Message#'Returns may only be specified if message sort is reply message'
@21617#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validAssignTo#Message#if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
@21618#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validAssignTo$message#Message#'Return type of signature operation must match the type of assignTo'
@21619#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#deleteMessageIsLast#Message#if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
@21620#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#deleteMessageIsLast$message#Message#'The destruction occurrence may not come before any other occurrence on this lifeline'
@21621#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validReturnsValue#Message#if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
@21622#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validReturnsValue$message#Message#'Type of return value must match the type of the return'
@21623#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#assignToAllowed#Message#if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
@21624#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#assignToAllowed$message#Message#'assignTo may not be specified for operations whose return type is void'
@21625#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#noCrossingMessages#Message#if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
@21626#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#noCrossingMessages$message#Message#'Messages may not cross each other, MessageEnds of one message must come one after the other (also, send must come before receive)'
@21627#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validSignature#Message#if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
@21628#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validSignature$message#Message#'Message signature must be an operation of the classifier that is represented by the lifeline of the receive event'
@21629#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#derivation#Message#if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
@21630#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validCoveredMultiplicity#InteractionFragment#if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
@21631#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validCoveredMultiplicity$message#InteractionFragment#'InteractionFragment may only have one Lifeline it covers (except CombinedFragment)'
@21632#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validOperands#CombinedFragment#if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
@21633#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validOperands$message#CombinedFragment#'opt and loop fragments may only have one operand'
@21634#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validParameterValue#ParameterValueMapping#if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
@21635#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validParameterValue$message#ParameterValueMapping#'Type of value must match the type of the parameter'
@21636#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validValueType#ParameterValue#self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
@21637#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validValueType$message#ParameterValue#'Type of value must match the type of the parameter'
@21638#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RCollection#let partial : String = if type.oclIsTypeOf(Class) and type.oclAsType(Class).partial or type.oclIsTypeOf(Operation) and type.oclAsType(Operation).partial then '|' else '' endif in let typeName : String = self.oclType().toString() in let name : String = typeName.substring(typeName.lastIndexOf(':') + 1, typeName.size()) in if type.name.oclIsUndefined() then name else name + '<' + partial + type.name + '>' endif
@21639#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validUpperBound#Property#self.upperBound > 0 or self.upperBound = -1
@21640#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validUpperBound$message#Property#'The upperbound must be greater than zero or -1 representing *'
@21641#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validLowerBound#Property#self.lowerBound >= 0
@21642#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validLowerBound$message#Property#'The lowerbound must be greater than or equal to zero'
@21643#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validMultiplicity#Property#self.lowerBound <= self.upperBound or self.upperBound = -1
@21644#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#validMultiplicity$message#Property#'The lowerBound must be less than or equal to the upperBound'
@21645#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RDouble#'double'
@21646#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RDouble#'java.lang.Double'
@21647#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RFloat#'float'
@21648#E:/FinalProject Repos/repos\JUCM-NAV\projetseg\jAoUrnToRam\metamodel\ram/RAM.ecore#body#RFloat#'java.lang.Float'
@21649#E:/FinalProject Repos/repos\julienlecuyer\SIG\model/sig.ecore#nomVilleUnique#Monde#self.villes->forAll(v1, v2:Ville | v1<>v2 implies v1.nom <> v2.nom)
@21650#E:/FinalProject Repos/repos\julienlecuyer\SIG\model/sig.ecore#NombreBatiments#Personne#self.batiments->selectByType(Etude)->size() <= 1and self.batiments->selectByType(Travail)->size() <= 1 and self.batiments->selectByType(Soins)->size() <= 2
@21651#E:/FinalProject Repos/repos\julienlecuyer\SIG\model/sig.ecore#EtudeOuTravail#Personne#self.batiments->forAll(b1, b2:Batiment | ((b1.oclIsTypeOf(Travail) or b1.oclIsTypeOf(Etude) = false)  and ( b2.oclIsTypeOf(Travail) or b2.oclIsTypeOf(Etude) = false ))  or  ((b1.oclIsTypeOf(Etude) or b1.oclIsTypeOf(Etude) = false)  and (b2.oclIsTypeOf(Etude) or b2.oclIsTypeOf(Travail) = false )))
@21746#E:/FinalProject Repos/repos\Kogoro\RequirementsEditor\de.tubs.cs.isf.reqeditor\model/requirementsEditor.ecore#uniqueGId#RequirementsGroup#RequirementsGroup.allInstances() -> forAll(b1,b2 | b1 <> b2 implies b1.id <> b2.id)
@21747#E:/FinalProject Repos/repos\Kogoro\RequirementsEditor\de.tubs.cs.isf.reqeditor\model/requirementsEditor.ecore#uniqueId#Requirement#Requirement.allInstances() -> exists(b1,b2 | b1 <> b2 and b1.id = b2.id)=false
@21748#E:/FinalProject Repos/repos\kopl\SPLevo\JaMoPPCartridge\org.splevo.jamopp.vpm\model/jamopp.vpm.ecore#body#JaMoPPJavaSoftwareElement#return org.splevo.jamopp.util.JaMoPPElementUtil.getLabel(resolveJaMoPPElement());
@21749#E:/FinalProject Repos/repos\kopl\SPLevo\JaMoPPCartridge\org.splevo.jamopp.vpm\model/jamopp.vpm.ecore#body#JaMoPPJavaSoftwareElement#return org.splevo.jamopp.util.JaMoPPElementUtil.getName(resolveJaMoPPElement());
@21750#E:/FinalProject Repos/repos\kopl\SPLevo\JaMoPPCartridge\org.splevo.jamopp.vpm\model/jamopp.vpm.ecore#body#JaMoPPJavaSoftwareElement#return resolveJaMoPPElement();
@21751#E:/FinalProject Repos/repos\kopl\SPLevo\JaMoPPCartridge\org.splevo.jamopp.vpm\model/jamopp.vpm.ecore#body#JaMoPPJavaSoftwareElement#return org.splevo.jamopp.util.JaMoPPElementUtil.getFullyQualifiedName(resolveJaMoPPElement());
@21752#E:/FinalProject Repos/repos\kopl\SPLevo\Releng\org.splevo.docs\model/splevo-models.ecore#SufficientReferences#Match#leading <> null or integration <> null
@21753#E:/FinalProject Repos/repos\kopl\SPLevo\UI\org.splevo.project\model/project.ecore#body#SPLevoProject#VPMModelReference reference = ProjectFactory.eINSTANCE.createVPMModelReference();reference.setPath(path);reference.setRefactoringStarted(refactoringStarted);getVpmModelReferences().add(reference);
@21754#E:/FinalProject Repos/repos\ksmallros\pax-control\de.tu_bs.cs.isf.mbse.paxcontrol\model/paxcontrol.ecore#oneFlowInPorts#BehaviorNode#self.flowInPort <> null
@21755#E:/FinalProject Repos/repos\ksmallros\pax-control\de.tu_bs.cs.isf.mbse.paxcontrol\model/paxcontrol.ecore#minFlowOutPorts#BranchingNode#self.flowOutPorts->size() > 1
@21756#E:/FinalProject Repos/repos\ksmallros\pax-control\de.tu_bs.cs.isf.mbse.paxcontrol\model/paxcontrol.ecore#noDataOutPorts#BranchingNode#self.dataOutPorts->size() = 0
@21757#E:/FinalProject Repos/repos\ksmallros\pax-control\de.tu_bs.cs.isf.mbse.paxcontrol\model/paxcontrol.ecore#noFlowInPort#EventNode#self.flowInPort = null
@21758#E:/FinalProject Repos/repos\ksmallros\pax-control\de.tu_bs.cs.isf.mbse.paxcontrol\model/paxcontrol.ecore#maxFlowOutPorts#EventNode#self.flowOutPorts->size() <= 1
@21759#E:/FinalProject Repos/repos\ksza\Bicycle-Shop\com.itu.mdd.nowheretravel.model\ex_class_8\ecore_with_ocl/travel.ecore#noIngoingConnection#Start#ingoingConnections->size()=0
@21760#E:/FinalProject Repos/repos\ksza\Bicycle-Shop\com.itu.mdd.nowheretravel.model\ex_class_8\ecore_with_ocl/travel.ecore#noOtgoingConnection#End#outgoingConnections->size()=0
@21761#E:/FinalProject Repos/repos\ksza\Bicycle-Shop\com.itu.mdd.nowheretravel.model\ex_class_8\ecore_with_ocl/travel.ecore#linkedConnections#Item#outgoingConnections->size()>0 and ingoingConnections->size()>0
@21762#E:/FinalProject Repos/repos\ksza\Bicycle-Shop\com.itu.mdd.nowheretravel.model\ex_class_8\ecore_with_ocl/travel.ecore#followedByCarInsurance#CarRental#outgoingConnections->select(targetNode.oclIsTypeOf(Insurance) and (targetNode.oclAsType(Insurance).type= InsuranceType::CarInsurance))->size()>0
@21809#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#NeedIdWhenNoSuperType#Entity#if self.superType -> isEmpty() then self.id -> notEmpty() else self.id -> isEmpty() endif
@21810#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#IdIsMandatory#Entity#if self.id -> notEmpty() then self.id.mandatory = true else true endif
@21811#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#SuperTypeIsNotSelf#Entity#self.superType <> self
@21812#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#ifEnumerationThenAttributeTypeMustBeNone#Attribute#if self.enumerationType -> isEmpty() then self.type <> forms::entityModeling::AttributeType::None else self.type = forms::entityModeling::AttributeType::None endif
@21813#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#lowerBoundUpperBoundConstraints#Relationship#self.lowerBound >= 0 and (self.upperBound >= self.lowerBound or self.upperBound = -1) 
@21814#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#checkAttributePageElement#Form#self.pages.pageElements -> select(e: PageElement | e.oclIsKindOf(AttributePageElement)) -> forAll(e1|if self.entity.superType -> isEmpty() then self.entity.id -> union(self.entity.attributes) -> includes(e1.oclAsType(AttributePageElement).attributeToEnterValues) else if self.entity.superType.attributes -> isEmpty() then self.entity.id -> union(self.entity.attributes) -> including(self.entity.superType.id) -> includes(e1.oclAsType(AttributePageElement).attributeToEnterValues) else self.entity.id -> union(self.entity.attributes) -> including(self.entity.superType.id) -> union(self.entity.superType.attributes) -> includes(e1.oclAsType(AttributePageElement).attributeToEnterValues)endifendif )
@21815#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#editingFormEntityAndRelationshipEntityMustBeTheSame#RelationshipPageElement#self.relationshipToEnterValues.target = self.editingForm.entity
@21816#E:/FinalProject Repos/repos\kuhbaar\modeleng\ModelEng_lab1\model/forms.ecore#onlyAttributesBooleanOrEnum#SelectionField#self.valueOfAttribute = forms::entityModeling::AttributeType::_'Boolean' or self.valueOfAttribute = forms::entityModeling::AttributeType::None
@21817#E:/FinalProject Repos/repos\latacita\unicaneer2sql\Software\es.unican.moses.sle.db.eer2sql\model/EERmodel.ecore#PrimaryKeysOCL#Entity#self.isSpecializedBy -> size() = 0 and self.specializes -> size() = 0   implies  self.primaryKey -> size() = 1
@21818#E:/FinalProject Repos/repos\latacita\unicaneer2sql\Software\es.unican.moses.sle.db.eer2sql\model/EERmodel.ecore#SourceTarget#Exclusive#self.target <> self.source
@21819#E:/FinalProject Repos/repos\latacita\unicaneer2sql\Software\es.unican.moses.sle.db.eer2sql\model/EERmodel.ecore#SourceTarget#Inclusiveness#self.target <> self.source
@21820#E:/FinalProject Repos/repos\latacita\unicaneer2sql\Software\es.unican.moses.sle.db.eer2sql\model/EERmodel.ecore#SourceTarget#Exclusion#self.target <> self.source
@21821#E:/FinalProject Repos/repos\latacita\unicaneer2sql\Software\es.unican.moses.sle.db.eer2sql\model/EERmodel.ecore#SourceTarget#Inclusion#self.target <> self.source
@22021#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testContactAdresse#Contact#adresse <> null
@22022#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testContactAdresse2#Contact#adresse = 'rue des facs'
@22023#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testContactNom#Contact#nom = 'Marrec'
@22024#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testContactPrenom#Contact#prenom = 'Cedric'
@22025#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testContactTel#Contact#telephone = '0606060606'
@22026#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#tailleMinimum#Photo#taille>=0.1
@22027#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testPhotoDoubleExiste#Photo#Photo.allInstances()->forAll(p1, p2 | p1 <> p2 implies p1.nom <> p2.nom )
@22028#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testCouleurFond#ConfigurationPage#couleurFond = 'White'
@22029#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testCouleurPolice#ConfigurationPage#couleurPolice = 'Black'
@22030#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testTitre#ConfigurationPage#titreSite='SiteWeb'
@22031#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testAuteurs#ConfigurationPage#auteurs= 'Socrate'
@22032#E:/FinalProject Repos/repos\M2TIIL2016-2017\SiteWeb\siteWeb\model/siteWeb.ecore#testTaillePolice#ConfigurationPage#taillePolice=14
@22045#E:/FinalProject Repos/repos\M2TiiLEnvDev\TuringProject\model/projetTuring.ecore#diffSymbole#Symbole#Symbole.allInstances() -> forAll(s1, s2 | s1 <> s2 implies s1.caractere <> s2.caractere)
@22046#E:/FinalProject Repos/repos\M2TiiLEnvDev\TuringProject\model/projetTuring.ecore#diffEtat#Etat#Etat.allInstances() -> forAll(s1, s2 | s1 <> s2 implies s1.nom <> s2.nom)
@22047#E:/FinalProject Repos/repos\makxan\Quizz\Workspace\Quizz\models/quizz.ecore#isNotUniqueQuestion#Quizz#questions->isUnique(id)
@22048#E:/FinalProject Repos/repos\makxan\Quizz\Workspace\Quizz\models/quizz.ecore#noPathToEndpoint#Quizz#questions->select((next = end))->size() > 0
@22049#E:/FinalProject Repos/repos\makxan\Quizz\Workspace\Quizz\models/quizz.ecore#noRightAnswer#MultipleChoice#answers->select((correct = true))->size() > 0
@22050#E:/FinalProject Repos/repos\makxan\Quizz\Workspace\Quizz\models/quizz.ecore#isNotUniqueAnswer#MultipleChoice#answers->isUnique(id)
@22051#E:/FinalProject Repos/repos\marchalvincent\knomarcar\model/metaModel.ecore#StateUidUnique#StateMachine#self.states->collect(s : State | s.uid)->isUnique(n : Integer | n)
@22052#E:/FinalProject Repos/repos\marchalvincent\knomarcar\model/metaModel.ecore#StateTransitionDestination#StateMachine# states->select(s : State | s.transitions->select(t: Transition | t.dstId = s)->notEmpty())->size() = 0
@22053#E:/FinalProject Repos/repos\marchalvincent\knomarcar\model/metaModel.ecore#TransitionsUniqueName#State#transitions->collect(t : Transition | t.nameIn)->isUnique(n : String | n)
@22054#E:/FinalProject Repos/repos\martin-fleck\momot\examples\tse\at.ac.tuwien.big.momot.examples.tse.modularization\model/Modularization.ecore#notEmpty#Module#rules->notEmpty() or helpers->notEmpty()
@22704#E:/FinalProject Repos/repos\Mashashi\jaexcel\pt.iul.iscte.dcti.pa.jaxelmodel\model/jaxel.ecore#NumberOfRowsEqualOrGreaterThanZero#Sheet#self.numberOfRows >= 0
@22705#E:/FinalProject Repos/repos\Mashashi\jaexcel\pt.iul.iscte.dcti.pa.jaxelmodel\model/jaxel.ecore#NumberOfColumnsEqualOrGreaterThanZero#Sheet#self.numberOfColumns >= 0
@22706#E:/FinalProject Repos/repos\Mashashi\jaexcel\pt.iul.iscte.dcti.pa.jaxelmodel\model/jaxel.ecore#NumberOfRowsEqualOrSmallerToTheIndicated#Sheet#self.row_sheet->size() <= self.numberOfRows
@22707#E:/FinalProject Repos/repos\Mashashi\jaexcel\pt.iul.iscte.dcti.pa.jaxelmodel\model/jaxel.ecore#NumberOfColumnsEqualOrSmallerToTheIndicated#Sheet#self.row_sheet.columns->forAll(map : EIntegerObjectToCellColumnMap | map.key <= numberOfColumns)
@22708#E:/FinalProject Repos/repos\Mashashi\jaexcel\pt.iul.iscte.dcti.pa.jaxelmodel\model/jaxel.ecore#body#Row#return "Number of filled columns: "+columns.size();
@22729#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#IdentityUnique#Category#Category.allInstances()->isUnique(scheme + term)
@22730#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#SchemeEndsWithSharp#Category#scheme.substring(scheme.size(),scheme.size()) = '#'
@22731#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AttributesNameUnique#Category#attributes->isUnique(name)
@22732#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#ActionTermUnicity#Kind#actions->isUnique(term)
@22733#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#CorrectScheme#Kind#scheme = self.oclContainer().oclAsType(Extension).scheme
@22734#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#NoCyclicInheritance#Kind#parent->closure(parent)->excludes(self)
@22735#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#EntityKindIsRootParent#Kind#self->closure(parent)->exists(k | k.term = 'entity' and k.scheme = 'http://schemas.ogf.org/occi/core#' and k.parent = null)
@22736#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AttributesNameNotAlreadyDefinedInParent#Kind#attributes.name->excludesAll(parent->closure(parent).attributes.name)
@22737#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#derivation#Kind#Entity.allInstances()->select(kind = self)
@22738#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#CorrectScheme#Action#let category = oclContainer().oclAsType(Category) in scheme = category.scheme.substring(1,category.scheme.size()-1) + '/' + category.term + '/action#'
@22739#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#ActionTermUnicity#Mixin#actions->isUnique(term)
@22740#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#CorrectScheme#Mixin#let ownerScheme = self.oclContainer().oclAsType(Extension).scheme in scheme.substring(1,ownerScheme.size()-1) = ownerScheme.substring(1,ownerScheme.size()-1)
@22741#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#NoCyclicInheritance#Mixin#depends->closure(depends)->excludes(self)
@22742#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AttributesNameNotAlreadyDefinedInDepends#Mixin#attributes.name->excludesAll(depends->closure(depends).attributes.name)
@22743#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#derivation#Mixin#Entity.allInstances()->select(mixins->includes(self))
@22744#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#IdUnique#Entity#Entity.allInstances()->isUnique(id)
@22745#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AttributesNameUnique#Entity#attributes->isUnique(name)
@22746#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#KindCompatibleWithOneAppliesOfEachMixin#Entity#mixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
@22747#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#ResourceKindIsInParent#Resource#kind->closure(parent)->exists(k | k.term = 'resource' and k.scheme = 'http://schemas.ogf.org/occi/core#')
@22748#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#LinkKindIsInParent#Link#kind->closure(parent)->exists(k | k.term = 'link' and k.scheme = 'http://schemas.ogf.org/occi/core#')
@22749#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#SchemeUnique#Extension#Extension.allInstances()->isUnique(scheme)
@22750#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#KindsSchemeValid#Extension#kinds->forAll(k | k.scheme = self.scheme)
@22751#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#MixinsSchemeValid#Extension#mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))
@22752#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#TermUnicity#Extension#kinds.term->intersection(mixins.term)->isEmpty()
@22753#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#KindParentLocalOrImported#Extension#kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer() in parentExtension = self or import->includes(parentExtension))
@22754#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#MixinDependsLocalOrImported#Extension#mixins.depends->forAll(let extension = oclContainer() in extension = self or import->includes(extension))
@22755#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#MixinAppliesLocalOrImported#Extension#mixins.applies->forAll(let extension = oclContainer() in extension = self or import->includes(extension))
@22756#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AllResourcesKindsInUse#Configuration#use->includesAll(resources.kind.oclContainer())
@22757#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AllResourcesMixinsInUse#Configuration#use->includesAll(resources.mixins.oclContainer())
@22758#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AllResourcesLinksKindsInUse#Configuration#use->includesAll(resources.links.kind.oclContainer())
@22759#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AllResourcesLinksMixinsInUse#Configuration#use->includesAll(resources.links.mixins.oclContainer())
@22760#E:/FinalProject Repos/repos\maxleiko\occi-kmf-demo\occi/occi.ecore#AllResourcesLinksTargetsInConfiguration#Configuration#resources.links.target->forAll(r | r.oclContainer() = self)
@26415#E:/FinalProject Repos/repos\Mialus\M1\SAMP\eclipseModeling\SAMPTP4/My.ecore#C1#Departement#self.employees->size() >= self.projects->size()
@26416#E:/FinalProject Repos/repos\Mialus\M1\SAMP\eclipseModeling\SAMPTP4/My.ecore#C2#Departement#self.projects->collect(p : Project | p.budget)->sum() <= self.budget
@26417#E:/FinalProject Repos/repos\Mialus\M1\SAMP\eclipseModeling\SAMPTP4/My.ecore#C3#Project#self.departement.employees->includesAll(self.employees)
@26418#E:/FinalProject Repos/repos\Mialus\M1\SAMP\eclipseModeling\tp5\sampModel/My.ecore#returnIsLast#Instruction#not(segmentation->excluding(segmentation->last())->exists(e | e.oclIsTypeOf(Return)))
@26423#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#UniqueCRUDVerbs#Resource#self.hasCRUDActivity->isUnique(CRUDVerb)
@26424#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#UniqueInputMediaTypes#Resource#self.hasInputRepresentation->isUnique(MediaType)
@26425#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#UniqueOutputMediaTypes#Resource#self.hasOutputRepresentation->isUnique(MediaType)
@26426#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#UniqueNamingProperty#Resource#self.hasProperty->notEmpty() implies self.hasProperty->one(isNamingProperty = true)
@26427#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#AlgoResHaveNoProperties#Resource#(self.isAlgorithmic = true) implies self.hasProperty->isEmpty()
@26428#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#CRUDResHaveAtLeastOneProperty#Resource#(self.isAlgorithmic = false) implies self.hasProperty->notEmpty()
@26429#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#documentation#RESTfulServiceCIM#OCL constraints
@26430#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/CIMMetamodel.ecore#UniqueResourceNames#RESTfulServiceCIM#self.hasResources->isUnique(name)
@26431#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#existantSettersForAllProperties#AlgoResourceModel#self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))
@26432#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#existantGettersForAllProperties#AlgoResourceModel#self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))
@26433#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueLinklistProperty#AlgoResourceModel#self.algoModelHasProperty->one(name = 'linklist')
@26434#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerNotAllowedCRUDVerbs#AlgoResourceController#self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()
@26435#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerHasUniqueCRUDActivity#AlgoResourceController#self.algoControllerHasCRUDActivity->size() = 1
@26436#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerActivityAddsHypermediaLinkToSelf#AlgoResourceController#((self.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesself.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Sibling' and hasTargetAlgoController = self))and(self.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Sibling' and hasTargetAlgoController = self)impliesself.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((self.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesself.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetAlgoController = self))and(self.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetAlgoController = self)impliesself.algoControllerHasCRUDActivity->exists(crudVerb = 1)))
@26437#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#existantSettersForAllProperties#ResourceModelManager#self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))
@26438#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#existantGettersForAllProperties#ResourceModelManager#self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))
@26439#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueLinklistProperty#ResourceModelManager#self.hasRMManagerProperty->one(name = 'linklist')
@26440#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueNamingProperty#ResourceModel#self.rModelHasProperty->one(isNamingProperty = true)
@26441#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniquePrimaryIdentifier#ResourceModel#self.rModelHasProperty->one(isPrimaryIdentifier = true)
@26442#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#existantSettersForAllProperties#ResourceModel#self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))
@26443#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#existantGettersForAllProperties#ResourceModel#self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))
@26444#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueLinklistProperty#ResourceModel#self.rModelHasProperty->one(name = 'linklist')
@26445#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerHasUniqueCREATEActivity#ResourceControllerManager#self.rCManagerHasCRUDActivity->one(crudVerb = 0)
@26446#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerHasUniqueREADActivity#ResourceControllerManager#self.rCManagerHasCRUDActivity->one(crudVerb = 1)
@26447#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerNotAllowedCRUDActivityVerbs#ResourceControllerManager#self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()
@26448#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsCreateHypermediaLinkToSelf#ResourceControllerManager#self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
@26449#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsCreateHypermediaLinkToSelf#ResourceControllerManager#self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')
@26450#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsReadHypermediaLinkToSelf#ResourceControllerManager#self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
@26451#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsReadHypermediaLinkToSelf#ResourceControllerManager#self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')
@26452#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerHasUniqueCRUDActivities#ResourceController#self.rControllerHasCRUDActivity->isUnique(crudVerb)
@26453#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerNotAllowedCRUDActivitiyVerbs#ResourceController#self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()
@26454#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsReadHypermediaLinkToSelf#ResourceController#((self.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesself.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self))and(self.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)impliesself.rControllerHasCRUDActivity->exists(crudVerb = 1)))
@26455#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsUpdateHypermediaLinkToSelf#ResourceController#((self.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesself.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self))and(self.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)impliesself.rControllerHasCRUDActivity->exists(crudVerb = 2)))
@26456#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsUpdateHypermediaLinkToSelf#ResourceController#((self.rControllerHasCRUDActivity->exists(crudVerb = 2) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesself.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self))and(self.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)impliesself.rControllerHasCRUDActivity->exists(crudVerb = 2) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)))
@26457#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsDeleteHypermediaLinkToSelf#ResourceController#((self.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesself.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self))and(self.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)impliesself.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)))
@26458#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsReadHypermediaLinkToSelf#ResourceController#((self.rControllerHasCRUDActivity->exists(crudVerb = 1) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesself.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self))and(self.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)impliesself.rControllerHasCRUDActivity->exists(crudVerb = 1) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)))
@26459#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsDeleteHypermediaLinkToSelf#ResourceController#((self.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesself.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self))and(self.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)impliesself.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)))
@26460#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#primaryIdentifierMapsToPrimaryKey#PIMComponentProperty#(self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)
@26461#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniquePrimaryKey#RDBMSTable#self.hasRDBMSColumns->one(isPrimaryKey = true)
@26462#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#controllersHaveUniqueURIs#RESTfulServicePIM#self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})
@26463#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueResourceModels#RESTfulServicePIM#self.hasResourceModel->isUnique(name)
@26464#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueResourceModelManagers#RESTfulServicePIM#self.hasResourceModelManager->isUnique(name)
@26465#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueResourceAlgoModels#RESTfulServicePIM#self.hasAlgoResourceModel->isUnique(name)
@26466#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueResourceControllers#RESTfulServicePIM#self.hasResourceController->isUnique(name)
@26467#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueResourceControllerManagers#RESTfulServicePIM#self.hasResourceControllerManager->isUnique(name)
@26468#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueResourceAlgoControllers#RESTfulServicePIM#self.hasAlgoResourceController->isUnique(name)
@26469#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniquePIMComponentNames#RESTfulServicePIM#self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})
@26470#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#uniqueRModelRDBMSTableMapping#RESTfulServicePIM#self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name <> rModel2.name implies rModel1.isMappedToRDBMSTable.name <> rModel2.isMappedToRDBMSTable.name)
@26471#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#validDatabaseReferentialIntegrity#RESTfulServicePIM#self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))
@26472#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#correctlyMatchingRControllerCRUDActivitiesWithRDBMSActivities#RESTfulServicePIM#self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
@26473#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#correctlyMatchingRCManagerCRUDActivitiesWithRDBMSActivities#RESTfulServicePIM#self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))
@26474#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsReadHypermediaLinkToRRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26475#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsUpdateHypermediaLinkToRRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26476#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsDeleteHypermediaLinkToRRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
@26477#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsReadHypermediaLinkToRRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)implies  rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26478#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsUpdateHypermediaLinkToRRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26479#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsDeleteHypermediaLinkToRRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA | self.hasResourceController->forAll( rControllerA | ((rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)implies rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA))    and (rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)implies(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
@26480#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsReadHypermediaLinkToParentRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesrCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA))and(rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)implies(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26481#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsUpdateHypermediaLinkToParentRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesrCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA))and(rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)implies(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26482#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerCreateActivityAddsDeleteHypermediaLinkToParentRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)impliesrCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA))and(rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)implies(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
@26483#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsReadHypermediaLinkToParentRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesrCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA))and(rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)implies(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26484#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsUpdateHypermediaLinkToParentRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesrCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA))and(rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)implies(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26485#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rCManagerReadActivityAddsDeleteHypermediaLinkToParentRController#RESTfulServicePIM#self.hasResourceControllerManager->forAll(rCManagerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)impliesrCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA))and(rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)implies(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
@26486#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsCreateHypermediaLinkToRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)impliesrControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26487#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsReadHypermediaLinkToRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)impliesrControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26488#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsCreateHypermediaLinkToRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)impliesrControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26489#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsReadHypermediaLinkToRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)impliesrControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26490#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsCreateHypermediaLinkToParentRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)impliesrCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26491#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadActivityAddsReadHypermediaLinkToParentRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)impliesrCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1))))
@26492#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsCreateHypermediaLinkToParentRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)impliesrCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26493#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateActivityAddsReadHypermediaLinkToParentRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)impliesrCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2))))
@26494#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerDeleteActivityAddsCreateHypermediaLinkToParentRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)impliesrCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
@26495#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerDeleteActivityAddsReadHypermediaLinkToParentRCManager#RESTfulServicePIM#self.hasResourceController->forAll( rControllerA |self.hasResourceControllerManager->forAll( rCManagerA |(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)impliesrCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3))))
@26496#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerActivityAddsHypermediaLinkToRAlgoController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA, algoControllerB |((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1))))
@26497#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerAddsHypermediaLinkToParentAlgoController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA, algoControllerB |((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1))))
@26498#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerReadAddsHypermediaLinkToRAlgoController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)))))
@26499#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#rControllerUpdateAddsHypermediaLinkToRAlgoController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesrControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA))and(rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)))))
@26500#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerAddsReadHypermediaLinkToParentRController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)))))
@26501#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerAddsUpdateHypermediaLinkToParentRController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)))))
@26502#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PIMMetamodel.ecore#algoControllerAddsDeleteHypermediaLinkToParentRController#RESTfulServicePIM#self.hasAlgoResourceController->forAll(algoControllerA |self.hasResourceController->forAll(rControllerA |((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)))or((rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)impliesalgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA))and(algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)impliesrControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)))))
@26503#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#controllerURIPathAnnotation#JavaAlgoResourceController#self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
@26504#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#AlgoControllerHasUniqueProperHTTPActivity#JavaAlgoResourceController#(self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 3 or HTTPVerb = 2)->isEmpty() andself.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0 or HTTPVerb = 1)->size() = 1)
@26505#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#AlgoControllerActivitiesHaveJAXRSAnnotations#JavaAlgoResourceController#self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0 or HTTPVerb = 1)->forAll(HTTPActivity | (HTTPActivity.ActivityHTTPVerb = 0 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST') implies HTTPActivity.ActivityHTTPVerb = 0 )and(HTTPActivity.ActivityHTTPVerb = 1 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET') implies HTTPActivity.ActivityHTTPVerb = 1 )and HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + HTTPActivity.HTTPActivityURI + '")'))
@26506#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#algoControllerActivityAddsHypermediaLinkToSelf#JavaAlgoResourceController#((self.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 0)impliesself.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self))and(self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self)impliesself.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 0)))or((self.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self))and(self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self)impliesself.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@26507#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueXMLRootElementAnnotation#JavaAlgoResourceModel#self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
@26508#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueSetterForEveryProeprty#JavaAlgoResourceModel#self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
@26509#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueGetterForEveryProeprty#JavaAlgoResourceModel#self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
@26510#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueLinkListProperty#JavaAlgoResourceModel#self.JavaAlgoModelHasProperty->one(name = 'linklist') and self.JavaAlgoModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
@26511#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#controllerURIPathAnnotation#JavaResourceController#self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
@26512#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RControllerNotAllowedVerb#JavaResourceController#self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
@26513#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RControllerHasMinimumActivity#JavaResourceController#self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
@26514#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RControllerActivitiesHaveJAXRSAnnotations#JavaResourceController#self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1 or HTTPVerb = 2 or HTTPVerb = 3)->forAll(HTTPActivity | (HTTPActivity.ActivityHTTPVerb = 2 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@PUT')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@PUT') implies HTTPActivity.ActivityHTTPVerb = 2 )and(HTTPActivity.ActivityHTTPVerb = 1 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET') implies HTTPActivity.ActivityHTTPVerb = 1 )and(HTTPActivity.ActivityHTTPVerb = 3 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@DELETE')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@DELETE') implies HTTPActivity.ActivityHTTPVerb = 3)and HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + HTTPActivity.HTTPActivityURI + '")'))
@26515#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsGetHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@26516#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsPutHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)impliesself.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)))
@26517#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsPutHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@26518#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsDeleteHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@26519#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsGetHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)))
@26520#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsDeleteHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)))
@26521#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#controllerURIPathAnnotation#JavaResourceControllerManager#self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
@26522#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RCManagerNotAllowedHTTPActivityVerbs#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
@26523#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RCManagerActivitiesHaveJAXRSAnnotations#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0 or HTTPVerb = 1)->forAll(HTTPActivity | (HTTPActivity.ActivityHTTPVerb = 0 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST') implies HTTPActivity.ActivityHTTPVerb = 0 )and(HTTPActivity.ActivityHTTPVerb = 1 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET') implies HTTPActivity.ActivityHTTPVerb = 1 )and HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + HTTPActivity.HTTPActivityURI + '")'))
@26524#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#JRCManagerPostActivityAddsPostHypermediaLinkToSelf#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
@26525#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#JRCManagerGetActivityAddsPostHypermediaLinkToSelf#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
@26526#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#JRCManagerPostActivityAddsGetHypermediaLinkToSelf#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
@26527#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueXMLRootElementAnnotation#JavaResourceModel#self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
@26528#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueNamingProperty#JavaResourceModel#self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
@26529#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#neededRModelHibernateAnnotationsExist#JavaResourceModel#self.JavaRModelHasHibernateAnnotation->one('@Entity') and self.JavaRModelHasHibernateAnnotation->one('@Table(name="' + self.parentName + '")')
@26530#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniquePrimaryIdentifier#JavaResourceModel#self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
@26531#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueSetterForEveryProeprty#JavaResourceModel#self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
@26532#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueGetterForEveryProeprty#JavaResourceModel#self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
@26533#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueLinkListProperty#JavaResourceModel#self.JavaRModelHasProperty->one(name = 'linklist') and self.JavaRModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
@26534#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#properCollectionHibernateAnnotations#JavaResourceModel#let JRRModels : Sequence(JavaResourceModel) = self.hasRelatedJavaRMManager.hasRelatedJavaRModel inself.JavaRModelHasProperty->select((bIsUnique = false) and (name <> 'linklist'))->reject( Property | JRRModels->exists(JRRModel | 'SetOf' + JRRModel.name = Property.name))->forAll(CollectionProperty | CollectionProperty.PropertyHasHibernateAnnotation->one('@ElementCollection(fetch = FetchType.EAGER)')andCollectionProperty.PropertyHasHibernateAnnotation->one('@CollectionTable(name="' + self.parentName + CollectionProperty.name +'", joinColumns=@JoinColumn(name="' + self.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + '"))')andCollectionProperty.PropertyHasHibernateAnnotation->one('@ForeignKey(name = "fk_' + self.parentName + '_' + CollectionProperty.name + '")'))
@26535#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueXMLRootElementAnnotation#JavaResourceModelManager#self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
@26536#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueSetterForEveryProeprty#JavaResourceModelManager#self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
@26537#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueGetterForEveryProeprty#JavaResourceModelManager#self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
@26538#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#uniqueLinkListProperty#JavaResourceModelManager#self.JavaRMManagerHasProperty->one(name = 'linklist') and self.JavaRMManagerHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
@26539#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#primaryIdentifierHasProperAnnotations#PSMComponentProperty#((self.bIsPrimaryIdentifier  implies  ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) ) and ( ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) implies self.bIsPrimaryIdentifier ) )
@26540#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#allModelsHaveRResourcePropertiesWithProperHibernateAnnotations#ServicePSM#self.hasJavaRModel->forAll(JavaRModel | JavaRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->forAll(RelatedJavaRModel | JavaRModel.JavaRModelHasProperty->one(name = 'SetOf' + RelatedJavaRModel.name)andJavaRModel.JavaRModelHasProperty->select(name = 'SetOf' + RelatedJavaRModel.name)->forAll(JRModelProperty | JRModelProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@OneToMany(fetch = FetchType.EAGER, mappedBy="' + JavaRModel.parentName + '",orphanRemoval=true)')andJRModelProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@OnDelete(action=OnDeleteAction.CASCADE)'))))
@26541#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#allModelsHavePResourcePropertiesWithProperHibernateAnnotations#ServicePSM#self.hasJavaRModel->forAll(JavaRModel | self.hasJavaRModel->select(ParentJRModel | ParentJRModel.hasRelatedJavaRMManager->exists(JRMManager | JRMManager.hasRelatedJavaRModel = JavaRModel))->forAll(ParentJRModel | JavaRModel.JavaRModelHasProperty->one(name = ParentJRModel.parentName)andJavaRModel.JavaRModelHasProperty->forAll( Property |((Property.name = ParentJRModel.parentName)implies(Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ManyToOne(fetch = FetchType.EAGER)')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@JoinColumn(name="' + if JavaRModel = ParentJRModel then 'sourse' else '' endif + ParentJRModel.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + '")')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ForeignKey(name = "fk_' + ParentJRModel.parentName + '_' + JavaRModel.parentName + '")')))and((Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ManyToOne(fetch = FetchType.EAGER)')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@JoinColumn(name="' + if JavaRModel = ParentJRModel then 'sourse' else '' endif + ParentJRModel.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + '")')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ForeignKey(name = "fk_' + ParentJRModel.parentName + '_' + JavaRModel.parentName + '")'))implies(Property.name = ParentJRModel.parentName)))))
@26542#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rMPropertiesSettersHaveProperXMLTransientAnnotation#ServicePSM#let AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel inself.hasJavaRModel->forAll(JRModel | JRModel.JavaRModelHasSetter->select(SetterFunction | (JRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JRRModel | SetterFunction.name = 'setSetOf' + JRRModel.name))or(AllResourceModels->select(hasRelatedJavaRMManager->exists(hasRelatedJavaRModel = JRModel))->exists(ParentJRModel | SetterFunction.name = 'set' + ParentJRModel.parentName)))->forAll(SetterFunction | SetterFunction.SetterFunctionHasJAXBAnnotation->one('@XmlTransient')))
@26543#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rMPropertiesHaveColumnAnnotation#ServicePSM#self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
@26544#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RControllerUniqueHTTPVerbsPerParent#ServicePSM#let AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel inself.hasJavaRController->forAll(JRController | let numberOfParents : Integer = AllResourceModels->select(ParentRModel | ParentRModel.hasRelatedJavaRMManager->exists(JRMManager | JRController.hasAssociatedJavaRModel = JRMManager.hasRelatedJavaRModel))->size() inJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->size() <= numberOfParentsandJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 2)->size() <= numberOfParentsandJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 3)->size() <= numberOfParentsandJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)andJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)andJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name))
@26545#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#RCManagerHasUniqueHTTPActivityVerbsPerParent#ServicePSM#let AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel inself.hasJavaRCManager->forAll(JRCManager | let numberOfParents : Integer = AllResourceModels->select(ParentRModel |ParentRModel->exists(hasRelatedJavaRMManager = JRCManager))->size() inJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 0)->size() = numberOfParentsandJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->size() = numberOfParentsandJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 0)->isUnique(name)andJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name))
@26546#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerPostActivityAddsGetHypermediaLinkToRRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26547#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerPostActivityAddsPutHypermediaLinkToRRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26548#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerPostActivityAddsDeleteHypermediaLinkToRRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@26549#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerGetActivityAddsGetHypermediaLinkToRRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26550#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerGetActivityAddsPutHypermediaLinkToRRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26551#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerGetActivityAddsDeleteHypermediaLinkToRRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@26552#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerPostActivityAddsGetHypermediaLinkToParentRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26553#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerPostActivityAddsPutHypermediaLinkToParentRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26554#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerPostActivityAddsDeleteHypermediaLinkToParentRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@26555#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerGetActivityAddsGetHypermediaLinkToParentRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26556#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerGetActivityAddsPutHypermediaLinkToParentRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26557#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rCManagerGetActivityAddsDeleteHypermediaLinkToParentRController#ServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@26558#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsPostHypermediaLinkToRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26559#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsGetHypermediaLinkToRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26560#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsPostHypermediaLinkToRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26561#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsGetHypermediaLinkToRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26562#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsPostHypermediaLinkToParentRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26563#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetActivityAddsGetHypermediaLinkToParentRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26564#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsPostHypermediaLinkToParentRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26565#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutActivityAddsGetHypermediaLinkToParentRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@26566#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerDeleteActivityAddsPostHypermediaLinkToParentRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@26567#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerDeleteActivityAddsGetHypermediaLinkToParentRCManager#ServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@26568#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#algoControllerActivityAddsHypermediaLinkToRAlgoController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA, algoControllerB |((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1))))
@26569#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#algoControllerAddsHypermediaLinkToParentAlgoController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA, algoControllerB |((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@26570#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerGetAddsHypermediaLinkToRAlgoController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@26571#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#rControllerPutAddsHypermediaLinkToRAlgoController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@26572#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#algoControllerAddsGetHypermediaLinkToParentRController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@26573#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#algoControllerAddsPutHypermediaLinkToParentRController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@26574#E:/FinalProject Repos/repos\MichaelidouNatalia\ACE\eu.scasefp7.eclipse.mde.m2m\Metamodels/PSMMetamodel.ecore#algoControllerAddsDeleteHypermediaLinkToParentRController#ServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@26575#E:/FinalProject Repos/repos\MicheleGuerriero\Transformations4DICE\rollout\org.xtext.example.toscadsl.parent\org.xtext.example.toscadsl\metamodels/ddsm.ecore#mustRequireZookeeperAndNimbus#StormSupervisor#requiredport -> size() > 1
@26576#E:/FinalProject Repos/repos\MicheleGuerriero\Transformations4DICE\rollout\org.xtext.example.toscadsl.parent\org.xtext.example.toscadsl\metamodels/ddsm.ecore#mustRequireZookeeper#StormNimbus#requiredport -> size() > 0
@26577#E:/FinalProject Repos/repos\MicheleGuerriero\Transformations4DICE\rollout\org.xtext.example.toscadsl.parent\org.xtext.example.toscadsl\metamodels/ddsm.ecore#mustProvideNimbusAccess#StormNimbus#providedport -> size() > 0
@26578#E:/FinalProject Repos/repos\MicheleGuerriero\Transformations4DICE\rollout\org.xtext.example.toscadsl.parent\org.xtext.example.toscadsl\metamodels/ddsm.ecore#mustProvideZookeeperAccess#Zookeeper#providedport -> size() > 0
@26579#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->size()
@26580#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NEOAB() + self.NEIAB()
@26581#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Element))->size()
@26582#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nei : Integer = n.oclAsType(Actor).NEI() in total + nei)
@26583#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; min : Integer = -1 | let nei : Integer = n.oclAsType(Actor).NEI() in if min = -1 then nei else min.min(nei) endif)
@26584#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; max : Integer = -1 | let nei : Integer = n.oclAsType(Actor).NEI() in if max = -1 then nei else max.max(nei) endif)
@26585#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NEIAB() / self.NAct()
@26586#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_nact#ISTAR#self.NAct() > 0
@26587#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ngi : Integer = n.oclAsType(Actor).NGI() in total + ngi)
@26588#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndgi : Integer = n.oclAsType(Actor).NDGI() in total + ndgi)
@26589#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDGI() > 0)->iterate(n : Node; min : Integer = -1 | let minndgi : Integer = n.oclAsType(Actor).MinNDGI() in if min = -1 then minndgi else min.min(minndgi) endif)
@26590#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDGI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndgi : Integer = n.oclAsType(Actor).MaxNDGI() in if max = -1 then maxndgi else max.max(maxndgi) endif)
@26591#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NDAG() / self.NGWD()
@26592#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NGWD#ISTAR#self.NGWD() > 0
@26593#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ngwdi : Integer = n.oclAsType(Actor).NGWDI() in total + ngwdi)
@26594#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nsi : Integer = n.oclAsType(Actor).NSI() in total + nsi)
@26595#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndsi : Integer = n.oclAsType(Actor).NDSI() in total + ndsi)
@26596#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDSI() > 0)->iterate(n : Node; min : Integer = -1 | let minndsi : Integer = n.oclAsType(Actor).MinNDSI() in if min = -1 then minndsi else min.min(minndsi) endif)
@26597#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDSI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndsi : Integer = n.oclAsType(Actor).MaxNDSI() in if max = -1 then maxndsi else max.max(maxndsi) endif)
@26598#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NDAS() / self.NSWD()
@26599#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NSWD#ISTAR#self.NSWD() > 0
@26600#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nswdi : Integer = n.oclAsType(Actor).NSWDI() in total + nswdi)
@26601#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nti : Integer = n.oclAsType(Actor).NTI() in total + nti)
@26602#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndti : Integer = n.oclAsType(Actor).NDTI() in total + ndti)
@26603#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDTI() > 0)->iterate(n : Node; min : Integer = -1 | let minndti : Integer = n.oclAsType(Actor).MinNDTI() in if min = -1 then minndti else min.min(minndti) endif)
@26604#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDTI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndti : Integer = n.oclAsType(Actor).MaxNDTI() in if max = -1 then maxndti else max.max(maxndti) endif)
@26605#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NDAT() / self.NTWD()
@26606#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NTWD#ISTAR#self.NTWD() > 0
@26607#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ntwdi : Integer = n.oclAsType(Actor).NTWDI() in total + ntwdi)
@26608#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nid : Integer = n.oclAsType(Actor).NID() in total + nid)
@26609#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nod : Integer = n.oclAsType(Actor).NOD() in total + nod)
@26610#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NEIAB() - (self.NEIAgentB() + self.NEIRoleB() + self.NEIPosB())
@26611#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Agent))->iterate(n : Node; total : Integer = 0 | let neia : Integer = n.oclAsType(Agent).NEIA() in total + neia)
@26612#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Role))->iterate(n : Node; total : Integer = 0 | let neir : Integer = n.oclAsType(Role).NEIR() in total + neir)
@26613#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Position))->iterate(n : Node; total : Integer = 0 | let neip : Integer = n.oclAsType(Position).NEIP() in total + neip)
@26614#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NAct() - (self.NAgents() + self.NRoles() + self.NPos())
@26615#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Agent))->size()
@26616#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Role))->size()
@26617#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Position))->size()
@26618#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#(self.NAgents() + self.NRoles() + self.NPos()) / self.NAct()
@26619#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NAct#ISTAR#self.NAct() > 0
@26620#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NGWD() / self.NGIAB()
@26621#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NGIAB#ISTAR#self.NGIAB() > 0
@26622#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NSWD() / self.NSIAB()
@26623#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NSIAB#ISTAR#self.NSIAB() > 0
@26624#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NTWD() / self.NTIAB()
@26625#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NTIAB#ISTAR#self.NTIAB() > 0
@26626#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).NEI() > 0)->size()
@26627#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NAWEI() / self.NAct()
@26628#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NAct#ISTAR#self.NAct() > 0
@26629#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nuei : Integer = n.oclAsType(Actor).NUEI() in total + nuei)
@26630#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NUEIAB() / self.NEIAB()
@26631#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NEIAB#ISTAR#self.NEIAB() > 0
@26632#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).NUEI() > 0)->size()
@26633#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NAWUEI() / self.NAct()
@26634#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NAct#ISTAR#self.NAct() > 0
@26635#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#1 - self.PAWUEI()
@26636#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NIDA() + self.NODA()
@26637#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NIDA() / self.NDA()
@26638#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NDA#ISTAR#self.NDA() > 0
@26639#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NODA() / self.NDA()
@26640#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NDA#ISTAR#self.NDA() > 0
@26641#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).ND() > 0)->size()
@26642#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#self.NAWD() / self.NAct()
@26643#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NAct#ISTAR#self.NAct() > 0
@26644#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#ISTAR#1 - self.PAWD()
@26645#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()
@26646#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Goal))->size()
@26647#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Goal))->iterate(e : Element; total : Integer = 0 | let ndg : Integer = e.oclAsType(Goal).NDG() in total + ndg)
@26648#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->size()
@26649#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->iterate(e : Element; min : Integer = -1 | let ndg : Integer = e.oclAsType(Goal).NDG() in if min = -1 then ndg else min.min(ndg) endif)
@26650#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->iterate(e : Element; max : Integer = -1 | let ndg : Integer = e.oclAsType(Goal).NDG() in if max = -1 then ndg else max.max(ndg) endif)
@26651#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NDGI() / self.NGWDI()
@26652#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NGWDI#Actor#self.NGWDI() > 0
@26653#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal))->size()
@26654#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal))->iterate(e: Element; total : Integer = 0 | let nds : Integer = e.oclAsType(Softgoal).NDS() in total + nds)
@26655#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->size()
@26656#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->iterate(e : Element; min : Integer = -1 | let nds : Integer = e.oclAsType(Softgoal).NDS() in if min = -1 then nds else min.min(nds) endif)
@26657#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->iterate(e : Element; max : Integer = -1 | let nds : Integer = e.oclAsType(Softgoal).NDS() in if max = -1 then nds else max.max(nds) endif)
@26658#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NDSI() / self.NSWDI()
@26659#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NTWDI#Actor#self.NSWDI() > 0
@26660#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Task))->size()
@26661#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Task))->iterate(e : Element; total : Integer = 0 | let ndt : Integer = e.oclAsType(Task).NDT() in total + ndt)
@26662#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->iterate(e : Element; min : Integer = -1 | let ndt : Integer = e.oclAsType(Task).NDT() in if min = -1 then ndt else min.min(ndt) endif)
@26663#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->iterate(e : Element; max : Integer = -1 | let ndt : Integer = e.oclAsType(Task).NDT() in if max = -1 then ndt else max.max(ndt) endif)
@26664#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NDTI() / self.NTWDI()
@26665#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NTWDI#Actor#self.NTWDI() > 0
@26666#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->size()
@26667#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NLG() = 0)->size()
@26668#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NLS() = 0)->size()
@26669#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NLT() = 0)->size()
@26670#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Resource) and e.oclAsType(Resource).NLR() = 0)->size()
@26671#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.hasElement->select(e : Element | e.oclIsKindOf(Belief) and e.oclAsType(Belief).NLB() = 0)->size()
@26672#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NUGI() + self.NUSI() + self.NUTI() + self.NURI() + self.NUBI()
@26673#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NUEI() / self.NEI()
@26674#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_NEI#Actor#self.NEI() > 0
@26675#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.actorDependency->select(dl : DependencyLink | dl.oclIsKindOf(DependeeLink))->size()
@26676#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.actorDependency->select(dl : DependencyLink | dl.oclIsKindOf(DependerLink))->size()
@26677#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NID() + self.NOD()
@26678#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NID() / self.ND()
@26679#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_ND#Actor#self.ND() > 0
@26680#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.NOD() / self.ND()
@26681#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#pre_ND#Actor#self.ND() > 0
@26682#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Actor#self.actorISA->size()
@26683#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Agent#self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()
@26684#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Position#self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()
@26685#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Role#self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()
@26686#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.goalMeansEnds->select(me : MeansEnds | me.oclIsKindOf(MeansEnds))->size()
@26687#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()
@26688#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()
@26689#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.NDG() + self.NCLG() + self.NDLG()
@26690#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26691#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26692#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Goal#self.NIDG() + self.NODG()
@26693#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.softgoalContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()
@26694#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()
@26695#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()
@26696#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.NDS() + self.NCLS() + self.NDLS()
@26697#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26698#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26699#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Softgoal#self.NIDS() + self.NODS()
@26700#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.taskDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()
@26701#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()
@26702#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()
@26703#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.NDT() + self.NCLT() + self.NDLT()
@26704#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26705#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26706#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Task#self.NIDT() + self.NODT()
@26707#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Resource#self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()
@26708#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Resource#self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()
@26709#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Resource#self.NCLR() + self.NDLR()
@26710#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Resource#self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26711#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Resource#self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26712#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Resource#self.NIDR() + self.NODR()
@26713#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Belief#self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()
@26714#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Belief#self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()
@26715#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Belief#self.NCLB() + self.NDLB()
@26716#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Belief#self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26717#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Belief#self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()
@26718#E:/FinalProject Repos/repos\microlina\iStarLab\iStarPrototype\model/iStar.ecore#body#Belief#self.NIDB() + self.NODB()
@26719#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#derivation#Aspect#let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))
@26720#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#uniqueTypes#StructuralView#self.types->isUnique(name)
@26721#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#uniqueTypes$message#StructuralView#'There may be only one type of the same type'
@26722#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#noTwoClassesWithSameName#StructuralView#self.classes->isUnique(name)
@26723#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#noTwoClassesWithSameName$message#StructuralView#'Name of a class has to be unique'
@26724#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#notSelfSuperType#Class#not self.superTypes->includes(self)
@26725#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#notSelfSuperType$message#Class#'A class may not be it\'s own supertype'
@26726#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#uniqueName#AssociationEnd#self.classifier.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name <> null and associationEnd.name <> '')->isUnique(name)
@26727#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#uniqueName$message#AssociationEnd#'AssociationEnds of a class must be unique'
@26728#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#AssociationEnd#self.assoc.ends->select(end : AssociationEnd | end <> self)->at(1).classifier
@26729#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validName#NamedElement#if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name <> '' endif
@26730#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validName$message#NamedElement#'Name of RAM elements may not be empty'
@26731#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#aspectCannotMapSelf#Instantiation#not (self.externalAspect = self.Aspect)
@26732#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#aspectCannotMapSelf$message#Instantiation#'Aspect may not depend on itself'
@26733#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#mandatoryAspectParametersMapped#Instantiation#if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(fromElement = element)) else true endif
@26734#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#mandatoryAspectParametersMapped$message#Instantiation#'Partial elements from lower-level aspects have to be mapped'
@26735#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#Mapping#null
@26736#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#Mapping#null
@26737#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#messageViewDefined#Operation#if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.oclContainer().oclAsType(StructuralView).Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif
@26738#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#messageViewDefined$message#Operation#'MessageView missing for public operation'
@26739#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#notVoid#Parameter#not self.type.oclIsTypeOf(RVoid)
@26740#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#notVoid$message#Parameter#'The type of the parameter may not be void'
@26741#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RVoid#'void'
@26742#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RBoolean#'boolean'
@26743#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RBoolean#'java.lang.Boolean'
@26744#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RInt#'int'
@26745#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RInt#'java.lang.Integer'
@26746#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RChar#'char'
@26747#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RChar#'java.lang.Character'
@26748#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RString#'String'
@26749#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RString#'java.lang.String'
@26750#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RAny#'*'
@26751#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#specifiesIsFirstMessage#MessageView#if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif
@26752#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#specifiesIsFirstMessage$message#MessageView#'The first message in the MessageView must match specifies of the MessageView'
@26753#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#specificationDefined#MessageView#if not self.specifies.oclIsUndefined() then if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif else true endif
@26754#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#specificationDefined$message#MessageView#'A MessageView for a non-partial operation must have a specification'
@26755#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#isAffectedBy#MessageView#if self.specification.oclIsUndefined() and self.specifies.partial then self.affectedBy->notEmpty() else true endif
@26756#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#isAffectedBy$message#MessageView#'An empty MessageView must have at least one affectedBy'
@26757#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#isAffectedBy#MessageViewReference#self.affectedBy->size() > 0
@26758#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#isAffectedBy$message#MessageViewReference#'The MessageViewReference must have at least one affectedBy'
@26759#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#notAffectedBySelf#AspectMessageView#not self.affectedBy->includes(self)
@26760#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#notAffectedBySelf$message#AspectMessageView#'Message View may not be affected by itself'
@26761#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validSelfMessage#Message#if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let sendEvent : InteractionFragment = self.sendEvent.oclAsType(InteractionFragment) in let receiveEvent : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in if sendEvent.covered->asOrderedSet()->at(1) = receiveEvent.covered->asOrderedSet()->at(1) then sendEvent.container.fragments->indexOf(self.sendEvent) < receiveEvent.container.fragments->indexOf(self.receiveEvent) else true endif else true endif
@26762#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validSelfMessage$message#Message#'receiveEvent of a self message may not come before the sendEvent'
@26763#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#argumentsSpecified#Message#if self.messageSort <> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif
@26764#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#argumentsSpecified$message#Message#'All arguments of the operation must be specified'
@26765#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#createMessageIsFirst#Message#if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
@26766#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#createMessageIsFirst$message#Message#'The create message occurrence may not come after any other occurrence on this lifeline'
@26767#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#returnsSpecified#Message#if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif
@26768#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#returnsSpecified$message#Message#'Reply message must have returns specified if return type is not void'
@26769#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#boundariesNotCrossed#Message#let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif
@26770#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#boundariesNotCrossed$message#Message#'Messages may not cross boundaries of CombinedFragments or their operands'
@26771#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validReturns#Message#if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif
@26772#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validReturns$message#Message#'Returns may only be specified if message sort is reply message'
@26773#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validAssignTo#Message#if not self.assignTo.oclIsUndefined() then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).getType() endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif
@26774#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validAssignTo$message#Message#'Return type of signature operation must match the type of assignTo'
@26775#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#deleteMessageIsLast#Message#if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) <= event.container.fragments->indexOf(event) else true endif) else true endif else true endif
@26776#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#deleteMessageIsLast$message#Message#'The destruction occurrence may not come before any other occurrence on this lifeline'
@26777#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validReturnsValue#Message#if self.returns.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.returns.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.signature.returnType.oclType()) else true endif else if self.returns.oclIsKindOf(LiteralSpecification) then false else true endif endif
@26778#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validReturnsValue$message#Message#'Type of return value must match the type of the return'
@26779#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#assignToAllowed#Message#if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif
@26780#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#assignToAllowed$message#Message#'assignTo may not be specified for operations whose return type is void'
@26781#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#noCrossingMessages#Message#if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif
@26782#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#noCrossingMessages$message#Message#'Messages may not cross each other, MessageEnds of one message must come one after the other (also, send must come before receive)'
@26783#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validSignature#Message#if self.messageSort <> MessageSort::reply and not self.receiveEvent.oclIsUndefined() then let typedElement : TypedElement = self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents in if not typedElement.oclIsUndefined() then let type : Type = if typedElement.oclIsTypeOf(Parameter) then typedElement.oclAsType(Parameter).type else if typedElement.oclIsTypeOf(Attribute) then typedElement.oclAsType(Attribute).type else if typedElement.oclIsTypeOf(Reference) then typedElement.oclAsType(Reference).type else typedElement.oclAsType(AssociationEnd).getType() endif endif endif in if type.oclIsKindOf(Classifier) then type.oclAsType(Classifier).operations->includes(self.signature) else true endif else true endif else true endif
@26784#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validSignature$message#Message#'Message signature must be an operation of the classifier that is represented by the lifeline of the receive event'
@26785#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#derivation#Message#if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif
@26786#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validCoveredMultiplicity#InteractionFragment#if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif
@26787#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validCoveredMultiplicity$message#InteractionFragment#'InteractionFragment may only have one Lifeline it covers (except CombinedFragment)'
@26788#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validOperands#CombinedFragment#if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif
@26789#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validOperands$message#CombinedFragment#'opt and loop fragments may only have one operand'
@26790#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validParameterValue#ParameterValueMapping#if self.value.oclIsTypeOf(StructuralFeatureValue) then let value : StructuralFeatureValue = self.value.oclAsType(StructuralFeatureValue).value in if not value.oclIsUndefined() then let type : Type = if value.oclIsTypeOf(Attribute) then value.oclAsType(Attribute).type else if value.oclIsTypeOf(Reference) then value.oclAsType(Reference).type else value.oclAsType(AssociationEnd).getType() endif endif in type.oclIsTypeOf(self.parameter.type.oclType()) else true endif else if self.value.oclIsKindOf(LiteralSpecification) then false else true endif endif
@26791#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validParameterValue$message#ParameterValueMapping#'Type of value must match the type of the parameter'
@26792#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validValueType#ParameterValue#self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())
@26793#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validValueType$message#ParameterValue#'Type of value must match the type of the parameter'
@26794#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RCollection#let partial : String = if type.oclIsTypeOf(Class) and type.oclAsType(Class).partial or type.oclIsTypeOf(Operation) and type.oclAsType(Operation).partial then '|' else '' endif in let typeName : String = self.oclType().toString() in let name : String = typeName.substring(typeName.lastIndexOf(':') + 2, typeName.size()) in if type.name.oclIsUndefined() then name else name + '<' + partial + type.name + '>' endif
@26795#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validUpperBound#Property#self.upperBound > 0 or self.upperBound = -1
@26796#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validUpperBound$message#Property#'The upperbound must be greater than zero or -1 representing *'
@26797#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validLowerBound#Property#self.lowerBound >= 0
@26798#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validLowerBound$message#Property#'The lowerbound must be greater than or equal to zero'
@26799#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validMultiplicity#Property#self.lowerBound <= self.upperBound or self.upperBound = -1
@26800#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#validMultiplicity$message#Property#'The lowerBound must be less than or equal to the upperBound'
@26801#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RDouble#'double'
@26802#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RDouble#'java.lang.Double'
@26803#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RFloat#'float'
@26804#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RFloat#'java.lang.Float'
@26805#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RLong#'float'
@26806#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RLong#'java.lang.Long'
@26807#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RArray#if (self.type <> null and self.type.name <> null) then if (self.type.oclIsTypeOf(RArray)) then self.type.name.substring(1, self.type.name.indexOf('[') -1) else self.type.name endif + '[' + if (self.size >= 0) then self.size.toString() else '' endif + ']' + if (self.type.oclIsTypeOf(RArray)) then self.type.name.substring(self.type.name.indexOf('['), self.type.name.size()) else '' endif else null endif
@26808#E:/FinalProject Repos/repos\mjorod\textram\tool\ca.mcgill.sel.ram\model/RAM.ecore#body#RArray#'java.lang.reflect.Array'
@26809#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#uniqueEntityNames#EntityModel#self.entities->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@26810#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#identifierIsMandatory#Entity#self.id.mandatory = true
@26811#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#identifierIsMember#Entity#self.attributes -> includes(self.id) or self.superTypes.attributes -> includes(self.id)
@26812#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#superTypeIsNotSelf#Entity#self <> superType
@26813#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#derivation#Entity#self -> closure(superType)
@26814#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#checkNone#Attribute#(self.type = AttributeType::None) <> (self.enumerationType = null)
@26815#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#uniqueLiteralNames#EnumerationType#self.literals->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@26816#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#upperBoundGreaterThanLowerBound#Relationship#self.lowerBound >= 0 and (self.lowerBound <= self.upperBound xor self.upperBound = -1)
@26817#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#oppositeRelastionshipIsValid#Relationship#self.opposite <> null implies self.opposite.opposite = self
@26818#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#validAttributePageElement#AttributePageElement#(self.page.form.entity.attributes->union(self.page.form.entity.superTypes.attributes) -> includes(self.attribute))
@26819#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#validRelationshipPageElement#RelationshipPageElement#(self.page.form.entity.relationships->union(self.page.form.entity.superTypes.relationships) -> includes(self.relationship))
@26820#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#validEditingForm#RelationshipPageElement#self.editingForm.entity = self.relationship.target
@26821#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#validSelectionType#SelectionAttributePageElement#self.attribute.type = AttributeType::Boolean or self.attribute.enumerationType <> null
@26822#E:/FinalProject Repos/repos\Model-Engineering-AG-34\model-engineering-ws14\assignment1\ModelEngineeringUE1\model/forms.ecore#validColumn#Column#(self.table.relationship.target.attributes -> union(self.table.relationship.target.superTypes.attributes)) -> includes(self.attribute)
@26892#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Element#The query allOwnedElements() gives all of the direct and indirect owned elements of an element.<p>From package AADLInfrastructure.</p>
@26893#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Element#The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.<p>From package AADLInfrastructure.</p>
@26894#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Type#The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.<p>From package AADLInfrastructure.</p>
@26895#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#NamedElement#The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.<p>From package AADLInfrastructure.</p>
@26896#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#NamedElement#The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.<p>From package AADLInfrastructure.</p>
@26897#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#NamedElement#The query separator() gives the string that is used to separate names when constructing a qualified name.<p>From package AADLInfrastructure.</p>
@26898#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.<p>From package AADLInfrastructure.</p>
@26899#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query parents() gives all of the immediate ancestors of a generalized Classifier.<p>From package AADLInfrastructure.</p>
@26900#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.<p>From package AADLInfrastructure.</p>
@26901#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.<p>From package AADLInfrastructure.</p>
@26902#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.<p>From package AADLInfrastructure.</p>
@26903#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.<p>From package AADLInfrastructure.</p>
@26904#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Classifier#The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.<p>From package AADLInfrastructure.</p>
@26905#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Namespace#The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. Those semantics are specified by overriding the getNamesOfMember operation. The specification here simply returns a set containing a single name, or the empty set if no name.<p>From package AADLInfrastructure.</p>
@26906#E:/FinalProject Repos/repos\ModelWriter\Demonstrations\eu.modelwriter.demonstration.synthesis\AADL/aadl2.ecore#documentation#Namespace#The Boolean query membersAreDistinguishable() determines whether all of the namespaces members are distinguishable within it.<p>From package AADLInfrastructure.</p>
@26914#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#documentation#Clafer#a Clafer cannot be a reference Clafer and has a super type at the same time
@26915#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#AllClafersIntheSameLevelMustHaveUniqueNames#Clafer#self.cElements->isUnique(name)
@26916#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#ClaferMustHaveName#Clafer#self.oclIsTypeOf(Clafer) implies self.name.size() > 0
@26917#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#OnlySuperTypingToTopLevelAbstractClafers#Clafer#cElements-> forAll(c:Clafer, r:Clafer | not c.cSuper.oclIsUndefined() and c.cSuper = r implies r.isAbstract = true)
@26918#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#OnlyReferenceToTopLevelAbstractClafers#Clafer#cElements-> forAll(c:Clafer, r:Clafer | not c.cTarget.oclIsUndefined() and c.cTarget = r implies r.isAbstract = true)
@26919#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#AClaferCannotBeAReferenceClaferAndHasASuperTypeAtTheSameTime#Clafer#not (cElements->exists(c:Clafer | c.cSuper <> null and c.cTarget <> null))
@26920#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#OneClaferModel#ClaferModel#ClaferModel.allInstances()->size() = 1
@26921#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#ClaferModelRules#ClaferModel#let i = self in i.oclIsTypeOf(ClaferModel) impliesi.cCardinality.oclIsUndefined() and i.cGroupCardinality.oclIsUndefined() andi.cSuper.oclIsUndefined() andi.cTarget.oclIsUndefined() andi.isAbstract = false andi.name.size() = 0
@26922#E:/FinalProject Repos/repos\ModelWriter\UC-TR-03\clafer4emf\com.clafer4emf.metamodels.clafer\model/clafer.ecore#IntervalRules#CInterval#let i = self in (i.Min >= 0) and(i.Max >= i.Min or i.Max = -1) and(i.Min = 0 implies i.Max <> 0 or i.Max = 1 or i.Max = -1) and(i.Min = 1 implies i.Max = -1 or i.Max >= 1)
@26930#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#onlyAlreadContainedStartFragmentAllowed#Screen#startFragment = null or displayElements->includes(startFragment)
@26931#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#Button_Can_Only_Have_One_Event_If_In_Screen#Button#self.screen <> null and buttonClickEvents->size() <= 1 or self.screen = null
@26932#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#List_Can_Only_Have_One_Event_If_In_Screen#DynamicList#self.screen <> null and listClickEvents->size() <= 1 or self.screen = null
@26933#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#onlyLabelsButtonsAndCheckBoxesAllowed#MenuBar#self.menuBarElements->forAll(menubarItem : DisplayElement | menubarItem.oclIsTypeOf(Button) or menubarItem.oclIsTypeOf(ImageButton) or menubarItem.oclIsTypeOf(Label) or menubarItem.oclIsTypeOf(CheckBox) or menubarItem.oclIsTypeOf(Image))
@26934#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#navigationWithinSameScreen#FragmentNavigation#to.screen = from.screen
@26935#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#ComplexBinding_domainEntityAttributes_MustInclude_InnerBindingAttributes#ComplexBinding#self.innerBindings->forAll(binding : PrimitiveBinding | self.domainEntity.eAttributes->includes(binding.attribute))
@26936#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#ComplexBinding_UiElement_MustInclude_BoundUiElementsOf_InnerBindings#ComplexBinding#self.innerBindings->forAll(binding : PrimitiveBinding | binding.oclIsKindOf(StringBinding) and self.uiElement.containedDisplayElements->includes(binding.oclAsType(StringBinding).uiElement) or binding.oclIsKindOf(BooleanBinding) and self.uiElement.containedDisplayElements->includes(binding.oclAsType(BooleanBinding).checkBox))
@26937#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#StringBindingAttributeMustBeOfTypeString#StringBinding#self.attribute.eType.name = 'EString'
@26938#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#BooleanBindingAttributeMustBeOfTypeBoolean#BooleanBinding#self.attribute.eType.name = 'EBoolean'
@26939#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#namespaceMustHasAtLeastTwoSegments#GeneratorConfig#namespace.matches('[a-z0-9]+([.][a-z0-9]+)+')
@26940#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#OnlyOneGeneratorConfigPerPlatform#GeneratorConfigContainer#generatorConfigs->isUnique(targetPlatform)
@26941#E:/FinalProject Repos/repos\MOHITO-PROJECT\MOHITO\modagile\generator\de.modagile.metamodel.app\bin/modagile.ecore#NamingConvention#Entity#name.matches('[A-Z][a-z0-9_]*([A-Z][a-z0-9_]*)*')
@27078#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#UReal#self.x < r.x
@27079#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#self.dimensions = u.dimensions
@27080#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#(self.dimensions = u.dimensions) and (self.conversionFactor = u.conversionFactor) and (self.offset = u.offset)
@27081#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#(self.dimensions->count(1.0) = 1) and (self.dimensions->count(0.0) = 7) and (self.noOffset()) and (self.conversionFactor->count(1.0) = 8)
@27082#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#self.offset->count(0.0) = 8
@27083#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#(self.dimensions->count(0.0) = 8)
@27084#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#(self.dimensions->asSequence()->subSequence(1, 7)->count(0.0) = 7)
@27085#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Unit#let DerivedUnitDimensions : Sequence(Sequence(Real)) = Sequence{ --                    L, M, T, I, O, N, J, U--                    m,Kg, s, A, K,mol,cd,rad Sequence{2, 0, - 2, 0, 0, 0, 0, 0}, -- 'Gy', L2T-2Grayunit:GrayGySequence{2, 0, - 3, 0, 0, 0, 0, 0}, -- 'Gy/s', L2T-3Gray per secondunit:GrayPerSecondGy/sSequence{0, 0, - 1, 0, 0, 0, 0, 0}, -- 'Bq', T-1Becquerelunit:BecquerelBqSequence{- 3, 0, 0, 0, 0, 1, 0, 0}, -- 'mol/m^3', L-3N1Mole per cubic meterunit:MolePerCubicMetermol/m^3Sequence{0, - 1, 0, 0, 0, 1, 0, 0}, -- 'mol/kg', M-3N1Mole per kilogramunit:MolePerKilogrammol/kgSequence{0, 0, - 2, 0, 0, 0, 0, 1}, -- 'rad/s^2', U1T-2Radian per second squaredunit:RadianPerSecondSquaredrad/s^2Sequence{2, 1, 0, 0, 0, 0, 0, 0}, -- 'kg*m^2', L2M1Kilogram Meter Squaredunit:KilogramMeterSquaredkg-m^2Sequence{2, 1, - 1, 0, 0, 0, 0, 0}, -- 'J*s', L2M1T-1Joule Secondunit:JouleSecondJ sSequence{0, 0, - 1, 0, 0, 0, 0, 1}, -- 'rad/s', U1T-1Radian per secondunit:RadianPerSecondrad/sSequence{2, 0, 0, 0, 0, 0, 0, 0}, -- 'm^2', L2Square meterunit:SquareMeterm^2Sequence{2, 0, 0, 0, 0, 0, 0, 2}, -- 'm^2*st', U1L2Square meter steradianunit:SquareMeterSteradianm^2-srSequence{2, 0, 0, 0, 1, 0, 0, 0}, -- 'm^2*K', L2Î˜1Square meter kelvinunit:SquareMeterKelvinm^2-KSequence{2, 0, 0, 0, - 1, 0, 0, 0}, -- 'm^2/K', L2Î˜-1Square meter per kelvinunit:SquareMeterPerKelvinm^2/KSequence{- 2, - 1, 4, 2, 0, 0, 0, 0}, -- 'F', L-2M-1T4I2Faradunit:FaradFSequence{0, 0, - 1, 0, 0, 1, 0, 0}, -- 'kat', T-1N1Katalunit:KatalkatSequence{0, 1, - 3, 0, - 1, 0, 0, 0}, -- 'W/(m^2*K)', M1T-3Î˜-1M1T-3Î˜-1Watt per square meter kelvinunit:WattPerSquareMeterKelvinW/(m^2-K)Sequence{- 3, 1, 0, 0, 0, 0, 0, 0}, -- 'kg/m^3', L-3M1L-3M1Kilogram per cubic meterunit:KilogramPerCubicMeterkg/m^3Sequence{2, 0, - 2, 0, 0, 0, 0, 0}, -- 'Sv', L2T-2L2T-2Sievertunit:SievertSvSequence{- 1, 1, - 1, 0, 0, 0, 0, 0}, -- 'Pa*s', L-1M1T-1L-1M1T-1Pascal secondunit:PascalSecondPa-sSequence{0, 0, 1, 1, 0, 0, 0, 0}, -- 'C', T1I1T1I1Coulombunit:CoulombCSequence{- 1, 0, 1, 1, 0, 0, 0, 0}, -- 'C/m', L-1T1I1L-1T1I1Coulomb per meterunit:CoulombPerMeterC/mSequence{- 3, 0, 1, 1, 0, 0, 0, 0}, -- 'C/m^3', L-3T1I1L-3T1I1Coulomb per cubic meterunit:CoulombPerCubicMeterC/m^3Sequence{0, 0, 1, 1, 0, - 1, 0, 0}, -- 'C/mol', T1I1N-1Coulomb per moleunit:CoulombPerMoleC/molSequence{- 2, 0, 0, 1, 0, 0, 0, 0}, -- 'A/m^2', L-2I1Ampere per square meterunit:AmperePerSquareMeterA/m^2Sequence{0, 0, 0, - 1, 0, 0, 0, - 1}, -- 'A/rad', U-1I1Ampere per radianunit:AmperePerRadianA/radSequence{1, 0, 1, 1, 0, 0, 0, 0}, -- 'C*m', L1T1I1Coulomb meterunit:CoulombMeterC-mSequence{1, 1, - 3, - 1, 0, 0, 0, 0}, -- 'V/m', L1M1T-3I-1Volt per Meterunit:VoltPerMeterV/mSequence{- 2, 0, 1, 1, 0, 0, 0, 0}, -- 'C/m^2', L-2T1I1Coulomb per Square Meterunit:CoulombPerSquareMeterC/m^2Sequence{- 2, - 1, 3, 2, 0, 0, 0, 0}, -- 'S', L-2M-1T3I2Siemensunit:SiemensSSequence{2, 1, - 3, - 1, 0, 0, 0, 0}, -- 'V', L2M1T-3I-1Voltunit:VoltVSequence{- 1, 1, - 2, 0, 0, 0, 0, 0}, -- 'J/m^3', L-1M1T-2Joule per cubic meterunit:JoulePerCubicMeterJ/m^3Sequence{2, 1, - 2, 0, 0, 0, 0, 0}, -- 'J', L2M1T-2Jouleunit:JouleJSequence{0, 1, - 2, 0, 0, 0, 0, 0}, -- 'J/m^2', M1T-2Joule per square meterunit:JoulePerSquareMeterJ/m^2Sequence{0, - 1, 1, 1, 0, 0, 0, 0}, -- 'C/kg', M-1T1I1Coulomb per kilogramunit:CoulombPerKilogramC/kgSequence{1, 1, - 2, 0, 0, 0, 0, 0}, -- 'N', L1M1T-2Newtonunit:NewtonNSequence{1, 1, - 3, - 1, 0, 0, 0, 0}, -- 'N/C', L1M1T-3I-1Newton per coulombunit:NewtonPerCoulombN/CSequence{0, 1, - 2, 0, 0, 0, 0, 0}, -- 'N/m', M1T-2Newton per meterunit:NewtonPerMeterN/mSequence{0, 0, - 1, 0, 0, 0, 0, 0}, -- 'Hz', T-1Hertzunit:HertzHzSequence{3, - 1, - 2, 0, 0, 0, 0, 0}, -- 'm^3/(kg*s^2)', L3M-1T-2Cubic meter per kilogram second squaredunit:CubicMeterPerKilogramSecondSquaredm^3/(kg-s^2)Sequence{2, 1, - 2, 0, - 1, 0, 0, 0}, -- 'J/K', L2M1T-2Î˜-1Joule per kelvinunit:JoulePerKelvinJ/KSequence{- 2, 0, 0, 0, 0, 0, 1, 1}, -- 'Lx', U1L-2J1Luxunit:LuxlxSequence{2, 1, - 2, - 2, 0, 0, 0, 0}, -- 'H', L2M1T-2I-2Henryunit:HenryHSequence{0, 0, 0, 0, 0, - 1, 0, 0}, -- '1/mol', N-1Per moleunit:PerMolemol^(-1)Sequence{3, 1, - 4, - 2, 0, 0, 0, 0}, -- 'm/F', L3M1T-4I-2Meter per faradunit:MeterPerFaradm/FSequence{2, 0, - 1, 0, 0, 0, 0, 0}, -- 'm^2/s', L2T-1Square meter per secondunit:SquareMeterPerSecondm^2/secSequence{1, 1, 0, 0, 0, 0, 0, 0}, -- 'm*kg', L1M1Meter kilogramunit:MeterKilogramm-kgSequence{1, 0, 0, 0, 1, 0, 0, 0}, -- 'm*K', L1Î˜1Meter kelvinunit:MeterKelvinm-KSequence{1, 0, - 2, 0, 0, 0, 0, 0}, -- 'm/s^2', L1T-2Meter per second squaredunit:MeterPerSecondSquaredm/s^2Sequence{1, 1, - 1, 0, 0, 0, 0, 0}, -- 'kg*m/s', L1M1T-1Kilogram Meter Per Secondunit:KilogramMeterPerSecondkg-m/sSequence{1, 0, 0, 0, - 1, 0, 0, 0}, -- 'm/K', L1Î˜-1Meter per kelvinunit:MeterPerKelvinm/KSequence{1, 0, - 1, 0, 0, 0, 0, 0}, -- 'm/s', L1T-1Meter per secondunit:MeterPerSecondm/sSequence{- 2, 0, 0, 0, 0, 0, 1, 0}, -- 'cd/m^2', L-2J1Candela per square meterunit:CandelaPerSquareMetercd/m^2Sequence{0, 0, 0, 0, 0, 0, 1, 1}, -- 'lm', U1J1Lumenunit:LumenlmSequence{2, 0, 0, 1, 0, 0, 0, 0}, -- 'J/T', L2I1Joule per Teslaunit:JoulePerTeslaJ/TSequence{- 1, 0, 0, 1, 0, 0, 0, 0}, -- 'AT/m', L-1I1Ampere Turn per Meterunit:AmpereTurnPerMeterAt/mSequence{2, 1, - 2, - 1, 0, 0, 0, 0}, -- 'Wb', L2M1T-2I-1Weberunit:WeberWbSequence{0, 1, - 2, - 1, 0, 0, 0, 0}, -- 'T', M1T-2I-1Teslaunit:TeslaTSequence{0, 0, 0, 1, 0, 0, 0, 1}, -- 'AT', U1I1Ampere Turnunit:AmpereTurnAtSequence{0, 1, 0, 0, 1, 0, 0, 0}, -- 'kg*K', M1Î˜1Kilogram kelvinunit:KilogramKelvinkg-KSequence{0, 1, - 1, 0, 0, 0, 0, 0}, -- 'kg/s', M1T-1Kilogram per secondunit:KilogramPerSecondkg/sSequence{- 2, 1, 0, 0, 0, 0, 0, 0}, -- 'kg/m^2', L-2M1Kilogram per square meterunit:KilogramPerSquareMeterkg/m^2Sequence{- 1, 1, 0, 0, 0, 0, 0, 0}, -- 'kg/m', L-1M1Kilogram per meterunit:KilogramPerMeterkg/mSequence{2, 1, - 2, 0, 0, - 1, 0, 0}, -- 'J/mol', L2M1T-2N-1Joule per moleunit:JoulePerMoleJ/molSequence{2, 1, - 2, 0, - 1, - 1, 0, 0}, -- 'J/(mol*K)', L2M1T-2Î˜-1N-1Joule per mole kelvinunit:JoulePerMoleKelvinJ/(mol-K)Sequence{1, 1, - 2, - 2, 0, 0, 0, 0}, -- 'H/m', L1M1T-2I-2Henry per meterunit:HenryPerMeterH/mSequence{- 3, - 1, 4, 2, 0, 0, 0, 0}, -- 'F/m', L-3M-1T4I2Farad per meterunit:FaradPerMeterF/mSequence{2, 1, - 3, 0, 0, 0, 0, 0}, -- 'W', L2M1T-3Wattunit:WattWSequence{2, 1, - 3, 0, 0, 0, 0, - 2}, -- 'W/sr', U-1L2M1T-3Watt per steradianunit:WattPerSteradianW/srSequence{0, 1, - 3, 0, 0, 0, 0, - 2}, -- 'W/(m^2sr)', U-1M1T-3Watt per square meter steradianunit:WattPerSquareMeterSteradianW/(m^2-sr)Sequence{0, 1, - 3, 0, 0, 0, 0, 0}, -- 'W/m^2', M1T-3Watt per square meterunit:WattPerSquareMeterW/m^2Sequence{- 1, 1, - 2, 0, 0, 0, 0, 0}, -- 'Pa', L-1M1T-2Pascalunit:PascalPaSequence{2, 1, - 3, - 2, 0, 0, 0, 0}, -- 'Ohm', L2M1T-3I-2Ohmunit:OhmOhmSequence{0, 0, 0, 0, 0, 0, 0, 2}, -- 'sr', U1Steradianunit:SteradiansrSequence{2, 0, - 2, 0, 0, 0, 0, 0}, -- 'J/kg', L2T-2Joule per kilogramunit:JoulePerKilogramJ/kgSequence{2, 0, - 2, 0, - 1, 0, 0, 0}, -- 'J/(kg*K)', L2T-2Î˜-1Joule per kilogram kelvinunit:JoulePerKilogramKelvinJ/(kg-K)Sequence{3, - 1, 0, 0, - 1, 0, 0, 0}, -- 'J/(kg*K*Pa)', L3M-1Î˜-1Joule per kilogram kelvin per pascalunit:JoulePerKilogramKelvinPerPascalJ/(km-K-Pa)Sequence{- 1, 0, - 2, 0, - 1, 0, 0, 0}, -- 'J/(kg*K*m^3)', L-1T-2Î˜-1Joule per kilogram kelvin per cubic meterunit:JoulePerKilogramKelvinPerCubicMeterJ/(kg-K-m^3)Sequence{0, 0, 0, 0, 1, 1, 0, 0}, -- 'mol*K', Î˜1N1Mole kelvinunit:MoleKelvinmol-KSequence{1, 1, - 3, 0, - 1, 0, 0, 0}, -- 'W/(m*K)', L1M1T-3Î˜-1Watt per meter kelvinunit:WattPerMeterKelvinW/(m*K)Sequence{0, - 1, 3, 0, 1, 0, 0, 0}, -- 'm^2/W', M-1T3Î˜1Square meter Kelvin per wattunit:SquareMeterKelvinPerWatt(K^2)m/WSequence{- 2, - 1, 3, 0, 1, 0, 0, 0}, -- 'K/W', L-2M-1T3Î˜1Kelvin per wattunit:KelvinPerWattK/WSequence{- 1, - 1, 3, 0, 1, 0, 0, 0}, -- 'm*K/W', L-1M-1T3Î˜1Meter Kelvin per wattunit:MeterKelvinPerWattK-m/WSequence{1, 0, - 2, 0, 0, 0, 0, 0}, -- 'N/kg', L1T-2Newton per kilogramunit:NewtonPerKilogramN/kgSequence{0, 0, 2, 0, 0, 0, 0, 0}, -- 's^2', T2Second time squaredunit:SecondTimeSquareds^2Sequence{2, 1, - 2, 0, 0, 0, 0, 0}, -- 'N*m', L2M1T-2Newton meterunit:NewtonMeterN-mSequence{3, 0, 0, 0, 0, 0, 0, 0}, -- 'm^3', L3Cubic Meterunit:CubicMeterm^3Sequence{3, - 1, 0, 0, 0, 0, 0, 0}, -- 'm^3/K', L3Î˜-1Cubic meter per kelvinunit:CubicMeterPerKelvinm^3/KSequence{3, 0, - 1, 0, 0, 0, 0, 0}, -- 'm^3/s', L3T-1Cubic meter per secondunit:CubicMeterPerSecondm^3/sSequence{1, 1, - 2, 0, - 1, 0, 0, 0} -- 'J/(m^3*K)'L-1M1T-2Î˜-1Joule per cubic meter kelvinunit:JoulePerCubicMeterKelvinJ/(m^3 K)}in DerivedUnitDimensions->includes(self.dimensions) and self.noOffset() and self.conversionFactor->count(1.0) = 8
@27086#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Quantity#self.unit
@27087#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Quantity#self.unit.equals(x.unit)
@27088#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Quantity#self.unit.isCompatibleWith(u)
@27089#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#body#Quantity#let x : Boolean = true inx
@27090#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#derivation#AccMeasure#self.finalPosition.minus(self.initialPosition)
@27091#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#derivation#AccMeasure#self.finalPosition.minus(self.initialPosition).divideBy(self.duration)
@27092#E:/FinalProject Repos/repos\moliz\moliz.quantitytypes\plugins\org.modelexecution.quantitytypes.oclinecore\oclsrc/Quantities.ecore#derivation#AccMeasure#self.finalVelocity.minus(self.initialVelocity).divideBy(self.duration)
@27095#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#voidPetriName#PetriNet#name <> ''
@27096#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#sameNodeName#PetriNet#self.petriNetElements->select(p : PetriNetElement | p.oclIsKindOf(Node))->forAll(j : Node, k : Node | j <> k implies j.name <> k.name)
@27097#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#voidNodeName#Node#name <> ''
@27098#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#positiveMultiplicity#Arc#multiplicity > 0
@27099#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#nextNodeNotInSamePetriNet#Arc#self.petriNet = self.successor.petriNet
@27100#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#previousNodeNotInSamePetriNet#Arc#self.petriNet = self.predecessor.petriNet
@27101#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#sameTypeOfPredecessorAndSuccessor#Arc#self.predecessor.oclType() <> self.successor.oclType()
@27102#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/PetriNet.ecore#positiveMarking#Place#marking >= 0
@27103#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#sameWDName#Process#self.processElements->select(p : ProcessElement | p.oclIsTypeOf(WorkDefinition))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
@27104#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#sameRessourcesName#Process#self.processElements->select(p : ProcessElement | p.oclIsTypeOf(Ressource))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
@27105#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#nameForbidden#Process#name <> 'Process'
@27106#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#sameNeedSetsName#Process#self.processElements->select(p : ProcessElement | p.oclIsTypeOf(NeedSet))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
@27107#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#derivation#ProcessElement#Process.allInstances()->select(p : Process | p.processElements->includes(self))->asSequence()->first()
@27108#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#voidName#WorkDefinition#name <> ''
@27109#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#previousWDinSameProcess#WorkSequence#self.process = self.predecessor.process
@27110#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#reflexivity#WorkSequence#self.predecessor <> self.successor
@27111#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#nextWDinSameProcess#WorkSequence#self.process = self.successor.process
@27112#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#voidName#Ressource#name <> ''
@27113#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#positiveQuantity#Ressource#quantity >= 0
@27114#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#positiveQuantity#Need#quantity > 0
@27115#E:/FinalProject Repos/repos\mpizenberg\GLS_PROJET\Sources\fr.enseeiht.metamodels/SimplePDL.ecore#voidName#NeedSet#name <> ''
@27124#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#nameForbidden#Process#name <> 'Process'
@27125#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#sameWDName#Process#self.processElements->select(p : ProcessElement | p.oclIsTypeOf(WorkDefinition))->forAll(j : ProcessElement, k : ProcessElement | j <> k implies j.name <> k.name)
@27126#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#derivation#ProcessElement#Process.allInstances()->select(p : Process | p.processElements->includes(self))->asSequence()->first()
@27127#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#voidName#WorkDefinition#name <> ''
@27128#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#previousWDinSameProcess#WorkSequence#self.process = self.predecessor.process
@27129#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#reflexivity#WorkSequence#self.predecessor <> self.successor
@27130#E:/FinalProject Repos/repos\mpizenberg\GLS_TP03\fr.enseeiht.simplePDL/SimplePDL.ecore#nextWDinSameProcess#WorkSequence#self.process = self.successor.process
@27153#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das\exe5\8._demo_de_emf\exercise-emf\orders/orders.ecore#nonDuplicatedItems#PurchaseOrder#    lines->forAll(l1, l2 |     l1 <> l2 implies l1.item <> l2.item    )
@27154#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das\exe5\8._demo_de_emf\exercise-emf\orders/orders.ecore#nonEmptyName#Item#    not name.oclIsUndefined()     and name <> ''
@27155#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das\exe5\8._demo_de_emf\exercise-emf\orders/orders.ecore#positivePrice#Item#    not price.oclIsUndefined() and price > 0
@27156#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#uniqueName#Hoja#ejercicios->isUnique(name)
@27157#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#uniqueOrder#Hoja#ejercicios->isUnique(order)
@27158#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#nonEmptyName#Ejercicio#    not name.oclIsUndefined()     and name <> ''
@27159#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#nonEmptyEnunciado#Ejercicio#    not enunciado.oclIsUndefined()    and enunciado <> ''
@27160#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#uniqueAnswer#RespuestaUnica#correctas->size()=1
@27161#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#posibleAnswers#TextoLibre#correctas->size()>0
@27162#E:/FinalProject Repos/repos\mqgmaster\uam-eps-das-project\autoevaluacion/autoevaluacion.ecore#uniqueAnswer#Ordenacion#correctas->size()=1
@27287#E:/FinalProject Repos/repos\nidebo\TSA\Practica3\model/Practica3.ecore#NombreVentanaUnico#Aplicacion#self.Ventanas->isUnique(Nombre)
@27288#E:/FinalProject Repos/repos\nidebo\TSA\Practica3\model/Practica3.ecore#NumeroMaximoMarcos#Ventana#self.Marcos->size() <= 2
@27289#E:/FinalProject Repos/repos\nidebo\TSA\Practica3\model/Practica3.ecore#derivation#Menu#self.Elementos_Menu->size()
@27290#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#columnasNombreUnico#Tabla#self.Columnas->isUnique(Nombre)
@27291#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#clavePrimariaUnaColumna#Tabla#self.Columnas->select(v | v.ClavePrimaria=true)->size() = 1
@27292#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#tablasNombreUnico#Esquema#self.Tablas->isUnique(Nombre)
@27293#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#nombreClaveAjenaDistinto#Esquema#self.Relaciones->isUnique(Nombre)
@27294#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#tipoNoNulo#Columna#self.Tipo.oclIsUndefined() = false
@27295#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#cpUnicaNonula#Columna#self.ClavePrimaria = true implies self.Unico = true and self.VNN = true
@27296#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#mismoTipo#ClaveAjena#self.Origen.Tipo = self.Destino.Tipo
@27297#E:/FinalProject Repos/repos\nidebo\TSA\Practica4\model/MetaModelo.ecore#destinoCP#ClaveAjena#self.Destino.ClavePrimaria = true
@27298#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#KeineUrlaubstageUEbrig#Person#self.leaveDays > 0 
@27299#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#KeinNameIstEingetragen#Person#self.name->size() <> 0 
@27300#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#KeinTagEingetragen#HolidayApplication#self.dates->size() <> 0 
@27301#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#NameIstNichtEingetragen#HolidayApplication#self.name->size() <> 0 
@27302#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#ChefHatKeineMitarbeiter#ResponsiblePerson#self.employees->size() <> 0 
@27303#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#SelbstRepresentation#Employee#self.standin.name <>  self.name 
@27304#E:/FinalProject Repos/repos\Nielko\MBSE-Vacation-Manager\de.tu_bs.vacation_manager.test\model/Calender.ecore#HatKeinenChef#Employee#self.responsible->size() <> 0 
@27370#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#IdentityUnique#Category#Category.allInstances()->isUnique(scheme + term)
@27371#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#SchemeEndsWithSharp#Category#scheme.substring(scheme.size(), scheme.size()) = '#'
@27372#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AttributesNameUnique#Category#attributes->isUnique(name)
@27373#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#derivation#Category#self.name.toLowerCase().oclAsType(ecore::EString)
@27374#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#ActionTermUnicity#Type#actions->isUnique(term)
@27375#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#ConstraintNameUnique#Type#constraints->isUnique(name)
@27376#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AttributeTypeMustBeEEnum#FSM#attribute.type.oclIsTypeOf(ecore::EEnum)
@27377#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#StateLiteralAlreadyDefinedInFSMAttributeType#State#owningFSM.attribute.type=self.sliteral.eEnum
@27378#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#CorrectScheme#Kind#scheme = self.oclContainer().oclAsType(Extension).scheme
@27379#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#NoCyclicInheritance#Kind#parent->closure(parent)->excludes(self)
@27380#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#EntityKindIsRootParent#Kind#self->closure(parent)->exists(k |k.term = 'entity' and k.scheme = 'http://schemas.ogf.org/occi/core#' and k.parent = null)
@27381#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AttributesNameNotAlreadyDefinedInParent#Kind#attributes.name->excludesAll(parent->closure(parent).attributes.name)
@27382#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#derivation#Kind#Entity.allInstances()->select(kind = self)
@27383#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#CorrectScheme#Action#let category = oclContainer().oclAsType(Category)in scheme = category.scheme.substring(1, category.scheme.size() - 1) + '/' + category.term + '/action#'
@27384#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#CorrectScheme#Mixin#/* Previously let ownerScheme = owner.oclAsType(Extension).scheme in scheme.substring(1,ownerScheme.size()-1) = ownerScheme.substring(1,ownerScheme.size()-1) */let owner = self.oclContainer()in if owner.oclIsTypeOf(Extension)thenlet ownerScheme = owner.oclAsType(Extension).schemein scheme.substring(1, ownerScheme.size() - 1) = ownerScheme.substring(1, ownerScheme.size() - 1) else trueendif
@27385#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#NoCyclicInheritance#Mixin#depends->closure(depends)->excludes(self)
@27386#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AttributesNameNotAlreadyDefinedInDepends#Mixin#attributes.name->excludesAll(depends->closure(depends).attributes.name)
@27387#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#derivation#Mixin#Entity.allInstances()->select(parts.mixin->includes(self))
@27388#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#IdUnique#Entity#Entity.allInstances()->isUnique(id)
@27389#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AttributesNameUnique#Entity#attributes->isUnique(name)
@27390#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#KindCompatibleWithOneAppliesOfEachMixin#Entity#parts.mixin->forAll(m |m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))
@27391#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#derivation#Entity#parts.mixin->asSet()
@27392#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#ResourceKindIsInParent#Resource#kind->closure(parent)->exists(k |k.term = 'resource' and k.scheme = 'http://schemas.ogf.org/occi/core#')
@27393#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#LinkKindIsInParent#Link#kind->closure(parent)->exists(k |k.term = 'link' and k.scheme = 'http://schemas.ogf.org/occi/core#')
@27394#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#SchemeUnique#Extension#Extension.allInstances()->isUnique(scheme)
@27395#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#KindsSchemeValid#Extension#kinds->forAll(k | k.scheme = self.scheme)
@27396#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#MixinsSchemeValid#Extension#mixins->forAll(m | m.scheme.substring(1, scheme.size() - 1) = scheme.substring(1,scheme.size() - 1))
@27397#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#TermUnicity#Extension#kinds.term->intersection(mixins.term)->isEmpty()
@27398#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#KindParentLocalOrImported#Extension#kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer()in parentExtension = self or import->includes(parentExtension))
@27399#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#MixinDependsLocalOrImported#Extension#mixins.depends->forAll(let extension = oclContainer()in extension = self or import->includes(extension))
@27400#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#MixinAppliesLocalOrImported#Extension#mixins.applies->forAll(let extension = oclContainer()in extension = self or import->includes(extension))
@27401#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AllResourcesKindsInUse#Configuration#use->includesAll(resources.kind.oclContainer())
@27402#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AllResourcesMixinsInUse#Configuration#/* Previously use->includesAll(resources.mixins.oclContainer()) */resources.parts.mixin->forAll(mo |let mixinOwner = mo.oclContainer()in if mixinOwner.oclIsTypeOf(Extension)then self.use->includes(mixinOwner.oclAsType(Extension)) else self.mixins->includes(mo) endif)
@27403#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AllResourcesLinksKindsInUse#Configuration#use->includesAll(resources.links.kind.oclContainer())
@27404#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AllResourcesLinksMixinsInUse#Configuration#/* Previously use->includesAll(resources.links.mixins.oclContainer()) */resources.links.parts.mixin->forAll(mo |let mixinOwner = mo.oclContainer()in if mixinOwner.oclIsTypeOf(Extension)then self.use->includes(mixinOwner.oclAsType(Extension)) else self.mixins->includes(mo) endif)
@27405#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AllResourcesLinksTargetsInConfiguration#Configuration#resources.links.target->forAll(r | r.oclContainer() = self)
@27406#E:/FinalProject Repos/repos\occiware\OCCI-Studio\plugins\org.eclipse.cmf.occi.core\model/OCCI.ecore#AllMixinsAreTags#Configuration#mixins->forAll(attributes->isEmpty() and actions->isEmpty() and depends->isEmpty())
@27407#E:/FinalProject Repos/repos\orcas-elite\arch-gen\01-MetamodelAndGenerator\model/anotherMicroserviceMetamodel.ecore#typeAndVersionMatch#Microservice#microserviceType.versions->select(v:Version | v = version)->notEmpty()
@27408#E:/FinalProject Repos/repos\orcas-elite\arch-gen\01-MetamodelAndGenerator\model/anotherMicroserviceMetamodel.ecore#calledCorrespond#OperationToOperationCallingDependency#calledMicroservice.restOperations->select(rop:RESTOperation | rop=calledOperation)->notEmpty()
@27409#E:/FinalProject Repos/repos\orcas-elite\arch-gen\01-MetamodelAndGenerator\model/anotherMicroserviceMetamodel.ecore#callingCorrespond#OperationToOperationCallingDependency#callingMicroservice.restOperations->select(rop:RESTOperation | rop=callingOperation)->notEmpty()
@27410#E:/FinalProject Repos/repos\orcas-elite\arch-gen\01-MetamodelAndGenerator\model/anotherMicroserviceMetamodel.ecore#callingVersionFits#OperationToOperationCallingDependency#callingMicroservice.versions->select(ver:Version|ver=callingVersion)->notEmpty()
@27411#E:/FinalProject Repos/repos\orcas-elite\arch-gen\01-MetamodelAndGenerator\model/anotherMicroserviceMetamodel.ecore#nonNullReferences#MicroserviceOperationTimeSeriesPoint#endpoint <> null and restOperation <> null
@27412#E:/FinalProject Repos/repos\orcas-elite\arch-gen\01-MetamodelAndGenerator\model/anotherMicroserviceMetamodel.ecore#correspondingReferences#MicroserviceOperationTimeSeriesPoint#endpoint.restOperations->select(rop:RESTOperation | rop = restOperation)->notEmpty()
@27413#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Gcore.ecore#validRGB#RGBColor#0 <= self.blue and self.blue <= 255 and 0 <= self.green and self.green <= 255 and 0 <= self.red and self.red <= 255
@27415#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#oneMainProcess#ProcessContainer#self.processes->select(p : Process | p.name = 'Main')->size() = 1
@27416#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#oneProcessSelectorInMainProcess#Process#self.name = 'Main' implies containProcessSelectorTask(self.startTask.oclAsType(wcore::Task))
@27417#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#body#Process#if (t.oclIsTypeOf(wcore::If)) then containProcessSelectorTask(t.oclAsType(wcore::If)._body.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::While)) then containProcessSelectorTask(t.oclAsType(wcore::While)._body.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::IfElse)) then containProcessSelectorTask(t.oclAsType(wcore::IfElse)._body.oclAsType(wcore::Task)) and containProcessSelectorTask(t.oclAsType(wcore::IfElse)._elseBody.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::Sequence)) then containProcessSelectorTask(t.oclAsType(wcore::Sequence)._body.oclAsType(wcore::Task)) or containProcessSelectorTask(t.oclAsType(wcore::Sequence).follower.oclAsType(wcore::Task)) elset.oclIsTypeOf(wcore::ProcessSelector) endif endif endif endif
@27418#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#conformingArgumentsToParameters#InvokeProcess#self.arguments -> size() = self.subProcess.variables -> select(v:wcore::Variable|v.scope.oclAsType(wcore::Scope)=wcore::Scope::GLOBAL) ->size() andSequence{1..self.arguments -> size()} -> forAll(i:Integer | let var1:wcore::Variable = self.arguments->at(i), var2:wcore::Variable=self.subProcess.variables->select(v:wcore::Variable|v.scope.oclAsType(wcore::Scope)=wcore::Scope::GLOBAL)->at(i) in var1.oclAsType(wcore::Variable).eType=var2.oclAsType(wcore::Variable).eType)
@27419#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#MapPageOutput#InvokeGUI#self.page.oclIsTypeOf(gcore::MapPage) implies self.outputData -> size() = 2 and self.outputData -> forAll(var:Variable|var.eType=ecore::EDouble)
@27420#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#LoginPageOutput#InvokeGUI#self.page.oclIsTypeOf(gcore::LoginPage) implies self.outputData -> size() = 1 and self.outputData -> forAll(var:Variable|var.eType=ecore::EBoolean)
@27421#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#LoginPageInput#InvokeGUI#self.page.oclIsTypeOf(gcore::LoginPage) implies self.input -> size() = 2 and self.input -> forAll(var:Variable|var.eType=ecore::EString)
@27422#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#ViewPageOutput#InvokeGUI#self.page.oclIsTypeOf(gcore::ViewPage) implies self.outputData -> size() = 1 and self.outputData -> forAll(var:Variable|var.eType.oclIsKindOf(ecore::EObject))
@27423#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#EditPage#InvokeGUI#self.page.oclIsTypeOf(gcore::EditPage) implies self.outputData -> size() = 1 and self.input -> size() = 1 and self.input -> forAll(var:Variable|var.eType=self.outputData -> at(1).eType)
@27424#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#SelectableListPageOutput#InvokeGUI#self.page.oclIsTypeOf(gcore::SelectableListPage) or self.page.oclIsTypeOf(gcore::ListPage) implies self.outputData -> size() = 1 and self.outputData -> forAll(var:Variable|var.upperBound=-1)
@27425#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#SelectablePageInput#InvokeGUI#self.page.oclIsTypeOf(gcore::SelectableListPage) implies self.input -> size() = 1 and self.input -> forAll(var:Variable|var.eType=self.outputData -> at(1).eType and var.upperBound=1)
@27426#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#oneGUITaskInAllSubProcesses#ProcessSelector#self.oclAsType(wcore::ProcessSelector).processes -> select(proc:wcore::Process|containInvokeGUITask(proc.startTask.oclAsType(wcore::Task))) -> size() = (self.oclAsType(wcore::ProcessSelector).processes -> size())
@27427#E:/FinalProject Repos/repos\ParisaMousavi\pimar\pimar.language\model/Wcore.ecore#body#ProcessSelector#if (t.oclIsTypeOf(wcore::If)) then containInvokeGUITask(t.oclAsType(wcore::If)._body.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::While)) then containInvokeGUITask(t.oclAsType(wcore::While)._body.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::IfElse)) then containInvokeGUITask(t.oclAsType(wcore::IfElse)._body.oclAsType(wcore::Task)) or containInvokeGUITask(t.oclAsType(wcore::IfElse)._elseBody.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::Sequence)) then containInvokeGUITask(t.oclAsType(wcore::Sequence)._body.oclAsType(wcore::Task)) or containInvokeGUITask(t.oclAsType(wcore::Sequence).follower.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::InvokeProcess)) then containInvokeGUITask(t.oclAsType(wcore::InvokeProcess).subProcess.startTask.oclAsType(wcore::Task)) elseif (t.oclIsTypeOf(wcore::ProcessSelector)) then t.oclAsType(wcore::ProcessSelector).processes -> select(proc:wcore::Process|containInvokeGUITask(proc.startTask.oclAsType(wcore::Task))) -> size() = (t.oclAsType(wcore::ProcessSelector).processes -> size()) elset.oclIsTypeOf(wcore::InvokeGUI) or t.oclIsTypeOf(wcore::CrudGui)endif endif endif endif endif endif
@27441#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/router.ecore#consumerNamesEqual#Consumer#name = rightcomp.name
@27442#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/router.ecore#serverNoIncoming#Server#incoming->isEmpty()
@27443#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/router.ecore#computerNoOutgoing#Computer#outgoing->isEmpty()
@27444#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/router.ecore#routerHandlesSpeed#Router#outgoing.speed->sum() <= incoming.speed->sum()
@27445#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/router.ecore#losSpeed#CopperCable#speed <= 4
@27446#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/router.ecore#highSpeed#GlassFiberCable#speed >= 4
@27447#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/serviceexample.ecore#sameServics#Cluster#backup = null or backup.services->includesAll(services)
@27448#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/serviceexample.ecore#goodSpeed#Cluster#designSpeed <= server.speed->sum()
@27449#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/serviceexample.ecore#onlyOneImportant#Cluster#services->select(s | s.type = ServiceType::IMPORTANT)->size() <= 1
@27450#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/serviceexample.ecore#backupDifferent#Cluster#backup <> self
@27451#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/serviceexample.ecore#speedFulfilled#Service#type = ServiceType::BESTEFFORT or ( designSpeed <= providedBy.designSpeed and (if type = ServiceType::IMPORTANT then designSpeed <= providedBy.backup.designSpeedelse type = ServiceType::WEAKCONTRACT or providedBy.backup <> null endif))
@27452#E:/FinalProject Repos/repos\patrickneubauer\IntellEdit\source\at.ac.tuwien.big.autoedit\model/serviceexample.ecore#speedValid#Server#speed > 0 and speed <= 5
@27459#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples/library3simple.ecore#maxLengthAuthor#Book#self.author.size() <= 32
@27460#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples/library3simple.ecore#patternDimension#Book#self.dimension.matches('([0-9]|([1-9][0-9]+))([.][0-9]+)? x              ([0-9]|([1-9][0-9]+))([.][0-9]+)? x              ([0-9]|([1-9][0-9]+))([.][0-9]+)?              (centimeters|cm|in|inches)')
@27461#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples/library3simple.ecore#patternIsbn#Book#self.isbn.matches('[0-9]{3}-[0-9]{2}-[0-9]{4}-[0-9]{3}-[0-9]')
@27462#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples/simpleany.ecore#maxLengthAuthor#Book#self.author.size() <= 32
@27467#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAc#ADVANCEDPROPERTYPATH#self.ac.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27468#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAspect#ADVANCEDPROPERTYPATH#self.aspect.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27469#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAc#BASICPROPERTYPATH#self.ac.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27470#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAspect#BASICPROPERTYPATH#self.aspect.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27471#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternPropRef#BASICPROPERTYPATH#self.propRef.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27472#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternIrdi#IDENTIFICATION#self.irdi.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27473#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternCountryRef#LOCALE#self.countryRef.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27474#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternLanguageRef#LOCALE#self.languageRef.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27475#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternCountryCode#LOCALIZEDSTRING#self.countryCode.matches('[A-z]*')
@27476#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternLanguageCode#LOCALIZEDSTRING#self.languageCode.matches('[A-z]*')
@27477#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternRef#PROPERTYELM#self.ref.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27478#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternTargetClassRef#PROPERTYELM#self.targetClassRef.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27479#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAc#PROPERTYPATH#self.ac.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27480#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAspect#PROPERTYPATH#self.aspect.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27481#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternCc#PROPERTYPATH#self.cc.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27482#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternAlternativeUnit#QUERYAMOUNT#self.alternativeUnit.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27483#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternBaseUnit#QUERYAMOUNT#self.baseUnit.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27484#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternSourceUnit#UNITMAPPING#self.sourceUnit.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27485#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple.ecore#patternTargetUnit#UNITMAPPING#self.targetUnit.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27486#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#APOSTERIORISEMANTICRELATIONSHIP#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#CE\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#CE\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#CE\\-([A-Z0-9_:\\.]{1,71})#[0-9]{1,9}')
@27487#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#AXIS1PLACEMENTTYPE#self.classRef.matches('0112\\-1\\-\\-\\-13584_32_1#01\\-AXIS1_PLACEMENT#1')
@27488#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#AXIS2PLACEMENT2DTYPE#self.classRef.matches('0112\\-1\\-\\-\\-13584_32_1#01\\-AXIS2_PLACEMENT_2D#1')
@27489#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#AXIS2PLACEMENT3DTYPE#self.classRef.matches('0112\\-1\\-\\-\\-13584_32_1#01\\-AXIS2_PLACEMENT_3D#1')
@27490#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#BOOLEANTYPE#self.valueFormat.size() <= 80
@27491#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternContentVersion#CLASSEXTENSION#self.contentVersion.matches('[0-9]+')
@27492#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthContentVersion#CLASSEXTENSION#self.contentVersion.size() <= 9
@27493#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthContentRevision#CLASSEXTENSION#self.contentRevision.size() <= 3
@27494#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#CLASSREFERENCE#self.classRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#01\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#01\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#01\\-([A-Z0-9_:\\.]{1,71})#[0-9]{1,9}')
@27495#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#CLASS#self.revision.size() <= 3
@27496#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternStatus#CLASS#self.status.matches('[^\\-]* [^\\s]*')
@27497#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#CLASS#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#01\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#01\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#01\\-([A-Z0-9_:\\.]{1,71})#[0-9]{1,9}')
@27498#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternConstraintRef#CONSTRAINTORCONSTRAINTID#self.constraintRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#04\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#04\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#04\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27499#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternConstraintId#CONSTRAINT#self.constraintId.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#04\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#04\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#04\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27500#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternDatatypeRef#DATATYPEREFERENCE#self.datatypeRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#09\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#09\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#09\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27501#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#DATATYPE#self.revision.size() <= 3
@27502#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternStatus#DATATYPE#self.status.matches('[^\\-]* [^\\s]*')
@27503#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#DATATYPE#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#09\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#09\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#09\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27504#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#DATEDATATYPE#self.valueFormat.size() <= 80
@27505#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#DATETIMEDATATYPE#self.valueFormat.size() <= 80
@27506#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternDictionaryRef#DICTIONARYREFERENCE#self.dictionaryRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#11\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#11\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#11\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27507#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternDicUnitRef#DICUNITREFERENCE#self.dicUnitRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#05\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#05\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#05\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27508#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternUnitRef#DICUNIT#self.unitRef.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27509#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternStatus#DICVALUE#self.status.matches('[^\\-]* [^\\s]*')
@27510#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternValueMeaningId#DICVALUE#self.valueMeaningId.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#07\\-([A-Z0-9:_\\.]{1,35})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#07\\-([A-Z0-9:_\\.]{1,35})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#07\\-([A-Z0-9:_\\.]{1,35})#[0-9]{1,9}')
@27511#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#DOCUMENTCONTENT#self.revision.size() <= 3
@27512#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValue#DOCUMENTIDENTIFIERNAMELABEL#self.value.size() <= 255
@27513#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#DOCUMENTIDENTIFIERNAMELABEL#self.countryCode.matches('[^\\-]* [^\\s]*')
@27514#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#DOCUMENTIDENTIFIERNAMELABEL#self.languageCode.matches('[^\\-]* [^\\s]*')
@27515#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#DOCUMENTIDENTIFIERNAMELABEL#self.languageCode.size() >= 2
@27516#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#DOCUMENTIDENTIFIERNAMELABEL#self.languageCode.size() <= 3
@27517#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternDocumentRef#DOCUMENTREFERENCE#self.documentRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#10\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#10\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#10\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27518#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#DOCUMENT#self.revision.size() <= 3
@27519#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternStatus#DOCUMENT#self.status.matches('[^\\-]* [^\\s]*')
@27520#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#DOCUMENT#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#10\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#10\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#10\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27521#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#GENERALTEXT#self.countryCode.matches('[^\\-]* [^\\s]*')
@27522#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#GENERALTEXT#self.languageCode.matches('[^\\-]* [^\\s]*')
@27523#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#GENERALTEXT#self.languageCode.size() >= 2
@27524#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#GENERALTEXT#self.languageCode.size() <= 3
@27525#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#HEADER#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#11\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#11\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#11\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27526#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternFileName#HTTPFILE#self.fileName.matches('[^\\s]*')
@27527#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthFileName#HTTPFILE#self.fileName.size() <= 128
@27528#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternDirName#HTTPFILE#self.dirName.matches('[^\\s]*')
@27529#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthDirName#HTTPFILE#self.dirName.size() <= 128
@27530#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#HTTPFILE#self.countryCode.matches('[^\\-]* [^\\s]*')
@27531#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#HTTPFILE#self.languageCode.matches('[^\\-]* [^\\s]*')
@27532#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#HTTPFILE#self.languageCode.size() >= 2
@27533#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#HTTPFILE#self.languageCode.size() <= 3
@27534#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCode#ILLUSTRATION#self.code.matches('[^\\-]* [^\\s]*')
@27535#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthCode#ILLUSTRATION#self.code.size() <= 18
@27536#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#INFORMATION#self.revision.size() <= 3
@27537#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#INTCURRENCYTYPE#self.valueFormat.size() <= 80
@27538#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthCurrency#INTCURRENCYTYPE#self.currency.size() <= 3
@27539#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCurrencyId#INTCURRENCYTYPE#self.currencyId.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#08\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#08\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#08\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27540#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#INTMEASURETYPE#self.valueFormat.size() <= 80
@27541#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#INTTYPE#self.valueFormat.size() <= 80
@27542#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCodedName#ITEMCLASSCASEOF#self.codedName.matches('[^\\-]* [^\\s]*')
@27543#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthCodedName#ITEMCLASSCASEOF#self.codedName.size() <= 35
@27544#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCodedName#ITEMCLASS#self.codedName.matches('[^\\-]* [^\\s]*')
@27545#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthCodedName#ITEMCLASS#self.codedName.size() <= 35
@27546#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValue#KEYWORDLABEL#self.value.size() <= 255
@27547#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#KEYWORDLABEL#self.countryCode.matches('[^\\-]* [^\\s]*')
@27548#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#KEYWORDLABEL#self.languageCode.matches('[^\\-]* [^\\s]*')
@27549#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#KEYWORDLABEL#self.languageCode.size() >= 2
@27550#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#KEYWORDLABEL#self.languageCode.size() <= 3
@27551#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#LANGUAGE#self.countryCode.matches('[^\\-]* [^\\s]*')
@27552#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#LANGUAGE#self.languageCode.matches('[^\\-]* [^\\s]*')
@27553#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#LANGUAGE#self.languageCode.size() >= 2
@27554#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#LANGUAGE#self.languageCode.size() <= 3
@27555#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCode#MESSAGE#self.code.matches('[^\\-]* [^\\s]*')
@27556#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthCode#MESSAGE#self.code.size() <= 18
@27557#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#NONQUANTITATIVECODETYPE#self.valueFormat.size() <= 80
@27558#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#NONQUANTITATIVEINTTYPE#self.valueFormat.size() <= 80
@27559#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#NONTRANSLATABLESTRINGTYPE#self.valueFormat.size() <= 80
@27560#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#NUMBERTYPE#self.valueFormat.size() <= 80
@27561#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#PLACEMENTTYPE#self.classRef.matches('0112\\-1\\-\\-\\-13584_32_1#01\\-PLACEMENT#1')
@27562#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValue#PREFERREDNAMELABEL#self.value.size() <= 255
@27563#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#PREFERREDNAMELABEL#self.countryCode.matches('[^\\-]* [^\\s]*')
@27564#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#PREFERREDNAMELABEL#self.languageCode.matches('[^\\-]* [^\\s]*')
@27565#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#PREFERREDNAMELABEL#self.languageCode.size() >= 2
@27566#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#PREFERREDNAMELABEL#self.languageCode.size() <= 3
@27567#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#PROGRAMREFERENCETYPE#self.classRef.matches('0112\\-1\\-\\-\\-13584_32_1#01\\-PROGRAM_REFERENCE#1')
@27568#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternPropertyRef#PROPERTYREFERENCE#self.propertyRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#02\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#02\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#02\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27569#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#PROPERTY#self.revision.size() <= 3
@27570#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternStatus#PROPERTY#self.status.matches('[^\\-]* [^\\s]*')
@27571#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#PROPERTY#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#02\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#02\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#02\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27572#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRecommendedPresentationFormat#PROPERTYVALUERECOMMENDEDPRESENTATION#self.recommendedPresentationFormat.size() <= 80
@27573#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#RATIONALMEASURETYPE#self.valueFormat.size() <= 80
@27574#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#RATIONALTYPE#self.valueFormat.size() <= 80
@27575#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#REALCURRENCYTYPE#self.valueFormat.size() <= 80
@27576#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthCurrency#REALCURRENCYTYPE#self.currency.size() <= 3
@27577#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCurrencyId#REALCURRENCYTYPE#self.currencyId.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)?#08\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#08\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9} ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})#08\\-([A-Z0-9:_\\.]{1,71})#[0-9]{1,9}')
@27578#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#REALMEASURETYPE#self.valueFormat.size() <= 80
@27579#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#REALTYPE#self.valueFormat.size() <= 80
@27580#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguage#RemoteLocation#self.language.matches('[^\\-]* [^\\s]*')
@27581#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguage#RemoteLocation#self.language.size() >= 2
@27582#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguage#RemoteLocation#self.language.size() <= 3
@27583#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternClassRef#REPRESENTATIONREFERENCETYPE#self.classRef.matches('0112\\-1\\-\\-\\-13584_32_1#01\\-REPRESENTATION_REFERENCE#1')
@27584#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValue#SHORTNAMELABEL#self.value.size() <= 30
@27585#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#SHORTNAMELABEL#self.countryCode.matches('[^\\-]* [^\\s]*')
@27586#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#SHORTNAMELABEL#self.languageCode.matches('[^\\-]* [^\\s]*')
@27587#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#SHORTNAMELABEL#self.languageCode.size() >= 2
@27588#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#SHORTNAMELABEL#self.languageCode.size() <= 3
@27589#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternValueCode#STRINGDICVALUE#self.valueCode.matches('[^\\-]* [^\\s]*')
@27590#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueCode#STRINGDICVALUE#self.valueCode.size() <= 35
@27591#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#STRINGTYPE#self.valueFormat.size() <= 80
@27592#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternSupplierRef#SUPPLIERREFERENCE#self.supplierRef.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)? ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}) ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})')
@27593#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthRevision#SUPPLIER#self.revision.size() <= 3
@27594#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternStatus#SUPPLIER#self.status.matches('[^\\-]* [^\\s]*')
@27595#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternId#SUPPLIER#self.id.matches('([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})(\\-([A-Z0-9:_\\.]{1,35})((\\-[019])(\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}))?)?)? ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-([A-Z0-9:_\\.]{1,35})\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5}) ([0-9]{4})\\-([A-Z0-9:_\\.]{1,35})\\-\\-\\-([A-Z0-9]{1,10})_([A-Z0-9]{0,10})_([0-9]{1,5})')
@27596#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValue#SYNONYMOUSNAMELABEL#self.value.size() <= 255
@27597#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternCountryCode#SYNONYMOUSNAMELABEL#self.countryCode.matches('[^\\-]* [^\\s]*')
@27598#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#patternLanguageCode#SYNONYMOUSNAMELABEL#self.languageCode.matches('[^\\-]* [^\\s]*')
@27599#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#minLengthLanguageCode#SYNONYMOUSNAMELABEL#self.languageCode.size() >= 2
@27600#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthLanguageCode#SYNONYMOUSNAMELABEL#self.languageCode.size() <= 3
@27601#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#TIMEDATATYPE#self.valueFormat.size() <= 80
@27602#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#TRANSLATABLESTRINGTYPE#self.valueFormat.size() <= 80
@27603#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthTranslationRevision#TRANSLATIONDATA#self.translationRevision.size() <= 3
@27604#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple1.ecore#maxLengthValueFormat#URITYPE#self.valueFormat.size() <= 80
@27605#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple2.ecore#patternIRDIs#IRDISequence#self.iRDIs->forAll(x | x.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?'))
@27610#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple4.ecore#patternLanguageRef#LanguageString#self.languageRef.matches('[0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z]{1,1}(-[0-9A-Z:_\\.]{1,70})?)?)?(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}(-[0-9A-Z:_\\.]{1,35})?--[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})? [0-9]{4}-[0-9A-Z:_\\.]{1,35}---[0-9A-Z:_\\.]{1,70}(#[0-9A-Z]{2,2}-[0-9A-Z:_\\.]{1,131}#[0-9]{1,10})?')
@27611#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple4.ecore#patternLanguageCode#LanguageString#self.languageCode.matches('[a-z]{2} [a-z]{3}')
@27612#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple4.ecore#patternCountryCode#LanguageString#self.countryCode.matches('[A-Z]{2}')
@27620#E:/FinalProject Repos/repos\patrickneubauer\XMLIntellEdit\source\at.ac.tuwien.big.xmltext\examples\dictionarySimple/dictionarySimple8.ecore#patternSchemaVersion#DOCUMENTHEADER#self.schemaVersion.matches('eCl@ss XML 2.0')
@27895#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#getUsingDataTypes()->select(oclIsKindOf(ApplicationDataType)).oclAsType(ApplicationDataType)->asOrderedSet()
@27896#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#getUsingDataTypes()->collect(t | getImplementationDataType(t))->asOrderedSet()
@27897#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#let internalUsingDataTypes : Set(AutosarDataType) = if self.internalBehavior.oclIsUndefined()then Set{}else self.internalBehavior.getUsingDataTypes()endifin getRPorts().getUsingDataTypes()->union(getPPorts().getUsingDataTypes())->union(internalUsingDataTypes)->asOrderedSet()
@27898#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#if self.internalBehavior.oclIsUndefined()then nullelse self.internalBehavior.getImplementationDataType(dataType)endif
@27899#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#if self.internalBehavior.oclIsUndefined()then Set{}else self.internalBehavior.getImplementationDataTypes(applicationDataType)endif
@27900#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#getRPorts().requiredInterface->union(getPPorts().providedInterface)->select(oclIsKindOf(ClientServerInterface)).oclAsType(ClientServerInterface)->asOrderedSet()
@27901#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#self.port->select(oclIsKindOf(RPortPrototype)).oclAsType(RPortPrototype)->asOrderedSet()
@27902#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#self.port->select(oclIsKindOf(PPortPrototype)).oclAsType(PPortPrototype)->asOrderedSet()
@27903#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RPortPrototype#if self.requiredInterface.oclIsKindOf(SenderReceiverInterface)then self.requiredInterface.oclAsType(SenderReceiverInterface).dataElement.type->asOrderedSet()else if self.requiredInterface.oclIsKindOf(ClientServerInterface)then self.requiredInterface.oclAsType(ClientServerInterface).operation.argument.type->asOrderedSet()else OrderedSet(AutosarDataType){}endifendif
@27904#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PPortPrototype#if self.providedInterface.oclIsKindOf(SenderReceiverInterface)then self.providedInterface.oclAsType(SenderReceiverInterface).dataElement.type->asOrderedSet()else if self.providedInterface.oclIsKindOf(ClientServerInterface)then self.providedInterface.oclAsType(ClientServerInterface).operation.argument.type->asOrderedSet()else OrderedSet(AutosarDataType){}endifendif
@27905#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.includedDataTypeSet->select(i | i.dataType->includes(dataType))
@27906#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.includedDataTypeSet->select(i | i.dataType->collect(t | getImplementationDataType(t))->includes(dataType))
@27907#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.includedDataTypeSet.dataType->asOrderedSet()
@27908#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#if dataType.oclIsKindOf(ImplementationDataType)then dataType.oclAsType(ImplementationDataType)else self.getImplementationDataType(dataType.oclAsType(ApplicationDataType))endif
@27909#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#let implDataType : ImplementationDataType = getImplementationDataTypes(applicationDataType)->any(true)in if implDataType.oclIsUndefined()then nullelse implDataTypeendif
@27910#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.dataTypeMapping.dataTypeMap->select(m | m.applicationDataType = applicationDataType).implementationDataType->asOrderedSet()
@27911#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#DataSendCompletedEvent#eventSource.accessedVariable.autosarVariable
@27912#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataType#if swDataDefProps.swImplPolicy.oclIsUndefined()then SwImplPolicyEnum::unspecifiedelse swDataDefProps.swImplPolicyendif
@27913#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.invalidValue.oclIsUndefined()then nullelse swDataDefProps.invalidValueendif
@27914#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.compuMethod.oclIsUndefined()then nullelse swDataDefProps.compuMethodendif
@27915#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.dataConstr.oclIsUndefined()then nullelse swDataDefProps.dataConstrendif
@27916#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.swAddrMethod.oclIsUndefined()then nullelse swDataDefProps.swAddrMethodendif
@27917#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#if swDataDefProps.implementationDataType.oclIsUndefined()then selfelse swDataDefProps.implementationDataType.getLeafImplementationDataType()endif
@27918#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'VALUE'
@27919#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'DATA_REFERENCE'
@27920#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'ARRAY'
@27921#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'STRUCTURE'
@27922#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'UNION'
@27923#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#category = 'TYPE_REFERENCE'
@27924#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#not isPrimitiveType()
@27925#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#ImplementationDataType#if swDataDefProps.baseType.oclIsUndefined()then nullelse swDataDefProps.baseTypeendif
@27926#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#ImplementationDataType#if swDataDefProps.swAlignment.oclIsUndefined()then nullelse swDataDefProps.swAlignmentendif
@27927#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataTypeElement#category = 'TYPE_REFERENCE'
@27928#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not self.swAddrMethod.oclIsUndefined()then self.swAddrMethodelse if not implType.swAddrMethod.oclIsUndefined()then implType.swAddrMethodelse if not applType.swAddrMethod.oclIsUndefined()then applType.swAddrMethodelse nullendif endif endif
@27929#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#let implType : m2::ImplementationDataType = getImplementationDataType()in if not self.swAlignment.oclIsUndefined()then self.swAlignmentelse if not implType.swAlignment.oclIsUndefined()then implType.swAlignmentelse nullendif endif
@27930#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#if self.type.oclIsKindOf(m2::ApplicationDataType)then self.type.oclAsType(m2::ApplicationDataType)else nullendif
@27931#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#if self.type.oclIsKindOf(m2::ImplementationDataType)then self.type.oclAsType(m2::ImplementationDataType)else nullendif
@27932#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataPrototype#if swDataDefProps.swImplPolicy.oclIsUndefined()then SwImplPolicyEnum::unspecifiedelse swDataDefProps.swImplPolicyendif
@27933#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#DataPrototype#if swDataDefProps.swAddrMethod.oclIsUndefined()then nullelse swDataDefProps.swAddrMethodendif
@27934#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#DataPrototype#if swDataDefProps.swAlignment.oclIsUndefined()then nullelse swDataDefProps.swAlignmentendif
@27935#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ConstantReference#if constant.valueSpec.oclIsKindOf(ConstantReference)then constant.valueSpec.oclAsType(ConstantReference).getEndValueSpec()else constant.valueSpecendif
@27936#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataFilter#dataFilterType <> DataFilterTypeEnum::always
@27937#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataFilter#self.dataFilterType = another.dataFilterType and self.mask = another.mask and self.max = another.max andself.min = another.min and self.offset = another.offset and self.period = another.period and self.x = another.x
@27938#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#InvalidationPolicy#not handleInvalid.oclIsUndefined() and (handleInvalid = m2::HandleInvalidEnum::keep or handleInvalid =m2::HandleInvalidEnum::replace)
@27939#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#InvalidationPolicy#not handleInvalid.oclIsUndefined() and handleInvalid = m2::HandleInvalidEnum::keep
@27940#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#InvalidationPolicy#not handleInvalid.oclIsUndefined() and handleInvalid = m2::HandleInvalidEnum::replace
@27941#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataConstr#let lowerLimit : Limit = self.dataConstrRule.internalConstrs.lowerLimit->any(true)in if lowerLimit.oclIsUndefined()then nullelse lowerLimit.valueendif
@27942#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataConstr#let upperLimit : Limit = self.dataConstrRule.internalConstrs.upperLimit->any(true)in if upperLimit.oclIsUndefined()then nullelse upperLimit.valueendif
@27943#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#BswInternalBehavior#entity->select(oclIsKindOf(BswSchedulableEntity)).oclAsType(BswSchedulableEntity)->asOrderedSet()
@27944#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#BswModuleDescription#let behavior : Set(BswInternalBehavior) = self.internalBehavior->select(implementation->size() > 0)in if behavior->isEmpty() thennullelsebehavior->any(true)endif
@27945#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ComSignal#not comTransferProperty.oclIsUndefined() and comTransferProperty <> ComTransferPropertyEnum::PENDING
@27946#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ComSignalGroup#not comTransferProperty.oclIsUndefined() and comTransferProperty <> ComTransferPropertyEnum::PENDING
@27947#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#EcucPartitionCollection#self.ecucPartition.getOwnerCore()->asOrderedSet()
@27948#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#EcucPartition#let osApp : OsApplication = self.implOsApplication->any(true)in if osApp.oclIsUndefined()then falseelse osApp.osTrustedendif
@27949#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#EcucPartition#let osApp : OsApplication = self.implOsApplication->any(true)in if osApp.oclIsUndefined()then nullelse osApp.osApplicationCoreAssignmentendif
@27950#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OsIocCommunication#let loopback : OsIocSenderProperties = osIocSenderProperties->any(osIocSendingOsApplication = self.osIocReceiverProperties.osIocReceivingOsApplication)in if loopback.oclIsUndefined()then null else loopbackendif
@27951#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OsOS#not self.osNumberOfCores.oclIsUndefined()
@27952#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#self.prototype.shortName
@27953#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#getSwImplPolicy() = m2::SwImplPolicyEnum::queued
@27954#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not applType.getSwImplPolicy().oclIsUndefined() and applType.getSwImplPolicy() <> m2::SwImplPolicyEnum::unspecifiedthen applType.getSwImplPolicy()else if not implType.getSwImplPolicy().oclIsUndefined() and implType.getSwImplPolicy() <> m2::SwImplPolicyEnum::unspecifiedthen implType.getSwImplPolicy()else self.prototype.getSwImplPolicy()endif endif
@27955#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType()in if not implType.baseType.oclIsUndefined()then implType.baseTypeelse nullendif
@27956#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not applType.invalidValue.oclIsUndefined()then applType.invalidValueelse if not implType.invalidValue.oclIsUndefined()then implType.invalidValueelse nullendif endif
@27957#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not self.prototype.swAddrMethod.oclIsUndefined()then self.prototype.swAddrMethodelse if not implType.swAddrMethod.oclIsUndefined()then implType.swAddrMethodelse if not implType.getLeafImplementationDataType().swAddrMethod.oclIsUndefined()then implType.getLeafImplementationDataType().swAddrMethodelse if not applType.swAddrMethod.oclIsUndefined()then applType.swAddrMethodelse nullendif endif endif endif
@27958#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType()in if not self.prototype.swAlignment.oclIsUndefined()then self.prototype.swAlignmentelse if not implType.swAlignment.oclIsUndefined()then implType.swAlignmentelse nullendif endif
@27959#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#if self.prototype.type.oclIsKindOf(m2::ApplicationDataType)then self.prototype.type.oclAsType(m2::ApplicationDataType)else nullendif
@27960#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#if self.prototype.type.oclIsKindOf(m2::ImplementationDataType)then self.prototype.type.oclAsType(m2::ImplementationDataType)elsegetOwnerAtomicSwc().getImplementationDataType(self.prototype.type.oclAsType(m2::ApplicationPrimitiveDataType))endif
@27961#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#self.contextPort.parent.oclAsType(m2::AtomicSwComponentType)
@27962#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInComposition#prototype.oclIsKindOf(PVariableDataInstanceInSwc)
@27963#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInComposition#prototype.oclIsKindOf(RVariableDataInstanceInSwc)
@27964#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInComposition#self.prototype.prototype.shortName
@27965#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationEnabled().oclAsType(Boolean)
@27966#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#contextPPort.providedInterface.oclAsType(m2::SenderReceiverInterface).invalidationPolicy->any(dataElement = self.prototype)
@27967#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#let initValue : m2::ValueSpecification = getComSpec().oclAsType(m2::NonqueuedSenderComSpec).initValuein if initValue.oclIsUndefined()then nullelse initValueendif
@27968#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#let comSpec : m2::SenderComSpec = contextPPort.providedComSpec.oclAsType(m2::SenderComSpec)->any(dataElement = self.prototype)in if comSpec.oclIsUndefined()then nullelse comSpecendif
@27969#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#getOwnerAtomicSwc().internalBehavior.runnable.dataSendPoint->exists(accessedVariable.autosarVariable = self)
@27970#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#not getComSpec().transmissionAcknowledge.oclIsUndefined()
@27971#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#not getComSpec().transmissionAcknowledge.oclIsUndefined() and getComSpec().transmissionAcknowledge.timeout <> 0
@27972#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#ar4x::m2::DataSendCompletedEvent.allInstances()->select(eventSourceData = self)->asOrderedSet()
@27973#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#PVariableDataInstanceInSwc#contextPort.oclAsType(m2::PPortPrototype)
@27974#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#if getFilter().oclIsUndefined()then falseelse getFilter().isFilterEnabled()endif
@27975#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let filter : m2::DataFilter = getComSpec().oclAsType(m2::NonqueuedReceiverComSpec).filterin if filter.oclIsUndefined()then nullelse filterendif
@27976#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let comSpec : m2::NonqueuedReceiverComSpec = getComSpec().oclAsType(m2::NonqueuedReceiverComSpec)in not comSpec.oclIsUndefined() and comSpec.aliveTimeout <> 0
@27977#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationEnabled().oclAsType(Boolean)
@27978#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationKeep().oclAsType(Boolean)
@27979#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationReplace().oclAsType(Boolean)
@27980#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#contextRPort.requiredInterface.oclAsType(m2::SenderReceiverInterface).invalidationPolicy->any(dataElement = self.prototype)
@27981#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let initValue : m2::ValueSpecification = getComSpec().oclAsType(m2::NonqueuedReceiverComSpec).initValuein if initValue.oclIsUndefined()then nullelse initValueendif
@27982#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let comSpec : m2::QueuedReceiverComSpec = getComSpec().oclAsType(m2::QueuedReceiverComSpec)in if comSpec.oclIsUndefined()then nullelse comSpec.queueLengthendif
@27983#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let comSpec : m2::ReceiverComSpec = contextRPort.requiredComSpec.oclAsType(m2::ReceiverComSpec)->any(dataElement = self.prototype)in if comSpec.oclIsUndefined()then nullelse comSpecendif
@27984#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#ar4x::m2::DataReceivedEvent.allInstances()->select(data = self)->asOrderedSet()
@27985#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#ar4x::m2::DataReceiveErrorEvent.allInstances()->select(data = self)->asOrderedSet()
@27986#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#RVariableDataInstanceInSwc#contextPort.oclAsType(m2::RPortPrototype)
@27987#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OperationInstanceInSwc#self.contextPort.parent.oclAsType(m2::AtomicSwComponentType)
@27988#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OperationInstanceInComposition#self.prototype.prototype.shortName
@27989#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#if this_.oclIsKindOf(m2::ConstantReference)then this_.oclAsType(m2::ConstantReference).getEndValueSpec()else this_endif
@27990#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let endValueSpec : m2::ValueSpecification = getEndValueSpec(this_)in if endValueSpec.oclIsKindOf(ar4x::m2::NumericalValueSpecification)then endValueSpec.oclAsType(ar4x::m2::NumericalValueSpecification).value.toString()else if endValueSpec.oclIsKindOf(ar4x::m2::TextValueSpecification)then endValueSpec.oclAsType(ar4x::m2::TextValueSpecification).valueelse nullendif endif
@27991#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let end : ar4x::m2::ValueSpecification = getEndValueSpec(this_)inend.oclIsKindOf(ar4x::m2::NumericalValueSpecification) or end.oclIsKindOf(ar4x::m2::TextValueSpecification)
@27992#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let end : ar4x::m2::ValueSpecification = getEndValueSpec(value)inend.oclIsKindOf(ar4x::m2::ArrayValueSpecification)andend.oclAsType(ar4x::m2::ArrayValueSpecification).element->size() = type.subElement->first().arraySizeandend.oclAsType(ar4x::m2::ArrayValueSpecification).element->forAll(v | isForVALUE(v))
@27993#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let end : ar4x::m2::ValueSpecification = getEndValueSpec(value)inend.oclIsKindOf(ar4x::m2::RecordValueSpecification)andend.oclAsType(ar4x::m2::RecordValueSpecification).field->size() = type.subElement->size()andend.oclAsType(ar4x::m2::RecordValueSpecification).field->forAll(v | isForVALUE(v))
@27994#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let end : ar4x::m2::ValueSpecification = getEndValueSpec(value)inend.oclIsKindOf(ar4x::m2::RecordValueSpecification)andend.oclAsType(ar4x::m2::RecordValueSpecification).field->size() = 1andisForVALUE(end.oclAsType(ar4x::m2::RecordValueSpecification).field->first())
@27995#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let end : ar4x::m2::ValueSpecification = getEndValueSpec(value)inend.oclIsKindOf(ar4x::m2::NumericalValueSpecification)
@27996#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#if type.category = 'VALUE' thenisForVALUE(value)else if type.category = 'ARRAY' thenisForARRAY(value, type)else if type.category = 'STRUCTURE' thenisForSTRUCTURE(value, type)else if type.category = 'UNION' thenisForUNION(value, type)else if type.category = 'DATA_REFERENCE' thenisForDATA_REFERENCE(value)elsefalseendif endif endif endif endif
@27997#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ValueSpecificationEx#let endV1 : ar4x::m2::ValueSpecification = getEndValueSpec(v1),endV2 : ar4x::m2::ValueSpecification = getEndValueSpec(v2)inif endV1.oclIsTypeOf(ar4x::m2::ArrayValueSpecification) thenlet arrayV1 : ar4x::m2::ArrayValueSpecification = endV1.oclAsType(ar4x::m2::ArrayValueSpecification),arrayV2 : ar4x::m2::ArrayValueSpecification = endV2.oclAsType(ar4x::m2::ArrayValueSpecification)inif arrayV1.element->size() <> arrayV2.element->size() thenfalseelseSequence{1..(arrayV1.element->size())}->iterate(i : Integer;flag : Boolean = true | flag and equalsInitValue(arrayV1.element->at(i), arrayV2.element->at(i)))endifelse if endV1.oclIsTypeOf(ar4x::m2::RecordValueSpecification) thenlet recV1 : ar4x::m2::RecordValueSpecification = endV1.oclAsType(ar4x::m2::RecordValueSpecification),recV2 : ar4x::m2::RecordValueSpecification = endV2.oclAsType(ar4x::m2::RecordValueSpecification)inif recV1.field->size() <> recV2.field->size() thenfalseelseSequence{1..(recV1.field->size())}->iterate(i : Integer;flag : Boolean = true | flag and equalsInitValue(recV1.field->at(i), recV2.field->at(i)))endifelsegetValueSpecAsText(endV1) = getValueSpecAsText(endV2)endif endif
@27998#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#NonqueuedSenderComSpecEx#if this_.initValue.oclIsUndefined() thenfalseelse if this_.dataElement.type.oclIsTypeOf(ar4x::m2::ImplementationDataType) thenlet type : ar4x::m2::ImplementationDataType = this_.dataElement.type.oclAsType(ar4x::m2::ImplementationDataType)inif type.category = 'VALUE' thenValueSpecificationEx::isForVALUE(this_.initValue)else if type.category = 'ARRAY' thentrueelse if type.category = 'STRUCTURE' thentrueelse if type.category = 'UNION' thentrueelse if type.category = 'DATA_REFERENCE' thentrueelse if type.category = 'TYPE_REFERENCE' thentrueelsefalseendif endif endif endif endif endifelsefalseendif endif
@27999#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#CompuMethodEx#Set{'TEXTTABLE', 'SCALE_LINEAR_AND_TEXTTABLE', 'SCALE_RATIONAL_AND_TEXTTABLE'}->includes(this_.category) and not this_.compuInternalToPhys.oclIsUndefined()
@28000#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#CompuScaleEx#not this_.lowerLimit.oclIsUndefined() and not this_.upperLimit.oclIsUndefined() and this_.lowerLimit.value =this_.upperLimit.value
@28001#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#CompuScaleEx#if not this_.symbol.oclIsUndefined()then this_.symbolelse if not this_.compuConst.vt.oclIsUndefined()then this_.compuConst.vtelse if not this_.shortLabel.oclIsUndefined()then this_.shortLabelelse nullendif endif endif
@28002#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ApplicationDataTypeEx#not this_.dataConstr.getUpperLimitValue().oclIsUndefined() and notthis_.dataConstr.getLowerLimitValue().oclIsUndefined()
@28003#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ImplementationDataTypeEx#if this_.baseType.oclIsUndefined() then trueelse not this_.baseType.nativeDeclaration.oclIsUndefined()endif
@28004#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ImplementationDataTypeEx#let compuMethod : m2::CompuMethod = getCompuMethod(this_, applicationDataType)in if compuMethod.oclIsUndefined()then falseelse compuMethodEx.providesEnumConstant(compuMethod)endif
@28005#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ImplementationDataTypeEx#if not applicationDataType.compuMethod.oclIsUndefined()then applicationDataType.compuMethodelse if not this_.compuMethod.oclIsUndefined()then this_.compuMethodelse nullendif endif
@28006#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExclusiveAreaEx#let bswInternalBehavior : ar4x::m2::BswInternalBehavior = this_.parent.oclAsType(ar4x::m2::BswInternalBehavior)inbswInternalBehavior.bswSchedulableEntity->select(canEnterExclusiveArea->includes(this_))->union(bswInternalBehavior.bswSchedulableEntity->select(runsInsideExclusiveArea->includes(this_)))->collect(m | bswSchedulableEntityEx.getUsingPartition(m))->asSet()
@28007#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#pre#ExclusiveAreaEx#this_.parent.oclIsKindOf(ar4x::m2::BswInternalBehavior)
@28008#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExclusiveAreaEx#this_.parent.oclAsType(ar4x::m2::SwcInternalBehavior).runnable.canEnterExclusiveArea->includes(this_)
@28009#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#pre#ExclusiveAreaEx#this_.parent.oclIsKindOf(ar4x::m2::SwcInternalBehavior)
@28010#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExclusiveAreaEx#this_.parent.oclAsType(ar4x::m2::BswInternalBehavior).bswSchedulableEntity.canEnterExclusiveArea->includes(this_)
@28011#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#pre#ExclusiveAreaEx#this_.parent.oclIsKindOf(ar4x::m2::BswInternalBehavior)
@28012#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SenderReceiverToSignalMappingEx#if this_.dataElement.oclIsKindOf(instance::VariableDataInstanceInComposition)then this_.dataElement.oclAsType(instance::VariableDataInstanceInComposition)elselet dataInstanceInComposition : instance::VariableDataInstanceInComposition =instance::DelegationDataInstanceConnector.allInstances()->any(outer = this_.dataElement).innerin if dataInstanceInComposition.oclIsUndefined()then nullelse dataInstanceInCompositionendifendif
@28013#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SenderReceiverToSignalGroupMappingEx#if this_.dataElement.oclIsKindOf(instance::VariableDataInstanceInComposition)then this_.dataElement.oclAsType(instance::VariableDataInstanceInComposition)elselet dataInstanceInComposition : instance::VariableDataInstanceInComposition =instance::DelegationDataInstanceConnector.allInstances()->any(outer = this_.dataElement).innerin if dataInstanceInComposition.oclIsUndefined()then nullelse dataInstanceInCompositionendifendif
@28014#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#OsTaskEx#let partition : ecuc::EcucPartition = this_.ownerApplication.osAppEcucPartition->any(true)in if partition.oclIsUndefined()then nullelse partitionendif
@28015#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSignalEx#getVariableDataInstanceInCompositions(this_)->exists(isProvided())
@28016#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSignalEx#getVariableDataInstanceInCompositions(this_)->exists(isRequired())
@28017#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSignalEx#let systemSignal : ar4x::m2::SystemSignal = this_.comSystemTemplateSystemSignal.iSignal.systemSignalin if systemSignal.oclIsUndefined()then OrderedSet{}else ar4x::m2::SenderReceiverToSignalMapping.allInstances()->select(m | m.systemSignal = systemSignal)->collect(m | senderReceiverToSignalMappingEx.getMappedDataInstanceInComposition(m))->select(not oclIsUndefined())->asOrderedSet()endif
@28018#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSignalGroupEx#getVariableDataInstanceInCompositions(this_)->exists(isProvided())
@28019#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSignalGroupEx#getVariableDataInstanceInCompositions(this_)->exists(isRequired())
@28020#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSignalGroupEx#let systemSignalGroup : ar4x::m2::SystemSignalGroup = this_.comSystemTemplateSignalGroup.iSignalGroup.systemSignalGroupin if systemSignalGroup.oclIsUndefined()then OrderedSet{}else ar4x::m2::SenderReceiverToSignalGroupMapping.allInstances()->select(m | m.signalGroup = systemSignalGroup)->collect(m | senderReceiverToSignalGroupMappingEx.getMappedDataInstanceInComposition(m))->select(not oclIsUndefined())->asOrderedSet()endif
@28021#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#EcucPartitionEx#let osOs : ecuc::OsOS = ecuc::OsOS.allInstances()->any(true)in this_.getOwnerCore().oclIsUndefined() or osOs.osMasterCoreId = this_.getOwnerCore()
@28022#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#EcucPartitionEx#isInMasterCore(this_) and this_.ecucPartitionBswModuleExecution
@28023#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#EcucPartitionEx#this_.partitionCanBeRestarted
@28024#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#EcucPartitionEx#this_.partitionCanBeRestarted
@28025#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataPrototypeEx#let initStrategy : ecuc::RteInitializationStrategyEnum =getInitializationStrategy(this_)in initStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_DATA_DECLARATION orinitStrategy =ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_DATA_DECLARATION_AND_PARTITION_RESTART
@28026#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataPrototypeEx#let initStrategy : ecuc::RteInitializationStrategyEnum =getInitializationStrategy(this_)in initStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_START or initStrategy =ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_START_AND_PARTITION_RESTART
@28027#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataPrototypeEx#let initStrategy : ecuc::RteInitializationStrategyEnum =getInitializationStrategy(this_)in initStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_DATA_DECLARATION_AND_PARTITION_RESTART orinitStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_START_AND_PARTITION_RESTART
@28028#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataPrototypeEx#let behavior : ar4x::ecuc::RteInitializationBehavior = ecuc::RteInitializationBehavior.allInstances()->select(rteSectionInitializationPolicy->includes(getSectionInitializationPolicy(this_)))->any(true)in if behavior.oclIsUndefined()then ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_STARTelse behavior.rteInitializationStrategyendif
@28029#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataPrototypeEx#let swAddrMethod : m2::SwAddrMethod = this_.getSwAddrMethod()in if swAddrMethod.oclIsUndefined()then nullelse swAddrMethod.sectionInitializationPolicyendif
@28030#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataPrototypeEx#let swAddrMethod : m2::SwAddrMethod = this_.getSwAddrMethod()in if not swAddrMethod.oclIsUndefined()then swAddrMethodelse if not this_.getImplementationDataType().oclIsUndefined()then this_.getImplementationDataType().getLeafImplementationDataType()else nullendif endif
@28031#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let swComponentInstance : instance::SwComponentInstanceInSystem = this_.parent.contextComponent.instance->first()in if swComponentInstance.oclIsUndefined() or swComponentInstance.ownerPartition->isEmpty()then nullelse swComponentInstance.ownerPartition->any(true)endif
@28032#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let initStrategy : ecuc::RteInitializationStrategyEnum =getInitializationStrategy(this_.prototype)in initStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_DATA_DECLARATION orinitStrategy =ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_DATA_DECLARATION_AND_PARTITION_RESTART
@28033#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let initStrategy : ecuc::RteInitializationStrategyEnum =getInitializationStrategy(this_.prototype)in initStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_START or initStrategy =ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_START_AND_PARTITION_RESTART
@28034#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let initStrategy : ecuc::RteInitializationStrategyEnum =getInitializationStrategy(this_.prototype)in initStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_DATA_DECLARATION_AND_PARTITION_RESTART orinitStrategy = ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_START_AND_PARTITION_RESTART
@28035#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let initValue : m2::ValueSpecification = getInitValue(this_)in if initValue.oclIsUndefined()then nullelse valueSpecificationEx.getValueSpecAsText(initValue)endif
@28036#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let behavior : ar4x::ecuc::RteInitializationBehavior = ecuc::RteInitializationBehavior.allInstances()->select(rteSectionInitializationPolicy->includes(getSectionInitializationPolicy(this_)))->any(true)in if behavior.oclIsUndefined()then ecuc::RteInitializationStrategyEnum::RTE_INITIALIZATION_STRATEGY_AT_RTE_STARTelse behavior.rteInitializationStrategyendif
@28037#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let swAddrMethod : m2::SwAddrMethod = this_.getSwAddrMethod()in if swAddrMethod.oclIsUndefined()then nullelse swAddrMethod.sectionInitializationPolicyendif
@28038#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let receiverInitValue : m2::ValueSpecification = getReceiverInitValue(this_) , senderInitValue :m2::ValueSpecification = getSenderInitValue(this_)in if not receiverInitValue.oclIsUndefined()then receiverInitValueelse senderInitValueendif
@28039#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#if this_.prototype.oclIsKindOf(instance::RVariableDataInstanceInSwc)then this_.prototype.oclAsType(instance::RVariableDataInstanceInSwc).getInitValue()elselet initValue : m2::ValueSpecification =this_.requesterConnection.requester.prototype.oclAsType(instance::RVariableDataInstanceInSwc).getInitValue()->any(not oclIsUndefined())in if initValue.oclIsUndefined()then nullelse initValueendifendif
@28040#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#if this_.prototype.oclIsKindOf(instance::PVariableDataInstanceInSwc)then this_.prototype.oclAsType(instance::PVariableDataInstanceInSwc).getInitValue()elselet initValue : m2::ValueSpecification =this_.providerConnection.provider.prototype.oclAsType(instance::PVariableDataInstanceInSwc).getInitValue()->any(not oclIsUndefined())in if initValue.oclIsUndefined()then nullelse initValueendifendif
@28041#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let receiverSwAddrMethod : m2::SwAddrMethod = getReceiverSwAddrMethod(this_) , senderSwAddrMethod :m2::SwAddrMethod = getSenderSwAddrMethod(this_)in if not senderSwAddrMethod.oclIsUndefined()then senderSwAddrMethodelse receiverSwAddrMethodendif
@28042#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#if this_.prototype.oclIsKindOf(instance::RVariableDataInstanceInSwc)then this_.prototype.getSwAddrMethod()elselet swAddrMethod : m2::SwAddrMethod =this_.requesterConnection.requester.prototype.getSwAddrMethod()->any(not oclIsUndefined())in if swAddrMethod.oclIsUndefined()then nullelse swAddrMethodendifendif
@28043#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#if this_.prototype.oclIsKindOf(instance::PVariableDataInstanceInSwc)then this_.prototype.getSwAddrMethod()elselet swAddrMethod : m2::SwAddrMethod =this_.providerConnection.provider.prototype.getSwAddrMethod()->any(not oclIsUndefined())in if swAddrMethod.oclIsUndefined()then nullelse swAddrMethodendifendif
@28044#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInCompositionEx#let initValue1 : m2::ValueSpecification = getInitValue(v1),initValue2 : m2::ValueSpecification = getInitValue(v2)inif initValue1.oclIsUndefined() and initValue2.oclIsUndefined() thentrueelse if initValue1.oclIsUndefined() or initValue2.oclIsUndefined() thenfalseelsevalueSpecificationEx.equalsInitValue(initValue1, initValue2)endif endif
@28045#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInSwcEx#not this_.isEventSemantics()
@28046#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#VariableDataInstanceInSwcEx#let swAlignment : String = this_.getSwAlignment(), baseType : m2::SwBaseType = this_.getBaseType() inif not swAlignment.oclIsUndefined()then alignmentTypeEx.getMemoryMappingAlignment(swAlignment)else if not baseType.baseTypeSize.oclIsUndefined()then baseType.baseTypeSize.toString()else nullendif endif
@28047#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#PVariableDataInstanceInSwcEx#not this_.isEventSemantics() and this_.isAccessedByDataSendPoint()
@28048#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#PVariableDataInstanceInSwcEx#not this_.isEventSemantics() and this_.isInvalidationEnabled() and this_.isAccessedByDataSendPoint()
@28049#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#PVariableDataInstanceInSwcEx#this_.isEventSemantics() and this_.isAccessedByDataSendPoint()
@28050#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#PVariableDataInstanceInSwcEx#this_.isAccessedByDataSendPoint() and this_.isTAckEnabled()
@28051#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RVariableDataInstanceInSwcEx#requiresFilterOldValueVariable(this_) or requiresFilterOccurrenceVariable(this_)
@28052#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RVariableDataInstanceInSwcEx#not this_.getFilter().oclIsUndefined() and this_.getFilter().dataFilterType =m2::DataFilterTypeEnum::maskedNewDiffersMaskedOld
@28053#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RVariableDataInstanceInSwcEx#not this_.getFilter().oclIsUndefined() and this_.getFilter().dataFilterType =m2::DataFilterTypeEnum::oneEveryN
@28054#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RVariableDataInstanceInSwcEx#not this_.isEventSemantics() andthis_.getOwnerAtomicSwc().internalBehavior.runnable.dataReceivePointByArgument->exists(accessedVariable.autosarVariable = this_)
@28055#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RVariableDataInstanceInSwcEx#this_.isEventSemantics() and this_.getOwnerAtomicSwc().internalBehavior.runnable.dataReceivePointByArgument->exists(accessedVariable.autosarVariable = this_)
@28056#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ROperationInstanceInSwcEx#this_.getOwnerAtomicSwc().internalBehavior.runnable.serverCallPoint->exists(operation = this_)
@28057#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#AssemblyDataInstanceConnectorEx#variableDataInstanceInCompositionEx.getPartition(this_.provider) <>variableDataInstanceInCompositionEx.getPartition(this_.requester)
@28058#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#let receivers : Set(rte::interaction::InternalEcuReceiver) = this_.getInternalEcuReceivers() ,filterReceivers : Set(rte::interaction::InternalEcuReceiver) = receivers->select(isFilterEnabled())in receivers->exists(isFilterEnabled())and (receivers->exists(hasMultipleSenders())or not receivers->forAll(isFilterEnabled())or filterReceivers->exists(r1, r2 | not r1.getFilter().isCompatibleWith(r2.getFilter())))
@28059#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#let receivers : Set(rte::interaction::InternalEcuReceiver) = this_.getInternalEcuReceivers() ,invReceivers : Set(rte::interaction::InternalEcuReceiver) = receivers->select(isInvalidationEnabled())in receivers->exists(isInvalidationEnabled())and (not receivers->forAll(isInvalidationEnabled())or invReceivers->exists(r1, r2 | r1.getHandleInvalid() <> r2.getHandleInvalid()))
@28060#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#this_.hasMultipleInternalEcuReceivers()and this_.getInternalEcuReceivers()->exists(r1, r2 | not variableDataInstanceInCompositionEx.equalsInitValue(r1.source, r2.source))
@28061#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#this_.sendInteraction->exists(not implementation.oclIsUndefined())or this_.getInternalEcuReceivers()->exists(activatesOnReceived->notEmpty())
@28062#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#this_.sendInteraction->exists(not implementation.oclIsUndefined() and receiveInteraction.getInternalEcuReceivers()->exists(isInvalidationEnabled()))or this_.getInternalEcuReceivers()->exists(activatesOnReceived->notEmpty() and isInvalidationEnabled())
@28063#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#this_.sendInteraction->exists(not implementation.oclIsUndefined() and receiveInteraction.getInternalEcuReceivers()->exists(isAliveTimeoutEnabled()))
@28064#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuSenderEx#providesComRxCallback(this_)   or providesComInvCallback(this_)   or providesComRxTOutCallback(this_)
@28065#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuReceiverEx#this_.getInternalEcuSenders()->select(sendInteraction->exists(implementation.oclIsKindOf(rte::interaction::ComSendImplementation)))->exists(source.prototype.oclAsType(ar4x::instance::PVariableDataInstanceInSwc).isTAckEnabled())
@28066#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ExternalEcuReceiverEx#this_.getInternalEcuSenders()->select(sendInteraction->exists(implementation.oclIsKindOf(rte::interaction::ComSendImplementation)))->exists(source.prototype.oclAsType(ar4x::instance::PVariableDataInstanceInSwc).isTAckTimeoutEnabled())
@28067#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#EntityStarterEx#this_.startInteraction.implementation->select(oclIsKindOf(interaction::TimingTriggeringEntityStartImplementation)).oclAsType(interaction::TimingTriggeringEntityStartImplementation)->asOrderedSet()
@28068#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#BswSchedulableEntityEx#if ar4x::m2::BswImplementation.allInstances()->exists(behavior = this_.parent) thengetCallRootBswSchedulableEntities(this_)->collect(m | getMappedTasks(m)).ownerApplication.osAppEcucPartition->asSet()elseSet{}endif
@28069#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#BswSchedulableEntityEx#this_.event.config->select(not rteBswMappedToTask.oclIsUndefined()).rteBswMappedToTask->asSet()
@28070#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#BswSchedulableEntityEx#getCallerBswSchedulableEntitiesByMode(this_)
@28071#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#BswSchedulableEntityEx#let sourceEvent : Set(ar4x::m2::BswModeSwitchEvent) = this_.event->select(oclIsKindOf(ar4x::m2::BswModeSwitchEvent)).oclAsType(ar4x::m2::BswModeSwitchEvent)->select(config->exists(rteBswMappedToTask.oclIsUndefined()))->asSet(),eventSourceRequiredModePrototypes : Set(ar4x::m2::ModeDeclarationGroupPrototype) = sourceEvent.modeIref.contextModeDeclarationGroup->select(m | this_.accessedModeGroup->includes(m))->asSet(),eventSourceProvidedModePrototypes : Set(ar4x::m2::ModeDeclarationGroupPrototype) = eventSourceRequiredModePrototypes->collect(m | modeDeclarationGroupPrototypeEx.getConnectedProvidedModePrototypes(m))->asSet()in eventSourceProvidedModePrototypes->collect(m | modeDeclarationGroupPrototypeEx.getModeManagerBswSchedulableEntities(m))->asSet()
@28072#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#getModeManagerBswSchedulableEntities(this_)->collect(m | bswSchedulableEntityEx.getUsingPartition(m))->asOrderedSet()
@28073#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#getModeUserBswSchedulableEntities(this_)->collect(m | bswSchedulableEntityEx.getUsingPartition(m))->asOrderedSet()
@28074#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#getUsingPartitionForManager(this_)->union(getUsingPartitionForUser(this_))->asOrderedSet()
@28075#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#let enableInternalBehavior : ar4x::m2::BswInternalBehavior = getParentBswModuleDescription(this_).getEnableInternalBehavior()in if not enableInternalBehavior.oclIsUndefined() thenenableInternalBehavior.bswSchedulableEntity->select(managedModeGroup->includes(this_))elseSet{}endif
@28076#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#let enableInternalBehavior : ar4x::m2::BswInternalBehavior = getParentBswModuleDescription(this_).getEnableInternalBehavior()in if not enableInternalBehavior.oclIsUndefined() thenenableInternalBehavior.bswSchedulableEntity->select(accessedModeGroup->includes(this_))elseSet{}endif
@28077#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#let providerBswm : ar4x::m2::BswModuleDescription = ar4x::m2::BswModuleDescription.allInstances()->select(providedModeGroup->includes(this_))->any(true),requirerBswm : ar4x::m2::BswModuleDescription = ar4x::m2::BswModuleDescription.allInstances()->select(requiredModeGroup->includes(this_))->any(true)in if not providerBswm.oclIsUndefined() thenproviderBswmelse if not requirerBswm.oclIsUndefined() thenrequirerBswmelsenullendif endif
@28078#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ModeDeclarationGroupPrototypeEx#ar4x::ecuc::RteBswRequiredModeGroupConnection.allInstances()->select(rteBswRequiredModeGroup = this_).rteBswProvidedModeGroup->asSet()
@28079#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RteEventEx#let reStartInteraction : interaction::RunnableEntityStartInteraction = interaction::RunnableEntityStartInteraction.allInstances()->any(sourceEvent = this_)ininteraction::EntityStarter.allInstances()->any(startInteraction->includes(reStartInteraction))
@28080#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Sender#getReceivers()->size() > 1
@28081#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Sender#self.sendInteraction.receiveInteraction.receiver->asOrderedSet()
@28082#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Sender#getInternalEcuReceivers()->size() > 1
@28083#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Sender#self.sendInteraction.receiveInteraction.getInternalEcuReceivers()->asOrderedSet()
@28084#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Sender#self.sendInteraction.receiveInteraction.getExternalEcuReceivers()->asOrderedSet()
@28085#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Sender#sendInteraction->exists(not implementation.oclIsUndefined())
@28086#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuSender#self.source.prototype.isEventSemantics()
@28087#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SendInteraction#self.sender->select(oclIsKindOf(interaction::InternalEcuSender)).oclAsType(interaction::InternalEcuSender)->asOrderedSet()
@28088#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SendInteraction#self.sender->select(oclIsKindOf(interaction::ExternalEcuSender)).oclAsType(interaction::ExternalEcuSender)->asOrderedSet()
@28089#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SendInteraction#let senderCores : Set(m2::Integer) = self.sender.getOwnerCore()->asOrderedSet(),receiverCores : Set(m2::Integer) = self.receiveInteraction.receiver.getOwnerCore()->asOrderedSet()in senderCores->symmetricDifference(receiverCores)->notEmpty()
@28090#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SendInteraction#let senderPartitions : Set(ecuc::EcucPartition) = self.sender.ownerPartition->asOrderedSet(),receiverPartitions : Set(ecuc::EcucPartition) = self.receiveInteraction.receiver.ownerPartition->asOrderedSet()in senderPartitions->symmetricDifference(receiverPartitions)->notEmpty()
@28091#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ReceiveInteraction#self.receiver->select(oclIsKindOf(interaction::InternalEcuReceiver)).oclAsType(interaction::InternalEcuReceiver)->asOrderedSet()
@28092#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ReceiveInteraction#self.receiver->select(oclIsKindOf(interaction::ExternalEcuReceiver)).oclAsType(interaction::ExternalEcuReceiver)->asOrderedSet()
@28093#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ReceiveInteraction#self.sendInteraction->exists(isInterCore())
@28094#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ReceiveInteraction#self.sendInteraction.sender.getOwnerCore()->asSet()->size() > 1
@28095#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Receiver#getSenders()->size() > 1
@28096#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Receiver#self.receiveInteraction.sendInteraction.sender->asOrderedSet()
@28097#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Receiver#self.receiveInteraction.sendInteraction.getInternalEcuSenders()->asOrderedSet()
@28098#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#Receiver#self.receiveInteraction.sendInteraction.getExternalEcuSenders()->asOrderedSet()
@28099#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuReceiver#self.source.prototype.oclAsType(instance::RVariableDataInstanceInSwc).isInvalidationEnabled()
@28100#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuReceiver#self.source.prototype.oclAsType(instance::RVariableDataInstanceInSwc).getInvalidationPolicy().handleInvalid
@28101#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuReceiver#self.source.prototype.oclAsType(instance::RVariableDataInstanceInSwc).isFilterEnabled()
@28102#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuReceiver#self.source.prototype.oclAsType(instance::RVariableDataInstanceInSwc).getFilter()
@28103#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuReceiver#self.source.prototype.oclAsType(instance::RVariableDataInstanceInSwc).isAliveTimeoutEnabled()
@28104#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InternalEcuReceiver#self.source.prototype.isEventSemantics()
@28105#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#SendImplementation#self.parent.getInternalEcuSenders()->any(true).isEventSemantics()
@28106#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#InteractionEnd#if self.ownerPartition.getOwnerCore().oclIsUndefined()then nullelse self.ownerPartition.getOwnerCore()endif
@28107#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#ComSendProxy#self.interaction.requesterPartition.implOsApplication->asOrderedSet()
@28108#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#TimingTriggeringEntityStartImplementation#self.startOffset.mod(self.cyclePeriod)
@28109#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#TimingTriggeringEntityStartImplementation#self.cyclePeriod > 1
@28110#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#TimingTriggeringEntityStartImplementation#self.startOffset > 0
@28111#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#RteBufferQueuedVariable#self.type.oclAsType(RteBufferQueueType)
@28112#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#ServerRunnableStartOperation#self.startExecutable.oclAsType(RunnableEntity)
@28113#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#ModeQueuedVariable#self.type.oclAsType(ModeQueueType)
@28114#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#RteApiFileContentsGroup#self.function.oclAsType(RteApi)->asOrderedSet()
@28115#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#RteLifecycleApiFileContentsGroup#self.function.oclAsType(RteLifecycleApi)->asOrderedSet()
@28116#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#TaskBodyFileContentsGroup#self.function.oclAsType(TaskBody)->asOrderedSet()
@28117#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#BswSchedulableEntityFileContentsGroup#self.function.oclAsType(BswSchedulableEntity)->asOrderedSet()
@28118#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#ComCallbackFileContentsGroup#self.function.oclAsType(ComCallback)->asOrderedSet()
@28119#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#TrustedFunctionFileContentsGroup#self.function.oclAsType(TrustedFunction)->asOrderedSet()
@28120#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#ExecutableEntityFileContentsGroup#self.function.oclAsType(ExecutableEntity)->asOrderedSet()
@28121#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#SchmApiFileContentsGroup#self.function.oclAsType(SchmApi)->asOrderedSet()
@28122#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#ComSignalApiWrapperFileContentsGroup#self.function.oclAsType(ComSignalApiWrapper)->asOrderedSet()
@28123#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#ComProxyFunctionFileContentsGroup#self.function.oclAsType(ComProxyFunction)->asOrderedSet()
@28124#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#derivation#SchmLifecycleApiFileContentsGroup#self.function.oclAsType(SchmLifecycleApi)->asOrderedSet()
@28125#E:/FinalProject Repos/repos\PizzaFactory\a-workflow-demo\jp.ac.nagoya_u.is.nces.a_rte.model\model/rte.ecore#body#RedefinitionType#if sourceType.oclIsKindOf(RedefinitionType)then sourceType.oclAsType(RedefinitionType).getLeafType()else sourceTypeendif
@28126#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#getUsingDataTypes()->select(oclIsKindOf(ApplicationDataType)).oclAsType(ApplicationDataType)->asOrderedSet()
@28127#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#getUsingDataTypes()->collect(t | getImplementationDataType(t))->asOrderedSet()
@28128#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#let internalUsingDataTypes : Set(AutosarDataType) = if self.internalBehavior.oclIsUndefined()then Set{}else self.internalBehavior.getUsingDataTypes()endifin getRPorts().getUsingDataTypes()->union(getPPorts().getUsingDataTypes())->union(internalUsingDataTypes)->asOrderedSet()
@28129#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#if self.internalBehavior.oclIsUndefined()then nullelse self.internalBehavior.getImplementationDataType(dataType)endif
@28130#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#if self.internalBehavior.oclIsUndefined()then Set{}else self.internalBehavior.getImplementationDataTypes(applicationDataType)endif
@28131#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#getRPorts().requiredInterface->union(getPPorts().providedInterface)->select(oclIsKindOf(ClientServerInterface)).oclAsType(ClientServerInterface)->asOrderedSet()
@28132#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#self.port->select(oclIsKindOf(RPortPrototype)).oclAsType(RPortPrototype)->asOrderedSet()
@28133#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AtomicSwComponentType#self.port->select(oclIsKindOf(PPortPrototype)).oclAsType(PPortPrototype)->asOrderedSet()
@28134#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RPortPrototype#if self.requiredInterface.oclIsKindOf(SenderReceiverInterface)then self.requiredInterface.oclAsType(SenderReceiverInterface).dataElement.type->asOrderedSet()else if self.requiredInterface.oclIsKindOf(ClientServerInterface)then self.requiredInterface.oclAsType(ClientServerInterface).operation.argument.type->asOrderedSet()else OrderedSet(AutosarDataType){}endifendif
@28135#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PPortPrototype#if self.providedInterface.oclIsKindOf(SenderReceiverInterface)then self.providedInterface.oclAsType(SenderReceiverInterface).dataElement.type->asOrderedSet()else if self.providedInterface.oclIsKindOf(ClientServerInterface)then self.providedInterface.oclAsType(ClientServerInterface).operation.argument.type->asOrderedSet()else OrderedSet(AutosarDataType){}endifendif
@28136#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.includedDataTypeSet->select(i | i.dataType->includes(dataType))
@28137#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.includedDataTypeSet->select(i | i.dataType->collect(t | getImplementationDataType(t))->includes(dataType))
@28138#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.includedDataTypeSet.dataType->asOrderedSet()
@28139#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#if dataType.oclIsKindOf(ImplementationDataType)then dataType.oclAsType(ImplementationDataType)else self.getImplementationDataType(dataType.oclAsType(ApplicationDataType))endif
@28140#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#let implDataType : ImplementationDataType = getImplementationDataTypes(applicationDataType)->any(true)in if implDataType.oclIsUndefined()then nullelse implDataTypeendif
@28141#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#SwcInternalBehavior#self.dataTypeMapping.dataTypeMap->select(m | m.applicationDataType = applicationDataType).implementationDataType->asOrderedSet()
@28142#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#DataSendCompletedEvent#eventSource.accessedVariable.autosarVariable
@28143#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataType#if swDataDefProps.swImplPolicy.oclIsUndefined()then SwImplPolicyEnum::unspecifiedelse swDataDefProps.swImplPolicyendif
@28144#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.invalidValue.oclIsUndefined()then nullelse swDataDefProps.invalidValueendif
@28145#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.compuMethod.oclIsUndefined()then nullelse swDataDefProps.compuMethodendif
@28146#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.dataConstr.oclIsUndefined()then nullelse swDataDefProps.dataConstrendif
@28147#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#AutosarDataType#if swDataDefProps.swAddrMethod.oclIsUndefined()then nullelse swDataDefProps.swAddrMethodendif
@28148#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#if swDataDefProps.implementationDataType.oclIsUndefined()then selfelse swDataDefProps.implementationDataType.getLeafImplementationDataType()endif
@28149#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'VALUE'
@28150#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'DATA_REFERENCE'
@28151#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'ARRAY'
@28152#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'STRUCTURE'
@28153#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#getLeafImplementationDataType().category = 'UNION'
@28154#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#category = 'TYPE_REFERENCE'
@28155#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataType#not isPrimitiveType()
@28156#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#ImplementationDataType#if swDataDefProps.baseType.oclIsUndefined()then nullelse swDataDefProps.baseTypeendif
@28157#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#ImplementationDataType#if swDataDefProps.swAlignment.oclIsUndefined()then nullelse swDataDefProps.swAlignmentendif
@28158#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ImplementationDataTypeElement#category = 'TYPE_REFERENCE'
@28159#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not self.swAddrMethod.oclIsUndefined()then self.swAddrMethodelse if not implType.swAddrMethod.oclIsUndefined()then implType.swAddrMethodelse if not applType.swAddrMethod.oclIsUndefined()then applType.swAddrMethodelse nullendif endif endif
@28160#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#let implType : m2::ImplementationDataType = getImplementationDataType()in if not self.swAlignment.oclIsUndefined()then self.swAlignmentelse if not implType.swAlignment.oclIsUndefined()then implType.swAlignmentelse nullendif endif
@28161#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#if self.type.oclIsKindOf(m2::ApplicationDataType)then self.type.oclAsType(m2::ApplicationDataType)else nullendif
@28162#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#AutosarDataPrototype#if self.type.oclIsKindOf(m2::ImplementationDataType)then self.type.oclAsType(m2::ImplementationDataType)else nullendif
@28163#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataPrototype#if swDataDefProps.swImplPolicy.oclIsUndefined()then SwImplPolicyEnum::unspecifiedelse swDataDefProps.swImplPolicyendif
@28164#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#DataPrototype#if swDataDefProps.swAddrMethod.oclIsUndefined()then nullelse swDataDefProps.swAddrMethodendif
@28165#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#DataPrototype#if swDataDefProps.swAlignment.oclIsUndefined()then nullelse swDataDefProps.swAlignmentendif
@28166#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ConstantReference#if constant.valueSpec.oclIsKindOf(ConstantReference)then constant.valueSpec.oclAsType(ConstantReference).getEndValueSpec()else constant.valueSpecendif
@28167#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataFilter#dataFilterType <> DataFilterTypeEnum::always
@28168#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataFilter#self.dataFilterType = another.dataFilterType and self.mask = another.mask and self.max = another.max andself.min = another.min and self.offset = another.offset and self.period = another.period and self.x = another.x
@28169#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#InvalidationPolicy#not handleInvalid.oclIsUndefined() and (handleInvalid = m2::HandleInvalidEnum::keep or handleInvalid =m2::HandleInvalidEnum::replace)
@28170#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#InvalidationPolicy#not handleInvalid.oclIsUndefined() and handleInvalid = m2::HandleInvalidEnum::keep
@28171#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#InvalidationPolicy#not handleInvalid.oclIsUndefined() and handleInvalid = m2::HandleInvalidEnum::replace
@28172#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataConstr#let lowerLimit : Limit = self.dataConstrRule.internalConstrs.lowerLimit->any(true)in if lowerLimit.oclIsUndefined()then nullelse lowerLimit.valueendif
@28173#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#DataConstr#let upperLimit : Limit = self.dataConstrRule.internalConstrs.upperLimit->any(true)in if upperLimit.oclIsUndefined()then nullelse upperLimit.valueendif
@28174#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#BswInternalBehavior#entity->select(oclIsKindOf(BswSchedulableEntity)).oclAsType(BswSchedulableEntity)->asOrderedSet()
@28175#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#BswModuleDescription#let behavior : Set(BswInternalBehavior) = self.internalBehavior->select(implementation->size() > 0)in if behavior->isEmpty() thennullelsebehavior->any(true)endif
@28176#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ComSignal#not comTransferProperty.oclIsUndefined() and comTransferProperty <> ComTransferPropertyEnum::PENDING
@28177#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#ComSignalGroup#not comTransferProperty.oclIsUndefined() and comTransferProperty <> ComTransferPropertyEnum::PENDING
@28178#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#EcucPartitionCollection#self.ecucPartition.getOwnerCore()->asOrderedSet()
@28179#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#EcucPartition#let osApp : OsApplication = self.implOsApplication->any(true)in if osApp.oclIsUndefined()then falseelse osApp.osTrustedendif
@28180#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#EcucPartition#let osApp : OsApplication = self.implOsApplication->any(true)in if osApp.oclIsUndefined()then nullelse osApp.osApplicationCoreAssignmentendif
@28181#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OsIocCommunication#let loopback : OsIocSenderProperties = osIocSenderProperties->any(osIocSendingOsApplication = self.osIocReceiverProperties.osIocReceivingOsApplication)in if loopback.oclIsUndefined()then null else loopbackendif
@28182#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OsOS#not self.osNumberOfCores.oclIsUndefined()
@28183#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#self.prototype.shortName
@28184#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#getSwImplPolicy() = m2::SwImplPolicyEnum::queued
@28185#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not applType.getSwImplPolicy().oclIsUndefined() and applType.getSwImplPolicy() <> m2::SwImplPolicyEnum::unspecifiedthen applType.getSwImplPolicy()else if not implType.getSwImplPolicy().oclIsUndefined() and implType.getSwImplPolicy() <> m2::SwImplPolicyEnum::unspecifiedthen implType.getSwImplPolicy()else self.prototype.getSwImplPolicy()endif endif
@28186#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType()in if not implType.baseType.oclIsUndefined()then implType.baseTypeelse nullendif
@28187#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not applType.invalidValue.oclIsUndefined()then applType.invalidValueelse if not implType.invalidValue.oclIsUndefined()then implType.invalidValueelse nullendif endif
@28188#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType() , applType : m2::ApplicationDataType= getApplicationDataType()in if not self.prototype.swAddrMethod.oclIsUndefined()then self.prototype.swAddrMethodelse if not implType.swAddrMethod.oclIsUndefined()then implType.swAddrMethodelse if not implType.getLeafImplementationDataType().swAddrMethod.oclIsUndefined()then implType.getLeafImplementationDataType().swAddrMethodelse if not applType.swAddrMethod.oclIsUndefined()then applType.swAddrMethodelse nullendif endif endif endif
@28189#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#let implType : m2::ImplementationDataType = getImplementationDataType()in if not self.prototype.swAlignment.oclIsUndefined()then self.prototype.swAlignmentelse if not implType.swAlignment.oclIsUndefined()then implType.swAlignmentelse nullendif endif
@28190#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#if self.prototype.type.oclIsKindOf(m2::ApplicationDataType)then self.prototype.type.oclAsType(m2::ApplicationDataType)else nullendif
@28191#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#if self.prototype.type.oclIsKindOf(m2::ImplementationDataType)then self.prototype.type.oclAsType(m2::ImplementationDataType)elsegetOwnerAtomicSwc().getImplementationDataType(self.prototype.type.oclAsType(m2::ApplicationPrimitiveDataType))endif
@28192#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInSwc#self.contextPort.parent.oclAsType(m2::AtomicSwComponentType)
@28193#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInComposition#prototype.oclIsKindOf(PVariableDataInstanceInSwc)
@28194#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInComposition#prototype.oclIsKindOf(RVariableDataInstanceInSwc)
@28195#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#VariableDataInstanceInComposition#self.prototype.prototype.shortName
@28196#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationEnabled().oclAsType(Boolean)
@28197#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#contextPPort.providedInterface.oclAsType(m2::SenderReceiverInterface).invalidationPolicy->any(dataElement = self.prototype)
@28198#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#let initValue : m2::ValueSpecification = getComSpec().oclAsType(m2::NonqueuedSenderComSpec).initValuein if initValue.oclIsUndefined()then nullelse initValueendif
@28199#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#let comSpec : m2::SenderComSpec = contextPPort.providedComSpec.oclAsType(m2::SenderComSpec)->any(dataElement = self.prototype)in if comSpec.oclIsUndefined()then nullelse comSpecendif
@28200#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#getOwnerAtomicSwc().internalBehavior.runnable.dataSendPoint->exists(accessedVariable.autosarVariable = self)
@28201#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#not getComSpec().transmissionAcknowledge.oclIsUndefined()
@28202#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#not getComSpec().transmissionAcknowledge.oclIsUndefined() and getComSpec().transmissionAcknowledge.timeout <> 0
@28203#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#PVariableDataInstanceInSwc#ar4x::m2::DataSendCompletedEvent.allInstances()->select(eventSourceData = self)->asOrderedSet()
@28204#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#PVariableDataInstanceInSwc#contextPort.oclAsType(m2::PPortPrototype)
@28205#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#if getFilter().oclIsUndefined()then falseelse getFilter().isFilterEnabled()endif
@28206#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let filter : m2::DataFilter = getComSpec().oclAsType(m2::NonqueuedReceiverComSpec).filterin if filter.oclIsUndefined()then nullelse filterendif
@28207#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let comSpec : m2::NonqueuedReceiverComSpec = getComSpec().oclAsType(m2::NonqueuedReceiverComSpec)in not comSpec.oclIsUndefined() and comSpec.aliveTimeout <> 0
@28208#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationEnabled().oclAsType(Boolean)
@28209#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationKeep().oclAsType(Boolean)
@28210#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#not getInvalidationPolicy().oclIsUndefined() and getInvalidationPolicy().isInvalidationReplace().oclAsType(Boolean)
@28211#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#contextRPort.requiredInterface.oclAsType(m2::SenderReceiverInterface).invalidationPolicy->any(dataElement = self.prototype)
@28212#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let initValue : m2::ValueSpecification = getComSpec().oclAsType(m2::NonqueuedReceiverComSpec).initValuein if initValue.oclIsUndefined()then nullelse initValueendif
@28213#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let comSpec : m2::QueuedReceiverComSpec = getComSpec().oclAsType(m2::QueuedReceiverComSpec)in if comSpec.oclIsUndefined()then nullelse comSpec.queueLengthendif
@28214#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#let comSpec : m2::ReceiverComSpec = contextRPort.requiredComSpec.oclAsType(m2::ReceiverComSpec)->any(dataElement = self.prototype)in if comSpec.oclIsUndefined()then nullelse comSpecendif
@28215#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#ar4x::m2::DataReceivedEvent.allInstances()->select(data = self)->asOrderedSet()
@28216#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#RVariableDataInstanceInSwc#ar4x::m2::DataReceiveErrorEvent.allInstances()->select(data = self)->asOrderedSet()
@28217#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#derivation#RVariableDataInstanceInSwc#contextPort.oclAsType(m2::RPortPrototype)
@28218#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OperationInstanceInSwc#self.contextPort.parent.oclAsType(m2::AtomicSwComponentType)
@28219#E:/FinalProject Repos/repos\PizzaFactory\a_rtegen\src\jp.ac.nagoya_u.is.nces.a_rte.model\model/ar4x.ecore#body#OperationInstanceInComposition#self.prototype.prototype.shortName
@28361#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#TogetherAllocation#PCM_AllocateTogether#allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies (a.resourceContainer_AllocationContext=b.resourceContainer_AllocationContext and a.assemblyContext_AllocationContext <> b.assemblyContext_AllocationContext))
@28362#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#NeverAllocateToSpecificNodes#PCM_NeverAllocateToSpecificNodes#allocationContexts->forAll(a:allocation::AllocationContext | not hwNodes->exists(h|a.resourceContainer_AllocationContext=h))
@28363#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#MoveComponents#PCM_MoveComponents#allocationContexts->forAll(a:allocation::AllocationContext | a.resourceContainer_AllocationContext<>fromHwNode and a.resourceContainer_AllocationContext=toHwNode)
@28364#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#SingleInstantiation#PCM_OnlySingleInstantiation#assemblyContext.parentStructure__AssemblyContext.assemblyContexts__ComposedStructure->select(a : composition::AssemblyContext| a.encapsulatedComponent__AssemblyContext = assemblyContext.encapsulatedComponent__AssemblyContext)->size()=1
@28365#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#NeverTogether#PCM_AllocateNeverTogether#allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies a.resourceContainer_AllocationContext<>b.resourceContainer_AllocationContext)
@28366#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#SameComponent#PCM_MultipleInstantiation#assemblyContexts->forAll(a : composition::AssemblyContext, b : composition::AssemblyContext | a<> b implies (a.encapsulatedComponent__AssemblyContext = b.encapsulatedComponent__AssemblyContext))
@28367#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#MultipleAllocation#PCM_MultipleAllocation#allocationContexts->forAll(a:allocation::AllocationContext, b:allocation::AllocationContext | a<>b implies (a.assemblyContext_AllocationContext=b.assemblyContext_AllocationContext and a.resourceContainer_AllocationContext<>b.resourceContainer_AllocationContext))
@28368#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#RolesHaveValidConnection#PCM_FunctionalityConnection#connector.providedRole_AssemblyConnector =providedRole and connector.requiredRole_AssemblyConnector=requiredRole
@28369#E:/FinalProject Repos/repos\pzzz\toometa\Metamodel\edu.kit.ipd.sdq.toometa.pcmarchoptions\model/pcmarchoptions.ecore#SingleAllocation#PCM_OnlySingleAllocation#allocationContext.allocation_AllocationContext.allocationContexts_Allocation->select(a : allocation :: AllocationContext|a.assemblyContext_AllocationContext=allocationContext.assemblyContext_AllocationContext)->size()=1
@28370#E:/FinalProject Repos/repos\pzzz\toometa\ModifiedDependencies\de.uka.ipd.sdq.dsexplore.qml.contract\model/QMLContract.ecore#documentation#Criterion#self.aspects->forAll(aspect|aspect.oclIsTypeOf(QMLContract::Frequency) implies (self.dimension.type.oclIsTypeOf(dimensiontypes::DimensionTypeNumeric) or(self.dimension.type.oclIsTypeOf(dimensiontypes::DimensionTypeEnum) and self.dimension.type.oclAsType(dimensiontypes::DimensionTypeEnum).order->size()>0 ) or (self.dimension.type.oclIsTypeOf(dimensiontypes::DimensionTypeSet) and self.dimension.type.oclAsType(dimensiontypes::DimensionTypeSet).order->size()>0 )))
@28405#E:/FinalProject Repos/repos\rbill\tuwienmodelsrepo\cosimo_computer/requirements.ecore##Consumer#name = rightcomp.name
@28430#E:/FinalProject Repos/repos\repotelligence\repotelligence\plugins\org.repotelligence.models.data\model/data.ecore#body#File#relativePath
@28444#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#NoSelfInheritance#Class#self.superclass <> self
@28445#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#ClassNameIsUnique#Class#Class.allInstances() -> select(c | c.name = self.name) -> excluding(self) ->isEmpty()
@28446#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#IdPropertyBoundIsOneToOne#Class#(self.properties -> select(p : Property| p.isID = true))-> forAll(p | p.lowerBound = 1 and p.upperBound = 1)
@28447#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#MultiplicityCheck#Property#(self.lowerBound = 0 or self.lowerBound = 1) and self.upperBound = 1
@28448#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#NecessaryValues#Property#(self.lowerBound <> null) and (self.upperBound <> null) and (self.type <> null) and (self.name <> null)
@28449#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#NamedTypeNameIsUnique#NamedType#NamedType.allInstances() -> select(nt | nt.name = self.name) -> excluding(self) -> isEmpty()
@28450#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#NonDerivedClassesHaveOnlyOneKeyProperty#DomainModel#(self.classes -> select(c : Class| c.superclass=null))-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 1)
@28451#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#DerivedClassesHaveNoOwnKeyProperty#DomainModel#(self.classes -> select(c : Class| c.superclass<>null))-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 0)
@28452#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#MultiplicityCheckDifference#AssociationEnd#(self.lowerBound <= self.upperBound) or self.upperBound = -1
@28453#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#MultiplicityCheckInitialValues#AssociationEnd#self.lowerBound >= 0 and (self.upperBound >= 1 or self.upperBound = -1)
@28454#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#OnlyDifferentClassesAllowedAsEnd#Association#self.navigableassociationend.type <> self.nonnavigableassociationend.type
@28455#E:/FinalProject Repos/repos\RomJak\MElab1\Lab1\model/views.ecore#SameLiteralNotAllowed#EnumerationType#self.literal -> forAll(l1, l2 | l1 <> l2 implies l1.name <> l2.name and l1.value <> l2.value)
@28576#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#controllerURIPathAnnotation#JavaAlgoResourceController#self.AlgoControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
@28577#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#AlgoControllerHasUniqueProperHTTPActivity#JavaAlgoResourceController#(self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 3 or HTTPVerb = 2)->isEmpty() andself.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0 or HTTPVerb = 1)->size() = 1)
@28578#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#AlgoControllerActivitiesHaveJAXRSAnnotations#JavaAlgoResourceController#self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0 or HTTPVerb = 1)->forAll(HTTPActivity | (HTTPActivity.ActivityHTTPVerb = 0 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST') implies HTTPActivity.ActivityHTTPVerb = 0 )and(HTTPActivity.ActivityHTTPVerb = 1 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET') implies HTTPActivity.ActivityHTTPVerb = 1 )and HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + HTTPActivity.HTTPActivityURI + '")'))
@28579#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#algoControllerActivityAddsHypermediaLinkToSelf#JavaAlgoResourceController#((self.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 0)impliesself.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self))and(self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self)impliesself.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 0)))or((self.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self))and(self.JavaAlgoRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaAlgoController = self)impliesself.JavaAlgoRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@28580#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueXMLRootElementAnnotation#JavaAlgoResourceModel#self.JavaAlgoModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
@28581#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueSetterForEveryProeprty#JavaAlgoResourceModel#self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasSetterFunction->one(name = 'set' + Property.name))
@28582#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueGetterForEveryProeprty#JavaAlgoResourceModel#self.JavaAlgoModelHasProperty->forAll(Property | self.JavaAlgoModelHasGetterFunction->one(name = 'get' + Property.name))
@28583#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueLinkListProperty#JavaAlgoResourceModel#self.JavaAlgoModelHasProperty->one(name = 'linklist') and self.JavaAlgoModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
@28584#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#controllerURIPathAnnotation#JavaResourceController#self.JavaRControllerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
@28585#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RControllerNotAllowedVerb#JavaResourceController#self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 0)->isEmpty()
@28586#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RControllerHasMinimumActivity#JavaResourceController#self.JavaRControllerHasHTTPActivity->exists(HTTPVerb <> 0)
@28587#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RControllerActivitiesHaveJAXRSAnnotations#JavaResourceController#self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1 or HTTPVerb = 2 or HTTPVerb = 3)->forAll(HTTPActivity | (HTTPActivity.ActivityHTTPVerb = 2 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@PUT')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@PUT') implies HTTPActivity.ActivityHTTPVerb = 2 )and(HTTPActivity.ActivityHTTPVerb = 1 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET') implies HTTPActivity.ActivityHTTPVerb = 1 )and(HTTPActivity.ActivityHTTPVerb = 3 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@DELETE')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@DELETE') implies HTTPActivity.ActivityHTTPVerb = 3)and HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + HTTPActivity.HTTPActivityURI + '")'))
@28588#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsGetHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@28589#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsPutHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)impliesself.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity.hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)))
@28590#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsPutHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@28591#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsDeleteHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1)))
@28592#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsGetHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 1) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)))
@28593#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsDeleteHypermediaLinkToSelf#JavaResourceController#((self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)impliesself.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self))and(self.JavaRControllerHasHTTPActivity->select(HTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Sibling' and hasTargetJavaRController = self)impliesself.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 3) and self.JavaRControllerHasHTTPActivity->exists(HTTPVerb = 2)))
@28594#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#controllerURIPathAnnotation#JavaResourceControllerManager#self.JavaRCManagerHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + self.controllerURI + '")')
@28595#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RCManagerNotAllowedHTTPActivityVerbs#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 2 or HTTPVerb = 3)->isEmpty()
@28596#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RCManagerActivitiesHaveJAXRSAnnotations#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0 or HTTPVerb = 1)->forAll(HTTPActivity | (HTTPActivity.ActivityHTTPVerb = 0 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@POST') implies HTTPActivity.ActivityHTTPVerb = 0 )and(HTTPActivity.ActivityHTTPVerb = 1 implies HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET')andHTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@GET') implies HTTPActivity.ActivityHTTPVerb = 1 )and HTTPActivity.HTTPActivityHasJAXRSAnnotation->one(JAXRSAnnotationText = '@Path("' + HTTPActivity.HTTPActivityURI + '")'))
@28597#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#JRCManagerPostActivityAddsPostHypermediaLinkToSelf#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and hasTargetRCManager = self and LinkType = 'Sibling')
@28598#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#JRCManagerGetActivityAddsPostHypermediaLinkToSelf#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
@28599#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#JRCManagerPostActivityAddsGetHypermediaLinkToSelf#JavaResourceControllerManager#self.JavaRCManagerHasHTTPActivity->select(HTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and hasTargetRCManager = self and LinkType = 'Sibling')
@28600#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueXMLRootElementAnnotation#JavaResourceModel#self.JavaRModelHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
@28601#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueNamingProperty#JavaResourceModel#self.JavaRModelHasProperty->isUnique(bIsNamingProperty = true)
@28602#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#neededRModelHibernateAnnotationsExist#JavaResourceModel#self.JavaRModelHasHibernateAnnotation->one('@Entity') and self.JavaRModelHasHibernateAnnotation->one('@Table(name="' + self.parentName + '")')
@28603#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniquePrimaryIdentifier#JavaResourceModel#self.JavaRModelHasProperty->isUnique(bIsPrimaryIdentifier = true)
@28604#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueSetterForEveryProeprty#JavaResourceModel#self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasSetter->one(name = 'set' + Property.name))
@28605#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueGetterForEveryProeprty#JavaResourceModel#self.JavaRModelHasProperty->forAll(Property | self.JavaRModelHasGetter->one(name = 'get' + Property.name))
@28606#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueLinkListProperty#JavaResourceModel#self.JavaRModelHasProperty->one(name = 'linklist') and self.JavaRModelHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
@28607#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#properCollectionHibernateAnnotations#JavaResourceModel#let JRRModels : Sequence(JavaResourceModel) = self.hasRelatedJavaRMManager.hasRelatedJavaRModel inself.JavaRModelHasProperty->select((bIsUnique = false) and (name <> 'linklist'))->reject( Property | JRRModels->exists(JRRModel | 'SetOf' + JRRModel.name = Property.name))->forAll(CollectionProperty | CollectionProperty.PropertyHasHibernateAnnotation->one('@ElementCollection(fetch = FetchType.EAGER)')andCollectionProperty.PropertyHasHibernateAnnotation->one('@CollectionTable(name="' + self.parentName + CollectionProperty.name +'", joinColumns=@JoinColumn(name="' + self.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + '"))')andCollectionProperty.PropertyHasHibernateAnnotation->one('@ForeignKey(name = "fk_' + self.parentName + '_' + CollectionProperty.name + '")'))
@28608#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueXMLRootElementAnnotation#JavaResourceModelManager#self.JavaRMManagerHasJAXBAnnotation->one(JAXBAnnotationText = '@XmlRootElement')
@28609#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueSetterForEveryProeprty#JavaResourceModelManager#self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasSetter->one(name = 'set' + Property.name))
@28610#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueGetterForEveryProeprty#JavaResourceModelManager#self.JavaRMManagerHasProperty->forAll(Property | self.JavaRMManagerHasGetter->one(name = 'get' + Property.name))
@28611#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#uniqueLinkListProperty#JavaResourceModelManager#self.JavaRMManagerHasProperty->one(name = 'linklist') and self.JavaRMManagerHasProperty->select(name = 'linklist').PropertyHasHibernateAnnotation->one('@Transient')
@28612#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#primaryIdentifierHasProperAnnotations#PSMComponentProperty#((self.bIsPrimaryIdentifier  implies  ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) ) and ( ( self.PropertyHasHibernateAnnotation->one('@Id') and self.PropertyHasHibernateAnnotation->one('@GeneratedValue') ) implies self.bIsPrimaryIdentifier ) )
@28613#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#allModelsHaveRResourcePropertiesWithProperHibernateAnnotations#RESTfulServicePSM#self.hasJavaRModel->forAll(JavaRModel | JavaRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->forAll(RelatedJavaRModel | JavaRModel.JavaRModelHasProperty->one(name = 'SetOf' + RelatedJavaRModel.name)andJavaRModel.JavaRModelHasProperty->select(name = 'SetOf' + RelatedJavaRModel.name)->forAll(JRModelProperty | JRModelProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@OneToMany(fetch = FetchType.EAGER, mappedBy="' + JavaRModel.parentName + '",orphanRemoval=true)')andJRModelProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@OnDelete(action=OnDeleteAction.CASCADE)'))))
@28614#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#allModelsHavePResourcePropertiesWithProperHibernateAnnotations#RESTfulServicePSM#self.hasJavaRModel->forAll(JavaRModel | self.hasJavaRModel->select(ParentJRModel | ParentJRModel.hasRelatedJavaRMManager->exists(JRMManager | JRMManager.hasRelatedJavaRModel = JavaRModel))->forAll(ParentJRModel | JavaRModel.JavaRModelHasProperty->one(name = ParentJRModel.parentName)andJavaRModel.JavaRModelHasProperty->forAll( Property |((Property.name = ParentJRModel.parentName)implies(Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ManyToOne(fetch = FetchType.EAGER)')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@JoinColumn(name="' + if JavaRModel = ParentJRModel then 'sourse' else '' endif + ParentJRModel.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + '")')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ForeignKey(name = "fk_' + ParentJRModel.parentName + '_' + JavaRModel.parentName + '")')))and((Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ManyToOne(fetch = FetchType.EAGER)')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@JoinColumn(name="' + if JavaRModel = ParentJRModel then 'sourse' else '' endif + ParentJRModel.JavaRModelHasProperty->select(bIsPrimaryIdentifier = true)->at(1).name + '")')andProperty.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@ForeignKey(name = "fk_' + ParentJRModel.parentName + '_' + JavaRModel.parentName + '")'))implies(Property.name = ParentJRModel.parentName)))))
@28615#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rMPropertiesSettersHaveProperXMLTransientAnnotation#RESTfulServicePSM#let AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel inself.hasJavaRModel->forAll(JRModel | JRModel.JavaRModelHasSetter->select(SetterFunction | (JRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JRRModel | SetterFunction.name = 'setSetOf' + JRRModel.name))or(AllResourceModels->select(hasRelatedJavaRMManager->exists(hasRelatedJavaRModel = JRModel))->exists(ParentJRModel | SetterFunction.name = 'set' + ParentJRModel.parentName)))->forAll(SetterFunction | SetterFunction.SetterFunctionHasJAXBAnnotation->one('@XmlTransient')))
@28616#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rMPropertiesHaveColumnAnnotation#RESTfulServicePSM#self.hasJavaRModel->forAll(JRModel |JRModel.JavaRModelHasProperty->reject(Property |(Property.name = 'linklist')or(JRModel.hasRelatedJavaRMManager->exists(JRRModel | Property.name = 'SetOf' + JRRModel.name))or(self.hasJavaRModel->select(JPRModel | JPRModel.hasRelatedJavaRMManager.hasRelatedJavaRModel->exists(JPRModel | JPRModel = JRModel))->exists(JPRModel | Property.name = JPRModel.parentName)))->forAll(Property | Property.PropertyHasHibernateAnnotation->one(HibernateAnnotationText = '@Column(name = "' + Property.name + '")')))
@28617#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RControllerUniqueHTTPVerbsPerParent#RESTfulServicePSM#let AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel inself.hasJavaRController->forAll(JRController | let numberOfParents : Integer = AllResourceModels->select(ParentRModel | ParentRModel.hasRelatedJavaRMManager->exists(JRMManager | JRController.hasAssociatedJavaRModel = JRMManager.hasRelatedJavaRModel))->size() inJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->size() <= numberOfParentsandJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 2)->size() <= numberOfParentsandJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 3)->size() <= numberOfParentsandJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)andJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name)andJRController.JavaRControllerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name))
@28618#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#RCManagerHasUniqueHTTPActivityVerbsPerParent#RESTfulServicePSM#let AllResourceModels : Sequence(JavaResourceModel) = self.hasJavaRModel inself.hasJavaRCManager->forAll(JRCManager | let numberOfParents : Integer = AllResourceModels->select(ParentRModel |ParentRModel->exists(hasRelatedJavaRMManager = JRCManager))->size() inJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 0)->size() = numberOfParentsandJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->size() = numberOfParentsandJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 0)->isUnique(name)andJRCManager.JavaRCManagerHasHTTPActivity->select(HTTPActivity | HTTPActivity.ActivityHTTPVerb = 1)->isUnique(name))
@28619#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerPostActivityAddsGetHypermediaLinkToRRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28620#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerPostActivityAddsPutHypermediaLinkToRRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28621#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerPostActivityAddsDeleteHypermediaLinkToRRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@28622#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerGetActivityAddsGetHypermediaLinkToRRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28623#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerGetActivityAddsPutHypermediaLinkToRRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28624#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerGetActivityAddsDeleteHypermediaLinkToRRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager | self.hasJavaRController->forAll( JRController | ((JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)implies JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController))    and (JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Child' and  hasTargetJavaRController = JRController)implies(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@28625#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerPostActivityAddsGetHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28626#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerPostActivityAddsPutHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28627#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerPostActivityAddsDeleteHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@28628#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerGetActivityAddsGetHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28629#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerGetActivityAddsPutHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28630#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rCManagerGetActivityAddsDeleteHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaRCManager->forAll(JRCManager |self.hasJavaRController->forAll(JRController |((JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController))and(JRCManager.JavaRCManagerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = JRController)implies(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager) and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@28631#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsPostHypermediaLinkToRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28632#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsGetHypermediaLinkToRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28633#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsPostHypermediaLinkToRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28634#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsGetHypermediaLinkToRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetRCManager = JRCManager)impliesJRController.hasAssociatedJavaRModel.hasRelatedJavaRMManager = JRCManager.hasAssociatedRMManager and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28635#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsPostHypermediaLinkToParentRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28636#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetActivityAddsGetHypermediaLinkToParentRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28637#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsPostHypermediaLinkToParentRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28638#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutActivityAddsGetHypermediaLinkToParentRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2))))
@28639#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerDeleteActivityAddsPostHypermediaLinkToParentRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@28640#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerDeleteActivityAddsGetHypermediaLinkToParentRCManager#RESTfulServicePSM#self.hasJavaRController->forAll( JRController |self.hasJavaRCManager->forAll( JRCManager |(JRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3)impliesJRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager))and(JRController.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 3).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetRCManager = JRCManager)impliesJRCManager.hasAssociatedRMManager.hasRelatedJavaRModel = JRController.hasAssociatedJavaRModel and JRController.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3))))
@28641#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#algoControllerActivityAddsHypermediaLinkToRAlgoController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA, algoControllerB |((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists( ActivityHTTPVerb = 1))))
@28642#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#algoControllerAddsHypermediaLinkToParentAlgoController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA, algoControllerB |((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaAlgoController = algoControllerB)impliesalgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerB.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1))))
@28643#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerGetAddsHypermediaLinkToRAlgoController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@28644#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#rControllerPutAddsHypermediaLinkToRAlgoController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 0 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesrControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA))and(rControllerA.JavaRControllerHasHTTPActivity->select(ActivityHTTPVerb = 2).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Child' and hasTargetJavaAlgoController = algoControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@28645#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#algoControllerAddsGetHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 1 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@28646#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#algoControllerAddsPutHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 2 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 2) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@28647#E:/FinalProject Repos/repos\s-case\mde\doc\ecore-meta-models/PSMMetamodel.ecore#algoControllerAddsDeleteHypermediaLinkToParentRController#RESTfulServicePSM#self.hasJavaAlgoController->forAll(algoControllerA |self.hasJavaRController->forAll(rControllerA |((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 0).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 0)))or((rControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)impliesalgoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA))and(algoControllerA.JavaAlgoRControllerHasHTTPActivity->select(ActivityHTTPVerb = 1).hasHTTPActivityHandler.hasHypermediaFunction.hasPSMHypermediaLink->one(LinkHTTPVerb = 3 and LinkType = 'Parent' and hasTargetJavaRController = rControllerA)impliesrControllerA.hasAssociatedJavaRModel.hasRelatedJavaAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.JavaRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 3) and algoControllerA.JavaAlgoRControllerHasHTTPActivity->exists(ActivityHTTPVerb = 1)))))
@28812#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#differentResponsible#Requirement#self.requirementOwnedBy.personOwnsCategory->forAll(c | not c.requirement->includes(self))
@28813#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#notItself#Requirement#self.dependencySource->select(oclIsTypeOf(Requires))->forAll(requires: Dependency | findLeafNodes(requires.oclAsType(Requires).argument)->forAll(ra: RequirementArgument | ra.requirement <> self))
@28814#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#body#Requirement#if argument.oclIsKindOf(BinaryOperatorArgument) thenfindLeafNodes(argument.oclAsType(BinaryOperatorArgument).leftSideArgument)->union(findLeafNodes(argument.oclAsType(BinaryOperatorArgument).rightSideArgument))elseif argument.oclIsKindOf(NOTOperator) thenfindLeafNodes(argument.oclAsType(NOTOperator).argument)elseSet{argument.oclAsType(RequirementArgument)}endifendif
@28815#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#moreRequirementsThanCategories#Category#Category.allInstances()->size() <= Requirement.allInstances()->size()
@28816#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#isResponsible#Person#self.personOwnsCategory->size() + self.personOwnsRequirement->size() > 0
@28817#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#targetNotSource#SimpleDependency#not self.dependencyTarget.dependencySource->includes(self)
@28818#E:/FinalProject Repos/repos\sebbe33\MDE\model/requirements_editor.ecore#selfDependency#Requires#self.argument.oclAsSet()->closure(arg : Argument | if arg.oclIsKindOf(BinaryOperatorArgument) then arg.oclAsType(BinaryOperatorArgument).leftSideArgument.oclAsSet()->including(arg.oclAsType(BinaryOperatorArgument).rightSideArgument) else if arg.oclIsKindOf(NOTOperator) then arg.oclAsType(NOTOperator).argument.oclAsSet() else arg.oclAsSet() endif endif)->select(arg : Argument | arg.oclIsKindOf(RequirementArgument))->forAll(arg : Argument | not arg.oclAsType(RequirementArgument).requirement.dependencySource->includes(self))
@28819#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ValidStartActivityThread#Thread#startActivity.thread = self or startActivity.oclIsKindOf(Join) or startActivity.oclIsKindOf(FinalActivity)
@28820#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ValidForkJoinNesting#BasicModel#startActivity.JoinsCorrectly(Sequence{self}, Set{})->includesAll(Activity.allInstances()->asSet())
@28821#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#MatchingForkForEveryJoin#BasicModel#let forkThreads: Bag(Thread) = Fork.allInstances()->collect(thread)->asBag() inlet joinThreads: Bag(Thread) = Join.allInstances()->collect(thread)->asBag() inforkThreads->intersection(joinThreads) = joinThreads
@28822#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#Reachability#Activity#let basicModel: BasicModel = BasicModel.allInstances()->asSequence()->first() in                        let reachableActivities: Set(Activity) = basicModel.startActivity.JoinsCorrectly(Sequence{basicModel}, Set{}) in                            reachableActivities->exists(a | a = self)
@28823#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Activity#((thread = a.thread) = a.oclIsTypeOf(Join)) or a.oclIsKindOf(FinalActivity)
@28824#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Activity#((thread = a.thread) <> a.oclIsTypeOf(Join)) or a.oclIsKindOf(FinalActivity)
@28825#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Activity#if beenHere->exists(e | e = self) -- Activity has already been checked      then soFar      else if instance <> null           then GetSuccessorReferences(soFar->including(instance), beenHere)           else GetSuccessorReferences(soFar, beenHere)           endif      endif
@28826#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#derivation#Activity#let temp: Set(Thread) = Thread.allInstances()->select(t | t.activities->exists(a | a = self))            in if temp->size() = 1 then temp->asOrderedSet()->first() else null endif
@28827#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#derivation#Activity#GetAccessedReferences(Set{}, Set{})
@28828#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#FinalActivity#beenHere->including(self)
@28829#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#FinalActivity#soFar
@28830#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ThreadIndependence#LinearActivity#self.UsesSameThread(nextActivity)
@28831#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#LinearActivity#if beenHere->exists(e | e = self) -- Activity has already been checked      then beenHere      else nextActivity.JoinsCorrectly(threadStack, beenHere->including(self)) -- Check successor      endif
@28832#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#LinearActivity#nextActivity.GetAccessedReferences(soFar, beenHere->including(self))
@28833#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#NonNegativeMaxThreadCount#Fork#maxThreadCount >= 0
@28834#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ThreadIndependence#Fork#forkedThreads->forAll(t | self.UsesDifferentThread(t.startActivity))
@28835#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Fork#JoinsCorrectly(Sequence{self.thread}, Set{})
@28836#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Fork#if beenHere->exists(e | e = self) -- Fork has already been checked      then beenHere      else let bh: Set(Activity) = beenHere->including(self) in           forkedThreads->iterate(t; result: Set(Activity) = Set{} | result->union(t.startActivity.JoinsCorrectly(threadStack->append(t), bh)))      endif
@28837#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Fork#let bh: Set(Activity) = beenHere->including(self) in      let successorRefs: Set(Reference) = forkedThreads->iterate(t; result: Set(Reference) = Set{} | result->union(t.startActivity.GetAccessedReferences(soFar, bh))) in          successorRefs - forkedThreads
@28838#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ThreadIndependence#Decision#branches->forAll(b | self.UsesSameThread(b.nextActivity))
@28839#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Decision#if beenHere->exists(e | e = self) -- Activity has already been checked      then beenHere      else let bh: Set(Activity) = beenHere->including(self) in               nextActivity.JoinsCorrectly(threadStack, bh)->union(branches->iterate(b; result: Set(Activity) = Set{} | result->union(b.nextActivity.JoinsCorrectly(threadStack, bh)))) -- Check all branches      endif
@28840#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Decision#let bh: Set(Activity) = beenHere->including(self) in      let elseResult: Set(Reference) = nextActivity.GetAccessedReferences(soFar, beenHere->including(self)) in      let branchesResult: Set(Reference) = branches->iterate(b; result: Set(Reference) = Set{} | result->union(b.nextActivity.GetAccessedReferences(soFar, bh))) in          elseResult->union(branchesResult)
@28841#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ValidBranchCondition#Branch#true
@28842#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Join#if beenHere->exists(e | e = self) -- Activity has already been checked      then beenHere      else let newThreadStack: Sequence(Thread) = threadStack->subSequence(1, threadStack->size() - 1) in               if newThreadStack->last() = thread -- This join completes the most recent fork               then nextActivity.JoinsCorrectly(newThreadStack, beenHere->including(self)) -- Check successor               else Set{}               endif      endif
@28843#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#Interrupt#nextActivity.GetAccessedReferences(soFar->including(interruptedThread), beenHere->including(self))
@28844#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#PositiveSleepDuration#Sleep#duration >= 1
@28845#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#SimpleActivity#nextActivity.GetAccessedReferences(soFar->union(sharedResources), beenHere->including(self))
@28846#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#NestedActivity#if beenHere->exists(e | e = self) -- Activity has already been checked      then beenHere      else let bh: Set(Activity) = beenHere->including(self) in           let internalActivities: Set(Activity) = nestedThread.startActivity.JoinsCorrectly(Sequence{nestedThread}, bh) in -- Check internal activities           let nextActivities: Set(Activity) = nextActivity.JoinsCorrectly(threadStack, bh) in -- Check successor               internalActivities->union(nextActivities)      endif
@28847#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#body#NestedActivity#nestedThread.startActivity.GetAccessedReferences(soFar, beenHere->including(self))
@28848#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ProperNamedActivityName#NamedActivity#activityName.matches('[A-Za-z_$][A-Za-z0-9_$]*')
@28849#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#UniqueNamedActivityName#NamedActivity#Reference.allInstances()->select(r | r.name = activityName and not r.oclIsKindOf(NestedThread))->isEmpty()
@28850#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#ProperReferenceName#Reference#name.matches('[A-Za-z_$][A-Za-z0-9_$]*')
@28851#E:/FinalProject Repos/repos\Sercammus\mde_java_concurrency\ut_ss_week1\model/ActivityDiagram.ecore#UniqueReferenceName#Reference#Reference.allInstances()->select(r | r.name = name and not r.oclIsKindOf(NestedThread))->size() <= 1
@28852#E:/FinalProject Repos/repos\seyyedshah\modelcataloguenext\modelcataloguenext\model/mcn.ecore#NonSelf_contains#DataClass#Tuple {message : String = 'The \'DataClass\' "' + self.toString() + '" cannot contain itself',status : Boolean = not self.contains -> closure(contains) -> includes(self) }.status
@28853#E:/FinalProject Repos/repos\seyyedshah\modelcataloguenext\modelcataloguenext\model/mcn.ecore#NonSelf_extends#DataClass#Tuple {message : String = 'The \'DataClass\' "' + self.toString() + '" cannot extend itself',status : Boolean = not self.extends -> closure(extends) -> includes(self) }.status
@28856#E:/FinalProject Repos/repos\sherbold\CrossPare\CrossPare\decent\models/DECENTv3.ecore#typeHierarchy#Artifact#type.containerTypes->includes(parent.type) or parent = null
@28857#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model/university.ecore#nameIsNotNull#Professor#name.size() > 0
@28858#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model/university.ecore#numberOfStudentsMustBeCalculated#University#(students->notEmpty() and self.numberOfStudents > 0) or ((self.students->isEmpty() or self.students = null) and self.numberOfStudents = 0)
@28859#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model/university.ecore#averageLengthMustBeSet#University#(students->notEmpty() and self.averageLength > 0) or ((self.students->isEmpty() or self.students = null) and self.averageLength = 0)
@28860#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model\output/classdiagram.ecore#uniqueClassNames#Model#self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@28861#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model\output/classdiagram.ecore#identifierIsMandatoryAndSingleValued#Class#self.identifier.multiplicity = MultiplicityKind::_'1..1'
@28862#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model\output/classdiagram.ecore#identifierIsMember#Class#self.attributes -> includes(self.identifier) or self.supertypes.visibleAttributes -> includes(self.identifier)
@28863#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model\output/classdiagram.ecore#derivation#Class#self -> closure(generalizations.general)
@28864#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.average\model\output/classdiagram.ecore#derivation#Class#self.attributes -> select(a | a.visibility = VisibilityKind::public)
@28888#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.delete\model/university.ecore#nameIsNotNull#Professor#name.size()>0
@28891#E:/FinalProject Repos/repos\siba88\ame\at.ac.tuwien.big.momot.examples.university.unique\model/university_unique.ecore#mnrUnique#University#self.students->isUnique(mnr)
@28892#E:/FinalProject Repos/repos\sjpanda\dsl\CAR-project\model/WebApp.ecore#detailC#Column#(self.type <> ColumnType::NUMERIC and self.type <> ColumnType::DECIMAL and self.type <> ColumnType::FLOATand self.type <> ColumnType::DOUBLEand self.type <> ColumnType::REAL) implies self.detail->isEmpty()
@28893#E:/FinalProject Repos/repos\sjpanda\dsl\CAR-project\model/WebApp.ecore#useZeroFillC#Column#((self.type <> ColumnType::INTEGERand self.type <> ColumnType::BIGINT and self.type <> ColumnType::SMALLINTand self.type <> ColumnType::MEDIUMINTand self.type <> ColumnType::TINYINT) implies self.useZeroFill=false)
@28894#E:/FinalProject Repos/repos\sjpanda\dsl\CAR-project\model/WebApp.ecore#sizeC#Column#((self.type <> ColumnType::INTEGERand self.type <> ColumnType::BIGINT and self.type <> ColumnType::SMALLINTand self.type <> ColumnType::MEDIUMINTand self.type <> ColumnType::TINYINTand self.type <> ColumnType::CHARand self.type <> ColumnType::VARCHARand self.type <> ColumnType::BINARYand self.type <> ColumnType::VARBINARYand self.type <> ColumnType::BITand self.type <> ColumnType::YEAR) implies (self.size->isEmpty() or self.size = 0))and(self.type = ColumnType::BIT implies (self.size >= 1 and self.size <= 64))and((self.type = ColumnType::CHAR or self.type = ColumnType::VARCHAR) implies (self.size >= 0 and self.size <= 255))and(self.type = ColumnType::YEAR implies (self.size = 2 or self.size = 4))and(self.size->notEmpty() implies self.size >= 0)
@28895#E:/FinalProject Repos/repos\sjpanda\dsl\CAR-project\model/WebApp.ecore#precisionBiggerThanScale#Detail#self.precision >= self.scale and self.precision >= 0 and self.scale >= 0
@28896#E:/FinalProject Repos/repos\sjpanda\dsl\CAR-project\model/WebApp.ecore#typeC#Input#(self.type <> InputType::BUTTON implies self.action->isEmpty())and(self.type <> InputType::BUTTON implies self.buttonValue->isEmpty())and (self.type <> InputType::TEXT implies self.textValue->isEmpty())
@28897#E:/FinalProject Repos/repos\Skabbkladden\TDT4250\e2\model/e2.ecore#personName#Person#self.Name.size()>1
@28898#E:/FinalProject Repos/repos\Skabbkladden\TDT4250\e2\model/e2.ecore#uniqueID#Course#Course.allInstances()->isUnique(ID)
@28899#E:/FinalProject Repos/repos\Skabbkladden\TDT4250\e2\model/e2.ecore#groupAssesedByTA#Course#self.StudentGroups.Submitted.AssesedBy.Name = self.TeachingAssistant.Name
@28900#E:/FinalProject Repos/repos\Skabbkladden\TDT4250\e2\model/e2.ecore#studAssessedByTA#Course#self.Students.Submitted.AssesedBy.Name = self.TeachingAssistant.Name
@28901#E:/FinalProject Repos/repos\Skabbkladden\TDT4250\e2\model/e2.ecore#groupMembersInCourse#Group#self.GroupMember->forAll(p:Person  |  self.Course.Students->includes(p))
@28902#E:/FinalProject Repos/repos\Skabbkladden\TDT4250\e2\model/e2.ecore#UniName#University#self.Name.size()>2
@28903#E:/FinalProject Repos/repos\sligoo\ProjetGLS\fr.enseeiht.Game.m2m.petrinet/PetriNet.ecore#NbJetonsPositives#Place#self.jetons >= 0
@28904#E:/FinalProject Repos/repos\sligoo\ProjetGLS\fr.enseeiht.Game.m2m.petrinet/PetriNet.ecore#nomNotEmpty#Element#self.nom.size() > 0
@28905#E:/FinalProject Repos/repos\sligoo\ProjetGLS\fr.enseeiht.Game.m2m.petrinet/PetriNet.ecore#NbJetonsPositives#Arc#self.nbJetons >= 0
@28906#E:/FinalProject Repos/repos\sligoo\ProjetGLS\fr.enseeiht.Game.m2m.petrinet/PetriNet.ecore#AtLeastOneJeton#Reseau#Place.allInstances()->exists(jetons > 0)
@28907#E:/FinalProject Repos/repos\sofiane8384\FormuleUn_Hotel\model/Hotel.ecore#BadNumero#Hotel#self.etageMin <> 13 and self.etageMin <> 13
@28908#E:/FinalProject Repos/repos\sofiane8384\FormuleUn_Hotel\model/Hotel.ecore#MaxByRoom#Chambre#hote->select(p1 : Personne | p1.age > 4)->size() < nbLits                        and hote->select(p1 : Personne | p1.age < 4) -> size() <= 1
@28909#E:/FinalProject Repos/repos\sofiane8384\FormuleUn_Hotel\model/Hotel.ecore#MaxByRom2#Chambre#hote->size() < self.nbLits or  hote->size() <= self.nbLits + 1 and hote->exists(p:Personne| p.age < 4)
@28910#E:/FinalProject Repos/repos\sofiane8384\FormuleUn_Hotel\model/Hotel.ecore#validNumberEtage#Chambre#etage >= hotel.etageMin or etage <= hotel.etageMax
@28911#E:/FinalProject Repos/repos\sofiane8384\IDM_TD31\model/Employe.ecore#MaximumSalaire#Employe#Employe.allInstances()->              forAll(e1,e2|e1.project->size() > e2.project->size()implies              e1.salary > e2.salary )
@28912#E:/FinalProject Repos/repos\sofiane8384\IDM_TD31\model/Employe.ecore#EmployesInDepartement#Departement#self.employe->size() >= self.project->size()
@28913#E:/FinalProject Repos/repos\sofiane8384\IDM_TD31\model/Employe.ecore#BudgetsWithinDepartement#Departement#           project->collect(p:Project| p.budget)->sum() <= budget
@28914#E:/FinalProject Repos/repos\sofiane8384\IDM_TD31\model/Employe.ecore#BudgetProjectMax#Project#self.budget <= self.departement.budget
@28915#E:/FinalProject Repos/repos\sofiane8384\IDM_TD31\model/Employe.ecore#WorkerInDepartement#Project#departement.employe->includesAll(employe)
@28916#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#body#Journal#issues.publie->asSet()
@28917#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#body#Journal#issues->select(c:Issue| c.number > numero)
@28918#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#body#Journal#issues->select(c:Issue|c.publie)->select(Paper)->select(typeArticle = TYPE_ARTICLE::Recherche)
@28919#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#limitedTitle#Issue# if self.title = null then SpecialIssues = true      else SpecialIssues = false     endif
@28920#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#notSubmittedPublished#Issue# publie->excludesAll(submit)
@28921#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#afterPublication#Issue#publie->forAll(p:Paper | p.reviewer->size()=3)
@28922#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#post#Issue#result= publie->collect((LastPage- firstPage)-3)->sum()
@28923#E:/FinalProject Repos/repos\sofiane8384\Journal\model/Journal_scientifique.ecore#authorIsnotReviewer#Paper#reviewer->forAll(r:Reviewer | redaction->select(a:Autheur|a.nameAuthor = r.nameReviewer )->size()<1)                              and reviewer->size()<3
@28924#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredSwaggerVersion#API#not self.swagger.oclIsUndefined()
@28925#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredInfoReference#API#not self.info.oclIsUndefined()
@28926#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#correctSwaggerVersion#API#self.swagger = '2.0'
@28927#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredPaths#API#pathsIsSet()
@28928#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#body#API#return pathsIsSet();
@28929#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredTitle#Info#not self.title.oclIsUndefined()
@28930#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredAPIVerison#Info#not self.version.oclIsUndefined()
@28931#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredName#License#not self.name.oclIsUndefined()
@28932#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#oneBodyParameterAllowed#Operation#self.parameters-> select(e | e.location = ParameterLocation::'_body') -> size() <= 1
@28933#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#oneFormDataParameterAllowed#Operation#self.parameters-> select(e | e.location = ParameterLocation::'_formData') -> size() <= 1
@28934#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#hasUniqueParameters#Operation#self.parameters -> collect(t | Tuple{name : String = t.name,location : ParameterLocation = t.location})->asSet() -> size() = self.parameters -> size()
@28935#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#xorFormAndBody#Operation#(parameters-> select(e | e.location =  ParameterLocation::_'body') -> size()=1 and parameters-> select(e | e.location =  ParameterLocation::_'formData') -> size()=0)or (parameters-> select(e | e.location =  ParameterLocation::_'body') -> size()=0 and parameters-> select(e | e.location =  ParameterLocation::_'formData') -> size()=1)or (parameters-> select(e | e.location =  ParameterLocation::_'body') -> size()=0 and parameters-> select(e | e.location =  ParameterLocation::_'formData') -> size()=0)
@28936#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredResponses#Operation#self.responses -> size() <> 0
@28937#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredURL#ExternalDocs#not self.url.oclIsUndefined()
@28938#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredName#Parameter#not name.oclIsUndefined()
@28939#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#requiredLocation#Parameter#not location = ParameterLocation::unspecified
@28940#E:/FinalProject Repos/repos\SOM-Research\APIDiscoverer\metamodel\openapi.metamodel\model/openAPI.ecore#body#Schema#if (getDeclaringContext() instanceof core.API) {return ((core.API) getDeclaringContext()).getRef() + "/definitions/" + getName();} else if (getDeclaringContext() instanceof Schema) {Schema context = (Schema) getDeclaringContext();if (context.getProperties().contains(this))return context.getRef() + "/properties/" + getName();else if (context.getItems().equals(this))return context.getRef() + "/items";else if (context.getAdditonalProperties().equals(this))return context.getRef() + "/additionalProperties";}return "";
@28941#E:/FinalProject Repos/repos\SOM-Research\emf-rest\emf-rest-demos\family.web\src\main\resources/Example.ecore#validFirstName#Member#not self.firstName.oclIsUndefined() and self.firstName <> ''
@28942#E:/FinalProject Repos/repos\SOM-Research\emf-rest\emf-rest-demos\family.web\src\main\resources/Example.ecore#validLastName#Member#not self.lastName.oclIsUndefined() and self.lastName <> ''
@29041#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/components.ecore#distincComponents#Link#connectedPorts->at(1).parentComponent <> connectedPorts->at(2).parentComponent
@29042#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/ER.ecore#ERN#Schema#entities->forAll(e : Entity | relships->forAll(r : Relship | e.name <> r.name))
@29043#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/ER.ecore#RN#Schema#relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
@29044#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/ER.ecore#EN#Schema#entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
@29045#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/ER.ecore#EAN#Entity#attrs->forAll(a1 : Attribute, a2 : Attribute | a1.name = a2.name implies a1 = a2)
@29046#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/ER.ecore#KEY#Entity#attrs->exists(a : Attribute | a.isKey = true)
@29047#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/ER.ecore#REN#Relship#ends->forAll(e1 : RelshipEnd, e2 : RelshipEnd | e1.name = e2.name implies e1 = e2)
@29054#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#precondition#Customer#true
@29055#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#postcondition#Customer#result.oclIsNew() and result.name=name and result.portal=p
@29056#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#salesAmount#GoldCustomer#Product::allInstances()->collect(s|s.price)->sum()>10
@29057#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#precondition#Portal#c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()
@29058#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#postcondition#Portal#not c.oclIsTypeOf(GoldCustomer)
@29059#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#precondition#Sale#p.stock > 0
@29060#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#postcondition#Sale#result.oclIsNew() and result.sale=self and result.product=p and result.quantity=quantity andp.stock=p.stock@pre-quantity and self.amount=self.amount@pre + quantity*p.price
@29061#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/eShopOCL.ecore#minStock#Product#Product::allInstances()->forAll(p|p.stock>=5)
@29069#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/let.ecore#testLet#Person#let test : Real = 2 in samplemodel::Person.allInstances().size() == test
@29070#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/oclAt.ecore#testAt#Person#pets->at(1) <> null
@29072#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/Papers-ResearchersOCL.ecore#PaperLength#Paper#Paper::allInstances()->forAll(p|p.wordCount < 10000)
@29073#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/Papers-ResearchersOCL.ecore#NoStudentReviewers#Paper#Paper::allInstances()->forAll(p| p.referee->forAll(r| not r.isStudent))
@29074#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/Papers-ResearchersOCL.ecore#LimitsOnStudentPapers#Paper#Paper::allInstances()->exists(p|p.studentPaper) and Paper::allInstances()->select(p|p.studentPaper)->size() < 5
@29075#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/Papers-ResearchersOCL.ecore#AuthorsOfStudentPaper#Paper#Paper::allInstances()->forAll(p|p.studentPaper = p.author->exists(x|x.isStudent))
@29076#E:/FinalProject Repos/repos\SOM-Research\EMFtoCSP\plugins\fr.inria.atlanmod.emftocsp.examples\samples\ecore/Papers-ResearchersOCL.ecore#NoSelfReviews#Researcher#Researcher::allInstances()->forAll(r|r.submission->excludes(r.manuscript))
@29148#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/Copy of VmPlacement.ecore#ResourceConstraint#System#pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
@29149#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/Copy of VmPlacement.ecore#LimitedVMs#System#VM.allInstances()->size() < 10
@29150#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/Copy of VmPlacement.ecore#derivation1#VM#VM.allInstances()->select(host.name = self.host.name)
@29151#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/Copy of VmPlacement.ecore#ResourceLimit#PM#host->collect(e | e.req)->sum() <= res
@29152#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/Copy of VmPlacement.ecore#derivation#PM#VM.allInstances()->select(e | e.plc = self)
@29195#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-Backup.ecore#ResourceConstraint#System#pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
@29196#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-Backup.ecore#BackupSplit#VM#backup->forAll(vm : VM | self.plc <> vm.plc)
@29197#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-Backup.ecore#FrequentCloser#VM#frequent->forAll(v : VM | self.plc.near->includes(v.plc))
@29198#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-O-O.ecore#ResourceConstraint#System#pm->forAll(p : PM | vm->select(v : VM | (v.plc = p))->collect(v : VM | v.req)->sum() < p.res)
@29199#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-O-O.ecore#BackupSplit#VM#backup->forAll(vm : VM | self.plc <> vm.plc)
@29200#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-O-O.ecore#FrequentCloser#VM#frequent->forAll(v : VM | self.plc.near->includes(v.plc))
@29201#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement-O-O.ecore#derivation#VM#VM.allInstances()->select(host.name = self.host.name)
@29202#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement.ecore#BackupSplit#VM#backup->forAll(vm : VM | self.plc <> vm.plc)
@29203#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement.ecore#FrequentCloser#VM#frequent->forAll(v : VM | self.plc.near->includes(v.plc) or self.plc = v.plc)
@29204#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement.ecore#derivation#VM#VM.allInstances()->select(v|v.host.name = self.host.name and v<>self)
@29205#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement.ecore#ResourceLimit#PM#host->collect(e | e.req)->sum() <= res
@29206#E:/FinalProject Repos/repos\songhui\cspadapt\vmplacement\vmplace\model/VmPlacement.ecore#derivation#PM#VM.allInstances()->select(e | e.plc = self)
@29247#E:/FinalProject Repos/repos\SpaceWireOS-Modeler\MetaModel\jp.pizzafactory.model.spacewireos\model/topology.ecore#body#Endpoint#id = device.getId(); port = device.getPort().get(0).getNumber();
@29248#E:/FinalProject Repos/repos\SpaceWireOS-Modeler\MetaModel\jp.pizzafactory.model.spacewireos\model/topology.ecore#body#Endpoint#id = device.getId(); port = device.getPort().get(0).getNumber();
@29249#E:/FinalProject Repos/repos\SpaceWireOS-Modeler\MetaModel\jp.pizzafactory.model.spacewireos\model/topology.ecore#derivation#Endpoint#self.getRootContainer().spaceWireNetworkTopology.subnet.node->select(i : Node | i.id = self.id).port->select(i | i.number = self.port).oclAsType(Port)->union(self.getRootContainer().spaceWireNetworkTopology.subnet.router->select(i : Router | i.id = self.id).port->select(i | i.number = self.port))->asBag()
@29250#E:/FinalProject Repos/repos\SQuAT-Team\kamp-test\edu.squat.transformations\src\edu\squat\pcm/pcm.ecore#documentation#Signature#<p>    This&nbsp;entity&nbsp;represents&nbsp;the&nbsp;signature&nbsp;of&nbsp;a&nbsp;method,&nbsp;i.e.,&nbsp;its&nbsp;parameters,&nbsp;exception&nbsp;declarations,&nbsp;return&nbsp;type,&nbsp;etc.<br />    <br />    Every&nbsp;service&nbsp;of&nbsp;an&nbsp;interface&nbsp;has&nbsp;a&nbsp;unique&nbsp;signature,&nbsp;like&nbsp;void&nbsp;doSomething(int&nbsp;a).&nbsp;A&nbsp;PCM&nbsp;signature&nbsp;is&nbsp;comparable&nbsp;to&nbsp;a&nbsp;method&nbsp;signature&nbsp;in&nbsp;programming&nbsp;languages&nbsp;like&nbsp;C#,&nbsp;Java&nbsp;or&nbsp;the&nbsp;OMG&nbsp;IDL.<br />    <br />    It&nbsp;contains:<br />    <br />    *&nbsp;A&nbsp;type&nbsp;of&nbsp;the&nbsp;return&nbsp;value&nbsp;or&nbsp;void&nbsp;(no&nbsp;return&nbsp;value),<br />    <br />    *&nbsp;an&nbsp;identifier&nbsp;naming&nbsp;the&nbsp;service,<br />    <br />    *&nbsp;an&nbsp;ordered&nbsp;set&nbsp;of&nbsp;parameters&nbsp;(0..*).Each&nbsp;parameter&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;a&nbsp;datatype&nbsp;and&nbsp;an&nbsp;identifier&nbsp;(which&nbsp;is&nbsp;unique&nbsp;across&nbsp;the&nbsp;parameters).&nbsp;Additionally,&nbsp;the&nbsp;modifiers&nbsp;in,&nbsp;out,&nbsp;and&nbsp;inout&nbsp;(with&nbsp;its&nbsp;OMG<br />    IDL&nbsp;semantics)&nbsp;can&nbsp;be&nbsp;used&nbsp;for&nbsp;parameters,&nbsp;and<br />    <br />    *&nbsp;an&nbsp;unordered&nbsp;set&nbsp;of&nbsp;exceptions.<br />    <br />    A&nbsp;signature&nbsp;has&nbsp;to&nbsp;be&nbsp;unique&nbsp;for&nbsp;an&nbsp;interface&nbsp;through&nbsp;the&nbsp;tupel&nbsp;(identifier,&nbsp;order&nbsp;of&nbsp;parameters).&nbsp;An&nbsp;interface&nbsp;has&nbsp;a&nbsp;list&nbsp;of&nbsp;1..*&nbsp;signatures&nbsp;(interfaces&nbsp;associate&nbsp;1..*&nbsp;signatures,&nbsp;not&nbsp;the&nbsp;other&nbsp;way&nbsp;around).&nbsp;A<br />    signature&nbsp;is&nbsp;assigned&nbsp;to&nbsp;exactly&nbsp;one&nbsp;interface.&nbsp;However,&nbsp;different&nbsp;interfaces&nbsp;can&nbsp;define&nbsp;equally&nbsp;named&nbsp;signatures.&nbsp;If,&nbsp;for&nbsp;example,&nbsp;void&nbsp;doIt()&nbsp;is&nbsp;defined&nbsp;for&nbsp;interface&nbsp;A&nbsp;and&nbsp;B,&nbsp;void&nbsp;doIt()&nbsp;is&nbsp;not&nbsp;identical&nbsp;in&nbsp;both&nbsp;interfaces.</p><p>    Failure that may occur inside external services must be specified at the service signatures. This way components that    use this services may implement failure handling without knowing the internal behaviour of the connected component.</p>
@29252#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#ErSyn_Entity#self.relend->collect(re : ErSyn_Relend | re.relship.relend->excluding(re))->flatten()->asSet()
@29253#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#ErSyn_Entity#self.attribute->select(a : Base_Attribute | a.isKey)
@29254#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#ErSem_Instance#self.attrMap->select(am : Base_AttrMap | am.erState->includes(aState) and am.attribute = anAttr)->any(elem6 : Base_AttrMap | true).value.content
@29255#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#ErSem_Link#self.attrMap->select(am : Base_AttrMap | am.erState->includes(aState) and am.attribute = anAttr)->any(elem6 : Base_AttrMap | true).value.content
@29256#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#ErSem_Link#self.relendMap->select(rm : ErSem_RelendMap | rm.erState->includes(aState) and rm.relend = aRelend)->any(elem8 : ErSem_RelendMap | true).instance
@29257#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#RelSyn_RelSchema#self.attribute->select(a : Base_Attribute | a.isKey)
@29258#E:/FinalProject Repos/repos\sunwuliang\SlicingProject1.0\ecores/ER2MOF.ecore#body#RelSem_Tuple#self.attrMap->select(am : Base_AttrMap | am.relDBState->includes(aState) and am.attribute = anAttr)->any(elem10 : Base_AttrMap | true).value.content
@29267#E:/FinalProject Repos/repos\sunwuliang\SlicingProject2.0\ClassModelSlicing\ecores/Xtend.ecore#documentation#JvmIdentifiableElement#<p>The identifier of a JvmIdentifiableElement is a canonical representation of the element.</p><p>A type will return its fully qualified name as its identifier with a '$' delimiter for inner classes. The identifier of an executables contains the identifiers of their respective parameter types. They donot contain any information about type parameters.</p><p>Examples for identifiers are:</p><ul><li>java.lang.String for a class</li><li>java.util.Map$Entry for an inner class</li><li>java.lang.String.String() for a constructor (note the repeated simple name)</li><li>java.lang.String.charAt(int) for a method</li><li>java.lang.String.offset for a field</li><li>java.lang.Object[][] for an array type</li></ul>
@29647#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#FirstLetterInViewTitleIsUpperCase#View#self.name.at(1).matches('[A-Z]')
@29648#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#NameInViewIsNotEmpty#View#self.name.size() <> 0
@29649#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#ExactlyOneWelcomeViewGroupExists#ViewGroup#ViewGroup.allInstances() -> select(f | f.welcomeViewGroup = true) -> size() = 1
@29650#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#FirstLetterInViewGroupIsUpperCase#ViewGroup#self.name.at(1).matches('[A-Z]')
@29651#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#ElementIDIsUnique#ViewElements#ViewElements.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()
@29652#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#ComposedConditionTypesAreEqual#CompositeConditions#self.visibilitycondition -> forAll(c | c.conditionType = self.conditionType)
@29653#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#ClassNotInheritSelf#Class#self.superclass->excludes(self)
@29654#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#ExactlyOneClassID#Class# (self.Property -> select(k | k.isID=true)-> size() = 1) or (self.superclass -> size() > 0)
@29655#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#LowerBoundMaxOne#Property#self.LowerBound <= 1
@29656#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#LowerBoundMinZero#Property#self.LowerBound >= 0
@29657#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#UpperBoundEqualsOne#Property#self.UpperBound = 1
@29658#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#ClassPropertyTypeIsValid#Property#self.type = PropertyType::DataType or self.type = PropertyType::Enumeration
@29659#E:/FinalProject Repos/repos\tannera\Metamodeling_DVML_A1\model/views.ecore#associationEndUpperGreaterThanLower#AssociationEnd#self.LowerBound <= self.UpperBound or self.UpperBound = -1 and (self.LowerBound >= 0 and self.UpperBound > 0 or self.UpperBound = -1)
@29660#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#self.interactionObjects->exists(io : InteractionObject | io.interactionSurfaces->size() > 1)
@29661#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#self.interactionObjects->select(isInteractionSurface)->size() > 1
@29662#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#not self.interactionObjects->select((isInteractionSurface and dependsOn->isEmpty()))->isEmpty()
@29663#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#self.interactionObjects->exists(io : InteractionObject | io.platforms->size() > 1)
@29664#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#self.interactionObjects->exists(io1 : InteractionObject, io2 : InteractionObject | io1 <> io2 and not io1.platforms->symmetricDifference(io2.platforms)->isEmpty())
@29665#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#not self.interactionObjects->iterate(io : InteractionObject; res : Set(Platform) = self.platforms | res->intersection(io.platforms))->isEmpty()
@29666#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#body#UISystem#'Is Divisible: ' + self.isDivisible().toString() + '\n' + 'Is Distributable: ' + self.isDistributable().toString() + '\n' + 'Has Unified State: ' + self.hasUnifiedState().toString() + '\n' + 'Has Divided State: ' + self.hasDividedState().toString() + '\n' + 'Has Single Platform State: ' + self.hasSinglePlatformState().toString() + '\n' + 'Has Distributed State: ' + self.hasDistributedState().toString() + '\n'
@29667#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#componentCannotBeInteractionSurface#InteractionObject#isComponent implies not isInteractionSurface
@29668#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#cycle#InteractionObject#not self->closure(hostedBy.target)->includes(self)
@29669#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#desconnectedInteractionObject#InteractionObject#not isInteractionSurface implies not hostedBy->isEmpty()
@29670#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#derivation#InteractionObject#not hosts->isEmpty()
@29671#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#derivation#InteractionObject#hosts->isEmpty()
@29672#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#derivation#InteractionObject#not hosts->isEmpty() and not implementedBy->isEmpty()
@29673#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#derivation#InteractionObject#self->closure(hostedBy.target)->select(isInteractionSurface)
@29674#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#derivation#InteractionObject#self.interactionSurfaces.implementedBy->flatten().oclAsType(Implementation).source->asSet()->union(self.implementedBy->collect(source)->asSet())->asOrderedSet()
@29675#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#hostingTheSameInteractionObjectTwice#Hosting#source.hostedBy->forAll(h : Hosting | h <> self implies h.target <> self.target)
@29676#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#ImplementationOnInteractionSurface#Implementation#target.isInteractionSurface
@29677#E:/FinalProject Repos/repos\tesorieror\DeUI\deui\models/deui.ecore#dependenciesOnInteractionSurfaces#InteractionDependency#source.isInteractionSurface and target.isInteractionSurface
@29778#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP-parallel.ecore#suivant#Sequence#self.activites -> one( a : Activite | a.suivante.oclIsUndefined())
@29779#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP-parallel.ecore#precedent#Sequence#self.activites -> one(a : Activite | a.precedente.oclIsUndefined())
@29780#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP-parallel.ecore#nomUnique#Activite#Activite.allInstances()->one(a : Activite | a.name = self.name)
@29781#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP-parallel.ecore#pasDeCycle#Activite#self.pasDansSuivant(self)
@29782#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP-parallel.ecore#body#Activite#if self.suivante.oclIsUndefined() then true       else not(self.suivante = act) and self.suivante.pasDansSuivant(act)      endif
@29783#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#suivant#Processus#self.activites -> one( a : Activite | a.suivante.oclIsUndefined())
@29784#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#precedent#Processus#self.activites -> one(a : Activite | a.precedente.oclIsUndefined())
@29785#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#nomUnique#Activite#Activite.allInstances()->one(a : Activite | a.name = self.name)
@29786#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#pasDeCycle#Activite#self.pasDansSuivant(self)
@29787#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#body#Activite#if self.suivante.oclIsUndefined() then true       else not(self.suivante = act) and self.suivante.pasDansSuivant(act)      endif
@29788#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#premiereActivite#Debut#self.reference.precedente.oclIsUndefined()
@29789#E:/FinalProject Repos/repos\TheSwatch\IDMProject\metamodels/LDP.ecore#derniersActivite#Fin#self.reference.suivante.oclIsUndefined()
@29793#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#nameForbidden#Process#name <> 'Process'
@29794#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#differentNames#Process#self.processElements-> select(pe|pe.oclIsTypeOf(WorkDefinition))-> collect(pe|pe.oclAsType(WorkDefinition))-> forAll(a,b|a <> b implies a.name <> b.name)
@29795#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#derivation#ProcessElement#Process.allInstances()->select(p | p.processElements->includes(self))->asSequence()->first()
@29796#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#nameNotEmpty#WorkDefinition#self.name.size() > 0
@29797#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#previousWDinSameProcess#WorkSequence#self.process = self.predecessor.process
@29798#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#nextWDinSameProcess#WorkSequence#self.process = self.successor.process
@29799#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#notReflexive#WorkSequence#self.predecessor <> self.successor
@29800#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#nameNotEmpty#Ressource#self.name.size() > 0
@29801#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#quantityPositive#Ressource#self.quantity > 0
@29802#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#quantityPositive#RessourceSequence#self.quantity > 0
@29803#E:/FinalProject Repos/repos\thibmeu\enseeiht\2IMA\GenieLogicielEtDesSystemes\BE\livrables/SimplePDL.ecore#quantityAvailable#RessourceSequence#self.quantity <= self.ressource.quantity
@29927#E:/FinalProject Repos/repos\tiagojrg\BX-Tools-CaseStudies\CaseStudies\SetsWithKeys\echo/M.ecore#key#Person#self.world.people->forAll(p | p.name <> self.name or p = self)
@29931#E:/FinalProject Repos/repos\totem-mde\totem\totem.trm\metamodel/MM_Compatibility.ecore#no_classes#AttributeCompatibility#features->forAll(f | f.classes->isEmpty())
@29932#E:/FinalProject Repos/repos\totem-mde\totem\totem.trm.reduce\transformation\metamodel/AlgebraicMatrix.ecore#body#Matrix#length + param
@29933#E:/FinalProject Repos/repos\totem-mde\totem\totem.trm.reduce\transformation\metamodel/AlgebraicMatrix.ecore#derivation#Matrix#horzLength + vertLength
@30184#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#fontSize >=  0
@30185#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#fillOpacity >=  0 and fillOpacity <=1
@30186#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#strokeWidth >=  0
@30187#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#strokeDashLength->size().mod(2) = 0
@30188#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Style#strokeOpacity >=  0 and strokeOpacity <=1
@30189#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Circle#radius >= 0
@30190#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#GradientStop#offset>=0 and offset<=1
@30191#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#GradientStop#opacity>=0 and opacity<=1
@30192#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#LinearGradient#start.x>=0 and start.x<=1 and end.x>=0 and end.x<=1 and start.y>=0 and start.y<=1 and end.y>=0 and end.y<=1
@30193#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#RadialGradient#centerX>=0 and centerX<=1 and centerY>=0 and centerY<=1
@30194#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#RadialGradient#focusX>=0 and focusX<=1 and focusY>=0 and focusY<=1
@30195#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#RadialGradient#radius>=0 and radius<=1
@30196#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\diagram-definition\org.eclipse.papyrus.dd\model/DG.ecore#body#Scale#factorX>=0 and factorY>=0
@30747#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#base_Class.ownedReception->isEmpty()
@30748#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#(base_Class.generalization->size()) <= 1
@30749#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#(base_Class.generalization->notEmpty()) implies (base_Class.generalization->forAll (g | g.isSubstitutable))
@30750#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#base_Class.ownedAttribute->forAll(at | at.type->size() = 1)
@30751#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#base_Class.nestedClassifier->isEmpty()
@30752#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Capsule#base_Class.ownedOperation->notEmpty() implies    (base_Class.ownedOperation->forAll(op | op.concurrency = UML::CallConcurrencyKind::sequential))
@30753#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#Protocol#base_Class.generalization->size() <= 1
@30754#E:/FinalProject Repos/repos\uisleandro\org.eclipse.papyrus\extraplugins\umlrt\org.eclipse.papyrus.umlrt\umlProfile/UMLRealTime.ecore#documentation#RTConnector#base_Connector.end->size() = 2
@31229#E:/FinalProject Repos/repos\urdadmde\repo\publications\papers\transformationToolContext2011\submission/urdad.ecore#requestClassNameEqualsServiceNamePlusRequest#ServiceContract#  (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
@31230#E:/FinalProject Repos/repos\urdadmde\repo\publications\papers\transformationToolContext2011\submission/urdad.ecore#resultClassNameEqualsServiceNamePlusResult#ServiceContract#  (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')  and  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat  (self.name.substring(2,self.name.size())))
@31233#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/AllocationMetamodel.ecore#Singleton#AllocationRoot#self.oclType().allInstances()->size() = 1
@31234#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/AllocationMetamodel.ecore#UniqueCapacity#Capability#self.oclType().allInstances()->forAll(c1, c2 |c1 <> c2 implies c1.actor <>  c2.actor or c1.processorType <>  c2.processorType)
@31235#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/CommonMetamodel.ecore#UniqueIdentifiableInstance#Identifiable#self.oclType().allInstances()->forAll(id1, id2 |id1 <> id2 implies id1.identifier <> id2.identifier)
@31236#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#SingletonPlatformMetamodel#PlatformApplicationModelRoot#self.oclType().allInstances()->size() = 1
@31237#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#SingleAppearanceOnIsland#VoltageFrequencyIsland#self.processors->forAll(p1, p2 | p1 <> p2 implies p1.identifier <> p2.identifier)
@31238#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#IslandHasProcessors#VoltageFrequencyIsland#self.processors->forAll(p |p.island = self)
@31239#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#IslandFrequencyHomogenity#VoltageFrequencyIsland#self.processors.initialState->forAll(cs1, cs2 | cs1.frequency = cs2.frequency)
@31240#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#UniqueStatesForProcessorType#ProcessorType#self.possibleStates->forAll(ps1, ps2 | ps1 <> ps2 implies ps1.frequency <>  ps2.frequency or ps1.isWorking <>  ps2.isWorking)
@31241#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#ProcessorTypeHasStates#ProcessorType#self.possibleStates->forAll( s|s.processorType = self)
@31242#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#ProcessorBelongsToIsland#Processor#self.island.processors->includes(self)
@31243#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#ProcessorInValidState#Processor#self.type.possibleStates->includes(self.initialState)
@31244#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#StateBelongsToProcessorType#ProcessorState#self.processorType.possibleStates->includes(self)
@31245#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#SourceOfStateChange#ProcessorState#self.possibleStateChanges->forAll (psc | psc.source = self)
@31246#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#UniqueStateChange#ProcessorState#self.possibleStateChanges->forAll(sc1, sc2 | sc1 <> sc2 implies sc1.source <>  sc2.source or sc1.target <>  sc2.target)
@31247#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#ValidStateChanges#ProcessorStateChange#self.source.processorType = self.target.processorType
@31248#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/PAMmetamodel.ecore#PossibleTransitions#ProcessorStateChange#self.source <> self.target
@31249#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/SDFmetamodel.ecore#Singleton#SynchronousDataflowRoot#self.oclType().allInstances()->size() = 1
@31250#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/SDFmetamodel.ecore#ActorChannelRelationshipSource#Actor#self. incomingChannels->forAll( c | c.target = self)
@31251#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/SDFmetamodel.ecore#ActorChannelRelationshipTarget#Actor#self. outgoingChannels->forAll( c | c.source = self)
@31252#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/SDFmetamodel.ecore#ChannelBelongsToIncomingList#Channel#self.target.incomingChannels->includes(self)
@31253#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/SDFmetamodel.ecore#ChannelBelongsToOutgoingList#Channel#self.source.outgoingChannels->includes(self)
@31254#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoWhitespace#NamedElement#self.name.characters()->excludes(' ')
@31255#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoDigitStart#NamedElement#Set{0..9}->excludes(self.name.characters()->first())
@31256#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#derivation#Type#if self.oclIsKindOf(DeclaredType)then if self.oclAsType(DeclaredType).typeDefinition.oclIsUndefined()then nullelse self.oclAsType(DeclaredType).typeDefinition.baseTypeendifelse if self.oclIsKindOf(PredefinedType)then self.oclAsType(PredefinedType).typeelse nullendifendif
@31257#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#derivation#Type#if (self.oclIsKindOf(DeclaredType))then self.oclAsType(DeclaredType).typeDefinition.typeSpecificationelse nullendif
@31258#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#derivation#DeclaredType#if self.typeDeclaration.oclIsUndefined()then nullelse self.typeDeclaration.typeDefinitionendif
@31259#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#derivation#TypeDefinition#if self.oclIsKindOf(TypeReference)then if self.oclAsType(TypeReference).referredType.oclIsUndefined()then nullelse self.oclAsType(TypeReference).referredType.baseTypeendifelse if self.oclIsKindOf(ScalarTypeSpecification) or self.oclIsKindOf(RangeTypeSpecification)then BuiltInType::INTelse nullendifendif
@31260#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#body#TypeDefinition#if (self.oclIsKindOf(DeclaredType))then self.oclAsType(DeclaredType).typeDefinition.typeSpecificationelse nullendif
@31261#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#body#TypeDefinition#if (self.oclIsKindOf(DeclaredType))then self.oclAsType(DeclaredType).typeDefinition.typeSpecificationelse nullendif
@31262#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#derivation#TypeDefinition#if (self.oclIsKindOf(TypeReference))then self.oclAsType(TypeReference).referredType.typeSpecificationelseif (self.oclIsKindOf(TypeSpecification))then self.oclAsType(TypeSpecification)else nullendifendif
@31263#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#body#TypeDefinition#if (self.oclIsKindOf(DeclaredType))then self.oclAsType(DeclaredType).typeDefinition.typeSpecificationelse nullendif
@31264#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#body#TypeDefinition#if (self.oclIsKindOf(DeclaredType))then self.oclAsType(DeclaredType).typeDefinition.typeSpecificationelse nullendif
@31265#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#body#TypeDefinition#if (self.oclIsKindOf(DeclaredType))then self.oclAsType(DeclaredType).typeDefinition.typeSpecificationelse nullendif
@31266#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueFieldNames#StructTypeSpecification#self.declaration->collect(variable)->isUnique(name)
@31267#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueFunctionNames#Declarations#self.declaration->select(oclIsKindOf(FunctionDeclaration)).oclAsType(FunctionDeclaration)->collect(function)->isUnique(name)
@31268#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueVariableNames#Declarations#self.declaration->select(oclIsKindOf(VariableDeclaration)).oclAsType(VariableDeclaration)->collect(variable)->isUnique(name)
@31269#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueTypeNames#Declarations#self.declaration->select(oclIsKindOf(TypeDeclaration)).oclAsType(TypeDeclaration)->collect(type)->isUnique(name)
@31270#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoTemplateDeclarations#GlobalDeclarations#not self.declaration->exists(oclIsKindOf(system::TemplateDeclaration))
@31271#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoTemplateDeclarations#LocalDeclarations#not self.declaration->exists(oclIsKindOf(system::TemplateDeclaration))
@31272#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoChannelDeclarations#LocalDeclarations#not self.declaration->exists(oclIsKindOf(ChannelVariableDeclaration))
@31273#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueTemplateNames#SystemDeclarations#self.declaration->select(oclIsKindOf(system::TemplateDeclaration)).oclAsType(system::TemplateDeclaration)->collect(declaredTemplate)->isUnique(name)
@31274#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoChannelDeclarations#SystemDeclarations#not self.declaration->exists(oclIsKindOf(ChannelVariableDeclaration))
@31275#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingType#ChannelVariableDeclaration#(not self.typeDefinition.oclIsUndefined())impliesself.typeDefinition.baseType = types::BuiltInType::CHAN
@31276#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingType#ClockVariableDeclaration#(not self.typeDefinition.oclIsUndefined())impliesself.typeDefinition.baseType = types::BuiltInType::CLOCK
@31277#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingType#DataVariableDeclaration#(not self.typeDefinition.oclIsUndefined())implies(self.typeDefinition.baseType <> types::BuiltInType::CHANandself.typeDefinition.baseType <> types::BuiltInType::CLOCK)
@31278#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#ValidReturnType#Function#(not returnType.oclIsUndefined())implies(returnType.baseType = types::BuiltInType::VOID or returnType.baseType = types::BuiltInType::INT or returnType.baseType = types::BuiltInType::BOOL)
@31279#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueParameterNames#Function#self.parameter->collect(variableDeclaration)->collect(variable)->isUnique(name)
@31280#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueTypeNames#TypeDeclaration#self.type->isUnique(name)
@31281#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoInitializerForClockAndChannelVariables#Variable#((not self.typeDefinition.oclIsUndefined()) and(self.typeDefinition.baseType = types::BuiltInType::CHAN or self.typeDefinition.baseType = types::BuiltInType::CLOCK)) implies self.initializer.oclIsUndefined()
@31282#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#derivation#Variable#if self.container.oclIsUndefined()then null else self.container.typeDefinition endif
@31283#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#IntegerBasedIndex#TypeIndex#(not self.typeDefinition.oclIsUndefined())impliesself.typeDefinition.baseType = types::BuiltInType::INT
@31284#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NoVoidVariables#VariableContainer#(not self.typeDefinition.oclIsUndefined())impliesself.typeDefinition.baseType <> types::BuiltInType::VOID
@31285#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueVariableNames#VariableContainer#self.variable->isUnique(name)
@31286#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#SingleVariable#Parameter#(not self.variableDeclaration.oclIsUndefined())impliesself.variableDeclaration.variable->size() <= 1
@31287#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#AtMostOneDefaultItem#ChannelPriority#self.item->select(oclIsKindOf(DefaultChannelPriority))->size() <= 1
@31288#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#EachChannelContainedAtMostOnce#ChannelPriority#self.item->select(oclIsKindOf(ChannelList)).oclAsType(ChannelList)->collect(channelExpression)->isUnique(variable)
@31289#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#ChannelVariablesOnly#ChannelList#self.channelExpression->forAll((not identifier.typeDefinition.oclIsUndefined()) implies identifier.typeDefinition.baseType = types::BuiltInType::CHAN)
@31290#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NumberOfArgumentsMatchesDeclaration#TemplateDeclaration#(not self.declaredTemplate.oclIsUndefined() and not self.declaredTemplate.referredTemplate.oclIsUndefined())impliesself.argument->size() = self.declaredTemplate.referredTemplate.parameter->size()
@31291#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#EachTemplateReferencedAtMostOnce#System#self.instantiationList->collect(template)->isUnique(t : templates::AbstractTemplate | t)
@31292#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#OnlyLegalParamsForPartialInstantiation#InstantiationList#self.template->forAll(parameter->forAll(callType = declarations::CallType::CALL_BY_VALUEand((not variableDeclaration.oclIsUndefined())implies (variableDeclaration.typeDefinition.typeSpecification.oclIsKindOf(types::RangeTypeSpecification) or  variableDeclaration.typeDefinition.typeSpecification.oclIsKindOf(types::ScalarTypeSpecification)))))
@31293#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueParameterNames#AbstractTemplate#self.parameter->collect(variableDeclaration)->collect(variable)->isUnique(name)
@31294#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueLocationNames#Template#self.location->isUnique(name)
@31295#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueParentTemplate#Edge#(not (self.source.oclIsUndefined() or self.target.oclIsUndefined()))impliesself.source.parentTemplate = self.target.parentTemplate
@31296#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#ChannelVariablesOnly#Synchronization#(not self.channelExpression.oclIsUndefined())and(not self.channelExpression.identifier.oclIsUndefined())and(self.channelExpression.identifier.oclIsKindOf(declarations::Variable))and(not self.channelExpression.identifier.oclAsType(declarations::Variable).typeDefinition.oclIsUndefined())impliesself.channelExpression.identifier.oclAsType(declarations::Variable).typeDefinition.baseType = types::BuiltInType::CHAN
@31297#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#SingleVariable#Selection#self.variable->size() <= 1
@31298#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#IntegerBasedType#Selection#(not self.typeDefinition.oclIsUndefined())impliesself.typeDefinition.baseType = types::BuiltInType::INT
@31299#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#DataVariableDeclarationsOnly#Block#(not self.declarations.oclIsUndefined())implies(self.declarations.declaration->forAll(oclIsKindOf(declarations::DataVariableDeclaration)))
@31300#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#SingleVariable#Iteration#self.variable->size() <= 1
@31301#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#NumberOfArgumentsMatchesDeclaration#FunctionCallExpression#(not self.function.oclIsUndefined())impliesself.argument->size() = self.function.parameter->size()
@31302#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#SingleVariable#QuantificationExpression#self.variable->size() <= 1
@31303#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingIntDetails#NTA#(not self.int.oclIsUndefined())implies((self.int.type = types::BuiltInType::INT) and (self.int.name.equalsIgnoreCase('int')))
@31304#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingBoolDetails#NTA#(not self.bool.oclIsUndefined())implies((self.bool.type = types::BuiltInType::BOOL) and (self.bool.name.equalsIgnoreCase('bool')))
@31305#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingClockDetails#NTA#(not self.clock.oclIsUndefined())implies((self.clock.type = types::BuiltInType::CLOCK) and (self.clock.name.equalsIgnoreCase('clock')))
@31306#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingChanDetails#NTA#(not self.chan.oclIsUndefined())implies((self.chan.type = types::BuiltInType::CHAN) and (self.chan.name.equalsIgnoreCase('chan')))
@31307#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#MatchingVoidDetails#NTA#(not self.void.oclIsUndefined())implies((self.void.type = types::BuiltInType::VOID) and (self.void.name.equalsIgnoreCase('void')))
@31308#E:/FinalProject Repos/repos\utwente-fmt\COMET\Metamodels/uppaal_0.5.0.ecore#UniqueTemplateNames#NTA#self.template->isUnique(name)
@31323#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#documentation#ComponentBasedSystem#Ensures, that the corresponding assembly contexts of the assembly connector are either allocated in the same container,or their containers are linked.
@31324#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#SameParentContainerOrLinkedContainerOfconnectedAssemblyContexts#ComponentBasedSystem#  self.assemblyconnector->forAll( a |   let c1 : Container = GetContainerOfContext(a.providedAssemblyContext),  c2: Container = GetContainerOfContext(a.requiredAssemblyContext)  in c1 = c2  or environment.IsLinked(c1,c2))
@31325#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#body#ComponentBasedSystem# if  self.allocation.allocationcontext->any(a | a.assemblycontext = context).container.oclIsInvalid() then  /* if AssemblyContext is nested and therefore not directly allocated */  /* get CompositeComponents */ let composites : Collection(CompositeComponent) = self.allocation.allocationcontext->select(a | a.assemblycontext.component.oclIsTypeOf(CompositeComponent)).assemblycontext.component.oclAsType(CompositeComponent)in let composite : CompositeComponent = composites->any(c | c.assemblycontext->includes(context)) in let parentContext : AssemblyContext = self.assemblycontext->any(a | a.component = composite) in self.allocation.allocationcontext->any(a | a.assemblycontext = parentContext).container else self.allocation.allocationcontext->any(a | a.assemblycontext = context).container  endif
@31326#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#documentation#CompositeComponent#Ensures that there are as many connectors as there are roles in the composite component
@31327#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#SameInterfaceDelegated#CompositeComponent#self.delegationconnector->forAll( d | d.role->includesAll(providedrole) or d.role->includesAll(requiredrole))
@31328#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#RoleCount#CompositeComponent#self.delegationconnector->size() = self.requiredrole->size() + self.providedrole->size()
@31329#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#documentation#DelegationConnector#Constraint ensures that the interface of the roles are the same
@31330#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#DelegationConnectorRolesType#DelegationConnector# self.role->first().oclType() = self.role->last().oclType()
@31331#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#DelegationConnectorRolesInterface#DelegationConnector# self.role->first().interface = self.role->last().interface
@31332#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#body#Environment#link->exists( l | (l.container->first() = c1 and l.container->last() =c2) or    ( l.container->first() = c2 and l.container->last() =c1))
@31333#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#documentation#Allocation#Constraint prohibits allocation of an assemblyContext (specified in AllocationContext),if it is allocated inside a CompositeComponent
@31334#E:/FinalProject Repos/repos\uwecl\MDSD-Praktikum\eclipse\ComponentBasedSystem\model/componentBasedSystem.ecore#NestedComponentAllocation#Allocation# let composites : Collection(CompositeComponent) = self.allocationcontext->select(a | a.assemblycontext.component.oclIsTypeOf(CompositeComponent)).assemblycontext.component.oclAsType(CompositeComponent)in self.allocationcontext.assemblycontext->excludesAll(composites.assemblycontext)
@31337#E:/FinalProject Repos/repos\varusblack\comida-rapida\DiagramClassEditor\ClassDiagramEditor\metamodel/ClassDiagramEditor.ecore#nombreNoValido#ElementoDiagrama#Sequence{1 .. self.nombre.size()}->collect(i | self.nombre.substring(i, i))->excludes(' ')
@31338#E:/FinalProject Repos/repos\varusblack\comida-rapida\DiagramClassEditor\ClassDiagramEditor\metamodel/ClassDiagramEditor.ecore#clasesDistintoNombre#DiagramEditor#self.clases->isUnique(nombre)
@31339#E:/FinalProject Repos/repos\varusblack\comida-rapida\DiagramClassEditor\ClassDiagramEditor\metamodel/ClassDiagramEditor.ecore#relacionesBTSinCorresponder#DiagramEditor#clases->collect(c | c.relacionesBT)->size() = clases->collect(c| c.relacionesBT->collect(rBT | c.atributos->select(a | a.nombre.toLowerCase() = rBT.destino_BT.nombre.toString().toLowerCase())))->size()
@31340#E:/FinalProject Repos/repos\varusblack\comida-rapida\DiagramClassEditor\ClassDiagramEditor\metamodel/ClassDiagramEditor.ecore#atributosDistintoNombre#Clase#self.atributos->isUnique(nombre)
@31341#E:/FinalProject Repos/repos\varusblack\comida-rapida\DiagramClassEditor\ClassDiagramEditor\metamodel/ClassDiagramEditor.ecore#relacionadaBTASiMisma#RelacionBelongTo#self.destino_BT <> self.origen_BT
@31342#E:/FinalProject Repos/repos\varusblack\comida-rapida\DiagramClassEditor\ClassDiagramEditor\metamodel/ClassDiagramEditor.ecore#relacionadaHMTPorSiMisma#RelacionHasManyThrough#self.destino_HMT <> self.origen_HMT
@31343#E:/FinalProject Repos/repos\varusblack\comida-rapida\M2M-TrabajoSMA\metamodelos/ClassDiagramEditor.ecore#nombreNoValido#ElementoDiagrama#Sequence{1 .. self.nombre.size()}->collect(i | self.nombre.substring(i, i))->excludes(' ')
@31344#E:/FinalProject Repos/repos\varusblack\comida-rapida\M2M-TrabajoSMA\metamodelos/ClassDiagramEditor.ecore#clasesDistintoNombre#DiagramEditor#self.clases->isUnique(nombre)
@31345#E:/FinalProject Repos/repos\varusblack\comida-rapida\M2M-TrabajoSMA\metamodelos/ClassDiagramEditor.ecore#relacionesBTSinCorresponder#DiagramEditor#clases->collect(c | c.relacionesBT)->size() = clases->collect(c| c.relacionesBT->collect(rBT | c.atributos->select(a | a.nombre.toLowerCase() = rBT.destino_BT.nombre.toString().toLowerCase() and a.tipo.toString() = 'integer' )))->size()
@31346#E:/FinalProject Repos/repos\varusblack\comida-rapida\M2M-TrabajoSMA\metamodelos/ClassDiagramEditor.ecore#atributosDistintoNombre#Clase#self.atributos->isUnique(nombre)
@31347#E:/FinalProject Repos/repos\varusblack\comida-rapida\M2M-TrabajoSMA\metamodelos/ClassDiagramEditor.ecore#agregadaPorSiMisma#Agregacion#self.destino_a <> self.origen_a
@31348#E:/FinalProject Repos/repos\varusblack\comida-rapida\M2M-TrabajoSMA\metamodelos/ClassDiagramEditor.ecore#compuestaPorSiMisma#Composicion#self.destino_c <> self.origen_c
@31356#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#existedKey#Entity#keySet->forAll(k1:Key, k2:Key | k1.keyAttributes->intersection(k2.keyAttributes)->includesAll(k1.keyAttributes) and k1.keyAttributes->symmetricDifference(k2.keyAttributes)->isEmpty() implies k1=k2)
@31357#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#existedKey$message#Entity#'The key with attribute set already exists'
@31358#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#invalidPrimaryKey#Entity#if(keySet->notEmpty()) thenif(not primaryKey->oclIsUndefined()) thenkeySet->includes(primaryKey)elsenot primaryKey->oclIsUndefined()endifelsekeySet->isEmpty()endif
@31359#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#invalidAttributInKey#Entity#if(not keySet.keyAttributes->isEmpty()) thenif(entityAttributes->notEmpty()) thenentityAttributes->includesAll(keySet.keyAttributes)elseentityAttributes->notEmpty()endifelsekeySet.keyAttributes->isEmpty()endif
@31360#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#existedName#ModellingConcept#ModellingConcept.allInstances()->symmetricDifference(Gerund.allInstances())->forAll(m1:ModellingConcept, m2:ModellingConcept | m1.name = m2.name implies m1=m2)
@31361#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#invalidClassificationAtrtibute#ISA#if supertype.entity.oclIsTypeOf(Entity) thensupertype.entity.oclAsType(Entity).entityAttributes->includes(classificationAttribute) else supertype.entity.oclAsType(Gerund).relationship.relationshipAttributes->includes(classificationAttribute) endif
@31362#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#SubTypeExistsAsSuperType#ISA#if(supertype.entity.oclIsTypeOf(Entity)) then subtypes->excludes(supertype.entity.oclAsType(Entity))elsenot supertype.entity.oclIsTypeOf(Entity)endif
@31363#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#duplicateSybtype#ISA#ISA.allInstances().subtypes->forAll(e1:Entity | ISA.allInstances().subtypes->select(e2 | e1.name=e2.name)->size()<2)
@31364#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#invalidCategory#Categorisation#categorisationEntities.entities->excludes(categorisedEntity) and categorisationEntities.entities->forAll(e1:EntityConcept, e2:EntityConcept | if(e1.oclIsTypeOf(Entity) and  e2.oclIsTypeOf(Entity)) thene1.oclAsType(Entity).name = e2.oclAsType(Entity).name implies e1 = e2else if(e1.oclIsTypeOf(Gerund) and  e2.oclIsTypeOf(Gerund)) thene1.oclAsType(Gerund).relationship.name = e2.oclAsType(Gerund).relationship.name implies e1 = e2 else true endifendif)
@31365#E:/FinalProject Repos/repos\vdimitrieski\mist\mist.core\model/er.ecore#invalidWeakEntity#IdentificationDependency#if(regularEntity.entity.oclIsTypeOf(Entity)) thenregularEntity.entity.oclAsType(Entity) <> weakEntityelsenot regularEntity.entity.oclIsTypeOf(Entity)endif
@31366#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#exactly_one_startnode#Workflow#self.contains_nodes->select(n|n.oclIsTypeOf(StartNode))->size()=1
@31367#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#at_least_one_endnode#Workflow#self.contains_nodes->select(n|n.oclIsTypeOf(EndNode))->size()>0
@31368#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#too_few_arcs#Workflow# (self.contains_arcs->size()) >= (self.contains_nodes->size()-1)
@31369#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#at_least_one_incoming_arc#Activity#self.incoming->size() > 0
@31370#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#at_least_one_outgoing_arc#Activity#self.outgoing->size() > 0
@31371#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#at_least_one_outgoing#StartNode#self.outgoing->size() > 0
@31372#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#no_incoming_arcs#StartNode#self.incoming->size() = 0
@31373#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#at_least_one_incoming#EndNode#self.incoming->size() > 0
@31374#E:/FinalProject Repos/repos\Vectovox\DAT240-2014-Group3\WFE\model/wfe.ecore#no_outgoing_arcs#EndNode#self.outgoing->size() = 0
@31375#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#RN#ERSchema#relships->forAll(r1 : Relship, r2 : Relship | r1.name = r2.name implies r1 = r2)
@31376#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#EN#ERSchema#entities->forAll(e1 : Entity, e2 : Entity | e1.name = e2.name implies e1 = e2)
@31377#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#EAN#Entity#attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
@31378#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#REN#Relship#ends->forAll(a1 : RelshipEnd, a2 : RelshipEnd | a1.name = a2.name implies a1 = a2)
@31379#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#RAN#Relship#attrs->forAll(a1 : ERAttribute, a2 : ERAttribute | a1.name = a2.name implies a1 = a2)
@31380#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#RSK#Relship#not attrs->exists(a1 : ERAttribute | a1.isKey)
@31381#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/ER.ecore#EA_XOR#ERAttribute#self.entity.oclAsSet()->size() + self.relship.oclAsSet()->size() = 1
@31382#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/REL.ecore#REL_RN#RELSchema#relations->forAll(r1 : Relation, r2 : Relation | r1.name = r2.name implies r1 = r2)
@31383#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/REL.ecore#REL_MULT1#RELSchema#self.relations->size() > 0
@31384#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/REL.ecore#REL_AN#Relation#attrs->forAll(a1 : RELAttribute, a2 : RELAttribute | a1.name = a2.name implies a1 = a2)
@31385#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/REL.ecore#REL_K#Relation#attrs->exists(a : RELAttribute | a.isKey = true)
@31386#E:/FinalProject Repos/repos\veriatl\Compiler.Asm2boogie\fr.emn.atlanmod.ASM2Boogie.compiler\bin\metamodels/REL.ecore#REL_MULT2#Relation#self.attrs->size() > 0
@34268#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#maxActions#Button#self.triggers -> size() <= 2
@34269#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#minActions#Button#self.triggers -> size() > 1
@34270#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#nameLayout#Aplication#self.contains -> isUnique(name)
@34271#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#mainActivity#Aplication#self.run -> select(C|C.main = true) -> size() = 1
@34272#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#SDKSize#Aplication#if (not self.minSDK -> oclIsUndefined()) then self.minSDK < self.targetSDK else not self.targetSDK ->oclIsUndefined() endif
@34273#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#nameActivity#Activity#self.runsIn.run -> select(c|c.package = self.package and c.name = self.name) -> size() = 1
@34274#E:/FinalProject Repos/repos\vicdoz\metaAndroid\AndroidGenerator\src/Android.ecore#onlyOneByType#Action#self.buttonOwner.triggers -> select(c|c.type = self.type) -> size() = 1
@34282#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#nameForbidden#Network#self.name <> ''
@34283#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#nameForbidden#Node#        self.name <> ''
@34284#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#noIsolatedNode#Node#            self.predecessors->size() > 0 or self.successors->size() > 0
@34285#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#tokensCountNotNull#Arc#self.tokensCount > 0
@34286#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#existArcs#Transition#self.successors->size() > 0
@34287#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#onlyArcsToPlaces#Transition#self.successors->forAll(s | s.target.oclIsKindOf(Place))
@34288#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#validTokensCount#Place#self.tokensCount >= 0
@34289#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/PetriNet.ecore#onlyArcToTransitions#Place#self.successors->forAll(s | s.target.oclIsKindOf(Transition))
@34290#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/SimplePDL.ecore#nameForbidden#Process#        (name <> 'Process' and name <> '')
@34291#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/SimplePDL.ecore#distinctNamesForWorkDefinitions#Process#            self.processElements            ->select(p | p.oclIsTypeOf(WorkDefinition))            ->collect(p | p.oclAsType(WorkDefinition))            ->forAll(wd1, wd2 | wd1 <> wd2 implies wd1.name <> wd2.name)
@34292#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/SimplePDL.ecore#nameForbidden#WorkDefinition#        self.name <> ''
@34293#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/SimplePDL.ecore#predecessorInSameProcess#WorkSequence#        self.process = self.predecessor.process
@34294#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/SimplePDL.ecore#successorInSameProcess#WorkSequence#        self.process = self.successor.process
@34295#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\BE\src/SimplePDL.ecore#noReflexiveDependancy#WorkSequence#            self.successor <> self.predecessor
@34310#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\Projet\Partie2/scenario.ecore#namesForbidden#Scenario#Sequence{'', 'Scénario'}->forAll(n | self.name <> n)
@34311#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\Projet\Partie2/scenario.ecore#uniqueNameForActivities#Schedule#self.components->select(c | c.oclIsKindOf(Activity))->collect(c | c.oclAsType(Activity))->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@34312#E:/FinalProject Repos/repos\voblivion\ENSEEIHT\2A\GenieLogicielEtSystemes\Projet\Partie2/scenario.ecore#namesForbidden#Activity#Sequence{'', 'Activité', 'Choix', 'Parallèle', 'Alternative'}->forAll(n | self.name <> n)
@34317#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeValidFrequencySum#BehaviorMix#            relativeFrequencies.value->sum() = 1.0
@34318#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueBehaviorModels#BehaviorMix#            relativeFrequencies->forAll(f1,f2|             (f1 <> f2 and not(f1.behaviorModel.oclIsUndefined() or f2.behaviorModel.oclIsUndefined()))                 implies f1.behaviorModel <> f2.behaviorModel)
@34319#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeValidFrequency#RelativeFrequency#            value >= 0.0 and value <= 1.0
@34320#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueNames#BehaviorModel#            BehaviorModel.allInstances()->forAll(b1,b2|                 (b1 <> b2 and not(b1.name.oclIsUndefined() or b2.name.oclIsUndefined()))                     implies b1.name <> b2.name                )
@34321#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueFilenames#BehaviorModel#            BehaviorModel.allInstances()->forAll(b1,b2 |                (b1 <> b2 and not(b1.filename.oclIsUndefined() or b2.filename.oclIsUndefined()))                    implies b1.filename <> b2.filename)
@34322#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeBehaviorModelWithMarkovStatesForAllServices#BehaviorModel#            Service.allInstances()->                forAll(s|markovStates->exists(m|m.service = s))
@34323#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeInitialStateWhichIsIncludedInMarkovStatesList#BehaviorModel#            not initialState.oclIsUndefined() implies markovStates->includes(initialState)
@34324#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeBehaviorModelWithoutForeignTargetStates#BehaviorModel#            markovStates->forAll(s|                 s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (markovStates->includes(t.targetState)                    or t.targetState = exitState)))
@34325#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeValidProbability#Transition#            probability >= 0.0 and probability <= 1.0
@34326#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeThinkTimesOfSameType#Transition#            Transition.allInstances()->                forAll(t1,t2|                    not (t1.thinkTime.oclIsUndefined() or t2.thinkTime.oclIsUndefined()) implies                     t1.thinkTime.oclType() = t2.thinkTime.oclType()                )
@34327#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeValidProbabilitySum#MarkovState#            outgoingTransitions.probability->sum() = 1.0
@34328#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeMarkovStatesWithUniqueServices#MarkovState#            MarkovState.allInstances()->                forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                    implies s1.service <> s2.service                )
@34329#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeOutgoingTransitionsWithUniqueTargetStates#MarkovState#            outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies t1.targetState <> t2.targetState                )
@34330#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeOutgoingTransitionsCorrespondingToSessionLayer#MarkovState#            not service.oclIsUndefined() implies             ApplicationState.allInstances()->exists(as|service = as.service and                outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies as.outgoingTransitions->exists(at|                        (at.targetState.oclIsTypeOf(ApplicationExitState) and                         t.targetState.oclIsTypeOf(BehaviorModelExitState)) or                       ((t.targetState.oclIsTypeOf(MarkovState) and                         at.targetState.oclIsTypeOf(ApplicationState) and                         at.targetState.oclAsType(ApplicationState).service =                         t.targetState.oclAsType(MarkovState).service)))))
@34331#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueNames#Service#    Service.allInstances()->                forAll(s1,s2|                    (s1 <> s2 and not(s1.name.oclIsUndefined() or s2.name.oclIsUndefined()))                     implies s1.name <> s2.name                )
@34332#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueOutgoingTransitions#ApplicationState#            outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
@34333#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniquePropertyKeys#Request#         properties->forAll(p1,p2 |              (p1 <> p2 and not(p1.key.oclIsUndefined() or p2.key.oclIsUndefined()))                implies p1.key <> p2.key         )
@34334#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueParameterNames#Request#        parameters->forAll(p1,p2 |             (p1 <> p2 and not(p1.name.oclIsUndefined() or p2.name.oclIsUndefined()))             implies p1.name <> p2.name        )
@34335#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeRequestsOfSameType#Request#        Request.allInstances()->forAll(r1,r2 | r1.oclType() = r2.oclType())
@34336#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeUniqueOutgoingTransitions#ProtocolState#            outgoingTransitions->                forAll(t1,t2|                    (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                    implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
@34337#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeProtocolStatesWithUniqueRequests#ProtocolLayerEFSM#            protocolStates->forAll(s1,s2|                (s1 <> s2 and not(s1.request.oclIsUndefined() or s2.request.oclIsUndefined()))                 implies s1.request <> s2.request            )
@34338#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeInitialStateWhichIsIncludedInProtocolStatesList#ProtocolLayerEFSM#            not initialState.oclIsUndefined() implies protocolStates->includes(initialState)
@34339#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeProtocolLayerEFSMWithoutForeignStates#ProtocolLayerEFSM#            protocolStates->forAll(s|                s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (protocolStates->includes(t.targetState) or t.targetState = exitState)))
@34340#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeApplicationStatesWithUniqueServices#SessionLayerEFSM#            applicationStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                 implies s1.service <> s2.service            )
@34341#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeInitialStateWhichIsIncludedInApplicationStatesList#SessionLayerEFSM#            not initialState.oclIsUndefined() implies applicationStates->includes(initialState)
@34342#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeNonnegativeSessionNumber#ConstantWorkloadIntensity#           numberOfSessions >= 0
@34343#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\examples/m4jdsl.ecore#mustBeValidThinkTimeValues#NormallyDistributedThinkTime#            mean >= 0.0 and deviation >= 0.0 and deviation <= mean
@34344#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeValidFrequencySum#BehaviorMix#            relativeFrequencies.value->sum() = 1.0
@34345#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueBehaviorModels#BehaviorMix#            relativeFrequencies->forAll(f1,f2|             (f1 <> f2 and not(f1.behaviorModel.oclIsUndefined() or f2.behaviorModel.oclIsUndefined()))                 implies f1.behaviorModel <> f2.behaviorModel)
@34346#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeValidFrequency#RelativeFrequency#            value >= 0.0 and value <= 1.0
@34347#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueNames#BehaviorModel#            BehaviorModel.allInstances()->forAll(b1,b2|                 (b1 <> b2 and not(b1.name.oclIsUndefined() or b2.name.oclIsUndefined()))                     implies b1.name <> b2.name                )
@34348#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueFilenames#BehaviorModel#            BehaviorModel.allInstances()->forAll(b1,b2 |                (b1 <> b2 and not(b1.filename.oclIsUndefined() or b2.filename.oclIsUndefined()))                    implies b1.filename <> b2.filename)
@34349#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeBehaviorModelWithMarkovStatesForAllServices#BehaviorModel#            Service.allInstances()->                forAll(s|markovStates->exists(m|m.service = s))
@34350#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeInitialStateWhichIsIncludedInMarkovStatesList#BehaviorModel#            not initialState.oclIsUndefined() implies markovStates->includes(initialState)
@34351#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeBehaviorModelWithoutForeignTargetStates#BehaviorModel#            markovStates->forAll(s|                 s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (markovStates->includes(t.targetState)                    or t.targetState = exitState)))
@34352#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeMarkovStatesWithUniqueServices#BehaviorModel#            markovStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                    implies s1.service <> s2.service                )
@34353#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeValidProbability#Transition#            probability >= 0.0 and probability <= 1.0
@34354#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeThinkTimesOfSameType#Transition#            Transition.allInstances()->                forAll(t1,t2|                    not (t1.thinkTime.oclIsUndefined() or t2.thinkTime.oclIsUndefined()) implies                     t1.thinkTime.oclType() = t2.thinkTime.oclType()                )
@34355#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeValidProbabilitySum#MarkovState#            outgoingTransitions.probability->exists(p | p > 0) implies            outgoingTransitions.probability->sum() = 1.0
@34356#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeOutgoingTransitionsWithUniqueTargetStates#MarkovState#            outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies t1.targetState <> t2.targetState                )
@34357#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeOutgoingTransitionsCorrespondingToSessionLayer#MarkovState#            not service.oclIsUndefined() implies             ApplicationState.allInstances()->exists(as|service = as.service and                outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies as.outgoingTransitions->exists(at|                        (at.targetState.oclIsTypeOf(ApplicationExitState) and                         t.targetState.oclIsTypeOf(BehaviorModelExitState)) or                       ((t.targetState.oclIsTypeOf(MarkovState) and                         at.targetState.oclIsTypeOf(ApplicationState) and                         at.targetState.oclAsType(ApplicationState).service =                         t.targetState.oclAsType(MarkovState).service)))))
@34358#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueNames#Service#    Service.allInstances()->                forAll(s1,s2|                    (s1 <> s2 and not(s1.name.oclIsUndefined() or s2.name.oclIsUndefined()))                     implies s1.name <> s2.name                )
@34359#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueOutgoingTransitions#ApplicationState#            outgoingTransitions->                forAll(t1,t2|                (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                     implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
@34360#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniquePropertyKeys#Request#         properties->forAll(p1,p2 |              (p1 <> p2 and not(p1.key.oclIsUndefined() or p2.key.oclIsUndefined()))                implies p1.key <> p2.key         )
@34361#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueParameterNames#Request#        parameters->forAll(p1,p2 |             (p1 <> p2 and not(p1.name.oclIsUndefined() or p2.name.oclIsUndefined()))             implies p1.name <> p2.name        )
@34362#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeRequestsOfSameType#Request#        Request.allInstances()->forAll(r1,r2 | r1.oclType() = r2.oclType())
@34363#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeUniqueOutgoingTransitions#ProtocolState#            outgoingTransitions->                forAll(t1,t2|                    (t1 <> t2 and not(t1.targetState.oclIsUndefined() or t2.targetState.oclIsUndefined()))                    implies (t1.targetState <> t2.targetState or t1.guard <> t2.guard))
@34364#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeProtocolStatesWithUniqueRequests#ProtocolLayerEFSM#            protocolStates->forAll(s1,s2|                (s1 <> s2 and not(s1.request.oclIsUndefined() or s2.request.oclIsUndefined()))                 implies s1.request <> s2.request            )
@34365#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeInitialStateWhichIsIncludedInProtocolStatesList#ProtocolLayerEFSM#            not initialState.oclIsUndefined() implies protocolStates->includes(initialState)
@34366#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeProtocolLayerEFSMWithoutForeignStates#ProtocolLayerEFSM#            protocolStates->forAll(s|                s.outgoingTransitions->forAll(t|                    not t.targetState.oclIsUndefined() implies                    (protocolStates->includes(t.targetState) or t.targetState = exitState)))
@34367#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeApplicationStatesWithUniqueServices#SessionLayerEFSM#            applicationStates->forAll(s1,s2|                (s1 <> s2 and not(s1.service.oclIsUndefined() or s2.service.oclIsUndefined()))                 implies s1.service <> s2.service            )
@34368#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeInitialStateWhichIsIncludedInApplicationStatesList#SessionLayerEFSM#            not initialState.oclIsUndefined() implies applicationStates->includes(initialState)
@34369#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeNonnegativeSessionNumber#ConstantWorkloadIntensity#           numberOfSessions >= 0
@34370#E:/FinalProject Repos/repos\Wessbas\wessbas.dsl\model/m4jdsl.ecore#mustBeValidThinkTimeValues#NormallyDistributedThinkTime#            mean >= 0.0 and deviation >= 0.0 and deviation <= mean
@34371#E:/FinalProject Repos/repos\Xilaew\risiko\Risiko\model/risiko.ecore#countryToStateMapIsAccurate#State#self.countryState->forAll(state|state.key=state.value.country)
@34372#E:/FinalProject Repos/repos\Xilaew\risiko\Risiko\model/risiko.ecore#NoGameWithoutPlayers#State#self.players->count()>=2 or state=0
@34373#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#uniqueNamesIfSameDatatype#Function#self.inParameter->forAll(c1, c2 | (c1<>c2 and c1.datatype.name = c2.datatype.name) implies c1.name <> c2.name)
@34374#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#dataTypeContainsInLibrary#Parameter#DataTypeLibrary.allInstances().datatype.name->includes(self.datatype.name)
@34375#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#uniqueDataTypeNames#DataTypeLibrary#self.datatype->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@34376#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#everyTransitionIsTriggered#SelectionDivergence#self.transition -> select(t:Transition|t.trigger.oclIsUndefined()) -> size() = 0
@34377#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#uniqueSystemUnitNames#StatesML#self.systemunits->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)
@34378#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#singleInitialState#StatesML#self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial) -> size()= 1
@34379#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#noFunctionsInInitialState#StatesML#self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).function -> isEmpty()
@34380#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#noFunctionsInTerminalState#StatesML#self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isTerminal).function -> isEmpty()
@34381#E:/FinalProject Repos/repos\zfh920922\ME_Assignment1\Assignment1\model/statesml.ecore#initialStateHasOneEdge#StatesML#node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).edge -> size() = 1
@34436#E:/FinalProject Repos/repos\zouhairireda\xtext-ocl-xtend-poc\org.poc.idm.wdl\model/wdl.ecore#SingletonPage#Website#self.pages->forAll(p1, p2 | p1 <> p2 implies p1.name<>p2.name)
@34437#E:/FinalProject Repos/repos\zouhairireda\xtext-ocl-xtend-poc\org.poc.idm.wdl\model/wdl.ecore#AvoidSelfReference#Page#not self.targets->includes(self)
@34438#E:/FinalProject Repos/repos\zouhairireda\xtext-ocl-xtend-poc\org.poc.idm.wdl\model/wdl.ecore#AvoidDuplicates#Page#self.targets->forAll ( t1 | self.targets -> one ( t2 | t2 = t1))
